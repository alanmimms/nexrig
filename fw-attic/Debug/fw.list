
fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015330  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080155d0  080155d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801572c  0801572c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015734  08015734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015738  08015738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000194  24000000  0801573c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009948  24000194  080158d0  00017194  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24009adc  080158d0  00017adc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017194  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037523  00000000  00000000  000171c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068c6  00000000  00000000  0004e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a40  00000000  00000000  00054fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000020c0  00000000  00000000  000579f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009fee  00000000  00000000  00059ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003578f  00000000  00000000  00063a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00191328  00000000  00000000  0009922d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022a555  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000be10  00000000  00000000  0022a598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  002363a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000194 	.word	0x24000194
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080155b8 	.word	0x080155b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000198 	.word	0x24000198
 80002dc:	080155b8 	.word	0x080155b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Redirect stdout to LPUART1. This is rather brute force...
int __io_putchar(int ch) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint8_t buf = (uint8_t) ch;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&hlpuart1, &buf, 1, HAL_MAX_DELAY);
 80006ba:	f107 010f 	add.w	r1, r7, #15
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c2:	2201      	movs	r2, #1
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <__io_putchar+0x28>)
 80006c6:	f00b fbef 	bl	800bea8 <HAL_UART_Transmit>
  return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	24000434 	.word	0x24000434

080006d8 <__io_getchar>:


int __io_getchar(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  uint8_t buf;
  HAL_StatusTypeDef st = HAL_UART_Receive(&hlpuart1, &buf, 1, HAL_MAX_DELAY);
 80006de:	1db9      	adds	r1, r7, #6
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006e4:	2201      	movs	r2, #1
 80006e6:	4808      	ldr	r0, [pc, #32]	@ (8000708 <__io_getchar+0x30>)
 80006e8:	f00b fc6c 	bl	800bfc4 <HAL_UART_Receive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	71fb      	strb	r3, [r7, #7]
  return st == HAL_OK ? buf : -1;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <__io_getchar+0x22>
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	e001      	b.n	80006fe <__io_getchar+0x26>
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	24000434 	.word	0x24000434

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000712:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <main+0x118>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11b      	bne.n	8000756 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
}
 8000722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000724:	f3bf 8f6f 	isb	sy
}
 8000728:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800072a:	4b3e      	ldr	r3, [pc, #248]	@ (8000824 <main+0x118>)
 800072c:	2200      	movs	r2, #0
 800072e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000732:	f3bf 8f4f 	dsb	sy
}
 8000736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000738:	f3bf 8f6f 	isb	sy
}
 800073c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800073e:	4b39      	ldr	r3, [pc, #228]	@ (8000824 <main+0x118>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a38      	ldr	r2, [pc, #224]	@ (8000824 <main+0x118>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000756:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000758:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <main+0x118>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000760:	2b00      	cmp	r3, #0
 8000762:	d138      	bne.n	80007d6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000764:	4b2f      	ldr	r3, [pc, #188]	@ (8000824 <main+0x118>)
 8000766:	2200      	movs	r2, #0
 8000768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
}
 8000770:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <main+0x118>)
 8000774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000778:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	0b5b      	lsrs	r3, r3, #13
 800077e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000782:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800078c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	015a      	lsls	r2, r3, #5
 8000792:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000796:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800079c:	4921      	ldr	r1, [pc, #132]	@ (8000824 <main+0x118>)
 800079e:	4313      	orrs	r3, r2
 80007a0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1e5a      	subs	r2, r3, #1
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1ef      	bne.n	800078e <main+0x82>
    } while(sets-- != 0U);
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	60ba      	str	r2, [r7, #8]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e5      	bne.n	8000784 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
}
 80007bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <main+0x118>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a18      	ldr	r2, [pc, #96]	@ (8000824 <main+0x118>)
 80007c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ca:	f3bf 8f4f 	dsb	sy
}
 80007ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d0:	f3bf 8f6f 	isb	sy
}
 80007d4:	e000      	b.n	80007d8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007d6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f001 fd56 	bl	8002288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f82a 	bl	8000834 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007e0:	f000 f89c 	bl	800091c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 fbb0 	bl	8000f48 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e8:	f000 fb3e 	bl	8000e68 <MX_DMA_Init>
  MX_ADC1_Init();
 80007ec:	f000 f8c8 	bl	8000980 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007f0:	f000 f942 	bl	8000a78 <MX_ADC2_Init>
  MX_I2C3_Init();
 80007f4:	f000 f9aa 	bl	8000b4c <MX_I2C3_Init>
  MX_SPI1_Init();
 80007f8:	f000 fa34 	bl	8000c64 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007fc:	f000 fa88 	bl	8000d10 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000800:	f000 fadc 	bl	8000dbc <MX_SPI4_Init>
  MX_LPUART1_UART_Init();
 8000804:	f000 f9e2 	bl	8000bcc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000808:	f010 fc0e 	bl	8011028 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800080c:	4a06      	ldr	r2, [pc, #24]	@ (8000828 <main+0x11c>)
 800080e:	2100      	movs	r1, #0
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <main+0x120>)
 8000812:	f010 fc53 	bl	80110bc <osThreadNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <main+0x124>)
 800081a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800081c:	f010 fc28 	bl	8011070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <main+0x114>
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	08015694 	.word	0x08015694
 800082c:	080011a1 	.word	0x080011a1
 8000830:	24000930 	.word	0x24000930

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	@ 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	224c      	movs	r2, #76	@ 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f014 f896 	bl	8014974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f014 f890 	bl	8014974 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000854:	2002      	movs	r0, #2
 8000856:	f006 fea7 	bl	80075a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <SystemClock_Config+0xdc>)
 8000860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000862:	4a2b      	ldr	r2, [pc, #172]	@ (8000910 <SystemClock_Config+0xdc>)
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <SystemClock_Config+0xdc>)
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <SystemClock_Config+0xe0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800087c:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <SystemClock_Config+0xe0>)
 800087e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <SystemClock_Config+0xe0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <SystemClock_Config+0xe0>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <SystemClock_Config+0xe4>)
 80008a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <SystemClock_Config+0xe4>)
 80008a6:	f023 0303 	bic.w	r3, r3, #3
 80008aa:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008ac:	2322      	movs	r3, #34	@ 0x22
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2340      	movs	r3, #64	@ 0x40
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008bc:	2300      	movs	r3, #0
 80008be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c4:	4618      	mov	r0, r3
 80008c6:	f006 feb9 	bl	800763c <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008d0:	f000 fc9e 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	233f      	movs	r3, #63	@ 0x3f
 80008d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2101      	movs	r1, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 faf9 	bl	8007ef0 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000904:	f000 fc84 	bl	8001210 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	@ 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58000400 	.word	0x58000400
 8000914:	58024800 	.word	0x58024800
 8000918:	58024400 	.word	0x58024400

0800091c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0b0      	sub	sp, #192	@ 0xc0
 8000920:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	22c0      	movs	r2, #192	@ 0xc0
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f014 f823 	bl	8014974 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <PeriphCommonClock_Config+0x60>)
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000938:	2320      	movs	r3, #32
 800093a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 800093c:	2364      	movs	r3, #100	@ 0x64
 800093e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800094c:	2340      	movs	r3, #64	@ 0x40
 800094e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800095c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000960:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4618      	mov	r0, r3
 8000966:	f007 fe91 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000970:	f000 fc4e 	bl	8001210 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	37c0      	adds	r7, #192	@ 0xc0
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	80001000 	.word	0x80001000

08000980 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009a6:	4a32      	ldr	r2, [pc, #200]	@ (8000a70 <MX_ADC1_Init+0xf0>)
 80009a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80009aa:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009ac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009c4:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009d0:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_ADC1_Init+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_ADC1_Init+0xec>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a08:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <MX_ADC1_Init+0xec>)
 8000a0a:	f001 fe87 	bl	800271c <HAL_ADC_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a14:	f000 fbfc 	bl	8001210 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <MX_ADC1_Init+0xec>)
 8000a24:	f002 fc3e 	bl	80032a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a2e:	f000 fbef 	bl	8001210 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_ADC1_Init+0xf4>)
 8000a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a36:	2306      	movs	r3, #6
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a3e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a44:	2304      	movs	r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_ADC1_Init+0xec>)
 8000a56:	f002 f803 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a60:	f000 fbd6 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	@ 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	240001b0 	.word	0x240001b0
 8000a70:	40022000 	.word	0x40022000
 8000a74:	08600004 	.word	0x08600004

08000a78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a90:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000a92:	4a2c      	ldr	r2, [pc, #176]	@ (8000b44 <MX_ADC2_Init+0xcc>)
 8000a94:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000a98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a9e:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aaa:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000abc:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000af4:	4812      	ldr	r0, [pc, #72]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000af6:	f001 fe11 	bl	800271c <HAL_ADC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f000 fb86 	bl	8001210 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_ADC2_Init+0xd0>)
 8000b06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b10:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b14:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b16:	2304      	movs	r3, #4
 8000b18:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <MX_ADC2_Init+0xc8>)
 8000b28:	f001 ff9a 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8000b32:	f000 fb6d 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	24000214 	.word	0x24000214
 8000b44:	40022100 	.word	0x40022100
 8000b48:	08600004 	.word	0x08600004

08000b4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <MX_I2C3_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <MX_I2C3_Init+0x7c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b86:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b88:	f005 f93a 	bl	8005e00 <HAL_I2C_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b92:	f000 fb3d 	bl	8001210 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000b9a:	f005 f9cd 	bl	8005f38 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f000 fb34 	bl	8001210 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_I2C3_Init+0x74>)
 8000bac:	f005 fa0f 	bl	8005fce <HAL_I2CEx_ConfigDigitalFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 fb2b 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	240002f0 	.word	0x240002f0
 8000bc4:	40005c00 	.word	0x40005c00
 8000bc8:	10707dbc 	.word	0x10707dbc

08000bcc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_LPUART1_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000c16:	f00b f8f7 	bl	800be08 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 faf6 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000c28:	f00c fea6 	bl	800d978 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 faed 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000c3a:	f00c fedb 	bl	800d9f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 fae4 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_LPUART1_UART_Init+0x90>)
 8000c4a:	f00c fe5c 	bl	800d906 <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 fadc 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24000434 	.word	0x24000434
 8000c60:	58000c00 	.word	0x58000c00

08000c64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c68:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c6a:	4a28      	ldr	r2, [pc, #160]	@ (8000d0c <MX_SPI1_Init+0xa8>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c90:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000c98:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <MX_SPI1_Init+0xa4>)
 8000cf6:	f00a f9c7 	bl	800b088 <HAL_SPI_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000d00:	f000 fa86 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	240004c8 	.word	0x240004c8
 8000d0c:	40013000 	.word	0x40013000

08000d10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d16:	4a28      	ldr	r2, [pc, #160]	@ (8000db8 <MX_SPI3_Init+0xa8>)
 8000d18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d1c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d22:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d3c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d40:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d44:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <MX_SPI3_Init+0xa4>)
 8000da2:	f00a f971 	bl	800b088 <HAL_SPI_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000dac:	f000 fa30 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	24000550 	.word	0x24000550
 8000db8:	40003c00 	.word	0x40003c00

08000dbc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000dc2:	4a28      	ldr	r2, [pc, #160]	@ (8000e64 <MX_SPI4_Init+0xa8>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000dc8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dcc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dda:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000de8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000dec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000df4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_SPI4_Init+0xa4>)
 8000e4e:	f00a f91b 	bl	800b088 <HAL_SPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000e58:	f000 f9da 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	240005d8 	.word	0x240005d8
 8000e64:	40013400 	.word	0x40013400

08000e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <MX_DMA_Init+0xdc>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e74:	4a33      	ldr	r2, [pc, #204]	@ (8000f44 <MX_DMA_Init+0xdc>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e7e:	4b31      	ldr	r3, [pc, #196]	@ (8000f44 <MX_DMA_Init+0xdc>)
 8000e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <MX_DMA_Init+0xdc>)
 8000e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e92:	4a2c      	ldr	r2, [pc, #176]	@ (8000f44 <MX_DMA_Init+0xdc>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e9c:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <MX_DMA_Init+0xdc>)
 8000e9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	200b      	movs	r0, #11
 8000eb0:	f002 fb8e 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb4:	200b      	movs	r0, #11
 8000eb6:	f002 fba5 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f002 fb86 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f002 fb9d 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	200d      	movs	r0, #13
 8000ed0:	f002 fb7e 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ed4:	200d      	movs	r0, #13
 8000ed6:	f002 fb95 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	200e      	movs	r0, #14
 8000ee0:	f002 fb76 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ee4:	200e      	movs	r0, #14
 8000ee6:	f002 fb8d 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f002 fb6e 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ef4:	200f      	movs	r0, #15
 8000ef6:	f002 fb85 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	2010      	movs	r0, #16
 8000f00:	f002 fb66 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f04:	2010      	movs	r0, #16
 8000f06:	f002 fb7d 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	2011      	movs	r0, #17
 8000f10:	f002 fb5e 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f14:	2011      	movs	r0, #17
 8000f16:	f002 fb75 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	202f      	movs	r0, #47	@ 0x2f
 8000f20:	f002 fb56 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f24:	202f      	movs	r0, #47	@ 0x2f
 8000f26:	f002 fb6d 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2038      	movs	r0, #56	@ 0x38
 8000f30:	f002 fb4e 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f34:	2038      	movs	r0, #56	@ 0x38
 8000f36:	f002 fb65 	bl	8003604 <HAL_NVIC_EnableIRQ>

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	58024400 	.word	0x58024400

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5e:	4b88      	ldr	r3, [pc, #544]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a86      	ldr	r2, [pc, #536]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000f66:	f043 0310 	orr.w	r3, r3, #16
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b84      	ldr	r3, [pc, #528]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	4b80      	ldr	r3, [pc, #512]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a7f      	ldr	r2, [pc, #508]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9a:	4b79      	ldr	r3, [pc, #484]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	4a77      	ldr	r2, [pc, #476]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000faa:	4b75      	ldr	r3, [pc, #468]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb8:	4b71      	ldr	r3, [pc, #452]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	4a70      	ldr	r2, [pc, #448]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc8:	4b6d      	ldr	r3, [pc, #436]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a68      	ldr	r2, [pc, #416]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b66      	ldr	r3, [pc, #408]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b62      	ldr	r3, [pc, #392]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	4a61      	ldr	r2, [pc, #388]	@ (8001180 <MX_GPIO_Init+0x238>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001004:	4b5e      	ldr	r3, [pc, #376]	@ (8001180 <MX_GPIO_Init+0x238>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001012:	4b5b      	ldr	r3, [pc, #364]	@ (8001180 <MX_GPIO_Init+0x238>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a59      	ldr	r2, [pc, #356]	@ (8001180 <MX_GPIO_Init+0x238>)
 800101a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b57      	ldr	r3, [pc, #348]	@ (8001180 <MX_GPIO_Init+0x238>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <MX_GPIO_Init+0x238>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a52      	ldr	r2, [pc, #328]	@ (8001180 <MX_GPIO_Init+0x238>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b4f      	ldr	r3, [pc, #316]	@ (8001180 <MX_GPIO_Init+0x238>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TxEnable_GPIO_Port, TxEnable_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2104      	movs	r1, #4
 8001052:	484c      	ldr	r0, [pc, #304]	@ (8001184 <MX_GPIO_Init+0x23c>)
 8001054:	f004 feba 	bl	8005dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFGainHiLo_GPIO_Port, RFGainHiLo_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2104      	movs	r1, #4
 800105c:	484a      	ldr	r0, [pc, #296]	@ (8001188 <MX_GPIO_Init+0x240>)
 800105e:	f004 feb5 	bl	8005dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TxTuneLDAC__GPIO_Port, TxTuneLDAC__Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2101      	movs	r1, #1
 8001066:	4849      	ldr	r0, [pc, #292]	@ (800118c <MX_GPIO_Init+0x244>)
 8001068:	f004 feb0 	bl	8005dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YellowLED_GPIO_Port, YellowLED_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2102      	movs	r1, #2
 8001070:	4847      	ldr	r0, [pc, #284]	@ (8001190 <MX_GPIO_Init+0x248>)
 8001072:	f004 feab 	bl	8005dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USBFault__Pin */
  GPIO_InitStruct.Pin = USBFault__Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USBFault__GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	483e      	ldr	r0, [pc, #248]	@ (8001184 <MX_GPIO_Init+0x23c>)
 800108a:	f004 fcef 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TxEnable_Pin */
  GPIO_InitStruct.Pin = TxEnable_Pin;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TxEnable_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	4837      	ldr	r0, [pc, #220]	@ (8001184 <MX_GPIO_Init+0x23c>)
 80010a6:	f004 fce1 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80010aa:	230d      	movs	r3, #13
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	2302      	movs	r3, #2
 80010b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80010ba:	230a      	movs	r3, #10
 80010bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4833      	ldr	r0, [pc, #204]	@ (8001194 <MX_GPIO_Init+0x24c>)
 80010c6:	f004 fcd1 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80010ca:	2328      	movs	r3, #40	@ 0x28
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2302      	movs	r3, #2
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80010da:	230a      	movs	r3, #10
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_GPIO_Init+0x250>)
 80010e6:	f004 fcc1 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 PB12
                           PB13 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80010ea:	f643 4322 	movw	r3, #15394	@ 0x3c22
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f8:	2302      	movs	r3, #2
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80010fc:	230a      	movs	r3, #10
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4825      	ldr	r0, [pc, #148]	@ (800119c <MX_GPIO_Init+0x254>)
 8001108:	f004 fcb0 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RxTuneLDAC__Pin TxIQLDAC__Pin */
  GPIO_InitStruct.Pin = RxTuneLDAC__Pin|TxIQLDAC__Pin;
 800110c:	2303      	movs	r3, #3
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	481a      	ldr	r0, [pc, #104]	@ (8001188 <MX_GPIO_Init+0x240>)
 8001120:	f004 fca4 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFGainHiLo_Pin */
  GPIO_InitStruct.Pin = RFGainHiLo_Pin;
 8001124:	2304      	movs	r3, #4
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RFGainHiLo_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4813      	ldr	r0, [pc, #76]	@ (8001188 <MX_GPIO_Init+0x240>)
 800113c:	f004 fc96 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TxTuneLDAC__Pin */
  GPIO_InitStruct.Pin = TxTuneLDAC__Pin;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TxTuneLDAC__GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_GPIO_Init+0x244>)
 8001158:	f004 fc88 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : YellowLED_Pin */
  GPIO_InitStruct.Pin = YellowLED_Pin;
 800115c:	2302      	movs	r3, #2
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(YellowLED_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	@ (8001190 <MX_GPIO_Init+0x248>)
 8001174:	f004 fc7a 	bl	8005a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001178:	bf00      	nop
 800117a:	3738      	adds	r7, #56	@ 0x38
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	58024400 	.word	0x58024400
 8001184:	58021400 	.word	0x58021400
 8001188:	58021800 	.word	0x58021800
 800118c:	58020c00 	.word	0x58020c00
 8001190:	58021000 	.word	0x58021000
 8001194:	58020800 	.word	0x58020800
 8001198:	58020000 	.word	0x58020000
 800119c:	58020400 	.word	0x58020400

080011a0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80011a8:	f012 fcee 	bl	8013b88 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  printf("[USB device has been initialized]\r\n");
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <StartDefaultTask+0x40>)
 80011ae:	f013 fb01 	bl	80147b4 <puts>
  /* Infinite loop */

  static int yellowState = 0;

  for (;;) {
    osDelay(100);
 80011b2:	2064      	movs	r0, #100	@ 0x64
 80011b4:	f010 f814 	bl	80111e0 <osDelay>
    yellowState ^= 1;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <StartDefaultTask+0x44>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f083 0301 	eor.w	r3, r3, #1
 80011c0:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <StartDefaultTask+0x44>)
 80011c2:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(YellowLED_GPIO_Port, YellowLED_Pin, yellowState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <StartDefaultTask+0x44>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	2102      	movs	r1, #2
 80011d6:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <StartDefaultTask+0x48>)
 80011d8:	f004 fdf8 	bl	8005dcc <HAL_GPIO_WritePin>
    osDelay(100);
 80011dc:	bf00      	nop
 80011de:	e7e8      	b.n	80011b2 <StartDefaultTask+0x12>
 80011e0:	080155dc 	.word	0x080155dc
 80011e4:	24000934 	.word	0x24000934
 80011e8:	58021000 	.word	0x58021000

080011ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011fe:	f001 f87f 	bl	8002300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40001400 	.word	0x40001400

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <Error_Handler+0x8>

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_MspInit+0x38>)
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001228:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <HAL_MspInit+0x38>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_MspInit+0x38>)
 8001234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	210f      	movs	r1, #15
 8001244:	f06f 0001 	mvn.w	r0, #1
 8001248:	f002 f9c2 	bl	80035d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	58024400 	.word	0x58024400

08001258 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0be      	sub	sp, #248	@ 0xf8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	22c0      	movs	r2, #192	@ 0xc0
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f013 fb7b 	bl	8014974 <memset>
  if(hadc->Instance==ADC1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a79      	ldr	r2, [pc, #484]	@ (8001468 <HAL_ADC_MspInit+0x210>)
 8001284:	4293      	cmp	r3, r2
 8001286:	f040 809a 	bne.w	80013be <HAL_ADC_MspInit+0x166>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001296:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800129a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f007 f9f2 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 80012ae:	f7ff ffaf 	bl	8001210 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012b2:	4b6e      	ldr	r3, [pc, #440]	@ (800146c <HAL_ADC_MspInit+0x214>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a6c      	ldr	r2, [pc, #432]	@ (800146c <HAL_ADC_MspInit+0x214>)
 80012ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012bc:	4b6b      	ldr	r3, [pc, #428]	@ (800146c <HAL_ADC_MspInit+0x214>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d10e      	bne.n	80012e2 <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 80012c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012ca:	4a69      	ldr	r2, [pc, #420]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012d4:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 80012d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b63      	ldr	r3, [pc, #396]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	4a61      	ldr	r2, [pc, #388]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001300:	4b5b      	ldr	r3, [pc, #364]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001306:	4a5a      	ldr	r2, [pc, #360]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001308:	f043 0320 	orr.w	r3, r3, #32
 800130c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001310:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = RxQ_Pin;
 800131e:	2340      	movs	r3, #64	@ 0x40
 8001320:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001324:	2303      	movs	r3, #3
 8001326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(RxQ_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001334:	4619      	mov	r1, r3
 8001336:	484f      	ldr	r0, [pc, #316]	@ (8001474 <HAL_ADC_MspInit+0x21c>)
 8001338:	f004 fb98 	bl	8005a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxI_Pin;
 800133c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001340:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001344:	2303      	movs	r3, #3
 8001346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(RxI_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001354:	4619      	mov	r1, r3
 8001356:	4848      	ldr	r0, [pc, #288]	@ (8001478 <HAL_ADC_MspInit+0x220>)
 8001358:	f004 fb88 	bl	8005a6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800135c:	4b47      	ldr	r3, [pc, #284]	@ (800147c <HAL_ADC_MspInit+0x224>)
 800135e:	4a48      	ldr	r2, [pc, #288]	@ (8001480 <HAL_ADC_MspInit+0x228>)
 8001360:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <HAL_ADC_MspInit+0x224>)
 8001364:	2209      	movs	r2, #9
 8001366:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001368:	4b44      	ldr	r3, [pc, #272]	@ (800147c <HAL_ADC_MspInit+0x224>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800136e:	4b43      	ldr	r3, [pc, #268]	@ (800147c <HAL_ADC_MspInit+0x224>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001374:	4b41      	ldr	r3, [pc, #260]	@ (800147c <HAL_ADC_MspInit+0x224>)
 8001376:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800137a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137c:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <HAL_ADC_MspInit+0x224>)
 800137e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001382:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001384:	4b3d      	ldr	r3, [pc, #244]	@ (800147c <HAL_ADC_MspInit+0x224>)
 8001386:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800138a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800138c:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <HAL_ADC_MspInit+0x224>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001392:	4b3a      	ldr	r3, [pc, #232]	@ (800147c <HAL_ADC_MspInit+0x224>)
 8001394:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001398:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139a:	4b38      	ldr	r3, [pc, #224]	@ (800147c <HAL_ADC_MspInit+0x224>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013a0:	4836      	ldr	r0, [pc, #216]	@ (800147c <HAL_ADC_MspInit+0x224>)
 80013a2:	f002 f93d 	bl	8003620 <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 80013ac:	f7ff ff30 	bl	8001210 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a32      	ldr	r2, [pc, #200]	@ (800147c <HAL_ADC_MspInit+0x224>)
 80013b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013b6:	4a31      	ldr	r2, [pc, #196]	@ (800147c <HAL_ADC_MspInit+0x224>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013bc:	e04f      	b.n	800145e <HAL_ADC_MspInit+0x206>
  else if(hadc->Instance==ADC2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a30      	ldr	r2, [pc, #192]	@ (8001484 <HAL_ADC_MspInit+0x22c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d14a      	bne.n	800145e <HAL_ADC_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80013d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f007 f953 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_ADC_MspInit+0x198>
      Error_Handler();
 80013ec:	f7ff ff10 	bl	8001210 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <HAL_ADC_MspInit+0x214>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a1d      	ldr	r2, [pc, #116]	@ (800146c <HAL_ADC_MspInit+0x214>)
 80013f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013fa:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <HAL_ADC_MspInit+0x214>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d10e      	bne.n	8001420 <HAL_ADC_MspInit+0x1c8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001408:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001428:	f043 0320 	orr.w	r3, r3, #32
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_ADC_MspInit+0x218>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AntVSWR_Pin;
 800143e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001446:	2303      	movs	r3, #3
 8001448:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(AntVSWR_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <HAL_ADC_MspInit+0x220>)
 800145a:	f004 fb07 	bl	8005a6c <HAL_GPIO_Init>
}
 800145e:	bf00      	nop
 8001460:	37f8      	adds	r7, #248	@ 0xf8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000
 800146c:	24000938 	.word	0x24000938
 8001470:	58024400 	.word	0x58024400
 8001474:	58020000 	.word	0x58020000
 8001478:	58021400 	.word	0x58021400
 800147c:	24000278 	.word	0x24000278
 8001480:	40020410 	.word	0x40020410
 8001484:	40022100 	.word	0x40022100

08001488 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0bc      	sub	sp, #240	@ 0xf0
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	22c0      	movs	r2, #192	@ 0xc0
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f013 fa63 	bl	8014974 <memset>
  if(hi2c->Instance==I2C3)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a67      	ldr	r2, [pc, #412]	@ (8001650 <HAL_I2C_MspInit+0x1c8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f040 80c6 	bne.w	8001646 <HAL_I2C_MspInit+0x1be>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014ba:	f04f 0208 	mov.w	r2, #8
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	4618      	mov	r0, r3
 80014d2:	f007 f8db 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80014dc:	f7ff fe98 	bl	8001210 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b5c      	ldr	r3, [pc, #368]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f0:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b55      	ldr	r3, [pc, #340]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	4a53      	ldr	r2, [pc, #332]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150e:	4b51      	ldr	r3, [pc, #324]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = VFOSDA_Pin;
 800151c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001520:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001536:	2304      	movs	r3, #4
 8001538:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(VFOSDA_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001540:	4619      	mov	r1, r3
 8001542:	4845      	ldr	r0, [pc, #276]	@ (8001658 <HAL_I2C_MspInit+0x1d0>)
 8001544:	f004 fa92 	bl	8005a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VFOSCL_Pin;
 8001548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800154c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001550:	2312      	movs	r3, #18
 8001552:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001562:	2304      	movs	r3, #4
 8001564:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(VFOSCL_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800156c:	4619      	mov	r1, r3
 800156e:	483b      	ldr	r0, [pc, #236]	@ (800165c <HAL_I2C_MspInit+0x1d4>)
 8001570:	f004 fa7c 	bl	8005a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001574:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 8001576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800157a:	4a36      	ldr	r2, [pc, #216]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 800157c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001580:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001584:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <HAL_I2C_MspInit+0x1cc>)
 8001586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800158a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream0;
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 8001594:	4a33      	ldr	r2, [pc, #204]	@ (8001664 <HAL_I2C_MspInit+0x1dc>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001598:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 800159a:	224a      	movs	r2, #74	@ 0x4a
 800159c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159e:	4b30      	ldr	r3, [pc, #192]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015a0:	2240      	movs	r2, #64	@ 0x40
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80015be:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015c4:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ca:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80015d0:	4823      	ldr	r0, [pc, #140]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015d2:	f002 f825 	bl	8003620 <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80015dc:	f7ff fe18 	bl	8001210 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80015e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <HAL_I2C_MspInit+0x1d8>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 80015ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 80015ee:	4a1f      	ldr	r2, [pc, #124]	@ (800166c <HAL_I2C_MspInit+0x1e4>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 80015f4:	2249      	movs	r2, #73	@ 0x49
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 8001606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800160a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001624:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800162a:	480f      	ldr	r0, [pc, #60]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 800162c:	f001 fff8 	bl	8003620 <HAL_DMA_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_MspInit+0x1b2>
    {
      Error_Handler();
 8001636:	f7ff fdeb 	bl	8001210 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001640:	4a09      	ldr	r2, [pc, #36]	@ (8001668 <HAL_I2C_MspInit+0x1e0>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001646:	bf00      	nop
 8001648:	37f0      	adds	r7, #240	@ 0xf0
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40005c00 	.word	0x40005c00
 8001654:	58024400 	.word	0x58024400
 8001658:	58020800 	.word	0x58020800
 800165c:	58020000 	.word	0x58020000
 8001660:	24000344 	.word	0x24000344
 8001664:	40020010 	.word	0x40020010
 8001668:	240003bc 	.word	0x240003bc
 800166c:	40020028 	.word	0x40020028

08001670 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0ba      	sub	sp, #232	@ 0xe8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	22c0      	movs	r2, #192	@ 0xc0
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f013 f96f 	bl	8014974 <memset>
  if(huart->Instance==LPUART1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a35      	ldr	r2, [pc, #212]	@ (8001770 <HAL_UART_MspInit+0x100>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d162      	bne.n	8001766 <HAL_UART_MspInit+0xf6>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016a0:	f04f 0204 	mov.w	r2, #4
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4618      	mov	r0, r3
 80016b8:	f006 ffe8 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016c2:	f7ff fda5 	bl	8001210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_UART_MspInit+0x104>)
 80016c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016cc:	4a29      	ldr	r2, [pc, #164]	@ (8001774 <HAL_UART_MspInit+0x104>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_UART_MspInit+0x104>)
 80016d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_UART_MspInit+0x104>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ea:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <HAL_UART_MspInit+0x104>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <HAL_UART_MspInit+0x104>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = DbgUARTTX_Pin;
 8001702:	2340      	movs	r3, #64	@ 0x40
 8001704:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800171a:	2308      	movs	r3, #8
 800171c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(DbgUARTTX_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001724:	4619      	mov	r1, r3
 8001726:	4814      	ldr	r0, [pc, #80]	@ (8001778 <HAL_UART_MspInit+0x108>)
 8001728:	f004 f9a0 	bl	8005a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DbgUARTRX_Pin;
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8001744:	2308      	movs	r3, #8
 8001746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(DbgUARTRX_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800174e:	4619      	mov	r1, r3
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <HAL_UART_MspInit+0x108>)
 8001752:	f004 f98b 	bl	8005a6c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	208e      	movs	r0, #142	@ 0x8e
 800175c:	f001 ff38 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001760:	208e      	movs	r0, #142	@ 0x8e
 8001762:	f001 ff4f 	bl	8003604 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	37e8      	adds	r7, #232	@ 0xe8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	58000c00 	.word	0x58000c00
 8001774:	58024400 	.word	0x58024400
 8001778:	58020400 	.word	0x58020400

0800177c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0c2      	sub	sp, #264	@ 0x108
 8001780:	af00      	add	r7, sp, #0
 8001782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800178a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017a0:	22c0      	movs	r2, #192	@ 0xc0
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f013 f8e5 	bl	8014974 <memset>
  if(hspi->Instance==SPI1)
 80017aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80017ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a67      	ldr	r2, [pc, #412]	@ (8001954 <HAL_SPI_MspInit+0x1d8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	f040 80db 	bne.w	8001974 <HAL_SPI_MspInit+0x1f8>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017be:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017c4:	4a64      	ldr	r2, [pc, #400]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ce:	4b62      	ldr	r3, [pc, #392]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017fa:	4b57      	ldr	r3, [pc, #348]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001800:	4a55      	ldr	r2, [pc, #340]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180a:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_SPI_MspInit+0x1dc>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = RxMOSI_Pin;
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001830:	2305      	movs	r3, #5
 8001832:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(RxMOSI_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800183a:	4619      	mov	r1, r3
 800183c:	4847      	ldr	r0, [pc, #284]	@ (800195c <HAL_SPI_MspInit+0x1e0>)
 800183e:	f004 f915 	bl	8005a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxMISO_Pin|RxNSS_Pin|RxSCK_Pin;
 8001842:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001846:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185c:	2305      	movs	r3, #5
 800185e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001862:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001866:	4619      	mov	r1, r3
 8001868:	483d      	ldr	r0, [pc, #244]	@ (8001960 <HAL_SPI_MspInit+0x1e4>)
 800186a:	f004 f8ff 	bl	8005a6c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream2;
 800186e:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 8001870:	4a3d      	ldr	r2, [pc, #244]	@ (8001968 <HAL_SPI_MspInit+0x1ec>)
 8001872:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001874:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 8001876:	2226      	movs	r2, #38	@ 0x26
 8001878:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800187a:	4b3a      	ldr	r3, [pc, #232]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 800187c:	2240      	movs	r2, #64	@ 0x40
 800187e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 8001888:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188e:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001894:	4b33      	ldr	r3, [pc, #204]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800189a:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018ac:	482d      	ldr	r0, [pc, #180]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 80018ae:	f001 feb7 	bl	8003620 <HAL_DMA_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 80018b8:	f7ff fcaa 	bl	8001210 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a27      	ldr	r2, [pc, #156]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 80018c8:	679a      	str	r2, [r3, #120]	@ 0x78
 80018ca:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <HAL_SPI_MspInit+0x1e8>)
 80018cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream3;
 80018d8:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 80018da:	4a25      	ldr	r2, [pc, #148]	@ (8001970 <HAL_SPI_MspInit+0x1f4>)
 80018dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80018de:	4b23      	ldr	r3, [pc, #140]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 80018e0:	2225      	movs	r2, #37	@ 0x25
 80018e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ea:	4b20      	ldr	r3, [pc, #128]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f0:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 80018f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001916:	4815      	ldr	r0, [pc, #84]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 8001918:	f001 fe82 	bl	8003620 <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_SPI_MspInit+0x1aa>
    {
      Error_Handler();
 8001922:	f7ff fc75 	bl	8001210 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800192a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0e      	ldr	r2, [pc, #56]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 8001932:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <HAL_SPI_MspInit+0x1f0>)
 8001936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800193a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2105      	movs	r1, #5
 8001946:	2023      	movs	r0, #35	@ 0x23
 8001948:	f001 fe42 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800194c:	2023      	movs	r0, #35	@ 0x23
 800194e:	f001 fe59 	bl	8003604 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001952:	e1df      	b.n	8001d14 <HAL_SPI_MspInit+0x598>
 8001954:	40013000 	.word	0x40013000
 8001958:	58024400 	.word	0x58024400
 800195c:	58020000 	.word	0x58020000
 8001960:	58021800 	.word	0x58021800
 8001964:	24000660 	.word	0x24000660
 8001968:	40020040 	.word	0x40020040
 800196c:	240006d8 	.word	0x240006d8
 8001970:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI3)
 8001974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001978:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a79      	ldr	r2, [pc, #484]	@ (8001b68 <HAL_SPI_MspInit+0x3ec>)
 8001982:	4293      	cmp	r3, r2
 8001984:	f040 8102 	bne.w	8001b8c <HAL_SPI_MspInit+0x410>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001988:	4b78      	ldr	r3, [pc, #480]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 800198a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800198e:	4a77      	ldr	r2, [pc, #476]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 8001990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001994:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001998:	4b74      	ldr	r3, [pc, #464]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 800199a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800199e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b71      	ldr	r3, [pc, #452]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ac:	4a6f      	ldr	r2, [pc, #444]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b69      	ldr	r3, [pc, #420]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ca:	4a68      	ldr	r2, [pc, #416]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d4:	4b65      	ldr	r3, [pc, #404]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	4b62      	ldr	r3, [pc, #392]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e8:	4a60      	ldr	r2, [pc, #384]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f2:	4b5e      	ldr	r3, [pc, #376]	@ (8001b6c <HAL_SPI_MspInit+0x3f0>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TxMOSI_Pin;
 8001a00:	2304      	movs	r3, #4
 8001a02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(TxMOSI_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a22:	4619      	mov	r1, r3
 8001a24:	4852      	ldr	r0, [pc, #328]	@ (8001b70 <HAL_SPI_MspInit+0x3f4>)
 8001a26:	f004 f821 	bl	8005a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TxNSS_Pin;
 8001a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a44:	2306      	movs	r3, #6
 8001a46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(TxNSS_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4848      	ldr	r0, [pc, #288]	@ (8001b74 <HAL_SPI_MspInit+0x3f8>)
 8001a52:	f004 f80b 	bl	8005a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TxSCK_Pin|TxMISO_Pin;
 8001a56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a70:	2306      	movs	r3, #6
 8001a72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	483e      	ldr	r0, [pc, #248]	@ (8001b78 <HAL_SPI_MspInit+0x3fc>)
 8001a7e:	f003 fff5 	bl	8005a6c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream4;
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001a84:	4a3e      	ldr	r2, [pc, #248]	@ (8001b80 <HAL_SPI_MspInit+0x404>)
 8001a86:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001a88:	4b3c      	ldr	r3, [pc, #240]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001a8a:	223e      	movs	r2, #62	@ 0x3e
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001a90:	2240      	movs	r2, #64	@ 0x40
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9a:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001a9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa2:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa8:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001aae:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aba:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001ac0:	482e      	ldr	r0, [pc, #184]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001ac2:	f001 fdad 	bl	8003620 <HAL_DMA_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_SPI_MspInit+0x354>
      Error_Handler();
 8001acc:	f7ff fba0 	bl	8001210 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001adc:	679a      	str	r2, [r3, #120]	@ 0x78
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <HAL_SPI_MspInit+0x400>)
 8001ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_rx.Instance = DMA1_Stream5;
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001aee:	4a26      	ldr	r2, [pc, #152]	@ (8001b88 <HAL_SPI_MspInit+0x40c>)
 8001af0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001af2:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001af4:	223d      	movs	r2, #61	@ 0x3d
 8001af6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b0a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001b2a:	4816      	ldr	r0, [pc, #88]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b2c:	f001 fd78 	bl	8003620 <HAL_DMA_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_SPI_MspInit+0x3be>
      Error_Handler();
 8001b36:	f7ff fb6b 	bl	8001210 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b46:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b48:	4a0e      	ldr	r2, [pc, #56]	@ (8001b84 <HAL_SPI_MspInit+0x408>)
 8001b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	2033      	movs	r0, #51	@ 0x33
 8001b5c:	f001 fd38 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001b60:	2033      	movs	r0, #51	@ 0x33
 8001b62:	f001 fd4f 	bl	8003604 <HAL_NVIC_EnableIRQ>
}
 8001b66:	e0d5      	b.n	8001d14 <HAL_SPI_MspInit+0x598>
 8001b68:	40003c00 	.word	0x40003c00
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	58020400 	.word	0x58020400
 8001b74:	58020000 	.word	0x58020000
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	24000750 	.word	0x24000750
 8001b80:	40020070 	.word	0x40020070
 8001b84:	240007c8 	.word	0x240007c8
 8001b88:	40020088 	.word	0x40020088
  else if(hspi->Instance==SPI4)
 8001b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a61      	ldr	r2, [pc, #388]	@ (8001d20 <HAL_SPI_MspInit+0x5a4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	f040 80ba 	bne.w	8001d14 <HAL_SPI_MspInit+0x598>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 fd68 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_SPI_MspInit+0x44a>
      Error_Handler();
 8001bc2:	f7ff fb25 	bl	8001210 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001bc6:	4b57      	ldr	r3, [pc, #348]	@ (8001d24 <HAL_SPI_MspInit+0x5a8>)
 8001bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bcc:	4a55      	ldr	r2, [pc, #340]	@ (8001d24 <HAL_SPI_MspInit+0x5a8>)
 8001bce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bd6:	4b53      	ldr	r3, [pc, #332]	@ (8001d24 <HAL_SPI_MspInit+0x5a8>)
 8001bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d24 <HAL_SPI_MspInit+0x5a8>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bea:	4a4e      	ldr	r2, [pc, #312]	@ (8001d24 <HAL_SPI_MspInit+0x5a8>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d24 <HAL_SPI_MspInit+0x5a8>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TxIQSCK_Pin|TxIQNSS_Pin|TxIQMISO_Pin|TxIQMOSI_Pin;
 8001c02:	2374      	movs	r3, #116	@ 0x74
 8001c04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c20:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4840      	ldr	r0, [pc, #256]	@ (8001d28 <HAL_SPI_MspInit+0x5ac>)
 8001c28:	f003 ff20 	bl	8005a6c <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA1_Stream6;
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c2e:	4a40      	ldr	r2, [pc, #256]	@ (8001d30 <HAL_SPI_MspInit+0x5b4>)
 8001c30:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001c32:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c34:	2254      	movs	r2, #84	@ 0x54
 8001c36:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c3a:	2240      	movs	r2, #64	@ 0x40
 8001c3c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c4a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4c:	4b37      	ldr	r3, [pc, #220]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c52:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001c58:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c5e:	4b33      	ldr	r3, [pc, #204]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c64:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001c6c:	482f      	ldr	r0, [pc, #188]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c6e:	f001 fcd7 	bl	8003620 <HAL_DMA_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_SPI_MspInit+0x500>
      Error_Handler();
 8001c78:	f7ff faca 	bl	8001210 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a29      	ldr	r2, [pc, #164]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c88:	679a      	str	r2, [r3, #120]	@ 0x78
 8001c8a:	4a28      	ldr	r2, [pc, #160]	@ (8001d2c <HAL_SPI_MspInit+0x5b0>)
 8001c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA1_Stream7;
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001c9a:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <HAL_SPI_MspInit+0x5bc>)
 8001c9c:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001ca0:	2253      	movs	r2, #83	@ 0x53
 8001ca2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb0:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001ccc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cd0:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001cd8:	4816      	ldr	r0, [pc, #88]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cda:	f001 fca1 	bl	8003620 <HAL_DMA_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_SPI_MspInit+0x56c>
      Error_Handler();
 8001ce4:	f7ff fa94 	bl	8001210 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cf4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <HAL_SPI_MspInit+0x5b8>)
 8001cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2105      	movs	r1, #5
 8001d08:	2054      	movs	r0, #84	@ 0x54
 8001d0a:	f001 fc61 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001d0e:	2054      	movs	r0, #84	@ 0x54
 8001d10:	f001 fc78 	bl	8003604 <HAL_NVIC_EnableIRQ>
}
 8001d14:	bf00      	nop
 8001d16:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40013400 	.word	0x40013400
 8001d24:	58024400 	.word	0x58024400
 8001d28:	58021000 	.word	0x58021000
 8001d2c:	24000840 	.word	0x24000840
 8001d30:	400200a0 	.word	0x400200a0
 8001d34:	240008b8 	.word	0x240008b8
 8001d38:	400200b8 	.word	0x400200b8

08001d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b090      	sub	sp, #64	@ 0x40
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	d827      	bhi.n	8001d9a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	2037      	movs	r0, #55	@ 0x37
 8001d50:	f001 fc3e 	bl	80035d0 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d54:	2037      	movs	r0, #55	@ 0x37
 8001d56:	f001 fc55 	bl	8003604 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001d5a:	4a29      	ldr	r2, [pc, #164]	@ (8001e00 <HAL_InitTick+0xc4>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001d60:	4b28      	ldr	r3, [pc, #160]	@ (8001e04 <HAL_InitTick+0xc8>)
 8001d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d66:	4a27      	ldr	r2, [pc, #156]	@ (8001e04 <HAL_InitTick+0xc8>)
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d70:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <HAL_InitTick+0xc8>)
 8001d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d7e:	f107 0210 	add.w	r2, r7, #16
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 fc3d 	bl	8008608 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d106      	bne.n	8001da6 <HAL_InitTick+0x6a>
 8001d98:	e001      	b.n	8001d9e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e02b      	b.n	8001df6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d9e:	f006 fc07 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 8001da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001da4:	e004      	b.n	8001db0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001da6:	f006 fc03 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 8001daa:	4603      	mov	r3, r0
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001db2:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <HAL_InitTick+0xcc>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	0c9b      	lsrs	r3, r3, #18
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001dc2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001dc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dca:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001dde:	480b      	ldr	r0, [pc, #44]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001de0:	f009 fd4b 	bl	800b87a <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d104      	bne.n	8001df4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001dea:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001dec:	f009 fda6 	bl	800b93c <HAL_TIM_Base_Start_IT>
 8001df0:	4603      	mov	r3, r0
 8001df2:	e000      	b.n	8001df6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3740      	adds	r7, #64	@ 0x40
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24000008 	.word	0x24000008
 8001e04:	58024400 	.word	0x58024400
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	2400093c 	.word	0x2400093c
 8001e10:	40001400 	.word	0x40001400

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <NMI_Handler+0x4>

08001e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <DMA1_Stream0_IRQHandler+0x10>)
 8001e52:	f002 fca5 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	24000344 	.word	0x24000344

08001e60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <DMA1_Stream1_IRQHandler+0x10>)
 8001e66:	f002 fc9b 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	240003bc 	.word	0x240003bc

08001e74 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <DMA1_Stream2_IRQHandler+0x10>)
 8001e7a:	f002 fc91 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	24000660 	.word	0x24000660

08001e88 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <DMA1_Stream3_IRQHandler+0x10>)
 8001e8e:	f002 fc87 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	240006d8 	.word	0x240006d8

08001e9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <DMA1_Stream4_IRQHandler+0x10>)
 8001ea2:	f002 fc7d 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	24000750 	.word	0x24000750

08001eb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <DMA1_Stream5_IRQHandler+0x10>)
 8001eb6:	f002 fc73 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	240007c8 	.word	0x240007c8

08001ec4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <DMA1_Stream6_IRQHandler+0x10>)
 8001eca:	f002 fc69 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	24000840 	.word	0x24000840

08001ed8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <SPI1_IRQHandler+0x10>)
 8001ede:	f009 f9f7 	bl	800b2d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	240004c8 	.word	0x240004c8

08001eec <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <DMA1_Stream7_IRQHandler+0x10>)
 8001ef2:	f002 fc55 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	240008b8 	.word	0x240008b8

08001f00 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <SPI3_IRQHandler+0x10>)
 8001f06:	f009 f9e3 	bl	800b2d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	24000550 	.word	0x24000550

08001f14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <TIM7_IRQHandler+0x10>)
 8001f1a:	f009 fd87 	bl	800ba2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2400093c 	.word	0x2400093c

08001f28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	@ (8001f38 <DMA2_Stream0_IRQHandler+0x10>)
 8001f2e:	f002 fc37 	bl	80047a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	24000278 	.word	0x24000278

08001f3c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <SPI4_IRQHandler+0x10>)
 8001f42:	f009 f9c5 	bl	800b2d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	240005d8 	.word	0x240005d8

08001f50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <OTG_FS_IRQHandler+0x10>)
 8001f56:	f004 f9c7 	bl	80062e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24005858 	.word	0x24005858

08001f64 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <LPUART1_IRQHandler+0x10>)
 8001f6a:	f00a f8f3 	bl	800c154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	24000434 	.word	0x24000434

08001f78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00a      	b.n	8001fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f8a:	f7fe fba5 	bl	80006d8 <__io_getchar>
 8001f8e:	4601      	mov	r1, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	60ba      	str	r2, [r7, #8]
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf0      	blt.n	8001f8a <_read+0x12>
  }

  return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e009      	b.n	8001fd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	60ba      	str	r2, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fb6d 	bl	80006ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf1      	blt.n	8001fc4 <_write+0x12>
  }
  return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_close>:

int _close(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002012:	605a      	str	r2, [r3, #4]
  return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_isatty>:

int _isatty(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	@ (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f012 fd22 	bl	8014acc <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	24080000 	.word	0x24080000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	24000988 	.word	0x24000988
 80020bc:	24009ae0 	.word	0x24009ae0

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020c4:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <SystemInit+0x114>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	4a42      	ldr	r2, [pc, #264]	@ (80021d4 <SystemInit+0x114>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020d4:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <SystemInit+0x118>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d807      	bhi.n	80020f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020e0:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <SystemInit+0x118>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 030f 	bic.w	r3, r3, #15
 80020e8:	4a3b      	ldr	r2, [pc, #236]	@ (80021d8 <SystemInit+0x118>)
 80020ea:	f043 0307 	orr.w	r3, r3, #7
 80020ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020f0:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <SystemInit+0x11c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a39      	ldr	r2, [pc, #228]	@ (80021dc <SystemInit+0x11c>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020fc:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <SystemInit+0x11c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002102:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <SystemInit+0x11c>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4935      	ldr	r1, [pc, #212]	@ (80021dc <SystemInit+0x11c>)
 8002108:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <SystemInit+0x120>)
 800210a:	4013      	ands	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800210e:	4b32      	ldr	r3, [pc, #200]	@ (80021d8 <SystemInit+0x118>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800211a:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <SystemInit+0x118>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 030f 	bic.w	r3, r3, #15
 8002122:	4a2d      	ldr	r2, [pc, #180]	@ (80021d8 <SystemInit+0x118>)
 8002124:	f043 0307 	orr.w	r3, r3, #7
 8002128:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800212a:	4b2c      	ldr	r3, [pc, #176]	@ (80021dc <SystemInit+0x11c>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002130:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <SystemInit+0x11c>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002136:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <SystemInit+0x11c>)
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800213c:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <SystemInit+0x11c>)
 800213e:	4a29      	ldr	r2, [pc, #164]	@ (80021e4 <SystemInit+0x124>)
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <SystemInit+0x11c>)
 8002144:	4a28      	ldr	r2, [pc, #160]	@ (80021e8 <SystemInit+0x128>)
 8002146:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <SystemInit+0x11c>)
 800214a:	4a28      	ldr	r2, [pc, #160]	@ (80021ec <SystemInit+0x12c>)
 800214c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800214e:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <SystemInit+0x11c>)
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <SystemInit+0x11c>)
 8002156:	4a25      	ldr	r2, [pc, #148]	@ (80021ec <SystemInit+0x12c>)
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <SystemInit+0x11c>)
 800215c:	2200      	movs	r2, #0
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002160:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <SystemInit+0x11c>)
 8002162:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <SystemInit+0x12c>)
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002166:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <SystemInit+0x11c>)
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800216c:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <SystemInit+0x11c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1a      	ldr	r2, [pc, #104]	@ (80021dc <SystemInit+0x11c>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002178:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <SystemInit+0x11c>)
 800217a:	2200      	movs	r2, #0
 800217c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800217e:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <SystemInit+0x130>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <SystemInit+0x134>)
 8002184:	4013      	ands	r3, r2
 8002186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800218a:	d202      	bcs.n	8002192 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <SystemInit+0x138>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <SystemInit+0x11c>)
 8002194:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d113      	bne.n	80021c8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <SystemInit+0x11c>)
 80021a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021a6:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <SystemInit+0x11c>)
 80021a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <SystemInit+0x13c>)
 80021b2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80021b6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <SystemInit+0x11c>)
 80021ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021be:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <SystemInit+0x11c>)
 80021c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	52002000 	.word	0x52002000
 80021dc:	58024400 	.word	0x58024400
 80021e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80021e4:	02020200 	.word	0x02020200
 80021e8:	01ff0000 	.word	0x01ff0000
 80021ec:	01010280 	.word	0x01010280
 80021f0:	5c001000 	.word	0x5c001000
 80021f4:	ffff0000 	.word	0xffff0000
 80021f8:	51008108 	.word	0x51008108
 80021fc:	52004000 	.word	0x52004000

08002200 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <ExitRun0Mode+0x2c>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a08      	ldr	r2, [pc, #32]	@ (800222c <ExitRun0Mode+0x2c>)
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002210:	bf00      	nop
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <ExitRun0Mode+0x2c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f9      	beq.n	8002212 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	58024800 	.word	0x58024800

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800226c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002234:	f7ff ffe4 	bl	8002200 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002238:	f7ff ff42 	bl	80020c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002254:	4c0a      	ldr	r4, [pc, #40]	@ (8002280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002262:	f012 fc39 	bl	8014ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7fe fa51 	bl	800070c <main>
  bx  lr
 800226a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002270:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002274:	24000194 	.word	0x24000194
  ldr r2, =_sidata
 8002278:	0801573c 	.word	0x0801573c
  ldr r2, =_sbss
 800227c:	24000194 	.word	0x24000194
  ldr r4, =_ebss
 8002280:	24009adc 	.word	0x24009adc

08002284 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC3_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228e:	2003      	movs	r0, #3
 8002290:	f001 f993 	bl	80035ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002294:	f005 ffe2 	bl	800825c <HAL_RCC_GetSysClockFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_Init+0x68>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	4913      	ldr	r1, [pc, #76]	@ (80022f4 <HAL_Init+0x6c>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022b2:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <HAL_Init+0x68>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	4a0e      	ldr	r2, [pc, #56]	@ (80022f4 <HAL_Init+0x6c>)
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <HAL_Init+0x70>)
 80022ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022cc:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <HAL_Init+0x74>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d2:	200f      	movs	r0, #15
 80022d4:	f7ff fd32 	bl	8001d3c <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e002      	b.n	80022e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022e2:	f7fe ff9b 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	58024400 	.word	0x58024400
 80022f4:	080156b8 	.word	0x080156b8
 80022f8:	24000004 	.word	0x24000004
 80022fc:	24000000 	.word	0x24000000

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	2400000c 	.word	0x2400000c
 8002324:	2400098c 	.word	0x2400098c

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	2400098c 	.word	0x2400098c

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2400000c 	.word	0x2400000c

08002388 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_GetREVID+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0c1b      	lsrs	r3, r3, #16
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	5c001000 	.word	0x5c001000

080023a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <LL_ADC_SetChannelPreselection+0x24>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	e015      	b.n	8002458 <LL_ADC_SetChannelPreselection+0x50>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2201      	movs	r2, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	69d2      	ldr	r2, [r2, #28]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800246e:	b480      	push	{r7}
 8002470:	b087      	sub	sp, #28
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3360      	adds	r3, #96	@ 0x60
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	430b      	orrs	r3, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	611a      	str	r2, [r3, #16]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3360      	adds	r3, #96	@ 0x60
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	431a      	orrs	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	601a      	str	r2, [r3, #0]
  }
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002516:	b480      	push	{r7}
 8002518:	b087      	sub	sp, #28
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3330      	adds	r3, #48	@ 0x30
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	211f      	movs	r1, #31
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	f003 011f 	and.w	r1, r3, #31
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3314      	adds	r3, #20
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	0e5b      	lsrs	r3, r3, #25
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	4413      	add	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	0d1b      	lsrs	r3, r3, #20
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2107      	movs	r1, #7
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	0d1b      	lsrs	r3, r3, #20
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	431a      	orrs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0318 	and.w	r3, r3, #24
 80025e6:	4908      	ldr	r1, [pc, #32]	@ (8002608 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025e8:	40d9      	lsrs	r1, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	400b      	ands	r3, r1
 80025ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f2:	431a      	orrs	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	000fffff 	.word	0x000fffff

0800260c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <LL_ADC_DisableDeepPowerDown+0x20>)
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6093      	str	r3, [r2, #8]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	5fffffc0 	.word	0x5fffffc0

08002630 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002644:	d101      	bne.n	800264a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <LL_ADC_EnableInternalRegulator+0x24>)
 8002666:	4013      	ands	r3, r2
 8002668:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	6fffffc0 	.word	0x6fffffc0

08002680 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002694:	d101      	bne.n	800269a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <LL_ADC_IsEnabled+0x18>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <LL_ADC_IsEnabled+0x1a>
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b08      	cmp	r3, #8
 8002706:	d101      	bne.n	800270c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e18f      	b.n	8002a56 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7fe fd87 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff67 	bl	8002630 <LL_ADC_IsDeepPowerDownEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff4d 	bl	800260c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff82 	bl	8002680 <LL_ADC_IsInternalRegulatorEnabled>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d114      	bne.n	80027ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff66 	bl	8002658 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278c:	4b87      	ldr	r3, [pc, #540]	@ (80029ac <HAL_ADC_Init+0x290>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	4a87      	ldr	r2, [pc, #540]	@ (80029b0 <HAL_ADC_Init+0x294>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	3301      	adds	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800279e:	e002      	b.n	80027a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f9      	bne.n	80027a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff65 	bl	8002680 <LL_ADC_IsInternalRegulatorEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f043 0210 	orr.w	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff76 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 80027e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 8129 	bne.w	8002a44 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 8125 	bne.w	8002a44 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002802:	f043 0202 	orr.w	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff4a 	bl	80026a8 <LL_ADC_IsEnabled>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d136      	bne.n	8002888 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a65      	ldr	r2, [pc, #404]	@ (80029b4 <HAL_ADC_Init+0x298>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_ADC_Init+0x112>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a63      	ldr	r2, [pc, #396]	@ (80029b8 <HAL_ADC_Init+0x29c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10e      	bne.n	800284c <HAL_ADC_Init+0x130>
 800282e:	4861      	ldr	r0, [pc, #388]	@ (80029b4 <HAL_ADC_Init+0x298>)
 8002830:	f7ff ff3a 	bl	80026a8 <LL_ADC_IsEnabled>
 8002834:	4604      	mov	r4, r0
 8002836:	4860      	ldr	r0, [pc, #384]	@ (80029b8 <HAL_ADC_Init+0x29c>)
 8002838:	f7ff ff36 	bl	80026a8 <LL_ADC_IsEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	4323      	orrs	r3, r4
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e008      	b.n	800285e <HAL_ADC_Init+0x142>
 800284c:	485b      	ldr	r0, [pc, #364]	@ (80029bc <HAL_ADC_Init+0x2a0>)
 800284e:	f7ff ff2b 	bl	80026a8 <LL_ADC_IsEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a53      	ldr	r2, [pc, #332]	@ (80029b4 <HAL_ADC_Init+0x298>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_ADC_Init+0x15a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a51      	ldr	r2, [pc, #324]	@ (80029b8 <HAL_ADC_Init+0x29c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_ADC_Init+0x15e>
 8002876:	4a52      	ldr	r2, [pc, #328]	@ (80029c0 <HAL_ADC_Init+0x2a4>)
 8002878:	e000      	b.n	800287c <HAL_ADC_Init+0x160>
 800287a:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <HAL_ADC_Init+0x2a8>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f7ff fd8c 	bl	80023a0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002888:	f7ff fd7e 	bl	8002388 <HAL_GetREVID>
 800288c:	4603      	mov	r3, r0
 800288e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002892:	4293      	cmp	r3, r2
 8002894:	d914      	bls.n	80028c0 <HAL_ADC_Init+0x1a4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b10      	cmp	r3, #16
 800289c:	d110      	bne.n	80028c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7d5b      	ldrb	r3, [r3, #21]
 80028a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7f1b      	ldrb	r3, [r3, #28]
 80028b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028b8:	f043 030c 	orr.w	r3, r3, #12
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	e00d      	b.n	80028dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7d5b      	ldrb	r3, [r3, #21]
 80028c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7f1b      	ldrb	r3, [r3, #28]
 80028d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7f1b      	ldrb	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	045b      	lsls	r3, r3, #17
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002906:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <HAL_ADC_Init+0x2ac>)
 8002916:	4013      	ands	r3, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	430b      	orrs	r3, r1
 8002920:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fed1 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 800292c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fede 	bl	80026f4 <LL_ADC_INJ_IsConversionOngoing>
 8002938:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d15f      	bne.n	8002a00 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d15c      	bne.n	8002a00 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7d1b      	ldrb	r3, [r3, #20]
 800294a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <HAL_ADC_Init+0x2b0>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	430b      	orrs	r3, r1
 8002966:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800296e:	2b01      	cmp	r3, #1
 8002970:	d130      	bne.n	80029d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <HAL_ADC_Init+0x2b4>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002986:	3a01      	subs	r2, #1
 8002988:	0411      	lsls	r1, r2, #16
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800298e:	4311      	orrs	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002994:	4311      	orrs	r1, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800299a:	430a      	orrs	r2, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	611a      	str	r2, [r3, #16]
 80029a8:	e01c      	b.n	80029e4 <HAL_ADC_Init+0x2c8>
 80029aa:	bf00      	nop
 80029ac:	24000000 	.word	0x24000000
 80029b0:	053e2d63 	.word	0x053e2d63
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40022100 	.word	0x40022100
 80029bc:	58026000 	.word	0x58026000
 80029c0:	40022300 	.word	0x40022300
 80029c4:	58026300 	.word	0x58026300
 80029c8:	fff0c003 	.word	0xfff0c003
 80029cc:	ffffbffc 	.word	0xffffbffc
 80029d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fb20 	bl	8003040 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10c      	bne.n	8002a22 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f023 010f 	bic.w	r1, r3, #15
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a20:	e007      	b.n	8002a32 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 020f 	bic.w	r2, r2, #15
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a42:	e007      	b.n	8002a54 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	f043 0210 	orr.w	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	@ 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	bf00      	nop

08002a60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b08d      	sub	sp, #52	@ 0x34
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a65      	ldr	r2, [pc, #404]	@ (8002c10 <HAL_ADC_ConfigChannel+0x1b0>)
 8002a7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x2a>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e2c7      	b.n	800301a <HAL_ADC_ConfigChannel+0x5ba>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe19 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 82ac 	bne.w	8002ffc <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db2c      	blt.n	8002b06 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d108      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x6a>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	e016      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x98>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	613b      	str	r3, [r7, #16]
  return result;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2201      	movs	r2, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	69d1      	ldr	r1, [r2, #28]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	430b      	orrs	r3, r1
 8002b04:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f7ff fcff 	bl	8002516 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fdd6 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 8002b22:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fde3 	bl	80026f4 <LL_ADC_INJ_IsConversionOngoing>
 8002b2e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80b8 	bne.w	8002ca8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 80b4 	bne.w	8002ca8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f7ff fd0e 	bl	800256e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b52:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <HAL_ADC_ConfigChannel+0x1b4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b5e:	d10b      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x118>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	e01d      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x154>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x13e>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	e00a      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x154>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d02c      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f7ff fc4f 	bl	800246e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6919      	ldr	r1, [r3, #16]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	7e5b      	ldrb	r3, [r3, #25]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x186>
 8002be0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002be4:	e000      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x188>
 8002be6:	2300      	movs	r3, #0
 8002be8:	461a      	mov	r2, r3
 8002bea:	f7ff fc79 	bl	80024e0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6919      	ldr	r1, [r3, #16]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	7e1b      	ldrb	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x1a4>
 8002bfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c02:	e000      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1a6>
 8002c04:	2300      	movs	r3, #0
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7ff fc51 	bl	80024ae <LL_ADC_SetDataRightShift>
 8002c0c:	e04c      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x248>
 8002c0e:	bf00      	nop
 8002c10:	47ff0000 	.word	0x47ff0000
 8002c14:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	069b      	lsls	r3, r3, #26
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d107      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c3a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c5e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	069b      	lsls	r3, r3, #26
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d107      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c82:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	069b      	lsls	r3, r3, #26
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d107      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fcfb 	bl	80026a8 <LL_ADC_IsEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 81aa 	bne.w	800300e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f7ff fc7c 	bl	80025c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a87      	ldr	r2, [pc, #540]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x490>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f040 809a 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4984      	ldr	r1, [pc, #528]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x494>)
 8002ce2:	428b      	cmp	r3, r1
 8002ce4:	d147      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x316>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4983      	ldr	r1, [pc, #524]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x498>)
 8002cec:	428b      	cmp	r3, r1
 8002cee:	d040      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x312>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4981      	ldr	r1, [pc, #516]	@ (8002efc <HAL_ADC_ConfigChannel+0x49c>)
 8002cf6:	428b      	cmp	r3, r1
 8002cf8:	d039      	beq.n	8002d6e <HAL_ADC_ConfigChannel+0x30e>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4980      	ldr	r1, [pc, #512]	@ (8002f00 <HAL_ADC_ConfigChannel+0x4a0>)
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d032      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0x30a>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	497e      	ldr	r1, [pc, #504]	@ (8002f04 <HAL_ADC_ConfigChannel+0x4a4>)
 8002d0a:	428b      	cmp	r3, r1
 8002d0c:	d02b      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x306>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	497d      	ldr	r1, [pc, #500]	@ (8002f08 <HAL_ADC_ConfigChannel+0x4a8>)
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d024      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x302>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	497b      	ldr	r1, [pc, #492]	@ (8002f0c <HAL_ADC_ConfigChannel+0x4ac>)
 8002d1e:	428b      	cmp	r3, r1
 8002d20:	d01d      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x2fe>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	497a      	ldr	r1, [pc, #488]	@ (8002f10 <HAL_ADC_ConfigChannel+0x4b0>)
 8002d28:	428b      	cmp	r3, r1
 8002d2a:	d016      	beq.n	8002d5a <HAL_ADC_ConfigChannel+0x2fa>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4978      	ldr	r1, [pc, #480]	@ (8002f14 <HAL_ADC_ConfigChannel+0x4b4>)
 8002d32:	428b      	cmp	r3, r1
 8002d34:	d00f      	beq.n	8002d56 <HAL_ADC_ConfigChannel+0x2f6>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4977      	ldr	r1, [pc, #476]	@ (8002f18 <HAL_ADC_ConfigChannel+0x4b8>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d008      	beq.n	8002d52 <HAL_ADC_ConfigChannel+0x2f2>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4975      	ldr	r1, [pc, #468]	@ (8002f1c <HAL_ADC_ConfigChannel+0x4bc>)
 8002d46:	428b      	cmp	r3, r1
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x2ee>
 8002d4a:	4b75      	ldr	r3, [pc, #468]	@ (8002f20 <HAL_ADC_ConfigChannel+0x4c0>)
 8002d4c:	e05a      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e058      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d52:	4b74      	ldr	r3, [pc, #464]	@ (8002f24 <HAL_ADC_ConfigChannel+0x4c4>)
 8002d54:	e056      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d56:	4b74      	ldr	r3, [pc, #464]	@ (8002f28 <HAL_ADC_ConfigChannel+0x4c8>)
 8002d58:	e054      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002f14 <HAL_ADC_ConfigChannel+0x4b4>)
 8002d5c:	e052      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <HAL_ADC_ConfigChannel+0x4b0>)
 8002d60:	e050      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d62:	4b72      	ldr	r3, [pc, #456]	@ (8002f2c <HAL_ADC_ConfigChannel+0x4cc>)
 8002d64:	e04e      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d66:	4b72      	ldr	r3, [pc, #456]	@ (8002f30 <HAL_ADC_ConfigChannel+0x4d0>)
 8002d68:	e04c      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d6a:	4b72      	ldr	r3, [pc, #456]	@ (8002f34 <HAL_ADC_ConfigChannel+0x4d4>)
 8002d6c:	e04a      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d6e:	4b72      	ldr	r3, [pc, #456]	@ (8002f38 <HAL_ADC_ConfigChannel+0x4d8>)
 8002d70:	e048      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e046      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4970      	ldr	r1, [pc, #448]	@ (8002f3c <HAL_ADC_ConfigChannel+0x4dc>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d140      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x3a2>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	495c      	ldr	r1, [pc, #368]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x498>)
 8002d86:	428b      	cmp	r3, r1
 8002d88:	d039      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x39e>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	495b      	ldr	r1, [pc, #364]	@ (8002efc <HAL_ADC_ConfigChannel+0x49c>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d032      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x39a>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4959      	ldr	r1, [pc, #356]	@ (8002f00 <HAL_ADC_ConfigChannel+0x4a0>)
 8002d9a:	428b      	cmp	r3, r1
 8002d9c:	d02b      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x396>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4958      	ldr	r1, [pc, #352]	@ (8002f04 <HAL_ADC_ConfigChannel+0x4a4>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d024      	beq.n	8002df2 <HAL_ADC_ConfigChannel+0x392>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4956      	ldr	r1, [pc, #344]	@ (8002f08 <HAL_ADC_ConfigChannel+0x4a8>)
 8002dae:	428b      	cmp	r3, r1
 8002db0:	d01d      	beq.n	8002dee <HAL_ADC_ConfigChannel+0x38e>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4955      	ldr	r1, [pc, #340]	@ (8002f0c <HAL_ADC_ConfigChannel+0x4ac>)
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d016      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x38a>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4953      	ldr	r1, [pc, #332]	@ (8002f10 <HAL_ADC_ConfigChannel+0x4b0>)
 8002dc2:	428b      	cmp	r3, r1
 8002dc4:	d00f      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x386>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4952      	ldr	r1, [pc, #328]	@ (8002f14 <HAL_ADC_ConfigChannel+0x4b4>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d008      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x382>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4951      	ldr	r1, [pc, #324]	@ (8002f1c <HAL_ADC_ConfigChannel+0x4bc>)
 8002dd6:	428b      	cmp	r3, r1
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x37e>
 8002dda:	4b51      	ldr	r3, [pc, #324]	@ (8002f20 <HAL_ADC_ConfigChannel+0x4c0>)
 8002ddc:	e012      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002dde:	2300      	movs	r3, #0
 8002de0:	e010      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002de2:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <HAL_ADC_ConfigChannel+0x4c8>)
 8002de4:	e00e      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002de6:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <HAL_ADC_ConfigChannel+0x4b4>)
 8002de8:	e00c      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002dea:	4b49      	ldr	r3, [pc, #292]	@ (8002f10 <HAL_ADC_ConfigChannel+0x4b0>)
 8002dec:	e00a      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002dee:	4b4f      	ldr	r3, [pc, #316]	@ (8002f2c <HAL_ADC_ConfigChannel+0x4cc>)
 8002df0:	e008      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002df2:	4b4f      	ldr	r3, [pc, #316]	@ (8002f30 <HAL_ADC_ConfigChannel+0x4d0>)
 8002df4:	e006      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002df6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f34 <HAL_ADC_ConfigChannel+0x4d4>)
 8002df8:	e004      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8002f38 <HAL_ADC_ConfigChannel+0x4d8>)
 8002dfc:	e002      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3a4>
 8002e02:	2300      	movs	r3, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7ff fafe 	bl	8002408 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f280 80fc 	bge.w	800300e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a36      	ldr	r2, [pc, #216]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x494>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0x3ca>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a45      	ldr	r2, [pc, #276]	@ (8002f3c <HAL_ADC_ConfigChannel+0x4dc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x3ce>
 8002e2a:	4b45      	ldr	r3, [pc, #276]	@ (8002f40 <HAL_ADC_ConfigChannel+0x4e0>)
 8002e2c:	e000      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x3d0>
 8002e2e:	4b45      	ldr	r3, [pc, #276]	@ (8002f44 <HAL_ADC_ConfigChannel+0x4e4>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fadb 	bl	80023ec <LL_ADC_GetCommonPathInternalCh>
 8002e36:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x494>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_ADC_ConfigChannel+0x3ec>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a3d      	ldr	r2, [pc, #244]	@ (8002f3c <HAL_ADC_ConfigChannel+0x4dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10e      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x40a>
 8002e4c:	4829      	ldr	r0, [pc, #164]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x494>)
 8002e4e:	f7ff fc2b 	bl	80026a8 <LL_ADC_IsEnabled>
 8002e52:	4604      	mov	r4, r0
 8002e54:	4839      	ldr	r0, [pc, #228]	@ (8002f3c <HAL_ADC_ConfigChannel+0x4dc>)
 8002e56:	f7ff fc27 	bl	80026a8 <LL_ADC_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4323      	orrs	r3, r4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e008      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x41c>
 8002e6a:	4837      	ldr	r0, [pc, #220]	@ (8002f48 <HAL_ADC_ConfigChannel+0x4e8>)
 8002e6c:	f7ff fc1c 	bl	80026a8 <LL_ADC_IsEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80b3 	beq.w	8002fe8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a31      	ldr	r2, [pc, #196]	@ (8002f4c <HAL_ADC_ConfigChannel+0x4ec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d165      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x4f8>
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d160      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f48 <HAL_ADC_ConfigChannel+0x4e8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	f040 80b6 	bne.w	800300e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a13      	ldr	r2, [pc, #76]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x494>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x456>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	@ (8002f3c <HAL_ADC_ConfigChannel+0x4dc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x45a>
 8002eb6:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <HAL_ADC_ConfigChannel+0x4e0>)
 8002eb8:	e000      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x45c>
 8002eba:	4a22      	ldr	r2, [pc, #136]	@ (8002f44 <HAL_ADC_ConfigChannel+0x4e4>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7ff fa7e 	bl	80023c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eca:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <HAL_ADC_ConfigChannel+0x4f0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	4a20      	ldr	r2, [pc, #128]	@ (8002f54 <HAL_ADC_ConfigChannel+0x4f4>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	3301      	adds	r3, #1
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002ede:	e002      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eec:	e08f      	b.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
 8002eee:	bf00      	nop
 8002ef0:	47ff0000 	.word	0x47ff0000
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	04300002 	.word	0x04300002
 8002efc:	08600004 	.word	0x08600004
 8002f00:	0c900008 	.word	0x0c900008
 8002f04:	10c00010 	.word	0x10c00010
 8002f08:	14f00020 	.word	0x14f00020
 8002f0c:	2a000400 	.word	0x2a000400
 8002f10:	2e300800 	.word	0x2e300800
 8002f14:	32601000 	.word	0x32601000
 8002f18:	43210000 	.word	0x43210000
 8002f1c:	4b840000 	.word	0x4b840000
 8002f20:	4fb80000 	.word	0x4fb80000
 8002f24:	47520000 	.word	0x47520000
 8002f28:	36902000 	.word	0x36902000
 8002f2c:	25b00200 	.word	0x25b00200
 8002f30:	21800100 	.word	0x21800100
 8002f34:	1d500080 	.word	0x1d500080
 8002f38:	19200040 	.word	0x19200040
 8002f3c:	40022100 	.word	0x40022100
 8002f40:	40022300 	.word	0x40022300
 8002f44:	58026300 	.word	0x58026300
 8002f48:	58026000 	.word	0x58026000
 8002f4c:	cb840000 	.word	0xcb840000
 8002f50:	24000000 	.word	0x24000000
 8002f54:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a31      	ldr	r2, [pc, #196]	@ (8003024 <HAL_ADC_ConfigChannel+0x5c4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d11e      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x540>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d119      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2d      	ldr	r2, [pc, #180]	@ (8003028 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d14b      	bne.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800302c <HAL_ADC_ConfigChannel+0x5cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_ConfigChannel+0x52a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2a      	ldr	r2, [pc, #168]	@ (8003030 <HAL_ADC_ConfigChannel+0x5d0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x52e>
 8002f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003034 <HAL_ADC_ConfigChannel+0x5d4>)
 8002f8c:	e000      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x530>
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <HAL_ADC_ConfigChannel+0x5d8>)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7ff fa14 	bl	80023c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f9e:	e036      	b.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a25      	ldr	r2, [pc, #148]	@ (800303c <HAL_ADC_ConfigChannel+0x5dc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d131      	bne.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d12c      	bne.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_ADC_ConfigChannel+0x5c8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d127      	bne.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <HAL_ADC_ConfigChannel+0x5cc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_ADC_ConfigChannel+0x572>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_ADC_ConfigChannel+0x5d0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x576>
 8002fd2:	4a18      	ldr	r2, [pc, #96]	@ (8003034 <HAL_ADC_ConfigChannel+0x5d4>)
 8002fd4:	e000      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x578>
 8002fd6:	4a18      	ldr	r2, [pc, #96]	@ (8003038 <HAL_ADC_ConfigChannel+0x5d8>)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f7ff f9f0 	bl	80023c6 <LL_ADC_SetCommonPathInternalCh>
 8002fe6:	e012      	b.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002ffa:	e008      	b.n	800300e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800301a:	4618      	mov	r0, r3
 800301c:	3734      	adds	r7, #52	@ 0x34
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}
 8003022:	bf00      	nop
 8003024:	c7520000 	.word	0xc7520000
 8003028:	58026000 	.word	0x58026000
 800302c:	40022000 	.word	0x40022000
 8003030:	40022100 	.word	0x40022100
 8003034:	40022300 	.word	0x40022300
 8003038:	58026300 	.word	0x58026300
 800303c:	cfb80000 	.word	0xcfb80000

08003040 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a7a      	ldr	r2, [pc, #488]	@ (8003238 <ADC_ConfigureBoostMode+0x1f8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <ADC_ConfigureBoostMode+0x1c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a79      	ldr	r2, [pc, #484]	@ (800323c <ADC_ConfigureBoostMode+0x1fc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <ADC_ConfigureBoostMode+0x30>
 800305c:	4b78      	ldr	r3, [pc, #480]	@ (8003240 <ADC_ConfigureBoostMode+0x200>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e008      	b.n	8003082 <ADC_ConfigureBoostMode+0x42>
 8003070:	4b74      	ldr	r3, [pc, #464]	@ (8003244 <ADC_ConfigureBoostMode+0x204>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01c      	beq.n	80030c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003086:	f005 fa63 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 800308a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003094:	d010      	beq.n	80030b8 <ADC_ConfigureBoostMode+0x78>
 8003096:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800309a:	d873      	bhi.n	8003184 <ADC_ConfigureBoostMode+0x144>
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a0:	d002      	beq.n	80030a8 <ADC_ConfigureBoostMode+0x68>
 80030a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030a6:	d16d      	bne.n	8003184 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	60fb      	str	r3, [r7, #12]
        break;
 80030b6:	e068      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	60fb      	str	r3, [r7, #12]
        break;
 80030be:	e064      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	f006 fcea 	bl	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 80030cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030d6:	d051      	beq.n	800317c <ADC_ConfigureBoostMode+0x13c>
 80030d8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030dc:	d854      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 80030de:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80030e2:	d047      	beq.n	8003174 <ADC_ConfigureBoostMode+0x134>
 80030e4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80030e8:	d84e      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 80030ea:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80030ee:	d03d      	beq.n	800316c <ADC_ConfigureBoostMode+0x12c>
 80030f0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80030f4:	d848      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 80030f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030fa:	d033      	beq.n	8003164 <ADC_ConfigureBoostMode+0x124>
 80030fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003100:	d842      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 8003102:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003106:	d029      	beq.n	800315c <ADC_ConfigureBoostMode+0x11c>
 8003108:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800310c:	d83c      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 800310e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003112:	d01a      	beq.n	800314a <ADC_ConfigureBoostMode+0x10a>
 8003114:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003118:	d836      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 800311a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800311e:	d014      	beq.n	800314a <ADC_ConfigureBoostMode+0x10a>
 8003120:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003124:	d830      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 8003126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800312a:	d00e      	beq.n	800314a <ADC_ConfigureBoostMode+0x10a>
 800312c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003130:	d82a      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 8003132:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003136:	d008      	beq.n	800314a <ADC_ConfigureBoostMode+0x10a>
 8003138:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800313c:	d824      	bhi.n	8003188 <ADC_ConfigureBoostMode+0x148>
 800313e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003142:	d002      	beq.n	800314a <ADC_ConfigureBoostMode+0x10a>
 8003144:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003148:	d11e      	bne.n	8003188 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0c9b      	lsrs	r3, r3, #18
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	60fb      	str	r3, [r7, #12]
        break;
 800315a:	e016      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
        break;
 8003162:	e012      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	60fb      	str	r3, [r7, #12]
        break;
 800316a:	e00e      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	60fb      	str	r3, [r7, #12]
        break;
 8003172:	e00a      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	09db      	lsrs	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
        break;
 800317a:	e006      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	60fb      	str	r3, [r7, #12]
        break;
 8003182:	e002      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003184:	bf00      	nop
 8003186:	e000      	b.n	800318a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003188:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800318a:	f7ff f8fd 	bl	8002388 <HAL_GetREVID>
 800318e:	4603      	mov	r3, r0
 8003190:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003194:	4293      	cmp	r3, r2
 8003196:	d815      	bhi.n	80031c4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a2b      	ldr	r2, [pc, #172]	@ (8003248 <ADC_ConfigureBoostMode+0x208>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d908      	bls.n	80031b2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031b0:	e03e      	b.n	8003230 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c0:	609a      	str	r2, [r3, #8]
}
 80031c2:	e035      	b.n	8003230 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <ADC_ConfigureBoostMode+0x20c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d808      	bhi.n	80031e4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80031e0:	609a      	str	r2, [r3, #8]
}
 80031e2:	e025      	b.n	8003230 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003250 <ADC_ConfigureBoostMode+0x210>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d80a      	bhi.n	8003202 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	e016      	b.n	8003230 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a13      	ldr	r2, [pc, #76]	@ (8003254 <ADC_ConfigureBoostMode+0x214>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d80a      	bhi.n	8003220 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321c:	609a      	str	r2, [r3, #8]
}
 800321e:	e007      	b.n	8003230 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40022000 	.word	0x40022000
 800323c:	40022100 	.word	0x40022100
 8003240:	40022300 	.word	0x40022300
 8003244:	58026300 	.word	0x58026300
 8003248:	01312d00 	.word	0x01312d00
 800324c:	005f5e10 	.word	0x005f5e10
 8003250:	00bebc20 	.word	0x00bebc20
 8003254:	017d7840 	.word	0x017d7840

08003258 <LL_ADC_IsEnabled>:
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <LL_ADC_IsEnabled+0x18>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <LL_ADC_IsEnabled+0x1a>
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_ADC_REG_IsConversionOngoing>:
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d101      	bne.n	8003296 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b09f      	sub	sp, #124	@ 0x7c
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0be      	b.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d102      	bne.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032dc:	4b5b      	ldr	r3, [pc, #364]	@ (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	e001      	b.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e09d      	b.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ffb9 	bl	800327e <LL_ADC_REG_IsConversionOngoing>
 800330c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ffb3 	bl	800327e <LL_ADC_REG_IsConversionOngoing>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d17f      	bne.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800331e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003320:	2b00      	cmp	r3, #0
 8003322:	d17c      	bne.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a47      	ldr	r2, [pc, #284]	@ (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d004      	beq.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a46      	ldr	r2, [pc, #280]	@ (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003338:	4b45      	ldr	r3, [pc, #276]	@ (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800333a:	e000      	b.n	800333e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800333c:	4b45      	ldr	r3, [pc, #276]	@ (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800333e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d039      	beq.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	431a      	orrs	r2, r3
 8003356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003358:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a3a      	ldr	r2, [pc, #232]	@ (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a38      	ldr	r2, [pc, #224]	@ (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10e      	bne.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800336e:	4836      	ldr	r0, [pc, #216]	@ (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003370:	f7ff ff72 	bl	8003258 <LL_ADC_IsEnabled>
 8003374:	4604      	mov	r4, r0
 8003376:	4835      	ldr	r0, [pc, #212]	@ (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003378:	f7ff ff6e 	bl	8003258 <LL_ADC_IsEnabled>
 800337c:	4603      	mov	r3, r0
 800337e:	4323      	orrs	r3, r4
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e008      	b.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800338c:	4832      	ldr	r0, [pc, #200]	@ (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800338e:	f7ff ff63 	bl	8003258 <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d047      	beq.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	4b2d      	ldr	r3, [pc, #180]	@ (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6811      	ldr	r1, [r2, #0]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	6892      	ldr	r2, [r2, #8]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ba:	e03a      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10e      	bne.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80033dc:	481a      	ldr	r0, [pc, #104]	@ (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033de:	f7ff ff3b 	bl	8003258 <LL_ADC_IsEnabled>
 80033e2:	4604      	mov	r4, r0
 80033e4:	4819      	ldr	r0, [pc, #100]	@ (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033e6:	f7ff ff37 	bl	8003258 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	4323      	orrs	r3, r4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e008      	b.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033fa:	4817      	ldr	r0, [pc, #92]	@ (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033fc:	f7ff ff2c 	bl	8003258 <LL_ADC_IsEnabled>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003416:	4013      	ands	r3, r2
 8003418:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800341a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800341c:	e009      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003430:	e000      	b.n	8003434 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003432:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800343c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003440:	4618      	mov	r0, r3
 8003442:	377c      	adds	r7, #124	@ 0x7c
 8003444:	46bd      	mov	sp, r7
 8003446:	bd90      	pop	{r4, r7, pc}
 8003448:	40022000 	.word	0x40022000
 800344c:	40022100 	.word	0x40022100
 8003450:	40022300 	.word	0x40022300
 8003454:	58026300 	.word	0x58026300
 8003458:	58026000 	.word	0x58026000
 800345c:	fffff0e0 	.word	0xfffff0e0

08003460 <__NVIC_SetPriorityGrouping>:
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003470:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	4313      	orrs	r3, r2
 800348c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348e:	4a04      	ldr	r2, [pc, #16]	@ (80034a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	60d3      	str	r3, [r2, #12]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00
 80034a4:	05fa0000 	.word	0x05fa0000

080034a8 <__NVIC_GetPriorityGrouping>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ac:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 0307 	and.w	r3, r3, #7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_EnableIRQ>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	db0b      	blt.n	80034ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	4907      	ldr	r1, [pc, #28]	@ (80034fc <__NVIC_EnableIRQ+0x38>)
 80034de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2001      	movs	r0, #1
 80034e6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000e100 	.word	0xe000e100

08003500 <__NVIC_SetPriority>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800350c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db0a      	blt.n	800352a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	490c      	ldr	r1, [pc, #48]	@ (800354c <__NVIC_SetPriority+0x4c>)
 800351a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	440b      	add	r3, r1
 8003524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003528:	e00a      	b.n	8003540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4908      	ldr	r1, [pc, #32]	@ (8003550 <__NVIC_SetPriority+0x50>)
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3b04      	subs	r3, #4
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	440b      	add	r3, r1
 800353e:	761a      	strb	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <NVIC_EncodePriority>:
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	@ 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf28      	it	cs
 8003572:	2304      	movcs	r3, #4
 8003574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3304      	adds	r3, #4
 800357a:	2b06      	cmp	r3, #6
 800357c:	d902      	bls.n	8003584 <NVIC_EncodePriority+0x30>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3b03      	subs	r3, #3
 8003582:	e000      	b.n	8003586 <NVIC_EncodePriority+0x32>
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800359c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43d9      	mvns	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	4313      	orrs	r3, r2
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	@ 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ff4c 	bl	8003460 <__NVIC_SetPriorityGrouping>
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035de:	f7ff ff63 	bl	80034a8 <__NVIC_GetPriorityGrouping>
 80035e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	6978      	ldr	r0, [r7, #20]
 80035ea:	f7ff ffb3 	bl	8003554 <NVIC_EncodePriority>
 80035ee:	4602      	mov	r2, r0
 80035f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff82 	bl	8003500 <__NVIC_SetPriority>
}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800360e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff56 	bl	80034c4 <__NVIC_EnableIRQ>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7fe fe7e 	bl	8002328 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e316      	b.n	8003c66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a66      	ldr	r2, [pc, #408]	@ (80037d8 <HAL_DMA_Init+0x1b8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d04a      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a65      	ldr	r2, [pc, #404]	@ (80037dc <HAL_DMA_Init+0x1bc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d045      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a63      	ldr	r2, [pc, #396]	@ (80037e0 <HAL_DMA_Init+0x1c0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d040      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a62      	ldr	r2, [pc, #392]	@ (80037e4 <HAL_DMA_Init+0x1c4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d03b      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a60      	ldr	r2, [pc, #384]	@ (80037e8 <HAL_DMA_Init+0x1c8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d036      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5f      	ldr	r2, [pc, #380]	@ (80037ec <HAL_DMA_Init+0x1cc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d031      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5d      	ldr	r2, [pc, #372]	@ (80037f0 <HAL_DMA_Init+0x1d0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d02c      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5c      	ldr	r2, [pc, #368]	@ (80037f4 <HAL_DMA_Init+0x1d4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d027      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a5a      	ldr	r2, [pc, #360]	@ (80037f8 <HAL_DMA_Init+0x1d8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d022      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a59      	ldr	r2, [pc, #356]	@ (80037fc <HAL_DMA_Init+0x1dc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d01d      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a57      	ldr	r2, [pc, #348]	@ (8003800 <HAL_DMA_Init+0x1e0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d018      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a56      	ldr	r2, [pc, #344]	@ (8003804 <HAL_DMA_Init+0x1e4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d013      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a54      	ldr	r2, [pc, #336]	@ (8003808 <HAL_DMA_Init+0x1e8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00e      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a53      	ldr	r2, [pc, #332]	@ (800380c <HAL_DMA_Init+0x1ec>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d009      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a51      	ldr	r2, [pc, #324]	@ (8003810 <HAL_DMA_Init+0x1f0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_DMA_Init+0xb8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a50      	ldr	r2, [pc, #320]	@ (8003814 <HAL_DMA_Init+0x1f4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_DMA_Init+0xbc>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_DMA_Init+0xbe>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 813b 	beq.w	800395a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a37      	ldr	r2, [pc, #220]	@ (80037d8 <HAL_DMA_Init+0x1b8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d04a      	beq.n	8003794 <HAL_DMA_Init+0x174>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a36      	ldr	r2, [pc, #216]	@ (80037dc <HAL_DMA_Init+0x1bc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d045      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a34      	ldr	r2, [pc, #208]	@ (80037e0 <HAL_DMA_Init+0x1c0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d040      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a33      	ldr	r2, [pc, #204]	@ (80037e4 <HAL_DMA_Init+0x1c4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d03b      	beq.n	8003794 <HAL_DMA_Init+0x174>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a31      	ldr	r2, [pc, #196]	@ (80037e8 <HAL_DMA_Init+0x1c8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d036      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a30      	ldr	r2, [pc, #192]	@ (80037ec <HAL_DMA_Init+0x1cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d031      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2e      	ldr	r2, [pc, #184]	@ (80037f0 <HAL_DMA_Init+0x1d0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02c      	beq.n	8003794 <HAL_DMA_Init+0x174>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2d      	ldr	r2, [pc, #180]	@ (80037f4 <HAL_DMA_Init+0x1d4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d027      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2b      	ldr	r2, [pc, #172]	@ (80037f8 <HAL_DMA_Init+0x1d8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d022      	beq.n	8003794 <HAL_DMA_Init+0x174>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2a      	ldr	r2, [pc, #168]	@ (80037fc <HAL_DMA_Init+0x1dc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d01d      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a28      	ldr	r2, [pc, #160]	@ (8003800 <HAL_DMA_Init+0x1e0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d018      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a27      	ldr	r2, [pc, #156]	@ (8003804 <HAL_DMA_Init+0x1e4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <HAL_DMA_Init+0x174>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <HAL_DMA_Init+0x1e8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a24      	ldr	r2, [pc, #144]	@ (800380c <HAL_DMA_Init+0x1ec>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_DMA_Init+0x174>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a22      	ldr	r2, [pc, #136]	@ (8003810 <HAL_DMA_Init+0x1f0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_DMA_Init+0x174>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	@ (8003814 <HAL_DMA_Init+0x1f4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <HAL_DMA_Init+0x186>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e007      	b.n	80037b6 <HAL_DMA_Init+0x196>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037b6:	e02f      	b.n	8003818 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b8:	f7fe fdb6 	bl	8002328 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d928      	bls.n	8003818 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2203      	movs	r2, #3
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e246      	b.n	8003c66 <HAL_DMA_Init+0x646>
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1c8      	bne.n	80037b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4b83      	ldr	r3, [pc, #524]	@ (8003a40 <HAL_DMA_Init+0x420>)
 8003832:	4013      	ands	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800383e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003856:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	2b04      	cmp	r3, #4
 800386a:	d107      	bne.n	800387c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	4313      	orrs	r3, r2
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800387c:	4b71      	ldr	r3, [pc, #452]	@ (8003a44 <HAL_DMA_Init+0x424>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b71      	ldr	r3, [pc, #452]	@ (8003a48 <HAL_DMA_Init+0x428>)
 8003882:	4013      	ands	r3, r2
 8003884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003888:	d328      	bcc.n	80038dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b28      	cmp	r3, #40	@ 0x28
 8003890:	d903      	bls.n	800389a <HAL_DMA_Init+0x27a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b2e      	cmp	r3, #46	@ 0x2e
 8003898:	d917      	bls.n	80038ca <HAL_DMA_Init+0x2aa>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b3e      	cmp	r3, #62	@ 0x3e
 80038a0:	d903      	bls.n	80038aa <HAL_DMA_Init+0x28a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b42      	cmp	r3, #66	@ 0x42
 80038a8:	d90f      	bls.n	80038ca <HAL_DMA_Init+0x2aa>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b46      	cmp	r3, #70	@ 0x46
 80038b0:	d903      	bls.n	80038ba <HAL_DMA_Init+0x29a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b48      	cmp	r3, #72	@ 0x48
 80038b8:	d907      	bls.n	80038ca <HAL_DMA_Init+0x2aa>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b4e      	cmp	r3, #78	@ 0x4e
 80038c0:	d905      	bls.n	80038ce <HAL_DMA_Init+0x2ae>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b52      	cmp	r3, #82	@ 0x52
 80038c8:	d801      	bhi.n	80038ce <HAL_DMA_Init+0x2ae>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_DMA_Init+0x2b0>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0307 	bic.w	r3, r3, #7
 80038f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	2b04      	cmp	r3, #4
 8003904:	d117      	bne.n	8003936 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f001 ff1d 	bl	8005758 <DMA_CheckFifoParam>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2240      	movs	r2, #64	@ 0x40
 8003928:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e197      	b.n	8003c66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f001 fe58 	bl	80055f4 <DMA_CalcBaseAndBitshift>
 8003944:	4603      	mov	r3, r0
 8003946:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	223f      	movs	r2, #63	@ 0x3f
 8003952:	409a      	lsls	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	e0cd      	b.n	8003af6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a4c <HAL_DMA_Init+0x42c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_DMA_Init+0x38a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a39      	ldr	r2, [pc, #228]	@ (8003a50 <HAL_DMA_Init+0x430>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01d      	beq.n	80039aa <HAL_DMA_Init+0x38a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a38      	ldr	r2, [pc, #224]	@ (8003a54 <HAL_DMA_Init+0x434>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d018      	beq.n	80039aa <HAL_DMA_Init+0x38a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a36      	ldr	r2, [pc, #216]	@ (8003a58 <HAL_DMA_Init+0x438>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_DMA_Init+0x38a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a35      	ldr	r2, [pc, #212]	@ (8003a5c <HAL_DMA_Init+0x43c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_DMA_Init+0x38a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a33      	ldr	r2, [pc, #204]	@ (8003a60 <HAL_DMA_Init+0x440>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_DMA_Init+0x38a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a32      	ldr	r2, [pc, #200]	@ (8003a64 <HAL_DMA_Init+0x444>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_DMA_Init+0x38a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a30      	ldr	r2, [pc, #192]	@ (8003a68 <HAL_DMA_Init+0x448>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_DMA_Init+0x38e>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_DMA_Init+0x390>
 80039ae:	2300      	movs	r3, #0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8097 	beq.w	8003ae4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a24      	ldr	r2, [pc, #144]	@ (8003a4c <HAL_DMA_Init+0x42c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d021      	beq.n	8003a04 <HAL_DMA_Init+0x3e4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a22      	ldr	r2, [pc, #136]	@ (8003a50 <HAL_DMA_Init+0x430>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01c      	beq.n	8003a04 <HAL_DMA_Init+0x3e4>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a21      	ldr	r2, [pc, #132]	@ (8003a54 <HAL_DMA_Init+0x434>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d017      	beq.n	8003a04 <HAL_DMA_Init+0x3e4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a58 <HAL_DMA_Init+0x438>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d012      	beq.n	8003a04 <HAL_DMA_Init+0x3e4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a5c <HAL_DMA_Init+0x43c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00d      	beq.n	8003a04 <HAL_DMA_Init+0x3e4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003a60 <HAL_DMA_Init+0x440>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d008      	beq.n	8003a04 <HAL_DMA_Init+0x3e4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a64 <HAL_DMA_Init+0x444>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <HAL_DMA_Init+0x3e4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a19      	ldr	r2, [pc, #100]	@ (8003a68 <HAL_DMA_Init+0x448>)
 8003a02:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_DMA_Init+0x44c>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b40      	cmp	r3, #64	@ 0x40
 8003a2a:	d021      	beq.n	8003a70 <HAL_DMA_Init+0x450>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b80      	cmp	r3, #128	@ 0x80
 8003a32:	d102      	bne.n	8003a3a <HAL_DMA_Init+0x41a>
 8003a34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a38:	e01b      	b.n	8003a72 <HAL_DMA_Init+0x452>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e019      	b.n	8003a72 <HAL_DMA_Init+0x452>
 8003a3e:	bf00      	nop
 8003a40:	fe10803f 	.word	0xfe10803f
 8003a44:	5c001000 	.word	0x5c001000
 8003a48:	ffff0000 	.word	0xffff0000
 8003a4c:	58025408 	.word	0x58025408
 8003a50:	5802541c 	.word	0x5802541c
 8003a54:	58025430 	.word	0x58025430
 8003a58:	58025444 	.word	0x58025444
 8003a5c:	58025458 	.word	0x58025458
 8003a60:	5802546c 	.word	0x5802546c
 8003a64:	58025480 	.word	0x58025480
 8003a68:	58025494 	.word	0x58025494
 8003a6c:	fffe000f 	.word	0xfffe000f
 8003a70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003aa0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8003c70 <HAL_DMA_Init+0x650>)
 8003ab8:	4413      	add	r3, r2
 8003aba:	4a6e      	ldr	r2, [pc, #440]	@ (8003c74 <HAL_DMA_Init+0x654>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	009a      	lsls	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f001 fd93 	bl	80055f4 <DMA_CalcBaseAndBitshift>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2201      	movs	r2, #1
 8003adc:	409a      	lsls	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	e008      	b.n	8003af6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2240      	movs	r2, #64	@ 0x40
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2203      	movs	r2, #3
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0b7      	b.n	8003c66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5f      	ldr	r2, [pc, #380]	@ (8003c78 <HAL_DMA_Init+0x658>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d072      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5d      	ldr	r2, [pc, #372]	@ (8003c7c <HAL_DMA_Init+0x65c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d06d      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003c80 <HAL_DMA_Init+0x660>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d068      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5a      	ldr	r2, [pc, #360]	@ (8003c84 <HAL_DMA_Init+0x664>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d063      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a59      	ldr	r2, [pc, #356]	@ (8003c88 <HAL_DMA_Init+0x668>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d05e      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a57      	ldr	r2, [pc, #348]	@ (8003c8c <HAL_DMA_Init+0x66c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d059      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a56      	ldr	r2, [pc, #344]	@ (8003c90 <HAL_DMA_Init+0x670>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d054      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a54      	ldr	r2, [pc, #336]	@ (8003c94 <HAL_DMA_Init+0x674>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04f      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a53      	ldr	r2, [pc, #332]	@ (8003c98 <HAL_DMA_Init+0x678>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04a      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a51      	ldr	r2, [pc, #324]	@ (8003c9c <HAL_DMA_Init+0x67c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d045      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a50      	ldr	r2, [pc, #320]	@ (8003ca0 <HAL_DMA_Init+0x680>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d040      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4e      	ldr	r2, [pc, #312]	@ (8003ca4 <HAL_DMA_Init+0x684>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d03b      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4d      	ldr	r2, [pc, #308]	@ (8003ca8 <HAL_DMA_Init+0x688>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d036      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8003cac <HAL_DMA_Init+0x68c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a4a      	ldr	r2, [pc, #296]	@ (8003cb0 <HAL_DMA_Init+0x690>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02c      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a48      	ldr	r2, [pc, #288]	@ (8003cb4 <HAL_DMA_Init+0x694>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a47      	ldr	r2, [pc, #284]	@ (8003cb8 <HAL_DMA_Init+0x698>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a45      	ldr	r2, [pc, #276]	@ (8003cbc <HAL_DMA_Init+0x69c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a44      	ldr	r2, [pc, #272]	@ (8003cc0 <HAL_DMA_Init+0x6a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a42      	ldr	r2, [pc, #264]	@ (8003cc4 <HAL_DMA_Init+0x6a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a41      	ldr	r2, [pc, #260]	@ (8003cc8 <HAL_DMA_Init+0x6a8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3f      	ldr	r2, [pc, #252]	@ (8003ccc <HAL_DMA_Init+0x6ac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8003cd0 <HAL_DMA_Init+0x6b0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_Init+0x5c6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd4 <HAL_DMA_Init+0x6b4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_DMA_Init+0x5ca>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_DMA_Init+0x5cc>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d032      	beq.n	8003c56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f001 fe2d 	bl	8005850 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b80      	cmp	r3, #128	@ 0x80
 8003bfc:	d102      	bne.n	8003c04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <HAL_DMA_Init+0x624>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d80c      	bhi.n	8003c44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 feaa 	bl	8005984 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	e008      	b.n	8003c56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	a7fdabf8 	.word	0xa7fdabf8
 8003c74:	cccccccd 	.word	0xcccccccd
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
 8003cb8:	58025408 	.word	0x58025408
 8003cbc:	5802541c 	.word	0x5802541c
 8003cc0:	58025430 	.word	0x58025430
 8003cc4:	58025444 	.word	0x58025444
 8003cc8:	58025458 	.word	0x58025458
 8003ccc:	5802546c 	.word	0x5802546c
 8003cd0:	58025480 	.word	0x58025480
 8003cd4:	58025494 	.word	0x58025494

08003cd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ce0:	f7fe fb22 	bl	8002328 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e2dc      	b.n	80042aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d008      	beq.n	8003d0e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2280      	movs	r2, #128	@ 0x80
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e2cd      	b.n	80042aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a76      	ldr	r2, [pc, #472]	@ (8003eec <HAL_DMA_Abort+0x214>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04a      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a74      	ldr	r2, [pc, #464]	@ (8003ef0 <HAL_DMA_Abort+0x218>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d045      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a73      	ldr	r2, [pc, #460]	@ (8003ef4 <HAL_DMA_Abort+0x21c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d040      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a71      	ldr	r2, [pc, #452]	@ (8003ef8 <HAL_DMA_Abort+0x220>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d03b      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a70      	ldr	r2, [pc, #448]	@ (8003efc <HAL_DMA_Abort+0x224>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d036      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6e      	ldr	r2, [pc, #440]	@ (8003f00 <HAL_DMA_Abort+0x228>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f04 <HAL_DMA_Abort+0x22c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02c      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6b      	ldr	r2, [pc, #428]	@ (8003f08 <HAL_DMA_Abort+0x230>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d027      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6a      	ldr	r2, [pc, #424]	@ (8003f0c <HAL_DMA_Abort+0x234>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a68      	ldr	r2, [pc, #416]	@ (8003f10 <HAL_DMA_Abort+0x238>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a67      	ldr	r2, [pc, #412]	@ (8003f14 <HAL_DMA_Abort+0x23c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a65      	ldr	r2, [pc, #404]	@ (8003f18 <HAL_DMA_Abort+0x240>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a64      	ldr	r2, [pc, #400]	@ (8003f1c <HAL_DMA_Abort+0x244>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a62      	ldr	r2, [pc, #392]	@ (8003f20 <HAL_DMA_Abort+0x248>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a61      	ldr	r2, [pc, #388]	@ (8003f24 <HAL_DMA_Abort+0x24c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_Abort+0xd6>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a5f      	ldr	r2, [pc, #380]	@ (8003f28 <HAL_DMA_Abort+0x250>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_DMA_Abort+0xda>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_DMA_Abort+0xdc>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 021e 	bic.w	r2, r2, #30
 8003dc6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dd6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e00a      	b.n	8003df6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 020e 	bic.w	r2, r2, #14
 8003dee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8003eec <HAL_DMA_Abort+0x214>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d072      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef0 <HAL_DMA_Abort+0x218>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d06d      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a39      	ldr	r2, [pc, #228]	@ (8003ef4 <HAL_DMA_Abort+0x21c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d068      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a37      	ldr	r2, [pc, #220]	@ (8003ef8 <HAL_DMA_Abort+0x220>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d063      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a36      	ldr	r2, [pc, #216]	@ (8003efc <HAL_DMA_Abort+0x224>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d05e      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a34      	ldr	r2, [pc, #208]	@ (8003f00 <HAL_DMA_Abort+0x228>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d059      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a33      	ldr	r2, [pc, #204]	@ (8003f04 <HAL_DMA_Abort+0x22c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d054      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a31      	ldr	r2, [pc, #196]	@ (8003f08 <HAL_DMA_Abort+0x230>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04f      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a30      	ldr	r2, [pc, #192]	@ (8003f0c <HAL_DMA_Abort+0x234>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d04a      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2e      	ldr	r2, [pc, #184]	@ (8003f10 <HAL_DMA_Abort+0x238>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d045      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f14 <HAL_DMA_Abort+0x23c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d040      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2b      	ldr	r2, [pc, #172]	@ (8003f18 <HAL_DMA_Abort+0x240>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <HAL_DMA_Abort+0x244>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d036      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a28      	ldr	r2, [pc, #160]	@ (8003f20 <HAL_DMA_Abort+0x248>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <HAL_DMA_Abort+0x24c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d02c      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a25      	ldr	r2, [pc, #148]	@ (8003f28 <HAL_DMA_Abort+0x250>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d027      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <HAL_DMA_Abort+0x254>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a22      	ldr	r2, [pc, #136]	@ (8003f30 <HAL_DMA_Abort+0x258>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a21      	ldr	r2, [pc, #132]	@ (8003f34 <HAL_DMA_Abort+0x25c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f38 <HAL_DMA_Abort+0x260>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f3c <HAL_DMA_Abort+0x264>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <HAL_DMA_Abort+0x268>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_DMA_Abort+0x26c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_DMA_Abort+0x20e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <HAL_DMA_Abort+0x270>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d132      	bne.n	8003f4c <HAL_DMA_Abort+0x274>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e031      	b.n	8003f4e <HAL_DMA_Abort+0x276>
 8003eea:	bf00      	nop
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
 8003f2c:	58025408 	.word	0x58025408
 8003f30:	5802541c 	.word	0x5802541c
 8003f34:	58025430 	.word	0x58025430
 8003f38:	58025444 	.word	0x58025444
 8003f3c:	58025458 	.word	0x58025458
 8003f40:	5802546c 	.word	0x5802546c
 8003f44:	58025480 	.word	0x58025480
 8003f48:	58025494 	.word	0x58025494
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6d      	ldr	r2, [pc, #436]	@ (800411c <HAL_DMA_Abort+0x444>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d04a      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6b      	ldr	r2, [pc, #428]	@ (8004120 <HAL_DMA_Abort+0x448>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d045      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6a      	ldr	r2, [pc, #424]	@ (8004124 <HAL_DMA_Abort+0x44c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d040      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a68      	ldr	r2, [pc, #416]	@ (8004128 <HAL_DMA_Abort+0x450>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d03b      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a67      	ldr	r2, [pc, #412]	@ (800412c <HAL_DMA_Abort+0x454>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d036      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a65      	ldr	r2, [pc, #404]	@ (8004130 <HAL_DMA_Abort+0x458>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d031      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a64      	ldr	r2, [pc, #400]	@ (8004134 <HAL_DMA_Abort+0x45c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d02c      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a62      	ldr	r2, [pc, #392]	@ (8004138 <HAL_DMA_Abort+0x460>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d027      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a61      	ldr	r2, [pc, #388]	@ (800413c <HAL_DMA_Abort+0x464>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a5f      	ldr	r2, [pc, #380]	@ (8004140 <HAL_DMA_Abort+0x468>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5e      	ldr	r2, [pc, #376]	@ (8004144 <HAL_DMA_Abort+0x46c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d018      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5c      	ldr	r2, [pc, #368]	@ (8004148 <HAL_DMA_Abort+0x470>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5b      	ldr	r2, [pc, #364]	@ (800414c <HAL_DMA_Abort+0x474>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a59      	ldr	r2, [pc, #356]	@ (8004150 <HAL_DMA_Abort+0x478>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a58      	ldr	r2, [pc, #352]	@ (8004154 <HAL_DMA_Abort+0x47c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_DMA_Abort+0x32a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a56      	ldr	r2, [pc, #344]	@ (8004158 <HAL_DMA_Abort+0x480>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_DMA_Abort+0x33c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e007      	b.n	8004024 <HAL_DMA_Abort+0x34c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004024:	e013      	b.n	800404e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004026:	f7fe f97f 	bl	8002328 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b05      	cmp	r3, #5
 8004032:	d90c      	bls.n	800404e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e12d      	b.n	80042aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <HAL_DMA_Abort+0x444>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d04a      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2d      	ldr	r2, [pc, #180]	@ (8004120 <HAL_DMA_Abort+0x448>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d045      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2c      	ldr	r2, [pc, #176]	@ (8004124 <HAL_DMA_Abort+0x44c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d040      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2a      	ldr	r2, [pc, #168]	@ (8004128 <HAL_DMA_Abort+0x450>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d03b      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a29      	ldr	r2, [pc, #164]	@ (800412c <HAL_DMA_Abort+0x454>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d036      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a27      	ldr	r2, [pc, #156]	@ (8004130 <HAL_DMA_Abort+0x458>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d031      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <HAL_DMA_Abort+0x45c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d02c      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a24      	ldr	r2, [pc, #144]	@ (8004138 <HAL_DMA_Abort+0x460>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d027      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_DMA_Abort+0x464>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d022      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a21      	ldr	r2, [pc, #132]	@ (8004140 <HAL_DMA_Abort+0x468>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01d      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a20      	ldr	r2, [pc, #128]	@ (8004144 <HAL_DMA_Abort+0x46c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004148 <HAL_DMA_Abort+0x470>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1d      	ldr	r2, [pc, #116]	@ (800414c <HAL_DMA_Abort+0x474>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004150 <HAL_DMA_Abort+0x478>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <HAL_DMA_Abort+0x47c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_DMA_Abort+0x422>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a18      	ldr	r2, [pc, #96]	@ (8004158 <HAL_DMA_Abort+0x480>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_DMA_Abort+0x426>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_DMA_Abort+0x428>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02b      	beq.n	800415c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004108:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	223f      	movs	r2, #63	@ 0x3f
 8004114:	409a      	lsls	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	e02a      	b.n	8004172 <HAL_DMA_Abort+0x49a>
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004160:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2201      	movs	r2, #1
 800416c:	409a      	lsls	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a4f      	ldr	r2, [pc, #316]	@ (80042b4 <HAL_DMA_Abort+0x5dc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d072      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a4d      	ldr	r2, [pc, #308]	@ (80042b8 <HAL_DMA_Abort+0x5e0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d06d      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a4c      	ldr	r2, [pc, #304]	@ (80042bc <HAL_DMA_Abort+0x5e4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d068      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a4a      	ldr	r2, [pc, #296]	@ (80042c0 <HAL_DMA_Abort+0x5e8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d063      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a49      	ldr	r2, [pc, #292]	@ (80042c4 <HAL_DMA_Abort+0x5ec>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d05e      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a47      	ldr	r2, [pc, #284]	@ (80042c8 <HAL_DMA_Abort+0x5f0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d059      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a46      	ldr	r2, [pc, #280]	@ (80042cc <HAL_DMA_Abort+0x5f4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d054      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a44      	ldr	r2, [pc, #272]	@ (80042d0 <HAL_DMA_Abort+0x5f8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04f      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a43      	ldr	r2, [pc, #268]	@ (80042d4 <HAL_DMA_Abort+0x5fc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d04a      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a41      	ldr	r2, [pc, #260]	@ (80042d8 <HAL_DMA_Abort+0x600>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d045      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a40      	ldr	r2, [pc, #256]	@ (80042dc <HAL_DMA_Abort+0x604>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d040      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3e      	ldr	r2, [pc, #248]	@ (80042e0 <HAL_DMA_Abort+0x608>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d03b      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a3d      	ldr	r2, [pc, #244]	@ (80042e4 <HAL_DMA_Abort+0x60c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d036      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3b      	ldr	r2, [pc, #236]	@ (80042e8 <HAL_DMA_Abort+0x610>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d031      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3a      	ldr	r2, [pc, #232]	@ (80042ec <HAL_DMA_Abort+0x614>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d02c      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a38      	ldr	r2, [pc, #224]	@ (80042f0 <HAL_DMA_Abort+0x618>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d027      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a37      	ldr	r2, [pc, #220]	@ (80042f4 <HAL_DMA_Abort+0x61c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d022      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a35      	ldr	r2, [pc, #212]	@ (80042f8 <HAL_DMA_Abort+0x620>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01d      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a34      	ldr	r2, [pc, #208]	@ (80042fc <HAL_DMA_Abort+0x624>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d018      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <HAL_DMA_Abort+0x628>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a31      	ldr	r2, [pc, #196]	@ (8004304 <HAL_DMA_Abort+0x62c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2f      	ldr	r2, [pc, #188]	@ (8004308 <HAL_DMA_Abort+0x630>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2e      	ldr	r2, [pc, #184]	@ (800430c <HAL_DMA_Abort+0x634>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_DMA_Abort+0x58a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2c      	ldr	r2, [pc, #176]	@ (8004310 <HAL_DMA_Abort+0x638>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d101      	bne.n	8004266 <HAL_DMA_Abort+0x58e>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_DMA_Abort+0x590>
 8004266:	2300      	movs	r3, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d015      	beq.n	8004298 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004274:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800428c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004296:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
 80042f4:	58025408 	.word	0x58025408
 80042f8:	5802541c 	.word	0x5802541c
 80042fc:	58025430 	.word	0x58025430
 8004300:	58025444 	.word	0x58025444
 8004304:	58025458 	.word	0x58025458
 8004308:	5802546c 	.word	0x5802546c
 800430c:	58025480 	.word	0x58025480
 8004310:	58025494 	.word	0x58025494

08004314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e237      	b.n	8004796 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d004      	beq.n	800433c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2280      	movs	r2, #128	@ 0x80
 8004336:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e22c      	b.n	8004796 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a5c      	ldr	r2, [pc, #368]	@ (80044b4 <HAL_DMA_Abort_IT+0x1a0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a5b      	ldr	r2, [pc, #364]	@ (80044b8 <HAL_DMA_Abort_IT+0x1a4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d045      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a59      	ldr	r2, [pc, #356]	@ (80044bc <HAL_DMA_Abort_IT+0x1a8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a58      	ldr	r2, [pc, #352]	@ (80044c0 <HAL_DMA_Abort_IT+0x1ac>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d03b      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a56      	ldr	r2, [pc, #344]	@ (80044c4 <HAL_DMA_Abort_IT+0x1b0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a55      	ldr	r2, [pc, #340]	@ (80044c8 <HAL_DMA_Abort_IT+0x1b4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d031      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a53      	ldr	r2, [pc, #332]	@ (80044cc <HAL_DMA_Abort_IT+0x1b8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a52      	ldr	r2, [pc, #328]	@ (80044d0 <HAL_DMA_Abort_IT+0x1bc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d027      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a50      	ldr	r2, [pc, #320]	@ (80044d4 <HAL_DMA_Abort_IT+0x1c0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a4f      	ldr	r2, [pc, #316]	@ (80044d8 <HAL_DMA_Abort_IT+0x1c4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a4d      	ldr	r2, [pc, #308]	@ (80044dc <HAL_DMA_Abort_IT+0x1c8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4c      	ldr	r2, [pc, #304]	@ (80044e0 <HAL_DMA_Abort_IT+0x1cc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a4a      	ldr	r2, [pc, #296]	@ (80044e4 <HAL_DMA_Abort_IT+0x1d0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a49      	ldr	r2, [pc, #292]	@ (80044e8 <HAL_DMA_Abort_IT+0x1d4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a47      	ldr	r2, [pc, #284]	@ (80044ec <HAL_DMA_Abort_IT+0x1d8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_Abort_IT+0xc8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a46      	ldr	r2, [pc, #280]	@ (80044f0 <HAL_DMA_Abort_IT+0x1dc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d101      	bne.n	80043e0 <HAL_DMA_Abort_IT+0xcc>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <HAL_DMA_Abort_IT+0xce>
 80043e0:	2300      	movs	r3, #0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8086 	beq.w	80044f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2204      	movs	r2, #4
 80043ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2f      	ldr	r2, [pc, #188]	@ (80044b4 <HAL_DMA_Abort_IT+0x1a0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2e      	ldr	r2, [pc, #184]	@ (80044b8 <HAL_DMA_Abort_IT+0x1a4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2c      	ldr	r2, [pc, #176]	@ (80044bc <HAL_DMA_Abort_IT+0x1a8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d040      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <HAL_DMA_Abort_IT+0x1ac>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d03b      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <HAL_DMA_Abort_IT+0x1b0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a28      	ldr	r2, [pc, #160]	@ (80044c8 <HAL_DMA_Abort_IT+0x1b4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <HAL_DMA_Abort_IT+0x1b8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a25      	ldr	r2, [pc, #148]	@ (80044d0 <HAL_DMA_Abort_IT+0x1bc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <HAL_DMA_Abort_IT+0x1c0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <HAL_DMA_Abort_IT+0x1c4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a20      	ldr	r2, [pc, #128]	@ (80044dc <HAL_DMA_Abort_IT+0x1c8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1f      	ldr	r2, [pc, #124]	@ (80044e0 <HAL_DMA_Abort_IT+0x1cc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1d      	ldr	r2, [pc, #116]	@ (80044e4 <HAL_DMA_Abort_IT+0x1d0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1c      	ldr	r2, [pc, #112]	@ (80044e8 <HAL_DMA_Abort_IT+0x1d4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1a      	ldr	r2, [pc, #104]	@ (80044ec <HAL_DMA_Abort_IT+0x1d8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_DMA_Abort_IT+0x17c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a19      	ldr	r2, [pc, #100]	@ (80044f0 <HAL_DMA_Abort_IT+0x1dc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <HAL_DMA_Abort_IT+0x18e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e178      	b.n	8004794 <HAL_DMA_Abort_IT+0x480>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e16f      	b.n	8004794 <HAL_DMA_Abort_IT+0x480>
 80044b4:	40020010 	.word	0x40020010
 80044b8:	40020028 	.word	0x40020028
 80044bc:	40020040 	.word	0x40020040
 80044c0:	40020058 	.word	0x40020058
 80044c4:	40020070 	.word	0x40020070
 80044c8:	40020088 	.word	0x40020088
 80044cc:	400200a0 	.word	0x400200a0
 80044d0:	400200b8 	.word	0x400200b8
 80044d4:	40020410 	.word	0x40020410
 80044d8:	40020428 	.word	0x40020428
 80044dc:	40020440 	.word	0x40020440
 80044e0:	40020458 	.word	0x40020458
 80044e4:	40020470 	.word	0x40020470
 80044e8:	40020488 	.word	0x40020488
 80044ec:	400204a0 	.word	0x400204a0
 80044f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020e 	bic.w	r2, r2, #14
 8004502:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6c      	ldr	r2, [pc, #432]	@ (80046bc <HAL_DMA_Abort_IT+0x3a8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d04a      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6b      	ldr	r2, [pc, #428]	@ (80046c0 <HAL_DMA_Abort_IT+0x3ac>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d045      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a69      	ldr	r2, [pc, #420]	@ (80046c4 <HAL_DMA_Abort_IT+0x3b0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d040      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a68      	ldr	r2, [pc, #416]	@ (80046c8 <HAL_DMA_Abort_IT+0x3b4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d03b      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a66      	ldr	r2, [pc, #408]	@ (80046cc <HAL_DMA_Abort_IT+0x3b8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d036      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a65      	ldr	r2, [pc, #404]	@ (80046d0 <HAL_DMA_Abort_IT+0x3bc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d031      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a63      	ldr	r2, [pc, #396]	@ (80046d4 <HAL_DMA_Abort_IT+0x3c0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d02c      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a62      	ldr	r2, [pc, #392]	@ (80046d8 <HAL_DMA_Abort_IT+0x3c4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d027      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a60      	ldr	r2, [pc, #384]	@ (80046dc <HAL_DMA_Abort_IT+0x3c8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5f      	ldr	r2, [pc, #380]	@ (80046e0 <HAL_DMA_Abort_IT+0x3cc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d01d      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5d      	ldr	r2, [pc, #372]	@ (80046e4 <HAL_DMA_Abort_IT+0x3d0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a5c      	ldr	r2, [pc, #368]	@ (80046e8 <HAL_DMA_Abort_IT+0x3d4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5a      	ldr	r2, [pc, #360]	@ (80046ec <HAL_DMA_Abort_IT+0x3d8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a59      	ldr	r2, [pc, #356]	@ (80046f0 <HAL_DMA_Abort_IT+0x3dc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a57      	ldr	r2, [pc, #348]	@ (80046f4 <HAL_DMA_Abort_IT+0x3e0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_DMA_Abort_IT+0x290>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a56      	ldr	r2, [pc, #344]	@ (80046f8 <HAL_DMA_Abort_IT+0x3e4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d108      	bne.n	80045b6 <HAL_DMA_Abort_IT+0x2a2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e007      	b.n	80045c6 <HAL_DMA_Abort_IT+0x2b2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3c      	ldr	r2, [pc, #240]	@ (80046bc <HAL_DMA_Abort_IT+0x3a8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d072      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a3a      	ldr	r2, [pc, #232]	@ (80046c0 <HAL_DMA_Abort_IT+0x3ac>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d06d      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a39      	ldr	r2, [pc, #228]	@ (80046c4 <HAL_DMA_Abort_IT+0x3b0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d068      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a37      	ldr	r2, [pc, #220]	@ (80046c8 <HAL_DMA_Abort_IT+0x3b4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d063      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a36      	ldr	r2, [pc, #216]	@ (80046cc <HAL_DMA_Abort_IT+0x3b8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d05e      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a34      	ldr	r2, [pc, #208]	@ (80046d0 <HAL_DMA_Abort_IT+0x3bc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d059      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a33      	ldr	r2, [pc, #204]	@ (80046d4 <HAL_DMA_Abort_IT+0x3c0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d054      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a31      	ldr	r2, [pc, #196]	@ (80046d8 <HAL_DMA_Abort_IT+0x3c4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d04f      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a30      	ldr	r2, [pc, #192]	@ (80046dc <HAL_DMA_Abort_IT+0x3c8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d04a      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2e      	ldr	r2, [pc, #184]	@ (80046e0 <HAL_DMA_Abort_IT+0x3cc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d045      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <HAL_DMA_Abort_IT+0x3d0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d040      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2b      	ldr	r2, [pc, #172]	@ (80046e8 <HAL_DMA_Abort_IT+0x3d4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d03b      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a2a      	ldr	r2, [pc, #168]	@ (80046ec <HAL_DMA_Abort_IT+0x3d8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d036      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a28      	ldr	r2, [pc, #160]	@ (80046f0 <HAL_DMA_Abort_IT+0x3dc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d031      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a27      	ldr	r2, [pc, #156]	@ (80046f4 <HAL_DMA_Abort_IT+0x3e0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d02c      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a25      	ldr	r2, [pc, #148]	@ (80046f8 <HAL_DMA_Abort_IT+0x3e4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d027      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a24      	ldr	r2, [pc, #144]	@ (80046fc <HAL_DMA_Abort_IT+0x3e8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a22      	ldr	r2, [pc, #136]	@ (8004700 <HAL_DMA_Abort_IT+0x3ec>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01d      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a21      	ldr	r2, [pc, #132]	@ (8004704 <HAL_DMA_Abort_IT+0x3f0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d018      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1f      	ldr	r2, [pc, #124]	@ (8004708 <HAL_DMA_Abort_IT+0x3f4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <HAL_DMA_Abort_IT+0x3f8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1c      	ldr	r2, [pc, #112]	@ (8004710 <HAL_DMA_Abort_IT+0x3fc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <HAL_DMA_Abort_IT+0x400>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x3a2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	@ (8004718 <HAL_DMA_Abort_IT+0x404>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d132      	bne.n	800471c <HAL_DMA_Abort_IT+0x408>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e031      	b.n	800471e <HAL_DMA_Abort_IT+0x40a>
 80046ba:	bf00      	nop
 80046bc:	40020010 	.word	0x40020010
 80046c0:	40020028 	.word	0x40020028
 80046c4:	40020040 	.word	0x40020040
 80046c8:	40020058 	.word	0x40020058
 80046cc:	40020070 	.word	0x40020070
 80046d0:	40020088 	.word	0x40020088
 80046d4:	400200a0 	.word	0x400200a0
 80046d8:	400200b8 	.word	0x400200b8
 80046dc:	40020410 	.word	0x40020410
 80046e0:	40020428 	.word	0x40020428
 80046e4:	40020440 	.word	0x40020440
 80046e8:	40020458 	.word	0x40020458
 80046ec:	40020470 	.word	0x40020470
 80046f0:	40020488 	.word	0x40020488
 80046f4:	400204a0 	.word	0x400204a0
 80046f8:	400204b8 	.word	0x400204b8
 80046fc:	58025408 	.word	0x58025408
 8004700:	5802541c 	.word	0x5802541c
 8004704:	58025430 	.word	0x58025430
 8004708:	58025444 	.word	0x58025444
 800470c:	58025458 	.word	0x58025458
 8004710:	5802546c 	.word	0x5802546c
 8004714:	58025480 	.word	0x58025480
 8004718:	58025494 	.word	0x58025494
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d028      	beq.n	8004774 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004730:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004736:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2201      	movs	r2, #1
 8004742:	409a      	lsls	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004750:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004768:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004772:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop

080047a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	@ 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047ac:	4b67      	ldr	r3, [pc, #412]	@ (800494c <HAL_DMA_IRQHandler+0x1ac>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a67      	ldr	r2, [pc, #412]	@ (8004950 <HAL_DMA_IRQHandler+0x1b0>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5f      	ldr	r2, [pc, #380]	@ (8004954 <HAL_DMA_IRQHandler+0x1b4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d04a      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5d      	ldr	r2, [pc, #372]	@ (8004958 <HAL_DMA_IRQHandler+0x1b8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d045      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5c      	ldr	r2, [pc, #368]	@ (800495c <HAL_DMA_IRQHandler+0x1bc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d040      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004960 <HAL_DMA_IRQHandler+0x1c0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d03b      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a59      	ldr	r2, [pc, #356]	@ (8004964 <HAL_DMA_IRQHandler+0x1c4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d036      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a57      	ldr	r2, [pc, #348]	@ (8004968 <HAL_DMA_IRQHandler+0x1c8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d031      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a56      	ldr	r2, [pc, #344]	@ (800496c <HAL_DMA_IRQHandler+0x1cc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d02c      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a54      	ldr	r2, [pc, #336]	@ (8004970 <HAL_DMA_IRQHandler+0x1d0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d027      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a53      	ldr	r2, [pc, #332]	@ (8004974 <HAL_DMA_IRQHandler+0x1d4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a51      	ldr	r2, [pc, #324]	@ (8004978 <HAL_DMA_IRQHandler+0x1d8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01d      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a50      	ldr	r2, [pc, #320]	@ (800497c <HAL_DMA_IRQHandler+0x1dc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a4e      	ldr	r2, [pc, #312]	@ (8004980 <HAL_DMA_IRQHandler+0x1e0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a4d      	ldr	r2, [pc, #308]	@ (8004984 <HAL_DMA_IRQHandler+0x1e4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a4b      	ldr	r2, [pc, #300]	@ (8004988 <HAL_DMA_IRQHandler+0x1e8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a4a      	ldr	r2, [pc, #296]	@ (800498c <HAL_DMA_IRQHandler+0x1ec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_DMA_IRQHandler+0xd2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a48      	ldr	r2, [pc, #288]	@ (8004990 <HAL_DMA_IRQHandler+0x1f0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <HAL_DMA_IRQHandler+0xd6>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_DMA_IRQHandler+0xd8>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 842b 	beq.w	80050d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2208      	movs	r2, #8
 8004888:	409a      	lsls	r2, r3
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80a2 	beq.w	80049d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2e      	ldr	r2, [pc, #184]	@ (8004954 <HAL_DMA_IRQHandler+0x1b4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004958 <HAL_DMA_IRQHandler+0x1b8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2b      	ldr	r2, [pc, #172]	@ (800495c <HAL_DMA_IRQHandler+0x1bc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004960 <HAL_DMA_IRQHandler+0x1c0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a28      	ldr	r2, [pc, #160]	@ (8004964 <HAL_DMA_IRQHandler+0x1c4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a27      	ldr	r2, [pc, #156]	@ (8004968 <HAL_DMA_IRQHandler+0x1c8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a25      	ldr	r2, [pc, #148]	@ (800496c <HAL_DMA_IRQHandler+0x1cc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a24      	ldr	r2, [pc, #144]	@ (8004970 <HAL_DMA_IRQHandler+0x1d0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a22      	ldr	r2, [pc, #136]	@ (8004974 <HAL_DMA_IRQHandler+0x1d4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a21      	ldr	r2, [pc, #132]	@ (8004978 <HAL_DMA_IRQHandler+0x1d8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	@ (800497c <HAL_DMA_IRQHandler+0x1dc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1e      	ldr	r2, [pc, #120]	@ (8004980 <HAL_DMA_IRQHandler+0x1e0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	@ (8004984 <HAL_DMA_IRQHandler+0x1e4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <HAL_DMA_IRQHandler+0x1e8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a19      	ldr	r2, [pc, #100]	@ (800498c <HAL_DMA_IRQHandler+0x1ec>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_DMA_IRQHandler+0x194>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	@ (8004990 <HAL_DMA_IRQHandler+0x1f0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d12f      	bne.n	8004994 <HAL_DMA_IRQHandler+0x1f4>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf14      	ite	ne
 8004942:	2301      	movne	r3, #1
 8004944:	2300      	moveq	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	e02e      	b.n	80049a8 <HAL_DMA_IRQHandler+0x208>
 800494a:	bf00      	nop
 800494c:	24000000 	.word	0x24000000
 8004950:	1b4e81b5 	.word	0x1b4e81b5
 8004954:	40020010 	.word	0x40020010
 8004958:	40020028 	.word	0x40020028
 800495c:	40020040 	.word	0x40020040
 8004960:	40020058 	.word	0x40020058
 8004964:	40020070 	.word	0x40020070
 8004968:	40020088 	.word	0x40020088
 800496c:	400200a0 	.word	0x400200a0
 8004970:	400200b8 	.word	0x400200b8
 8004974:	40020410 	.word	0x40020410
 8004978:	40020428 	.word	0x40020428
 800497c:	40020440 	.word	0x40020440
 8004980:	40020458 	.word	0x40020458
 8004984:	40020470 	.word	0x40020470
 8004988:	40020488 	.word	0x40020488
 800498c:	400204a0 	.word	0x400204a0
 8004990:	400204b8 	.word	0x400204b8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf14      	ite	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	2300      	moveq	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2208      	movs	r2, #8
 80049c6:	409a      	lsls	r2, r3
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	f043 0201 	orr.w	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d06e      	beq.n	8004acc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a69      	ldr	r2, [pc, #420]	@ (8004b98 <HAL_DMA_IRQHandler+0x3f8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d04a      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a67      	ldr	r2, [pc, #412]	@ (8004b9c <HAL_DMA_IRQHandler+0x3fc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d045      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a66      	ldr	r2, [pc, #408]	@ (8004ba0 <HAL_DMA_IRQHandler+0x400>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d040      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a64      	ldr	r2, [pc, #400]	@ (8004ba4 <HAL_DMA_IRQHandler+0x404>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d03b      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a63      	ldr	r2, [pc, #396]	@ (8004ba8 <HAL_DMA_IRQHandler+0x408>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d036      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a61      	ldr	r2, [pc, #388]	@ (8004bac <HAL_DMA_IRQHandler+0x40c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d031      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a60      	ldr	r2, [pc, #384]	@ (8004bb0 <HAL_DMA_IRQHandler+0x410>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d02c      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb4 <HAL_DMA_IRQHandler+0x414>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d027      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a5d      	ldr	r2, [pc, #372]	@ (8004bb8 <HAL_DMA_IRQHandler+0x418>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d022      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8004bbc <HAL_DMA_IRQHandler+0x41c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01d      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a5a      	ldr	r2, [pc, #360]	@ (8004bc0 <HAL_DMA_IRQHandler+0x420>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d018      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a58      	ldr	r2, [pc, #352]	@ (8004bc4 <HAL_DMA_IRQHandler+0x424>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a57      	ldr	r2, [pc, #348]	@ (8004bc8 <HAL_DMA_IRQHandler+0x428>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00e      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a55      	ldr	r2, [pc, #340]	@ (8004bcc <HAL_DMA_IRQHandler+0x42c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d009      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a54      	ldr	r2, [pc, #336]	@ (8004bd0 <HAL_DMA_IRQHandler+0x430>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2ee>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a52      	ldr	r2, [pc, #328]	@ (8004bd4 <HAL_DMA_IRQHandler+0x434>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d10a      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x304>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e003      	b.n	8004aac <HAL_DMA_IRQHandler+0x30c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	f043 0202 	orr.w	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 808f 	beq.w	8004c00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b98 <HAL_DMA_IRQHandler+0x3f8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d04a      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b9c <HAL_DMA_IRQHandler+0x3fc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d045      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a29      	ldr	r2, [pc, #164]	@ (8004ba0 <HAL_DMA_IRQHandler+0x400>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d040      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a27      	ldr	r2, [pc, #156]	@ (8004ba4 <HAL_DMA_IRQHandler+0x404>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d03b      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a26      	ldr	r2, [pc, #152]	@ (8004ba8 <HAL_DMA_IRQHandler+0x408>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d036      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a24      	ldr	r2, [pc, #144]	@ (8004bac <HAL_DMA_IRQHandler+0x40c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d031      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a23      	ldr	r2, [pc, #140]	@ (8004bb0 <HAL_DMA_IRQHandler+0x410>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d02c      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a21      	ldr	r2, [pc, #132]	@ (8004bb4 <HAL_DMA_IRQHandler+0x414>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d027      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a20      	ldr	r2, [pc, #128]	@ (8004bb8 <HAL_DMA_IRQHandler+0x418>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1e      	ldr	r2, [pc, #120]	@ (8004bbc <HAL_DMA_IRQHandler+0x41c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01d      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc0 <HAL_DMA_IRQHandler+0x420>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc4 <HAL_DMA_IRQHandler+0x424>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc8 <HAL_DMA_IRQHandler+0x428>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a18      	ldr	r2, [pc, #96]	@ (8004bcc <HAL_DMA_IRQHandler+0x42c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <HAL_DMA_IRQHandler+0x430>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x3e2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <HAL_DMA_IRQHandler+0x434>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d12a      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x438>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e023      	b.n	8004be0 <HAL_DMA_IRQHandler+0x440>
 8004b98:	40020010 	.word	0x40020010
 8004b9c:	40020028 	.word	0x40020028
 8004ba0:	40020040 	.word	0x40020040
 8004ba4:	40020058 	.word	0x40020058
 8004ba8:	40020070 	.word	0x40020070
 8004bac:	40020088 	.word	0x40020088
 8004bb0:	400200a0 	.word	0x400200a0
 8004bb4:	400200b8 	.word	0x400200b8
 8004bb8:	40020410 	.word	0x40020410
 8004bbc:	40020428 	.word	0x40020428
 8004bc0:	40020440 	.word	0x40020440
 8004bc4:	40020458 	.word	0x40020458
 8004bc8:	40020470 	.word	0x40020470
 8004bcc:	40020488 	.word	0x40020488
 8004bd0:	400204a0 	.word	0x400204a0
 8004bd4:	400204b8 	.word	0x400204b8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	2204      	movs	r2, #4
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf8:	f043 0204 	orr.w	r2, r3, #4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2210      	movs	r2, #16
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80a6 	beq.w	8004d62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a85      	ldr	r2, [pc, #532]	@ (8004e30 <HAL_DMA_IRQHandler+0x690>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d04a      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a83      	ldr	r2, [pc, #524]	@ (8004e34 <HAL_DMA_IRQHandler+0x694>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d045      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a82      	ldr	r2, [pc, #520]	@ (8004e38 <HAL_DMA_IRQHandler+0x698>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d040      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a80      	ldr	r2, [pc, #512]	@ (8004e3c <HAL_DMA_IRQHandler+0x69c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d03b      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7f      	ldr	r2, [pc, #508]	@ (8004e40 <HAL_DMA_IRQHandler+0x6a0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d036      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e44 <HAL_DMA_IRQHandler+0x6a4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d031      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7c      	ldr	r2, [pc, #496]	@ (8004e48 <HAL_DMA_IRQHandler+0x6a8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d02c      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7a      	ldr	r2, [pc, #488]	@ (8004e4c <HAL_DMA_IRQHandler+0x6ac>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d027      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a79      	ldr	r2, [pc, #484]	@ (8004e50 <HAL_DMA_IRQHandler+0x6b0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d022      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a77      	ldr	r2, [pc, #476]	@ (8004e54 <HAL_DMA_IRQHandler+0x6b4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01d      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a76      	ldr	r2, [pc, #472]	@ (8004e58 <HAL_DMA_IRQHandler+0x6b8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d018      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a74      	ldr	r2, [pc, #464]	@ (8004e5c <HAL_DMA_IRQHandler+0x6bc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a73      	ldr	r2, [pc, #460]	@ (8004e60 <HAL_DMA_IRQHandler+0x6c0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a71      	ldr	r2, [pc, #452]	@ (8004e64 <HAL_DMA_IRQHandler+0x6c4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a70      	ldr	r2, [pc, #448]	@ (8004e68 <HAL_DMA_IRQHandler+0x6c8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x516>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e6c <HAL_DMA_IRQHandler+0x6cc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10a      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x52c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e009      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x540>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bf14      	ite	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	2300      	moveq	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03e      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2210      	movs	r2, #16
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d108      	bne.n	8004d22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d024      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
 8004d20:	e01f      	b.n	8004d62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01b      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
 8004d32:	e016      	b.n	8004d62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0208 	bic.w	r2, r2, #8
 8004d50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8110 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e30 <HAL_DMA_IRQHandler+0x690>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d04a      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2b      	ldr	r2, [pc, #172]	@ (8004e34 <HAL_DMA_IRQHandler+0x694>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d045      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <HAL_DMA_IRQHandler+0x698>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d040      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a28      	ldr	r2, [pc, #160]	@ (8004e3c <HAL_DMA_IRQHandler+0x69c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d03b      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <HAL_DMA_IRQHandler+0x6a0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d036      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <HAL_DMA_IRQHandler+0x6a4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d031      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a23      	ldr	r2, [pc, #140]	@ (8004e48 <HAL_DMA_IRQHandler+0x6a8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d02c      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a22      	ldr	r2, [pc, #136]	@ (8004e4c <HAL_DMA_IRQHandler+0x6ac>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d027      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	@ (8004e50 <HAL_DMA_IRQHandler+0x6b0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d022      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e54 <HAL_DMA_IRQHandler+0x6b4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d01d      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <HAL_DMA_IRQHandler+0x6b8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d018      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1c      	ldr	r2, [pc, #112]	@ (8004e5c <HAL_DMA_IRQHandler+0x6bc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e60 <HAL_DMA_IRQHandler+0x6c0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a19      	ldr	r2, [pc, #100]	@ (8004e64 <HAL_DMA_IRQHandler+0x6c4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d009      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <HAL_DMA_IRQHandler+0x6c8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x678>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <HAL_DMA_IRQHandler+0x6cc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d12b      	bne.n	8004e70 <HAL_DMA_IRQHandler+0x6d0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf14      	ite	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	2300      	moveq	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e02a      	b.n	8004e84 <HAL_DMA_IRQHandler+0x6e4>
 8004e2e:	bf00      	nop
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8087 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	2220      	movs	r2, #32
 8004e94:	409a      	lsls	r2, r3
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d139      	bne.n	8004f1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0216 	bic.w	r2, r2, #22
 8004eb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ec4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x736>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0208 	bic.w	r2, r2, #8
 8004ee4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	223f      	movs	r2, #63	@ 0x3f
 8004ef0:	409a      	lsls	r2, r3
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 834a 	beq.w	80055a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
          }
          return;
 8004f18:	e344      	b.n	80055a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d018      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d108      	bne.n	8004f48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d02c      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
 8004f46:	e027      	b.n	8004f98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
 8004f58:	e01e      	b.n	8004f98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0210 	bic.w	r2, r2, #16
 8004f76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8306 	beq.w	80055ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8088 	beq.w	80050c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a7a      	ldr	r2, [pc, #488]	@ (80051a8 <HAL_DMA_IRQHandler+0xa08>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d04a      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a79      	ldr	r2, [pc, #484]	@ (80051ac <HAL_DMA_IRQHandler+0xa0c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d045      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a77      	ldr	r2, [pc, #476]	@ (80051b0 <HAL_DMA_IRQHandler+0xa10>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d040      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a76      	ldr	r2, [pc, #472]	@ (80051b4 <HAL_DMA_IRQHandler+0xa14>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d03b      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a74      	ldr	r2, [pc, #464]	@ (80051b8 <HAL_DMA_IRQHandler+0xa18>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d036      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a73      	ldr	r2, [pc, #460]	@ (80051bc <HAL_DMA_IRQHandler+0xa1c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d031      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a71      	ldr	r2, [pc, #452]	@ (80051c0 <HAL_DMA_IRQHandler+0xa20>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02c      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a70      	ldr	r2, [pc, #448]	@ (80051c4 <HAL_DMA_IRQHandler+0xa24>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d027      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a6e      	ldr	r2, [pc, #440]	@ (80051c8 <HAL_DMA_IRQHandler+0xa28>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d022      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6d      	ldr	r2, [pc, #436]	@ (80051cc <HAL_DMA_IRQHandler+0xa2c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01d      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a6b      	ldr	r2, [pc, #428]	@ (80051d0 <HAL_DMA_IRQHandler+0xa30>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d018      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6a      	ldr	r2, [pc, #424]	@ (80051d4 <HAL_DMA_IRQHandler+0xa34>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a68      	ldr	r2, [pc, #416]	@ (80051d8 <HAL_DMA_IRQHandler+0xa38>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a67      	ldr	r2, [pc, #412]	@ (80051dc <HAL_DMA_IRQHandler+0xa3c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a65      	ldr	r2, [pc, #404]	@ (80051e0 <HAL_DMA_IRQHandler+0xa40>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_DMA_IRQHandler+0x8b8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a64      	ldr	r2, [pc, #400]	@ (80051e4 <HAL_DMA_IRQHandler+0xa44>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d108      	bne.n	800506a <HAL_DMA_IRQHandler+0x8ca>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e007      	b.n	800507a <HAL_DMA_IRQHandler+0x8da>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005082:	429a      	cmp	r2, r3
 8005084:	d307      	bcc.n	8005096 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f2      	bne.n	800507a <HAL_DMA_IRQHandler+0x8da>
 8005094:	e000      	b.n	8005098 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005096:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2203      	movs	r2, #3
 80050aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80050ae:	e003      	b.n	80050b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8272 	beq.w	80055ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
 80050d2:	e26c      	b.n	80055ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a43      	ldr	r2, [pc, #268]	@ (80051e8 <HAL_DMA_IRQHandler+0xa48>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d022      	beq.n	8005124 <HAL_DMA_IRQHandler+0x984>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a42      	ldr	r2, [pc, #264]	@ (80051ec <HAL_DMA_IRQHandler+0xa4c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d01d      	beq.n	8005124 <HAL_DMA_IRQHandler+0x984>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a40      	ldr	r2, [pc, #256]	@ (80051f0 <HAL_DMA_IRQHandler+0xa50>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d018      	beq.n	8005124 <HAL_DMA_IRQHandler+0x984>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3f      	ldr	r2, [pc, #252]	@ (80051f4 <HAL_DMA_IRQHandler+0xa54>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <HAL_DMA_IRQHandler+0x984>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a3d      	ldr	r2, [pc, #244]	@ (80051f8 <HAL_DMA_IRQHandler+0xa58>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_DMA_IRQHandler+0x984>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3c      	ldr	r2, [pc, #240]	@ (80051fc <HAL_DMA_IRQHandler+0xa5c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_DMA_IRQHandler+0x984>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3a      	ldr	r2, [pc, #232]	@ (8005200 <HAL_DMA_IRQHandler+0xa60>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_DMA_IRQHandler+0x984>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a39      	ldr	r2, [pc, #228]	@ (8005204 <HAL_DMA_IRQHandler+0xa64>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d101      	bne.n	8005128 <HAL_DMA_IRQHandler+0x988>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <HAL_DMA_IRQHandler+0x98a>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 823f 	beq.w	80055ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2204      	movs	r2, #4
 8005142:	409a      	lsls	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80cd 	beq.w	80052e8 <HAL_DMA_IRQHandler+0xb48>
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80c7 	beq.w	80052e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2204      	movs	r2, #4
 8005164:	409a      	lsls	r2, r3
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d049      	beq.n	8005208 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8210 	beq.w	80055a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005190:	e20a      	b.n	80055a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8206 	beq.w	80055a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a4:	e200      	b.n	80055a8 <HAL_DMA_IRQHandler+0xe08>
 80051a6:	bf00      	nop
 80051a8:	40020010 	.word	0x40020010
 80051ac:	40020028 	.word	0x40020028
 80051b0:	40020040 	.word	0x40020040
 80051b4:	40020058 	.word	0x40020058
 80051b8:	40020070 	.word	0x40020070
 80051bc:	40020088 	.word	0x40020088
 80051c0:	400200a0 	.word	0x400200a0
 80051c4:	400200b8 	.word	0x400200b8
 80051c8:	40020410 	.word	0x40020410
 80051cc:	40020428 	.word	0x40020428
 80051d0:	40020440 	.word	0x40020440
 80051d4:	40020458 	.word	0x40020458
 80051d8:	40020470 	.word	0x40020470
 80051dc:	40020488 	.word	0x40020488
 80051e0:	400204a0 	.word	0x400204a0
 80051e4:	400204b8 	.word	0x400204b8
 80051e8:	58025408 	.word	0x58025408
 80051ec:	5802541c 	.word	0x5802541c
 80051f0:	58025430 	.word	0x58025430
 80051f4:	58025444 	.word	0x58025444
 80051f8:	58025458 	.word	0x58025458
 80051fc:	5802546c 	.word	0x5802546c
 8005200:	58025480 	.word	0x58025480
 8005204:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d160      	bne.n	80052d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7f      	ldr	r2, [pc, #508]	@ (8005414 <HAL_DMA_IRQHandler+0xc74>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d04a      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a7d      	ldr	r2, [pc, #500]	@ (8005418 <HAL_DMA_IRQHandler+0xc78>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d045      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7c      	ldr	r2, [pc, #496]	@ (800541c <HAL_DMA_IRQHandler+0xc7c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d040      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a7a      	ldr	r2, [pc, #488]	@ (8005420 <HAL_DMA_IRQHandler+0xc80>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d03b      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a79      	ldr	r2, [pc, #484]	@ (8005424 <HAL_DMA_IRQHandler+0xc84>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d036      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a77      	ldr	r2, [pc, #476]	@ (8005428 <HAL_DMA_IRQHandler+0xc88>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d031      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a76      	ldr	r2, [pc, #472]	@ (800542c <HAL_DMA_IRQHandler+0xc8c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d02c      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a74      	ldr	r2, [pc, #464]	@ (8005430 <HAL_DMA_IRQHandler+0xc90>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d027      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a73      	ldr	r2, [pc, #460]	@ (8005434 <HAL_DMA_IRQHandler+0xc94>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d022      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a71      	ldr	r2, [pc, #452]	@ (8005438 <HAL_DMA_IRQHandler+0xc98>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a70      	ldr	r2, [pc, #448]	@ (800543c <HAL_DMA_IRQHandler+0xc9c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d018      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a6e      	ldr	r2, [pc, #440]	@ (8005440 <HAL_DMA_IRQHandler+0xca0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6d      	ldr	r2, [pc, #436]	@ (8005444 <HAL_DMA_IRQHandler+0xca4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6b      	ldr	r2, [pc, #428]	@ (8005448 <HAL_DMA_IRQHandler+0xca8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6a      	ldr	r2, [pc, #424]	@ (800544c <HAL_DMA_IRQHandler+0xcac>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xb12>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a68      	ldr	r2, [pc, #416]	@ (8005450 <HAL_DMA_IRQHandler+0xcb0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d108      	bne.n	80052c4 <HAL_DMA_IRQHandler+0xb24>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0208 	bic.w	r2, r2, #8
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e007      	b.n	80052d4 <HAL_DMA_IRQHandler+0xb34>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0204 	bic.w	r2, r2, #4
 80052d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8165 	beq.w	80055a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052e6:	e15f      	b.n	80055a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	2202      	movs	r2, #2
 80052f2:	409a      	lsls	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80c5 	beq.w	8005488 <HAL_DMA_IRQHandler+0xce8>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80bf 	beq.w	8005488 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2202      	movs	r2, #2
 8005314:	409a      	lsls	r2, r3
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d018      	beq.n	8005356 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 813a 	beq.w	80055ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005340:	e134      	b.n	80055ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8130 	beq.w	80055ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005354:	e12a      	b.n	80055ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 8089 	bne.w	8005474 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2b      	ldr	r2, [pc, #172]	@ (8005414 <HAL_DMA_IRQHandler+0xc74>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d04a      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a29      	ldr	r2, [pc, #164]	@ (8005418 <HAL_DMA_IRQHandler+0xc78>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d045      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a28      	ldr	r2, [pc, #160]	@ (800541c <HAL_DMA_IRQHandler+0xc7c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d040      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a26      	ldr	r2, [pc, #152]	@ (8005420 <HAL_DMA_IRQHandler+0xc80>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d03b      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a25      	ldr	r2, [pc, #148]	@ (8005424 <HAL_DMA_IRQHandler+0xc84>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d036      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a23      	ldr	r2, [pc, #140]	@ (8005428 <HAL_DMA_IRQHandler+0xc88>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d031      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a22      	ldr	r2, [pc, #136]	@ (800542c <HAL_DMA_IRQHandler+0xc8c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d02c      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a20      	ldr	r2, [pc, #128]	@ (8005430 <HAL_DMA_IRQHandler+0xc90>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d027      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005434 <HAL_DMA_IRQHandler+0xc94>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <HAL_DMA_IRQHandler+0xc98>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01d      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1c      	ldr	r2, [pc, #112]	@ (800543c <HAL_DMA_IRQHandler+0xc9c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d018      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <HAL_DMA_IRQHandler+0xca0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a19      	ldr	r2, [pc, #100]	@ (8005444 <HAL_DMA_IRQHandler+0xca4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <HAL_DMA_IRQHandler+0xca8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <HAL_DMA_IRQHandler+0xcac>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_DMA_IRQHandler+0xc62>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <HAL_DMA_IRQHandler+0xcb0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d128      	bne.n	8005454 <HAL_DMA_IRQHandler+0xcb4>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0214 	bic.w	r2, r2, #20
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e027      	b.n	8005464 <HAL_DMA_IRQHandler+0xcc4>
 8005414:	40020010 	.word	0x40020010
 8005418:	40020028 	.word	0x40020028
 800541c:	40020040 	.word	0x40020040
 8005420:	40020058 	.word	0x40020058
 8005424:	40020070 	.word	0x40020070
 8005428:	40020088 	.word	0x40020088
 800542c:	400200a0 	.word	0x400200a0
 8005430:	400200b8 	.word	0x400200b8
 8005434:	40020410 	.word	0x40020410
 8005438:	40020428 	.word	0x40020428
 800543c:	40020440 	.word	0x40020440
 8005440:	40020458 	.word	0x40020458
 8005444:	40020470 	.word	0x40020470
 8005448:	40020488 	.word	0x40020488
 800544c:	400204a0 	.word	0x400204a0
 8005450:	400204b8 	.word	0x400204b8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 020a 	bic.w	r2, r2, #10
 8005462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8097 	beq.w	80055ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005486:	e091      	b.n	80055ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2208      	movs	r2, #8
 8005492:	409a      	lsls	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8088 	beq.w	80055ae <HAL_DMA_IRQHandler+0xe0e>
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8082 	beq.w	80055ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a41      	ldr	r2, [pc, #260]	@ (80055b4 <HAL_DMA_IRQHandler+0xe14>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d04a      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a3f      	ldr	r2, [pc, #252]	@ (80055b8 <HAL_DMA_IRQHandler+0xe18>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d045      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a3e      	ldr	r2, [pc, #248]	@ (80055bc <HAL_DMA_IRQHandler+0xe1c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d040      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3c      	ldr	r2, [pc, #240]	@ (80055c0 <HAL_DMA_IRQHandler+0xe20>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d03b      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3b      	ldr	r2, [pc, #236]	@ (80055c4 <HAL_DMA_IRQHandler+0xe24>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d036      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a39      	ldr	r2, [pc, #228]	@ (80055c8 <HAL_DMA_IRQHandler+0xe28>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d031      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a38      	ldr	r2, [pc, #224]	@ (80055cc <HAL_DMA_IRQHandler+0xe2c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d02c      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a36      	ldr	r2, [pc, #216]	@ (80055d0 <HAL_DMA_IRQHandler+0xe30>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d027      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a35      	ldr	r2, [pc, #212]	@ (80055d4 <HAL_DMA_IRQHandler+0xe34>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a33      	ldr	r2, [pc, #204]	@ (80055d8 <HAL_DMA_IRQHandler+0xe38>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01d      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a32      	ldr	r2, [pc, #200]	@ (80055dc <HAL_DMA_IRQHandler+0xe3c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a30      	ldr	r2, [pc, #192]	@ (80055e0 <HAL_DMA_IRQHandler+0xe40>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2f      	ldr	r2, [pc, #188]	@ (80055e4 <HAL_DMA_IRQHandler+0xe44>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2d      	ldr	r2, [pc, #180]	@ (80055e8 <HAL_DMA_IRQHandler+0xe48>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2c      	ldr	r2, [pc, #176]	@ (80055ec <HAL_DMA_IRQHandler+0xe4c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_DMA_IRQHandler+0xdaa>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2a      	ldr	r2, [pc, #168]	@ (80055f0 <HAL_DMA_IRQHandler+0xe50>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d108      	bne.n	800555c <HAL_DMA_IRQHandler+0xdbc>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 021c 	bic.w	r2, r2, #28
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e007      	b.n	800556c <HAL_DMA_IRQHandler+0xdcc>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 020e 	bic.w	r2, r2, #14
 800556a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2201      	movs	r2, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
 80055a2:	e004      	b.n	80055ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055ae:	3728      	adds	r7, #40	@ 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40020010 	.word	0x40020010
 80055b8:	40020028 	.word	0x40020028
 80055bc:	40020040 	.word	0x40020040
 80055c0:	40020058 	.word	0x40020058
 80055c4:	40020070 	.word	0x40020070
 80055c8:	40020088 	.word	0x40020088
 80055cc:	400200a0 	.word	0x400200a0
 80055d0:	400200b8 	.word	0x400200b8
 80055d4:	40020410 	.word	0x40020410
 80055d8:	40020428 	.word	0x40020428
 80055dc:	40020440 	.word	0x40020440
 80055e0:	40020458 	.word	0x40020458
 80055e4:	40020470 	.word	0x40020470
 80055e8:	40020488 	.word	0x40020488
 80055ec:	400204a0 	.word	0x400204a0
 80055f0:	400204b8 	.word	0x400204b8

080055f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a42      	ldr	r2, [pc, #264]	@ (800570c <DMA_CalcBaseAndBitshift+0x118>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d04a      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a41      	ldr	r2, [pc, #260]	@ (8005710 <DMA_CalcBaseAndBitshift+0x11c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d045      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a3f      	ldr	r2, [pc, #252]	@ (8005714 <DMA_CalcBaseAndBitshift+0x120>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d040      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3e      	ldr	r2, [pc, #248]	@ (8005718 <DMA_CalcBaseAndBitshift+0x124>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d03b      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a3c      	ldr	r2, [pc, #240]	@ (800571c <DMA_CalcBaseAndBitshift+0x128>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d036      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a3b      	ldr	r2, [pc, #236]	@ (8005720 <DMA_CalcBaseAndBitshift+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d031      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a39      	ldr	r2, [pc, #228]	@ (8005724 <DMA_CalcBaseAndBitshift+0x130>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02c      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a38      	ldr	r2, [pc, #224]	@ (8005728 <DMA_CalcBaseAndBitshift+0x134>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d027      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a36      	ldr	r2, [pc, #216]	@ (800572c <DMA_CalcBaseAndBitshift+0x138>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d022      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a35      	ldr	r2, [pc, #212]	@ (8005730 <DMA_CalcBaseAndBitshift+0x13c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d01d      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a33      	ldr	r2, [pc, #204]	@ (8005734 <DMA_CalcBaseAndBitshift+0x140>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d018      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a32      	ldr	r2, [pc, #200]	@ (8005738 <DMA_CalcBaseAndBitshift+0x144>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a30      	ldr	r2, [pc, #192]	@ (800573c <DMA_CalcBaseAndBitshift+0x148>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00e      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2f      	ldr	r2, [pc, #188]	@ (8005740 <DMA_CalcBaseAndBitshift+0x14c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2d      	ldr	r2, [pc, #180]	@ (8005744 <DMA_CalcBaseAndBitshift+0x150>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <DMA_CalcBaseAndBitshift+0xa8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2c      	ldr	r2, [pc, #176]	@ (8005748 <DMA_CalcBaseAndBitshift+0x154>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d101      	bne.n	80056a0 <DMA_CalcBaseAndBitshift+0xac>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <DMA_CalcBaseAndBitshift+0xae>
 80056a0:	2300      	movs	r3, #0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d024      	beq.n	80056f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	3b10      	subs	r3, #16
 80056ae:	4a27      	ldr	r2, [pc, #156]	@ (800574c <DMA_CalcBaseAndBitshift+0x158>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	4a24      	ldr	r2, [pc, #144]	@ (8005750 <DMA_CalcBaseAndBitshift+0x15c>)
 80056c0:	5cd3      	ldrb	r3, [r2, r3]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d908      	bls.n	80056e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005754 <DMA_CalcBaseAndBitshift+0x160>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	1d1a      	adds	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80056de:	e00d      	b.n	80056fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <DMA_CalcBaseAndBitshift+0x160>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ee:	e005      	b.n	80056fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	40020010 	.word	0x40020010
 8005710:	40020028 	.word	0x40020028
 8005714:	40020040 	.word	0x40020040
 8005718:	40020058 	.word	0x40020058
 800571c:	40020070 	.word	0x40020070
 8005720:	40020088 	.word	0x40020088
 8005724:	400200a0 	.word	0x400200a0
 8005728:	400200b8 	.word	0x400200b8
 800572c:	40020410 	.word	0x40020410
 8005730:	40020428 	.word	0x40020428
 8005734:	40020440 	.word	0x40020440
 8005738:	40020458 	.word	0x40020458
 800573c:	40020470 	.word	0x40020470
 8005740:	40020488 	.word	0x40020488
 8005744:	400204a0 	.word	0x400204a0
 8005748:	400204b8 	.word	0x400204b8
 800574c:	aaaaaaab 	.word	0xaaaaaaab
 8005750:	080156c8 	.word	0x080156c8
 8005754:	fffffc00 	.word	0xfffffc00

08005758 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d120      	bne.n	80057ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	2b03      	cmp	r3, #3
 8005772:	d858      	bhi.n	8005826 <DMA_CheckFifoParam+0xce>
 8005774:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <DMA_CheckFifoParam+0x24>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	0800578d 	.word	0x0800578d
 8005780:	0800579f 	.word	0x0800579f
 8005784:	0800578d 	.word	0x0800578d
 8005788:	08005827 	.word	0x08005827
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d048      	beq.n	800582a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800579c:	e045      	b.n	800582a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057a6:	d142      	bne.n	800582e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057ac:	e03f      	b.n	800582e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b6:	d123      	bne.n	8005800 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d838      	bhi.n	8005832 <DMA_CheckFifoParam+0xda>
 80057c0:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <DMA_CheckFifoParam+0x70>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	080057d9 	.word	0x080057d9
 80057cc:	080057df 	.word	0x080057df
 80057d0:	080057d9 	.word	0x080057d9
 80057d4:	080057f1 	.word	0x080057f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
        break;
 80057dc:	e030      	b.n	8005840 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d025      	beq.n	8005836 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057ee:	e022      	b.n	8005836 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057f8:	d11f      	bne.n	800583a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057fe:	e01c      	b.n	800583a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	2b02      	cmp	r3, #2
 8005806:	d902      	bls.n	800580e <DMA_CheckFifoParam+0xb6>
 8005808:	2b03      	cmp	r3, #3
 800580a:	d003      	beq.n	8005814 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800580c:	e018      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
        break;
 8005812:	e015      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00e      	beq.n	800583e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
    break;
 8005824:	e00b      	b.n	800583e <DMA_CheckFifoParam+0xe6>
        break;
 8005826:	bf00      	nop
 8005828:	e00a      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
        break;
 800582a:	bf00      	nop
 800582c:	e008      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
        break;
 800582e:	bf00      	nop
 8005830:	e006      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
        break;
 8005832:	bf00      	nop
 8005834:	e004      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
        break;
 8005836:	bf00      	nop
 8005838:	e002      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
        break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <DMA_CheckFifoParam+0xe8>
    break;
 800583e:	bf00      	nop
    }
  }

  return status;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop

08005850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a38      	ldr	r2, [pc, #224]	@ (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d022      	beq.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a36      	ldr	r2, [pc, #216]	@ (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01d      	beq.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a35      	ldr	r2, [pc, #212]	@ (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d018      	beq.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a33      	ldr	r2, [pc, #204]	@ (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a32      	ldr	r2, [pc, #200]	@ (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a30      	ldr	r2, [pc, #192]	@ (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2f      	ldr	r2, [pc, #188]	@ (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d101      	bne.n	80058b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01a      	beq.n	80058ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	3b08      	subs	r3, #8
 80058c0:	4a28      	ldr	r2, [pc, #160]	@ (8005964 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4b26      	ldr	r3, [pc, #152]	@ (8005968 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a24      	ldr	r2, [pc, #144]	@ (800596c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	2201      	movs	r2, #1
 80058e6:	409a      	lsls	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058ec:	e024      	b.n	8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	3b10      	subs	r3, #16
 80058f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005970 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058f8:	fba2 2303 	umull	r2, r3, r2, r3
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4a1c      	ldr	r2, [pc, #112]	@ (8005974 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d806      	bhi.n	8005916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a1b      	ldr	r2, [pc, #108]	@ (8005978 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d902      	bls.n	8005916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3308      	adds	r3, #8
 8005914:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4b18      	ldr	r3, [pc, #96]	@ (800597c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	461a      	mov	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a16      	ldr	r2, [pc, #88]	@ (8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005928:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2201      	movs	r2, #1
 8005932:	409a      	lsls	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	58025408 	.word	0x58025408
 8005948:	5802541c 	.word	0x5802541c
 800594c:	58025430 	.word	0x58025430
 8005950:	58025444 	.word	0x58025444
 8005954:	58025458 	.word	0x58025458
 8005958:	5802546c 	.word	0x5802546c
 800595c:	58025480 	.word	0x58025480
 8005960:	58025494 	.word	0x58025494
 8005964:	cccccccd 	.word	0xcccccccd
 8005968:	16009600 	.word	0x16009600
 800596c:	58025880 	.word	0x58025880
 8005970:	aaaaaaab 	.word	0xaaaaaaab
 8005974:	400204b8 	.word	0x400204b8
 8005978:	4002040f 	.word	0x4002040f
 800597c:	10008200 	.word	0x10008200
 8005980:	40020880 	.word	0x40020880

08005984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d04a      	beq.n	8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d847      	bhi.n	8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a25      	ldr	r2, [pc, #148]	@ (8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a24      	ldr	r2, [pc, #144]	@ (8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01d      	beq.n	80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a22      	ldr	r2, [pc, #136]	@ (8005a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a21      	ldr	r2, [pc, #132]	@ (8005a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4b17      	ldr	r3, [pc, #92]	@ (8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	@ (8005a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a0e:	e009      	b.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a11      	ldr	r2, [pc, #68]	@ (8005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a22:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	2201      	movs	r2, #1
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	58025408 	.word	0x58025408
 8005a40:	5802541c 	.word	0x5802541c
 8005a44:	58025430 	.word	0x58025430
 8005a48:	58025444 	.word	0x58025444
 8005a4c:	58025458 	.word	0x58025458
 8005a50:	5802546c 	.word	0x5802546c
 8005a54:	58025480 	.word	0x58025480
 8005a58:	58025494 	.word	0x58025494
 8005a5c:	1600963f 	.word	0x1600963f
 8005a60:	58025940 	.word	0x58025940
 8005a64:	1000823f 	.word	0x1000823f
 8005a68:	40020940 	.word	0x40020940

08005a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b089      	sub	sp, #36	@ 0x24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a7a:	4b89      	ldr	r3, [pc, #548]	@ (8005ca0 <HAL_GPIO_Init+0x234>)
 8005a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a7e:	e194      	b.n	8005daa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	2101      	movs	r1, #1
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 8186 	beq.w	8005da4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d005      	beq.n	8005ab0 <HAL_GPIO_Init+0x44>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d130      	bne.n	8005b12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	2203      	movs	r2, #3
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 0201 	and.w	r2, r3, #1
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d017      	beq.n	8005b4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	2203      	movs	r2, #3
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d123      	bne.n	8005ba2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	08da      	lsrs	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3208      	adds	r2, #8
 8005b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	220f      	movs	r2, #15
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	08da      	lsrs	r2, r3, #3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3208      	adds	r2, #8
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	2203      	movs	r2, #3
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f003 0203 	and.w	r2, r3, #3
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80e0 	beq.w	8005da4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005be4:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca4 <HAL_GPIO_Init+0x238>)
 8005be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bea:	4a2e      	ldr	r2, [pc, #184]	@ (8005ca4 <HAL_GPIO_Init+0x238>)
 8005bec:	f043 0302 	orr.w	r3, r3, #2
 8005bf0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8005ca4 <HAL_GPIO_Init+0x238>)
 8005bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c02:	4a29      	ldr	r2, [pc, #164]	@ (8005ca8 <HAL_GPIO_Init+0x23c>)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	3302      	adds	r3, #2
 8005c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	220f      	movs	r2, #15
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a20      	ldr	r2, [pc, #128]	@ (8005cac <HAL_GPIO_Init+0x240>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d052      	beq.n	8005cd4 <HAL_GPIO_Init+0x268>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb0 <HAL_GPIO_Init+0x244>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d031      	beq.n	8005c9a <HAL_GPIO_Init+0x22e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb4 <HAL_GPIO_Init+0x248>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d02b      	beq.n	8005c96 <HAL_GPIO_Init+0x22a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb8 <HAL_GPIO_Init+0x24c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d025      	beq.n	8005c92 <HAL_GPIO_Init+0x226>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1c      	ldr	r2, [pc, #112]	@ (8005cbc <HAL_GPIO_Init+0x250>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01f      	beq.n	8005c8e <HAL_GPIO_Init+0x222>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc0 <HAL_GPIO_Init+0x254>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d019      	beq.n	8005c8a <HAL_GPIO_Init+0x21e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc4 <HAL_GPIO_Init+0x258>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_GPIO_Init+0x21a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <HAL_GPIO_Init+0x25c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00d      	beq.n	8005c82 <HAL_GPIO_Init+0x216>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <HAL_GPIO_Init+0x260>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <HAL_GPIO_Init+0x212>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a17      	ldr	r2, [pc, #92]	@ (8005cd0 <HAL_GPIO_Init+0x264>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <HAL_GPIO_Init+0x20e>
 8005c76:	2309      	movs	r3, #9
 8005c78:	e02d      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c7a:	230a      	movs	r3, #10
 8005c7c:	e02b      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c7e:	2308      	movs	r3, #8
 8005c80:	e029      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c82:	2307      	movs	r3, #7
 8005c84:	e027      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c86:	2306      	movs	r3, #6
 8005c88:	e025      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c8a:	2305      	movs	r3, #5
 8005c8c:	e023      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c8e:	2304      	movs	r3, #4
 8005c90:	e021      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c92:	2303      	movs	r3, #3
 8005c94:	e01f      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e01d      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e01b      	b.n	8005cd6 <HAL_GPIO_Init+0x26a>
 8005c9e:	bf00      	nop
 8005ca0:	58000080 	.word	0x58000080
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	58000400 	.word	0x58000400
 8005cac:	58020000 	.word	0x58020000
 8005cb0:	58020400 	.word	0x58020400
 8005cb4:	58020800 	.word	0x58020800
 8005cb8:	58020c00 	.word	0x58020c00
 8005cbc:	58021000 	.word	0x58021000
 8005cc0:	58021400 	.word	0x58021400
 8005cc4:	58021800 	.word	0x58021800
 8005cc8:	58021c00 	.word	0x58021c00
 8005ccc:	58022000 	.word	0x58022000
 8005cd0:	58022400 	.word	0x58022400
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	f002 0203 	and.w	r2, r2, #3
 8005cdc:	0092      	lsls	r2, r2, #2
 8005cde:	4093      	lsls	r3, r2
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ce6:	4938      	ldr	r1, [pc, #224]	@ (8005dc8 <HAL_GPIO_Init+0x35c>)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	089b      	lsrs	r3, r3, #2
 8005cec:	3302      	adds	r3, #2
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4013      	ands	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	43db      	mvns	r3, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4013      	ands	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	3301      	adds	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f47f ae63 	bne.w	8005a80 <HAL_GPIO_Init+0x14>
  }
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	3724      	adds	r7, #36	@ 0x24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	58000400 	.word	0x58000400

08005dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ddc:	787b      	ldrb	r3, [r7, #1]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005de2:	887a      	ldrh	r2, [r7, #2]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005de8:	e003      	b.n	8005df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dea:	887b      	ldrh	r3, [r7, #2]
 8005dec:	041a      	lsls	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	619a      	str	r2, [r3, #24]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e08b      	b.n	8005f2a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fb fb2e 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	@ 0x24
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d107      	bne.n	8005e7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	e006      	b.n	8005e88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d108      	bne.n	8005ea2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e9e:	605a      	str	r2, [r3, #4]
 8005ea0:	e007      	b.n	8005eb2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6859      	ldr	r1, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <HAL_I2C_Init+0x134>)
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ed0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	02008000 	.word	0x02008000

08005f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d138      	bne.n	8005fc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e032      	b.n	8005fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2224      	movs	r2, #36	@ 0x24
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6819      	ldr	r1, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e000      	b.n	8005fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
  }
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d139      	bne.n	8006058 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e033      	b.n	800605a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2224      	movs	r2, #36	@ 0x24
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006020:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b086      	sub	sp, #24
 800606a:	af02      	add	r7, sp, #8
 800606c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0fe      	b.n	8006276 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f00d ff17 	bl	8013ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2203      	movs	r2, #3
 8006096:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f007 fe59 	bl	800dd56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7c1a      	ldrb	r2, [r3, #16]
 80060ac:	f88d 2000 	strb.w	r2, [sp]
 80060b0:	3304      	adds	r3, #4
 80060b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060b4:	f007 fd2a 	bl	800db0c <USB_CoreInit>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e0d5      	b.n	8006276 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f007 fe51 	bl	800dd78 <USB_SetCurrentMode>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0c6      	b.n	8006276 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
 80060ec:	e04a      	b.n	8006184 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3315      	adds	r3, #21
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	3314      	adds	r3, #20
 8006112:	7bfa      	ldrb	r2, [r7, #15]
 8006114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006116:	7bfa      	ldrb	r2, [r7, #15]
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	b298      	uxth	r0, r3
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	332e      	adds	r3, #46	@ 0x2e
 800612a:	4602      	mov	r2, r0
 800612c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800612e:	7bfa      	ldrb	r2, [r7, #15]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3318      	adds	r3, #24
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006142:	7bfa      	ldrb	r2, [r7, #15]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	331c      	adds	r3, #28
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006156:	7bfa      	ldrb	r2, [r7, #15]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	3320      	adds	r3, #32
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3324      	adds	r3, #36	@ 0x24
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3301      	adds	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	791b      	ldrb	r3, [r3, #4]
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	429a      	cmp	r2, r3
 800618c:	d3af      	bcc.n	80060ee <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
 8006192:	e044      	b.n	800621e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006194:	7bfa      	ldrb	r2, [r7, #15]
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80061bc:	7bfa      	ldrb	r2, [r7, #15]
 80061be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80061d2:	2200      	movs	r2, #0
 80061d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061d6:	7bfa      	ldrb	r2, [r7, #15]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061ec:	7bfa      	ldrb	r2, [r7, #15]
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	4613      	mov	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006202:	7bfa      	ldrb	r2, [r7, #15]
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	3301      	adds	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	791b      	ldrb	r3, [r3, #4]
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	429a      	cmp	r2, r3
 8006226:	d3b5      	bcc.n	8006194 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7c1a      	ldrb	r2, [r3, #16]
 8006230:	f88d 2000 	strb.w	r2, [sp]
 8006234:	3304      	adds	r3, #4
 8006236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006238:	f007 fdea 	bl	800de10 <USB_DevInit>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e013      	b.n	8006276 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	7b1b      	ldrb	r3, [r3, #12]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d102      	bne.n	800626a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 f96f 	bl	8007548 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f008 fe2d 	bl	800eece <USB_DevDisconnect>

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_PCD_Start+0x1c>
 8006296:	2302      	movs	r3, #2
 8006298:	e022      	b.n	80062e0 <HAL_PCD_Start+0x62>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d105      	bne.n	80062c2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f007 fd34 	bl	800dd34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f008 fddb 	bl	800ee8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b08d      	sub	sp, #52	@ 0x34
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f008 fe99 	bl	800f036 <USB_GetMode>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 84b9 	bne.w	8006c7e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f008 fdfd 	bl	800ef10 <USB_ReadInterrupts>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 84af 	beq.w	8006c7c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f008 fdea 	bl	800ef10 <USB_ReadInterrupts>
 800633c:	4603      	mov	r3, r0
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d107      	bne.n	8006356 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f002 0202 	and.w	r2, r2, #2
 8006354:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f008 fdd8 	bl	800ef10 <USB_ReadInterrupts>
 8006360:	4603      	mov	r3, r0
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b10      	cmp	r3, #16
 8006368:	d161      	bne.n	800642e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0210 	bic.w	r2, r2, #16
 8006378:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f003 020f 	and.w	r2, r3, #15
 8006386:	4613      	mov	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	3304      	adds	r3, #4
 8006398:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80063a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063a4:	d124      	bne.n	80063f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d035      	beq.n	800641e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80063bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	6a38      	ldr	r0, [r7, #32]
 80063c6:	f008 fc0f 	bl	800ebe8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063d6:	441a      	add	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063e8:	441a      	add	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	615a      	str	r2, [r3, #20]
 80063ee:	e016      	b.n	800641e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80063f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80063fa:	d110      	bne.n	800641e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006402:	2208      	movs	r2, #8
 8006404:	4619      	mov	r1, r3
 8006406:	6a38      	ldr	r0, [r7, #32]
 8006408:	f008 fbee 	bl	800ebe8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	091b      	lsrs	r3, r3, #4
 8006414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006418:	441a      	add	r2, r3
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0210 	orr.w	r2, r2, #16
 800642c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f008 fd6c 	bl	800ef10 <USB_ReadInterrupts>
 8006438:	4603      	mov	r3, r0
 800643a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800643e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006442:	f040 80a7 	bne.w	8006594 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f008 fd71 	bl	800ef36 <USB_ReadDevAllOutEpInterrupt>
 8006454:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006456:	e099      	b.n	800658c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 808e 	beq.w	8006580 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f008 fd95 	bl	800ef9e <USB_ReadDevOutEPInterrupt>
 8006474:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00c      	beq.n	800649a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648c:	461a      	mov	r2, r3
 800648e:	2301      	movs	r3, #1
 8006490:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006492:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fed1 	bl	800723c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b0:	461a      	mov	r2, r3
 80064b2:	2308      	movs	r3, #8
 80064b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80064b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 ffa7 	bl	800740c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d008      	beq.n	80064da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d4:	461a      	mov	r2, r3
 80064d6:	2310      	movs	r3, #16
 80064d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d030      	beq.n	8006546 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ec:	2b80      	cmp	r3, #128	@ 0x80
 80064ee:	d109      	bne.n	8006504 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006502:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006506:	4613      	mov	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	3304      	adds	r3, #4
 8006518:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	78db      	ldrb	r3, [r3, #3]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d108      	bne.n	8006534 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f00d fdfc 	bl	801412c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006540:	461a      	mov	r2, r3
 8006542:	2302      	movs	r3, #2
 8006544:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655c:	461a      	mov	r2, r3
 800655e:	2320      	movs	r3, #32
 8006560:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800657e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	3301      	adds	r3, #1
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	f47f af62 	bne.w	8006458 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f008 fcb9 	bl	800ef10 <USB_ReadInterrupts>
 800659e:	4603      	mov	r3, r0
 80065a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065a8:	f040 80db 	bne.w	8006762 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f008 fcda 	bl	800ef6a <USB_ReadDevAllInEpInterrupt>
 80065b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80065bc:	e0cd      	b.n	800675a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80c2 	beq.w	800674e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f008 fd00 	bl	800efda <USB_ReadDevInEPInterrupt>
 80065da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d057      	beq.n	8006696 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	2201      	movs	r2, #1
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	43db      	mvns	r3, r3
 8006600:	69f9      	ldr	r1, [r7, #28]
 8006602:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006606:	4013      	ands	r3, r2
 8006608:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006616:	461a      	mov	r2, r3
 8006618:	2301      	movs	r3, #1
 800661a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	799b      	ldrb	r3, [r3, #6]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d132      	bne.n	800668a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006628:	4613      	mov	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	3320      	adds	r3, #32
 8006634:	6819      	ldr	r1, [r3, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4403      	add	r3, r0
 8006644:	331c      	adds	r3, #28
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4419      	add	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4403      	add	r3, r0
 8006658:	3320      	adds	r3, #32
 800665a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	2b00      	cmp	r3, #0
 8006660:	d113      	bne.n	800668a <HAL_PCD_IRQHandler+0x3a2>
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	3324      	adds	r3, #36	@ 0x24
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006682:	461a      	mov	r2, r3
 8006684:	2101      	movs	r1, #1
 8006686:	f008 fd09 	bl	800f09c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	b2db      	uxtb	r3, r3
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f00d fcc6 	bl	8014022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	461a      	mov	r2, r3
 80066ae:	2308      	movs	r3, #8
 80066b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80066bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c8:	461a      	mov	r2, r3
 80066ca:	2310      	movs	r3, #16
 80066cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	461a      	mov	r2, r3
 80066e6:	2340      	movs	r3, #64	@ 0x40
 80066e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d023      	beq.n	800673c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80066f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066f6:	6a38      	ldr	r0, [r7, #32]
 80066f8:	f007 fce8 	bl	800e0cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80066fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fe:	4613      	mov	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	3310      	adds	r3, #16
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	3304      	adds	r3, #4
 800670e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	78db      	ldrb	r3, [r3, #3]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d108      	bne.n	800672a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2200      	movs	r2, #0
 800671c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	b2db      	uxtb	r3, r3
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f00d fd13 	bl	8014150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006736:	461a      	mov	r2, r3
 8006738:	2302      	movs	r3, #2
 800673a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fcea 	bl	8007122 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	3301      	adds	r3, #1
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	f47f af2e 	bne.w	80065be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f008 fbd2 	bl	800ef10 <USB_ReadInterrupts>
 800676c:	4603      	mov	r3, r0
 800676e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006772:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006776:	d122      	bne.n	80067be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006792:	2b01      	cmp	r3, #1
 8006794:	d108      	bne.n	80067a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800679e:	2100      	movs	r1, #0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fef5 	bl	8007590 <HAL_PCDEx_LPM_Callback>
 80067a6:	e002      	b.n	80067ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f00d fcb1 	bl	8014110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695a      	ldr	r2, [r3, #20]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80067bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f008 fba4 	bl	800ef10 <USB_ReadInterrupts>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d2:	d112      	bne.n	80067fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d102      	bne.n	80067ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f00d fc6d 	bl	80140c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695a      	ldr	r2, [r3, #20]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80067f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f008 fb86 	bl	800ef10 <USB_ReadInterrupts>
 8006804:	4603      	mov	r3, r0
 8006806:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800680a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800680e:	d121      	bne.n	8006854 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800681e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006826:	2b00      	cmp	r3, #0
 8006828:	d111      	bne.n	800684e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006838:	089b      	lsrs	r3, r3, #2
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006844:	2101      	movs	r1, #1
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fea2 	bl	8007590 <HAL_PCDEx_LPM_Callback>
 800684c:	e002      	b.n	8006854 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f00d fc38 	bl	80140c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f008 fb59 	bl	800ef10 <USB_ReadInterrupts>
 800685e:	4603      	mov	r3, r0
 8006860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006868:	f040 80b7 	bne.w	80069da <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800687a:	f023 0301 	bic.w	r3, r3, #1
 800687e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2110      	movs	r1, #16
 8006886:	4618      	mov	r0, r3
 8006888:	f007 fc20 	bl	800e0cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006890:	e046      	b.n	8006920 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689e:	461a      	mov	r2, r3
 80068a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	69fa      	ldr	r2, [r7, #28]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006914:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006918:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800691a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691c:	3301      	adds	r3, #1
 800691e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	791b      	ldrb	r3, [r3, #4]
 8006924:	461a      	mov	r2, r3
 8006926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006928:	4293      	cmp	r3, r2
 800692a:	d3b2      	bcc.n	8006892 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800693a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800693e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7bdb      	ldrb	r3, [r3, #15]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d016      	beq.n	8006976 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006958:	f043 030b 	orr.w	r3, r3, #11
 800695c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800696e:	f043 030b 	orr.w	r3, r3, #11
 8006972:	6453      	str	r3, [r2, #68]	@ 0x44
 8006974:	e015      	b.n	80069a2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006984:	4619      	mov	r1, r3
 8006986:	f242 032b 	movw	r3, #8235	@ 0x202b
 800698a:	4313      	orrs	r3, r2
 800698c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800699c:	f043 030b 	orr.w	r3, r3, #11
 80069a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069b0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80069b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80069c4:	461a      	mov	r2, r3
 80069c6:	f008 fb69 	bl	800f09c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80069d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f008 fa96 	bl	800ef10 <USB_ReadInterrupts>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ee:	d123      	bne.n	8006a38 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f008 fb2d 	bl	800f054 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f007 fbdd 	bl	800e1be <USB_GetDevSpeed>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681c      	ldr	r4, [r3, #0]
 8006a10:	f001 fd9e 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 8006a14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f007 f8e7 	bl	800dbf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f00d fb25 	bl	8014072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f008 fa67 	bl	800ef10 <USB_ReadInterrupts>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d10a      	bne.n	8006a62 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f00d fb02 	bl	8014056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f002 0208 	and.w	r2, r2, #8
 8006a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f008 fa52 	bl	800ef10 <USB_ReadInterrupts>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	2b80      	cmp	r3, #128	@ 0x80
 8006a74:	d123      	bne.n	8006abe <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a82:	2301      	movs	r3, #1
 8006a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a86:	e014      	b.n	8006ab2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d105      	bne.n	8006aac <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fb0a 	bl	80070c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	3301      	adds	r3, #1
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	791b      	ldrb	r3, [r3, #4]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d3e4      	bcc.n	8006a88 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f008 fa24 	bl	800ef10 <USB_ReadInterrupts>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ad2:	d13c      	bne.n	8006b4e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad8:	e02b      	b.n	8006b32 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aee:	4613      	mov	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	3318      	adds	r3, #24
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d115      	bne.n	8006b2c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006b00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	da12      	bge.n	8006b2c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	3317      	adds	r3, #23
 8006b16:	2201      	movs	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 faca 	bl	80070c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	3301      	adds	r3, #1
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	791b      	ldrb	r3, [r3, #4]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d3cd      	bcc.n	8006ada <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695a      	ldr	r2, [r3, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f008 f9dc 	bl	800ef10 <USB_ReadInterrupts>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b62:	d156      	bne.n	8006c12 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b64:	2301      	movs	r3, #1
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b68:	e045      	b.n	8006bf6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7e:	4613      	mov	r3, r2
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d12e      	bne.n	8006bf0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	da2b      	bge.n	8006bf0 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	0c1a      	lsrs	r2, r3, #16
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006ba2:	4053      	eors	r3, r2
 8006ba4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d121      	bne.n	8006bf0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006be8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bec:	6053      	str	r3, [r2, #4]
            break;
 8006bee:	e008      	b.n	8006c02 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d3b3      	bcc.n	8006b6a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695a      	ldr	r2, [r3, #20]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f008 f97a 	bl	800ef10 <USB_ReadInterrupts>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c26:	d10a      	bne.n	8006c3e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f00d faa3 	bl	8014174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f008 f964 	bl	800ef10 <USB_ReadInterrupts>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d115      	bne.n	8006c7e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f00d fa93 	bl	8014190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6859      	ldr	r1, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	e000      	b.n	8006c7e <HAL_PCD_IRQHandler+0x996>
      return;
 8006c7c:	bf00      	nop
    }
  }
}
 8006c7e:	3734      	adds	r7, #52	@ 0x34
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd90      	pop	{r4, r7, pc}

08006c84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_PCD_SetAddress+0x1a>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e012      	b.n	8006cc4 <HAL_PCD_SetAddress+0x40>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	78fa      	ldrb	r2, [r7, #3]
 8006caa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f008 f8c3 	bl	800ee40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	70fb      	strb	r3, [r7, #3]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	803b      	strh	r3, [r7, #0]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	da0f      	bge.n	8006d12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	f003 020f 	and.w	r2, r3, #15
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	3310      	adds	r3, #16
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	3304      	adds	r3, #4
 8006d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	705a      	strb	r2, [r3, #1]
 8006d10:	e00f      	b.n	8006d32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	f003 020f 	and.w	r2, r3, #15
 8006d18:	4613      	mov	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	4413      	add	r3, r2
 8006d28:	3304      	adds	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006d3e:	883b      	ldrh	r3, [r7, #0]
 8006d40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	78ba      	ldrb	r2, [r7, #2]
 8006d4c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	785b      	ldrb	r3, [r3, #1]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d60:	78bb      	ldrb	r3, [r7, #2]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d102      	bne.n	8006d6c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_PCD_EP_Open+0xae>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e00e      	b.n	8006d98 <HAL_PCD_EP_Open+0xcc>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f007 fa3d 	bl	800e208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006d96:	7afb      	ldrb	r3, [r7, #11]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	da0f      	bge.n	8006dd4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	f003 020f 	and.w	r2, r3, #15
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	3310      	adds	r3, #16
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3304      	adds	r3, #4
 8006dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	705a      	strb	r2, [r3, #1]
 8006dd2:	e00f      	b.n	8006df4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	f003 020f 	and.w	r2, r3, #15
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4413      	add	r3, r2
 8006dea:	3304      	adds	r3, #4
 8006dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_PCD_EP_Close+0x6e>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e00e      	b.n	8006e2c <HAL_PCD_EP_Close+0x8c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f007 fa7b 	bl	800e318 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	460b      	mov	r3, r1
 8006e42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	f003 020f 	and.w	r2, r3, #15
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2200      	movs	r2, #0
 8006e74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	799b      	ldrb	r3, [r3, #6]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d102      	bne.n	8006e90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	799b      	ldrb	r3, [r3, #6]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	f007 fb18 	bl	800e4d0 <USB_EPStartXfer>

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006ecc:	681b      	ldr	r3, [r3, #0]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	f003 020f 	and.w	r2, r3, #15
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	3310      	adds	r3, #16
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	3304      	adds	r3, #4
 8006f00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2200      	movs	r2, #0
 8006f12:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2201      	movs	r2, #1
 8006f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f1a:	7afb      	ldrb	r3, [r7, #11]
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	799b      	ldrb	r3, [r3, #6]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d102      	bne.n	8006f34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	799b      	ldrb	r3, [r3, #6]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6979      	ldr	r1, [r7, #20]
 8006f40:	f007 fac6 	bl	800e4d0 <USB_EPStartXfer>

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7912      	ldrb	r2, [r2, #4]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e04f      	b.n	800700c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da0f      	bge.n	8006f94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	f003 020f 	and.w	r2, r3, #15
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	3310      	adds	r3, #16
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	3304      	adds	r3, #4
 8006f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	705a      	strb	r2, [r3, #1]
 8006f92:	e00d      	b.n	8006fb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f94:	78fa      	ldrb	r2, [r7, #3]
 8006f96:	4613      	mov	r3, r2
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_PCD_EP_SetStall+0x82>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e01d      	b.n	800700c <HAL_PCD_EP_SetStall+0xbe>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f007 fe5a 	bl	800ec98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d109      	bne.n	8007002 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7999      	ldrb	r1, [r3, #6]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f008 f84d 	bl	800f09c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	7912      	ldrb	r2, [r2, #4]
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e042      	b.n	80070b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007036:	2b00      	cmp	r3, #0
 8007038:	da0f      	bge.n	800705a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 020f 	and.w	r2, r3, #15
 8007040:	4613      	mov	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	3310      	adds	r3, #16
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	3304      	adds	r3, #4
 8007050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	705a      	strb	r2, [r3, #1]
 8007058:	e00f      	b.n	800707a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	f003 020f 	and.w	r2, r3, #15
 8007060:	4613      	mov	r3, r2
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	3304      	adds	r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	b2da      	uxtb	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_PCD_EP_ClrStall+0x86>
 8007096:	2302      	movs	r3, #2
 8007098:	e00e      	b.n	80070b8 <HAL_PCD_EP_ClrStall+0xa4>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f007 fe63 	bl	800ed74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80070cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da0c      	bge.n	80070ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	f003 020f 	and.w	r2, r3, #15
 80070da:	4613      	mov	r3, r2
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	3310      	adds	r3, #16
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	4413      	add	r3, r2
 80070e8:	3304      	adds	r3, #4
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e00c      	b.n	8007108 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	3304      	adds	r3, #4
 8007106:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	4618      	mov	r0, r3
 8007110:	f007 fc82 	bl	800ea18 <USB_EPStopXfer>
 8007114:	4603      	mov	r3, r0
 8007116:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007118:	7afb      	ldrb	r3, [r7, #11]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b08a      	sub	sp, #40	@ 0x28
 8007126:	af02      	add	r7, sp, #8
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4613      	mov	r3, r2
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	3310      	adds	r3, #16
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	4413      	add	r3, r2
 8007146:	3304      	adds	r3, #4
 8007148:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	695a      	ldr	r2, [r3, #20]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d901      	bls.n	800715a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e06b      	b.n	8007232 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	429a      	cmp	r2, r3
 800716e:	d902      	bls.n	8007176 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3303      	adds	r3, #3
 800717a:	089b      	lsrs	r3, r3, #2
 800717c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800717e:	e02a      	b.n	80071d6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	429a      	cmp	r2, r3
 8007194:	d902      	bls.n	800719c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	3303      	adds	r3, #3
 80071a0:	089b      	lsrs	r3, r3, #2
 80071a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68d9      	ldr	r1, [r3, #12]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4603      	mov	r3, r0
 80071b8:	6978      	ldr	r0, [r7, #20]
 80071ba:	f007 fcd7 	bl	800eb6c <USB_WritePacket>

    ep->xfer_buff  += len;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	441a      	add	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	695a      	ldr	r2, [r3, #20]
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	441a      	add	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d809      	bhi.n	8007200 <PCD_WriteEmptyTxFifo+0xde>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d203      	bcs.n	8007200 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1bf      	bne.n	8007180 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	429a      	cmp	r2, r3
 800720a:	d811      	bhi.n	8007230 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	2201      	movs	r2, #1
 8007214:	fa02 f303 	lsl.w	r3, r2, r3
 8007218:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	43db      	mvns	r3, r3
 8007226:	6939      	ldr	r1, [r7, #16]
 8007228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800722c:	4013      	ands	r3, r2
 800722e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	333c      	adds	r3, #60	@ 0x3c
 8007254:	3304      	adds	r3, #4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	799b      	ldrb	r3, [r3, #6]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d17b      	bne.n	800736a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d015      	beq.n	80072a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	4a61      	ldr	r2, [pc, #388]	@ (8007404 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	f240 80b9 	bls.w	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80b3 	beq.w	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729e:	461a      	mov	r2, r3
 80072a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a4:	6093      	str	r3, [r2, #8]
 80072a6:	e0a7      	b.n	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072be:	461a      	mov	r2, r3
 80072c0:	2320      	movs	r3, #32
 80072c2:	6093      	str	r3, [r2, #8]
 80072c4:	e098      	b.n	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 8093 	bne.w	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007404 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d90f      	bls.n	80072fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00a      	beq.n	80072fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	461a      	mov	r2, r3
 80072f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f6:	6093      	str	r3, [r2, #8]
 80072f8:	e07e      	b.n	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	4413      	add	r3, r2
 800730c:	3304      	adds	r3, #4
 800730e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	0159      	lsls	r1, r3, #5
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	440b      	add	r3, r1
 800731c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007326:	1ad2      	subs	r2, r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d114      	bne.n	800735c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007344:	461a      	mov	r2, r3
 8007346:	2101      	movs	r1, #1
 8007348:	f007 fea8 	bl	800f09c <USB_EP0_OutStart>
 800734c:	e006      	b.n	800735c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f00c fe42 	bl	8013fec <HAL_PCD_DataOutStageCallback>
 8007368:	e046      	b.n	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4a26      	ldr	r2, [pc, #152]	@ (8007408 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d124      	bne.n	80073bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007388:	461a      	mov	r2, r3
 800738a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800738e:	6093      	str	r3, [r2, #8]
 8007390:	e032      	b.n	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a8:	461a      	mov	r2, r3
 80073aa:	2320      	movs	r3, #32
 80073ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f00c fe19 	bl	8013fec <HAL_PCD_DataOutStageCallback>
 80073ba:	e01d      	b.n	80073f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d114      	bne.n	80073ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073e4:	461a      	mov	r2, r3
 80073e6:	2100      	movs	r1, #0
 80073e8:	f007 fe58 	bl	800f09c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f00c fdfa 	bl	8013fec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	4f54300a 	.word	0x4f54300a
 8007408:	4f54310a 	.word	0x4f54310a

0800740c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	333c      	adds	r3, #60	@ 0x3c
 8007424:	3304      	adds	r3, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4a15      	ldr	r2, [pc, #84]	@ (8007494 <PCD_EP_OutSetupPacket_int+0x88>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d90e      	bls.n	8007460 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007448:	2b00      	cmp	r3, #0
 800744a:	d009      	beq.n	8007460 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007458:	461a      	mov	r2, r3
 800745a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800745e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f00c fdb1 	bl	8013fc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4a0a      	ldr	r2, [pc, #40]	@ (8007494 <PCD_EP_OutSetupPacket_int+0x88>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d90c      	bls.n	8007488 <PCD_EP_OutSetupPacket_int+0x7c>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	799b      	ldrb	r3, [r3, #6]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d108      	bne.n	8007488 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007480:	461a      	mov	r2, r3
 8007482:	2101      	movs	r1, #1
 8007484:	f007 fe0a 	bl	800f09c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	4f54300a 	.word	0x4f54300a

08007498 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
 80074a4:	4613      	mov	r3, r2
 80074a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d107      	bne.n	80074c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80074b6:	883b      	ldrh	r3, [r7, #0]
 80074b8:	0419      	lsls	r1, r3, #16
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80074c4:	e028      	b.n	8007518 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	4413      	add	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	e00d      	b.n	80074f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	3340      	adds	r3, #64	@ 0x40
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	0c1b      	lsrs	r3, r3, #16
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4413      	add	r3, r2
 80074ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	3301      	adds	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
 80074f6:	7bfa      	ldrb	r2, [r7, #15]
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3ec      	bcc.n	80074da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007500:	883b      	ldrh	r3, [r7, #0]
 8007502:	0418      	lsls	r0, r3, #16
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6819      	ldr	r1, [r3, #0]
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	3b01      	subs	r3, #1
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	4302      	orrs	r2, r0
 8007510:	3340      	adds	r3, #64	@ 0x40
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	887a      	ldrh	r2, [r7, #2]
 8007538:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007576:	4b05      	ldr	r3, [pc, #20]	@ (800758c <HAL_PCDEx_ActivateLPM+0x44>)
 8007578:	4313      	orrs	r3, r2
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	10000003 	.word	0x10000003

08007590 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80075b0:	4b19      	ldr	r3, [pc, #100]	@ (8007618 <HAL_PWREx_ConfigSupply+0x70>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d00a      	beq.n	80075d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075bc:	4b16      	ldr	r3, [pc, #88]	@ (8007618 <HAL_PWREx_ConfigSupply+0x70>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d001      	beq.n	80075ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e01f      	b.n	800760e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e01d      	b.n	800760e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80075d2:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <HAL_PWREx_ConfigSupply+0x70>)
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f023 0207 	bic.w	r2, r3, #7
 80075da:	490f      	ldr	r1, [pc, #60]	@ (8007618 <HAL_PWREx_ConfigSupply+0x70>)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80075e2:	f7fa fea1 	bl	8002328 <HAL_GetTick>
 80075e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075e8:	e009      	b.n	80075fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075ea:	f7fa fe9d 	bl	8002328 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075f8:	d901      	bls.n	80075fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e007      	b.n	800760e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075fe:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <HAL_PWREx_ConfigSupply+0x70>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800760a:	d1ee      	bne.n	80075ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	58024800 	.word	0x58024800

0800761c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	4a04      	ldr	r2, [pc, #16]	@ (8007638 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800762a:	60d3      	str	r3, [r2, #12]
}
 800762c:	bf00      	nop
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	58024800 	.word	0x58024800

0800763c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08c      	sub	sp, #48	@ 0x30
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d102      	bne.n	8007650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f000 bc48 	b.w	8007ee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8088 	beq.w	800776e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800765e:	4b99      	ldr	r3, [pc, #612]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007668:	4b96      	ldr	r3, [pc, #600]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800766e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007670:	2b10      	cmp	r3, #16
 8007672:	d007      	beq.n	8007684 <HAL_RCC_OscConfig+0x48>
 8007674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007676:	2b18      	cmp	r3, #24
 8007678:	d111      	bne.n	800769e <HAL_RCC_OscConfig+0x62>
 800767a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767c:	f003 0303 	and.w	r3, r3, #3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d10c      	bne.n	800769e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007684:	4b8f      	ldr	r3, [pc, #572]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d06d      	beq.n	800776c <HAL_RCC_OscConfig+0x130>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d169      	bne.n	800776c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	f000 bc21 	b.w	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a6:	d106      	bne.n	80076b6 <HAL_RCC_OscConfig+0x7a>
 80076a8:	4b86      	ldr	r3, [pc, #536]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a85      	ldr	r2, [pc, #532]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	e02e      	b.n	8007714 <HAL_RCC_OscConfig+0xd8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x9c>
 80076be:	4b81      	ldr	r3, [pc, #516]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a80      	ldr	r2, [pc, #512]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	4b7e      	ldr	r3, [pc, #504]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a7d      	ldr	r2, [pc, #500]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	e01d      	b.n	8007714 <HAL_RCC_OscConfig+0xd8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076e0:	d10c      	bne.n	80076fc <HAL_RCC_OscConfig+0xc0>
 80076e2:	4b78      	ldr	r3, [pc, #480]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a77      	ldr	r2, [pc, #476]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	4b75      	ldr	r3, [pc, #468]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a74      	ldr	r2, [pc, #464]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e00b      	b.n	8007714 <HAL_RCC_OscConfig+0xd8>
 80076fc:	4b71      	ldr	r3, [pc, #452]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a70      	ldr	r2, [pc, #448]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	4b6e      	ldr	r3, [pc, #440]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a6d      	ldr	r2, [pc, #436]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800770e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d013      	beq.n	8007744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fa fe04 	bl	8002328 <HAL_GetTick>
 8007720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007724:	f7fa fe00 	bl	8002328 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b64      	cmp	r3, #100	@ 0x64
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e3d4      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007736:	4b63      	ldr	r3, [pc, #396]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0f0      	beq.n	8007724 <HAL_RCC_OscConfig+0xe8>
 8007742:	e014      	b.n	800776e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007744:	f7fa fdf0 	bl	8002328 <HAL_GetTick>
 8007748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800774c:	f7fa fdec 	bl	8002328 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b64      	cmp	r3, #100	@ 0x64
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e3c0      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800775e:	4b59      	ldr	r3, [pc, #356]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <HAL_RCC_OscConfig+0x110>
 800776a:	e000      	b.n	800776e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800776c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 80ca 	beq.w	8007910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800777c:	4b51      	ldr	r3, [pc, #324]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007786:	4b4f      	ldr	r3, [pc, #316]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <HAL_RCC_OscConfig+0x166>
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	2b18      	cmp	r3, #24
 8007796:	d156      	bne.n	8007846 <HAL_RCC_OscConfig+0x20a>
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d151      	bne.n	8007846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077a2:	4b48      	ldr	r3, [pc, #288]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d005      	beq.n	80077ba <HAL_RCC_OscConfig+0x17e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e392      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077ba:	4b42      	ldr	r3, [pc, #264]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f023 0219 	bic.w	r2, r3, #25
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	493f      	ldr	r1, [pc, #252]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077cc:	f7fa fdac 	bl	8002328 <HAL_GetTick>
 80077d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d4:	f7fa fda8 	bl	8002328 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e37c      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077e6:	4b37      	ldr	r3, [pc, #220]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f0      	beq.n	80077d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077f2:	f7fa fdc9 	bl	8002388 <HAL_GetREVID>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d817      	bhi.n	8007830 <HAL_RCC_OscConfig+0x1f4>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b40      	cmp	r3, #64	@ 0x40
 8007806:	d108      	bne.n	800781a <HAL_RCC_OscConfig+0x1de>
 8007808:	4b2e      	ldr	r3, [pc, #184]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007810:	4a2c      	ldr	r2, [pc, #176]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007818:	e07a      	b.n	8007910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800781a:	4b2a      	ldr	r3, [pc, #168]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	031b      	lsls	r3, r3, #12
 8007828:	4926      	ldr	r1, [pc, #152]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800782a:	4313      	orrs	r3, r2
 800782c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800782e:	e06f      	b.n	8007910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007830:	4b24      	ldr	r3, [pc, #144]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	061b      	lsls	r3, r3, #24
 800783e:	4921      	ldr	r1, [pc, #132]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007840:	4313      	orrs	r3, r2
 8007842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007844:	e064      	b.n	8007910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d047      	beq.n	80078de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800784e:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f023 0219 	bic.w	r2, r3, #25
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	491a      	ldr	r1, [pc, #104]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800785c:	4313      	orrs	r3, r2
 800785e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007860:	f7fa fd62 	bl	8002328 <HAL_GetTick>
 8007864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007868:	f7fa fd5e 	bl	8002328 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e332      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800787a:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0f0      	beq.n	8007868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007886:	f7fa fd7f 	bl	8002388 <HAL_GetREVID>
 800788a:	4603      	mov	r3, r0
 800788c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007890:	4293      	cmp	r3, r2
 8007892:	d819      	bhi.n	80078c8 <HAL_RCC_OscConfig+0x28c>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b40      	cmp	r3, #64	@ 0x40
 800789a:	d108      	bne.n	80078ae <HAL_RCC_OscConfig+0x272>
 800789c:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80078a4:	4a07      	ldr	r2, [pc, #28]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80078a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078aa:	6053      	str	r3, [r2, #4]
 80078ac:	e030      	b.n	8007910 <HAL_RCC_OscConfig+0x2d4>
 80078ae:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	031b      	lsls	r3, r3, #12
 80078bc:	4901      	ldr	r1, [pc, #4]	@ (80078c4 <HAL_RCC_OscConfig+0x288>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	604b      	str	r3, [r1, #4]
 80078c2:	e025      	b.n	8007910 <HAL_RCC_OscConfig+0x2d4>
 80078c4:	58024400 	.word	0x58024400
 80078c8:	4b9a      	ldr	r3, [pc, #616]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	061b      	lsls	r3, r3, #24
 80078d6:	4997      	ldr	r1, [pc, #604]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	604b      	str	r3, [r1, #4]
 80078dc:	e018      	b.n	8007910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078de:	4b95      	ldr	r3, [pc, #596]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a94      	ldr	r2, [pc, #592]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ea:	f7fa fd1d 	bl	8002328 <HAL_GetTick>
 80078ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078f0:	e008      	b.n	8007904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078f2:	f7fa fd19 	bl	8002328 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d901      	bls.n	8007904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e2ed      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007904:	4b8b      	ldr	r3, [pc, #556]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f0      	bne.n	80078f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80a9 	beq.w	8007a70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800791e:	4b85      	ldr	r3, [pc, #532]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007928:	4b82      	ldr	r3, [pc, #520]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b08      	cmp	r3, #8
 8007932:	d007      	beq.n	8007944 <HAL_RCC_OscConfig+0x308>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b18      	cmp	r3, #24
 8007938:	d13a      	bne.n	80079b0 <HAL_RCC_OscConfig+0x374>
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d135      	bne.n	80079b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007944:	4b7b      	ldr	r3, [pc, #492]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <HAL_RCC_OscConfig+0x320>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	2b80      	cmp	r3, #128	@ 0x80
 8007956:	d001      	beq.n	800795c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e2c1      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800795c:	f7fa fd14 	bl	8002388 <HAL_GetREVID>
 8007960:	4603      	mov	r3, r0
 8007962:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007966:	4293      	cmp	r3, r2
 8007968:	d817      	bhi.n	800799a <HAL_RCC_OscConfig+0x35e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	2b20      	cmp	r3, #32
 8007970:	d108      	bne.n	8007984 <HAL_RCC_OscConfig+0x348>
 8007972:	4b70      	ldr	r3, [pc, #448]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800797a:	4a6e      	ldr	r2, [pc, #440]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 800797c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007982:	e075      	b.n	8007a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007984:	4b6b      	ldr	r3, [pc, #428]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	069b      	lsls	r3, r3, #26
 8007992:	4968      	ldr	r1, [pc, #416]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007994:	4313      	orrs	r3, r2
 8007996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007998:	e06a      	b.n	8007a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800799a:	4b66      	ldr	r3, [pc, #408]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	061b      	lsls	r3, r3, #24
 80079a8:	4962      	ldr	r1, [pc, #392]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079ae:	e05f      	b.n	8007a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d042      	beq.n	8007a3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80079b8:	4b5e      	ldr	r3, [pc, #376]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a5d      	ldr	r2, [pc, #372]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80079be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c4:	f7fa fcb0 	bl	8002328 <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80079cc:	f7fa fcac 	bl	8002328 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e280      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079de:	4b55      	ldr	r3, [pc, #340]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079ea:	f7fa fccd 	bl	8002388 <HAL_GetREVID>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d817      	bhi.n	8007a28 <HAL_RCC_OscConfig+0x3ec>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d108      	bne.n	8007a12 <HAL_RCC_OscConfig+0x3d6>
 8007a00:	4b4c      	ldr	r3, [pc, #304]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007a08:	4a4a      	ldr	r2, [pc, #296]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a0e:	6053      	str	r3, [r2, #4]
 8007a10:	e02e      	b.n	8007a70 <HAL_RCC_OscConfig+0x434>
 8007a12:	4b48      	ldr	r3, [pc, #288]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	069b      	lsls	r3, r3, #26
 8007a20:	4944      	ldr	r1, [pc, #272]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	604b      	str	r3, [r1, #4]
 8007a26:	e023      	b.n	8007a70 <HAL_RCC_OscConfig+0x434>
 8007a28:	4b42      	ldr	r3, [pc, #264]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	493f      	ldr	r1, [pc, #252]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60cb      	str	r3, [r1, #12]
 8007a3c:	e018      	b.n	8007a70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a3c      	ldr	r2, [pc, #240]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4a:	f7fa fc6d 	bl	8002328 <HAL_GetTick>
 8007a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a50:	e008      	b.n	8007a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a52:	f7fa fc69 	bl	8002328 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d901      	bls.n	8007a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e23d      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a64:	4b33      	ldr	r3, [pc, #204]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f0      	bne.n	8007a52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d036      	beq.n	8007aea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d019      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a84:	4b2b      	ldr	r3, [pc, #172]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a88:	4a2a      	ldr	r2, [pc, #168]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a90:	f7fa fc4a 	bl	8002328 <HAL_GetTick>
 8007a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a98:	f7fa fc46 	bl	8002328 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e21a      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007aaa:	4b22      	ldr	r3, [pc, #136]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <HAL_RCC_OscConfig+0x45c>
 8007ab6:	e018      	b.n	8007aea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007abc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fa fc30 	bl	8002328 <HAL_GetTick>
 8007ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007acc:	f7fa fc2c 	bl	8002328 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e200      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ade:	4b15      	ldr	r3, [pc, #84]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1f0      	bne.n	8007acc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d039      	beq.n	8007b6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01c      	beq.n	8007b38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007afe:	4b0d      	ldr	r3, [pc, #52]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a0c      	ldr	r2, [pc, #48]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b0a:	f7fa fc0d 	bl	8002328 <HAL_GetTick>
 8007b0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b12:	f7fa fc09 	bl	8002328 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e1dd      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b24:	4b03      	ldr	r3, [pc, #12]	@ (8007b34 <HAL_RCC_OscConfig+0x4f8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f0      	beq.n	8007b12 <HAL_RCC_OscConfig+0x4d6>
 8007b30:	e01b      	b.n	8007b6a <HAL_RCC_OscConfig+0x52e>
 8007b32:	bf00      	nop
 8007b34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b38:	4b9b      	ldr	r3, [pc, #620]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a9a      	ldr	r2, [pc, #616]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b44:	f7fa fbf0 	bl	8002328 <HAL_GetTick>
 8007b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b4c:	f7fa fbec 	bl	8002328 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e1c0      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b5e:	4b92      	ldr	r3, [pc, #584]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f0      	bne.n	8007b4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8081 	beq.w	8007c7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b78:	4b8c      	ldr	r3, [pc, #560]	@ (8007dac <HAL_RCC_OscConfig+0x770>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a8b      	ldr	r2, [pc, #556]	@ (8007dac <HAL_RCC_OscConfig+0x770>)
 8007b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b84:	f7fa fbd0 	bl	8002328 <HAL_GetTick>
 8007b88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b8c:	f7fa fbcc 	bl	8002328 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	@ 0x64
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e1a0      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b9e:	4b83      	ldr	r3, [pc, #524]	@ (8007dac <HAL_RCC_OscConfig+0x770>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0f0      	beq.n	8007b8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d106      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x584>
 8007bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bb8:	f043 0301 	orr.w	r3, r3, #1
 8007bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bbe:	e02d      	b.n	8007c1c <HAL_RCC_OscConfig+0x5e0>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10c      	bne.n	8007be2 <HAL_RCC_OscConfig+0x5a6>
 8007bc8:	4b77      	ldr	r3, [pc, #476]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bcc:	4a76      	ldr	r2, [pc, #472]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bd4:	4b74      	ldr	r3, [pc, #464]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd8:	4a73      	ldr	r2, [pc, #460]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bda:	f023 0304 	bic.w	r3, r3, #4
 8007bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8007be0:	e01c      	b.n	8007c1c <HAL_RCC_OscConfig+0x5e0>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d10c      	bne.n	8007c04 <HAL_RCC_OscConfig+0x5c8>
 8007bea:	4b6f      	ldr	r3, [pc, #444]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bee:	4a6e      	ldr	r2, [pc, #440]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bf0:	f043 0304 	orr.w	r3, r3, #4
 8007bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfa:	4a6b      	ldr	r2, [pc, #428]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007bfc:	f043 0301 	orr.w	r3, r3, #1
 8007c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c02:	e00b      	b.n	8007c1c <HAL_RCC_OscConfig+0x5e0>
 8007c04:	4b68      	ldr	r3, [pc, #416]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c08:	4a67      	ldr	r2, [pc, #412]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c0a:	f023 0301 	bic.w	r3, r3, #1
 8007c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c10:	4b65      	ldr	r3, [pc, #404]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c14:	4a64      	ldr	r2, [pc, #400]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c16:	f023 0304 	bic.w	r3, r3, #4
 8007c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d015      	beq.n	8007c50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c24:	f7fa fb80 	bl	8002328 <HAL_GetTick>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c2a:	e00a      	b.n	8007c42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c2c:	f7fa fb7c 	bl	8002328 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e14e      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c42:	4b59      	ldr	r3, [pc, #356]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0ee      	beq.n	8007c2c <HAL_RCC_OscConfig+0x5f0>
 8007c4e:	e014      	b.n	8007c7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c50:	f7fa fb6a 	bl	8002328 <HAL_GetTick>
 8007c54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c56:	e00a      	b.n	8007c6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c58:	f7fa fb66 	bl	8002328 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e138      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1ee      	bne.n	8007c58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 812d 	beq.w	8007ede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007c84:	4b48      	ldr	r3, [pc, #288]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c8c:	2b18      	cmp	r3, #24
 8007c8e:	f000 80bd 	beq.w	8007e0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	f040 809e 	bne.w	8007dd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c9c:	4b42      	ldr	r3, [pc, #264]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a41      	ldr	r2, [pc, #260]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca8:	f7fa fb3e 	bl	8002328 <HAL_GetTick>
 8007cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cb0:	f7fa fb3a 	bl	8002328 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e10e      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cc2:	4b39      	ldr	r3, [pc, #228]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f0      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cce:	4b36      	ldr	r3, [pc, #216]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cd2:	4b37      	ldr	r3, [pc, #220]	@ (8007db0 <HAL_RCC_OscConfig+0x774>)
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cde:	0112      	lsls	r2, r2, #4
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	4931      	ldr	r1, [pc, #196]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cec:	3b01      	subs	r3, #1
 8007cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	025b      	lsls	r3, r3, #9
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d02:	3b01      	subs	r3, #1
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d10:	3b01      	subs	r3, #1
 8007d12:	061b      	lsls	r3, r3, #24
 8007d14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d18:	4923      	ldr	r1, [pc, #140]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007d1e:	4b22      	ldr	r3, [pc, #136]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d22:	4a21      	ldr	r2, [pc, #132]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d2e:	4b21      	ldr	r3, [pc, #132]	@ (8007db4 <HAL_RCC_OscConfig+0x778>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007d36:	00d2      	lsls	r2, r2, #3
 8007d38:	491b      	ldr	r1, [pc, #108]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	f023 020c 	bic.w	r2, r3, #12
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4a:	4917      	ldr	r1, [pc, #92]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d50:	4b15      	ldr	r3, [pc, #84]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d54:	f023 0202 	bic.w	r2, r3, #2
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5c:	4912      	ldr	r1, [pc, #72]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d62:	4b11      	ldr	r3, [pc, #68]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d66:	4a10      	ldr	r2, [pc, #64]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d72:	4a0d      	ldr	r2, [pc, #52]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007d86:	4b08      	ldr	r3, [pc, #32]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8a:	4a07      	ldr	r2, [pc, #28]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d8c:	f043 0301 	orr.w	r3, r3, #1
 8007d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d92:	4b05      	ldr	r3, [pc, #20]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a04      	ldr	r2, [pc, #16]	@ (8007da8 <HAL_RCC_OscConfig+0x76c>)
 8007d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9e:	f7fa fac3 	bl	8002328 <HAL_GetTick>
 8007da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007da4:	e011      	b.n	8007dca <HAL_RCC_OscConfig+0x78e>
 8007da6:	bf00      	nop
 8007da8:	58024400 	.word	0x58024400
 8007dac:	58024800 	.word	0x58024800
 8007db0:	fffffc0c 	.word	0xfffffc0c
 8007db4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db8:	f7fa fab6 	bl	8002328 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e08a      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dca:	4b47      	ldr	r3, [pc, #284]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0f0      	beq.n	8007db8 <HAL_RCC_OscConfig+0x77c>
 8007dd6:	e082      	b.n	8007ede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd8:	4b43      	ldr	r3, [pc, #268]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a42      	ldr	r2, [pc, #264]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de4:	f7fa faa0 	bl	8002328 <HAL_GetTick>
 8007de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dec:	f7fa fa9c 	bl	8002328 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e070      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0x7b0>
 8007e0a:	e068      	b.n	8007ede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e0c:	4b36      	ldr	r3, [pc, #216]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e12:	4b35      	ldr	r3, [pc, #212]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d031      	beq.n	8007e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f003 0203 	and.w	r2, r3, #3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d12a      	bne.n	8007e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	091b      	lsrs	r3, r3, #4
 8007e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d122      	bne.n	8007e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d11a      	bne.n	8007e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	0a5b      	lsrs	r3, r3, #9
 8007e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d111      	bne.n	8007e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d108      	bne.n	8007e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	0e1b      	lsrs	r3, r3, #24
 8007e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d001      	beq.n	8007e88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e02b      	b.n	8007ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007e88:	4b17      	ldr	r3, [pc, #92]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8c:	08db      	lsrs	r3, r3, #3
 8007e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d01f      	beq.n	8007ede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007e9e:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	4a11      	ldr	r2, [pc, #68]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007ea4:	f023 0301 	bic.w	r3, r3, #1
 8007ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007eaa:	f7fa fa3d 	bl	8002328 <HAL_GetTick>
 8007eae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007eb0:	bf00      	nop
 8007eb2:	f7fa fa39 	bl	8002328 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d0f9      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8007eec <HAL_RCC_OscConfig+0x8b0>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007eca:	00d2      	lsls	r2, r2, #3
 8007ecc:	4906      	ldr	r1, [pc, #24]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007ed2:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed6:	4a04      	ldr	r2, [pc, #16]	@ (8007ee8 <HAL_RCC_OscConfig+0x8ac>)
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3730      	adds	r7, #48	@ 0x30
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	ffff0007 	.word	0xffff0007

08007ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e19c      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f04:	4b8a      	ldr	r3, [pc, #552]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d910      	bls.n	8007f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f12:	4b87      	ldr	r3, [pc, #540]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f023 020f 	bic.w	r2, r3, #15
 8007f1a:	4985      	ldr	r1, [pc, #532]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f22:	4b83      	ldr	r3, [pc, #524]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d001      	beq.n	8007f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e184      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d010      	beq.n	8007f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	4b7b      	ldr	r3, [pc, #492]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d908      	bls.n	8007f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f50:	4b78      	ldr	r3, [pc, #480]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	4975      	ldr	r1, [pc, #468]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d010      	beq.n	8007f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	4b70      	ldr	r3, [pc, #448]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d908      	bls.n	8007f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	496a      	ldr	r1, [pc, #424]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d010      	beq.n	8007fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699a      	ldr	r2, [r3, #24]
 8007fa0:	4b64      	ldr	r3, [pc, #400]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d908      	bls.n	8007fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fac:	4b61      	ldr	r3, [pc, #388]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	495e      	ldr	r1, [pc, #376]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d010      	beq.n	8007fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69da      	ldr	r2, [r3, #28]
 8007fce:	4b59      	ldr	r3, [pc, #356]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d908      	bls.n	8007fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007fda:	4b56      	ldr	r3, [pc, #344]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	4953      	ldr	r1, [pc, #332]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d010      	beq.n	800801a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	429a      	cmp	r2, r3
 8008006:	d908      	bls.n	800801a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008008:	4b4a      	ldr	r3, [pc, #296]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f023 020f 	bic.w	r2, r3, #15
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	4947      	ldr	r1, [pc, #284]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8008016:	4313      	orrs	r3, r2
 8008018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d055      	beq.n	80080d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008026:	4b43      	ldr	r3, [pc, #268]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	4940      	ldr	r1, [pc, #256]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8008034:	4313      	orrs	r3, r2
 8008036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d107      	bne.n	8008050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008040:	4b3c      	ldr	r3, [pc, #240]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d121      	bne.n	8008090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0f6      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d107      	bne.n	8008068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008058:	4b36      	ldr	r3, [pc, #216]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d115      	bne.n	8008090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e0ea      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d107      	bne.n	8008080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008070:	4b30      	ldr	r3, [pc, #192]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e0de      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008080:	4b2c      	ldr	r3, [pc, #176]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e0d6      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008090:	4b28      	ldr	r3, [pc, #160]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f023 0207 	bic.w	r2, r3, #7
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	4925      	ldr	r1, [pc, #148]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a2:	f7fa f941 	bl	8002328 <HAL_GetTick>
 80080a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a8:	e00a      	b.n	80080c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080aa:	f7fa f93d 	bl	8002328 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e0be      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d1eb      	bne.n	80080aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d010      	beq.n	8008100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	4b14      	ldr	r3, [pc, #80]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d208      	bcs.n	8008100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ee:	4b11      	ldr	r3, [pc, #68]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	f023 020f 	bic.w	r2, r3, #15
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	490e      	ldr	r1, [pc, #56]	@ (8008134 <HAL_RCC_ClockConfig+0x244>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008100:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d214      	bcs.n	8008138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800810e:	4b08      	ldr	r3, [pc, #32]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f023 020f 	bic.w	r2, r3, #15
 8008116:	4906      	ldr	r1, [pc, #24]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	4313      	orrs	r3, r2
 800811c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800811e:	4b04      	ldr	r3, [pc, #16]	@ (8008130 <HAL_RCC_ClockConfig+0x240>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d005      	beq.n	8008138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e086      	b.n	800823e <HAL_RCC_ClockConfig+0x34e>
 8008130:	52002000 	.word	0x52002000
 8008134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d010      	beq.n	8008166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	4b3f      	ldr	r3, [pc, #252]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008150:	429a      	cmp	r2, r3
 8008152:	d208      	bcs.n	8008166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008154:	4b3c      	ldr	r3, [pc, #240]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	4939      	ldr	r1, [pc, #228]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 8008162:	4313      	orrs	r3, r2
 8008164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d010      	beq.n	8008194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	4b34      	ldr	r3, [pc, #208]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800817e:	429a      	cmp	r2, r3
 8008180:	d208      	bcs.n	8008194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008182:	4b31      	ldr	r3, [pc, #196]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	492e      	ldr	r1, [pc, #184]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 8008190:	4313      	orrs	r3, r2
 8008192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b00      	cmp	r3, #0
 800819e:	d010      	beq.n	80081c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	4b28      	ldr	r3, [pc, #160]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d208      	bcs.n	80081c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081b0:	4b25      	ldr	r3, [pc, #148]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	4922      	ldr	r1, [pc, #136]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d010      	beq.n	80081f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69da      	ldr	r2, [r3, #28]
 80081d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081da:	429a      	cmp	r2, r3
 80081dc:	d208      	bcs.n	80081f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80081de:	4b1a      	ldr	r3, [pc, #104]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4917      	ldr	r1, [pc, #92]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80081f0:	f000 f834 	bl	800825c <HAL_RCC_GetSysClockFreq>
 80081f4:	4602      	mov	r2, r0
 80081f6:	4b14      	ldr	r3, [pc, #80]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	4912      	ldr	r1, [pc, #72]	@ (800824c <HAL_RCC_ClockConfig+0x35c>)
 8008202:	5ccb      	ldrb	r3, [r1, r3]
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
 800820c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800820e:	4b0e      	ldr	r3, [pc, #56]	@ (8008248 <HAL_RCC_ClockConfig+0x358>)
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	4a0d      	ldr	r2, [pc, #52]	@ (800824c <HAL_RCC_ClockConfig+0x35c>)
 8008218:	5cd3      	ldrb	r3, [r2, r3]
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
 8008224:	4a0a      	ldr	r2, [pc, #40]	@ (8008250 <HAL_RCC_ClockConfig+0x360>)
 8008226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008228:	4a0a      	ldr	r2, [pc, #40]	@ (8008254 <HAL_RCC_ClockConfig+0x364>)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800822e:	4b0a      	ldr	r3, [pc, #40]	@ (8008258 <HAL_RCC_ClockConfig+0x368>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f7f9 fd82 	bl	8001d3c <HAL_InitTick>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	58024400 	.word	0x58024400
 800824c:	080156b8 	.word	0x080156b8
 8008250:	24000004 	.word	0x24000004
 8008254:	24000000 	.word	0x24000000
 8008258:	24000008 	.word	0x24000008

0800825c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800825c:	b480      	push	{r7}
 800825e:	b089      	sub	sp, #36	@ 0x24
 8008260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008262:	4bb3      	ldr	r3, [pc, #716]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800826a:	2b18      	cmp	r3, #24
 800826c:	f200 8155 	bhi.w	800851a <HAL_RCC_GetSysClockFreq+0x2be>
 8008270:	a201      	add	r2, pc, #4	@ (adr r2, 8008278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	080082dd 	.word	0x080082dd
 800827c:	0800851b 	.word	0x0800851b
 8008280:	0800851b 	.word	0x0800851b
 8008284:	0800851b 	.word	0x0800851b
 8008288:	0800851b 	.word	0x0800851b
 800828c:	0800851b 	.word	0x0800851b
 8008290:	0800851b 	.word	0x0800851b
 8008294:	0800851b 	.word	0x0800851b
 8008298:	08008303 	.word	0x08008303
 800829c:	0800851b 	.word	0x0800851b
 80082a0:	0800851b 	.word	0x0800851b
 80082a4:	0800851b 	.word	0x0800851b
 80082a8:	0800851b 	.word	0x0800851b
 80082ac:	0800851b 	.word	0x0800851b
 80082b0:	0800851b 	.word	0x0800851b
 80082b4:	0800851b 	.word	0x0800851b
 80082b8:	08008309 	.word	0x08008309
 80082bc:	0800851b 	.word	0x0800851b
 80082c0:	0800851b 	.word	0x0800851b
 80082c4:	0800851b 	.word	0x0800851b
 80082c8:	0800851b 	.word	0x0800851b
 80082cc:	0800851b 	.word	0x0800851b
 80082d0:	0800851b 	.word	0x0800851b
 80082d4:	0800851b 	.word	0x0800851b
 80082d8:	0800830f 	.word	0x0800830f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082dc:	4b94      	ldr	r3, [pc, #592]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d009      	beq.n	80082fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082e8:	4b91      	ldr	r3, [pc, #580]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	08db      	lsrs	r3, r3, #3
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	4a90      	ldr	r2, [pc, #576]	@ (8008534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082f4:	fa22 f303 	lsr.w	r3, r2, r3
 80082f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80082fa:	e111      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80082fc:	4b8d      	ldr	r3, [pc, #564]	@ (8008534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082fe:	61bb      	str	r3, [r7, #24]
      break;
 8008300:	e10e      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008302:	4b8d      	ldr	r3, [pc, #564]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008304:	61bb      	str	r3, [r7, #24]
      break;
 8008306:	e10b      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008308:	4b8c      	ldr	r3, [pc, #560]	@ (800853c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800830a:	61bb      	str	r3, [r7, #24]
      break;
 800830c:	e108      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800830e:	4b88      	ldr	r3, [pc, #544]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008318:	4b85      	ldr	r3, [pc, #532]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	091b      	lsrs	r3, r3, #4
 800831e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008324:	4b82      	ldr	r3, [pc, #520]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800832e:	4b80      	ldr	r3, [pc, #512]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008332:	08db      	lsrs	r3, r3, #3
 8008334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	fb02 f303 	mul.w	r3, r2, r3
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 80e1 	beq.w	8008514 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b02      	cmp	r3, #2
 8008356:	f000 8083 	beq.w	8008460 <HAL_RCC_GetSysClockFreq+0x204>
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b02      	cmp	r3, #2
 800835e:	f200 80a1 	bhi.w	80084a4 <HAL_RCC_GetSysClockFreq+0x248>
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_RCC_GetSysClockFreq+0x114>
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d056      	beq.n	800841c <HAL_RCC_GetSysClockFreq+0x1c0>
 800836e:	e099      	b.n	80084a4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008370:	4b6f      	ldr	r3, [pc, #444]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	d02d      	beq.n	80083d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800837c:	4b6c      	ldr	r3, [pc, #432]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	08db      	lsrs	r3, r3, #3
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	4a6b      	ldr	r2, [pc, #428]	@ (8008534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008388:	fa22 f303 	lsr.w	r3, r2, r3
 800838c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	ee07 3a90 	vmov	s15, r3
 8008394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a6:	4b62      	ldr	r3, [pc, #392]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80083d6:	e087      	b.n	80084e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008544 <HAL_RCC_GetSysClockFreq+0x2e8>
 80083e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ea:	4b51      	ldr	r3, [pc, #324]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80083fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800840e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800841a:	e065      	b.n	80084e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800842a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842e:	4b40      	ldr	r3, [pc, #256]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008442:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800845e:	e043      	b.n	80084e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800854c <HAL_RCC_GetSysClockFreq+0x2f0>
 800846e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008472:	4b2f      	ldr	r3, [pc, #188]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008482:	ed97 6a02 	vldr	s12, [r7, #8]
 8008486:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800848a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084a2:	e021      	b.n	80084e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008548 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80084e8:	4b11      	ldr	r3, [pc, #68]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ec:	0a5b      	lsrs	r3, r3, #9
 80084ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084f2:	3301      	adds	r3, #1
 80084f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008500:	edd7 6a07 	vldr	s13, [r7, #28]
 8008504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800850c:	ee17 3a90 	vmov	r3, s15
 8008510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008512:	e005      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
      break;
 8008518:	e002      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800851a:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800851c:	61bb      	str	r3, [r7, #24]
      break;
 800851e:	bf00      	nop
  }

  return sysclockfreq;
 8008520:	69bb      	ldr	r3, [r7, #24]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3724      	adds	r7, #36	@ 0x24
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	58024400 	.word	0x58024400
 8008534:	03d09000 	.word	0x03d09000
 8008538:	003d0900 	.word	0x003d0900
 800853c:	007a1200 	.word	0x007a1200
 8008540:	46000000 	.word	0x46000000
 8008544:	4c742400 	.word	0x4c742400
 8008548:	4a742400 	.word	0x4a742400
 800854c:	4af42400 	.word	0x4af42400

08008550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008556:	f7ff fe81 	bl	800825c <HAL_RCC_GetSysClockFreq>
 800855a:	4602      	mov	r2, r0
 800855c:	4b10      	ldr	r3, [pc, #64]	@ (80085a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	0a1b      	lsrs	r3, r3, #8
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	490f      	ldr	r1, [pc, #60]	@ (80085a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008568:	5ccb      	ldrb	r3, [r1, r3]
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	fa22 f303 	lsr.w	r3, r2, r3
 8008572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008574:	4b0a      	ldr	r3, [pc, #40]	@ (80085a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	f003 030f 	and.w	r3, r3, #15
 800857c:	4a09      	ldr	r2, [pc, #36]	@ (80085a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800857e:	5cd3      	ldrb	r3, [r2, r3]
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	fa22 f303 	lsr.w	r3, r2, r3
 800858a:	4a07      	ldr	r2, [pc, #28]	@ (80085a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800858c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800858e:	4a07      	ldr	r2, [pc, #28]	@ (80085ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008594:	4b04      	ldr	r3, [pc, #16]	@ (80085a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008596:	681b      	ldr	r3, [r3, #0]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	58024400 	.word	0x58024400
 80085a4:	080156b8 	.word	0x080156b8
 80085a8:	24000004 	.word	0x24000004
 80085ac:	24000000 	.word	0x24000000

080085b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80085b4:	f7ff ffcc 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	4b06      	ldr	r3, [pc, #24]	@ (80085d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	091b      	lsrs	r3, r3, #4
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	4904      	ldr	r1, [pc, #16]	@ (80085d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085c6:	5ccb      	ldrb	r3, [r1, r3]
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	58024400 	.word	0x58024400
 80085d8:	080156b8 	.word	0x080156b8

080085dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80085e0:	f7ff ffb6 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 80085e4:	4602      	mov	r2, r0
 80085e6:	4b06      	ldr	r3, [pc, #24]	@ (8008600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	0a1b      	lsrs	r3, r3, #8
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	4904      	ldr	r1, [pc, #16]	@ (8008604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085f2:	5ccb      	ldrb	r3, [r1, r3]
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	58024400 	.word	0x58024400
 8008604:	080156b8 	.word	0x080156b8

08008608 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	223f      	movs	r2, #63	@ 0x3f
 8008616:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008618:	4b1a      	ldr	r3, [pc, #104]	@ (8008684 <HAL_RCC_GetClockConfig+0x7c>)
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f003 0207 	and.w	r2, r3, #7
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008624:	4b17      	ldr	r3, [pc, #92]	@ (8008684 <HAL_RCC_GetClockConfig+0x7c>)
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008630:	4b14      	ldr	r3, [pc, #80]	@ (8008684 <HAL_RCC_GetClockConfig+0x7c>)
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f003 020f 	and.w	r2, r3, #15
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800863c:	4b11      	ldr	r3, [pc, #68]	@ (8008684 <HAL_RCC_GetClockConfig+0x7c>)
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008648:	4b0e      	ldr	r3, [pc, #56]	@ (8008684 <HAL_RCC_GetClockConfig+0x7c>)
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008654:	4b0b      	ldr	r3, [pc, #44]	@ (8008684 <HAL_RCC_GetClockConfig+0x7c>)
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008660:	4b08      	ldr	r3, [pc, #32]	@ (8008684 <HAL_RCC_GetClockConfig+0x7c>)
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800866c:	4b06      	ldr	r3, [pc, #24]	@ (8008688 <HAL_RCC_GetClockConfig+0x80>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 020f 	and.w	r2, r3, #15
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	601a      	str	r2, [r3, #0]
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	58024400 	.word	0x58024400
 8008688:	52002000 	.word	0x52002000

0800868c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800868c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008690:	b0ca      	sub	sp, #296	@ 0x128
 8008692:	af00      	add	r7, sp, #0
 8008694:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008698:	2300      	movs	r3, #0
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800869e:	2300      	movs	r3, #0
 80086a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80086b0:	2500      	movs	r5, #0
 80086b2:	ea54 0305 	orrs.w	r3, r4, r5
 80086b6:	d049      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80086b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086c2:	d02f      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80086c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086c8:	d828      	bhi.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ce:	d01a      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80086d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086d4:	d822      	bhi.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80086da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086de:	d007      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80086e0:	e01c      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e2:	4bb8      	ldr	r3, [pc, #736]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e6:	4ab7      	ldr	r2, [pc, #732]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80086ee:	e01a      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f4:	3308      	adds	r3, #8
 80086f6:	2102      	movs	r1, #2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f002 fb61 	bl	800adc0 <RCCEx_PLL2_Config>
 80086fe:	4603      	mov	r3, r0
 8008700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008704:	e00f      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870a:	3328      	adds	r3, #40	@ 0x28
 800870c:	2102      	movs	r1, #2
 800870e:	4618      	mov	r0, r3
 8008710:	f002 fc08 	bl	800af24 <RCCEx_PLL3_Config>
 8008714:	4603      	mov	r3, r0
 8008716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800871a:	e004      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008722:	e000      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800872e:	4ba5      	ldr	r3, [pc, #660]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008732:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800873c:	4aa1      	ldr	r2, [pc, #644]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800873e:	430b      	orrs	r3, r1
 8008740:	6513      	str	r3, [r2, #80]	@ 0x50
 8008742:	e003      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008758:	f04f 0900 	mov.w	r9, #0
 800875c:	ea58 0309 	orrs.w	r3, r8, r9
 8008760:	d047      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008768:	2b04      	cmp	r3, #4
 800876a:	d82a      	bhi.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800876c:	a201      	add	r2, pc, #4	@ (adr r2, 8008774 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008789 	.word	0x08008789
 8008778:	08008797 	.word	0x08008797
 800877c:	080087ad 	.word	0x080087ad
 8008780:	080087cb 	.word	0x080087cb
 8008784:	080087cb 	.word	0x080087cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008788:	4b8e      	ldr	r3, [pc, #568]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878c:	4a8d      	ldr	r2, [pc, #564]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800878e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008794:	e01a      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879a:	3308      	adds	r3, #8
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f002 fb0e 	bl	800adc0 <RCCEx_PLL2_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087aa:	e00f      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b0:	3328      	adds	r3, #40	@ 0x28
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f002 fbb5 	bl	800af24 <RCCEx_PLL3_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087c0:	e004      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087c8:	e000      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80087ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087d4:	4b7b      	ldr	r3, [pc, #492]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d8:	f023 0107 	bic.w	r1, r3, #7
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087e2:	4a78      	ldr	r2, [pc, #480]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087e4:	430b      	orrs	r3, r1
 80087e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80087e8:	e003      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80087fe:	f04f 0b00 	mov.w	fp, #0
 8008802:	ea5a 030b 	orrs.w	r3, sl, fp
 8008806:	d04c      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800880e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008812:	d030      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008818:	d829      	bhi.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800881a:	2bc0      	cmp	r3, #192	@ 0xc0
 800881c:	d02d      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800881e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008820:	d825      	bhi.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008822:	2b80      	cmp	r3, #128	@ 0x80
 8008824:	d018      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008826:	2b80      	cmp	r3, #128	@ 0x80
 8008828:	d821      	bhi.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800882e:	2b40      	cmp	r3, #64	@ 0x40
 8008830:	d007      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008832:	e01c      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008834:	4b63      	ldr	r3, [pc, #396]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008838:	4a62      	ldr	r2, [pc, #392]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800883a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800883e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008840:	e01c      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008846:	3308      	adds	r3, #8
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f002 fab8 	bl	800adc0 <RCCEx_PLL2_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008856:	e011      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885c:	3328      	adds	r3, #40	@ 0x28
 800885e:	2100      	movs	r1, #0
 8008860:	4618      	mov	r0, r3
 8008862:	f002 fb5f 	bl	800af24 <RCCEx_PLL3_Config>
 8008866:	4603      	mov	r3, r0
 8008868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800886c:	e006      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008874:	e002      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008876:	bf00      	nop
 8008878:	e000      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800887a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008884:	4b4f      	ldr	r3, [pc, #316]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008888:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800888c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008892:	4a4c      	ldr	r2, [pc, #304]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008894:	430b      	orrs	r3, r1
 8008896:	6513      	str	r3, [r2, #80]	@ 0x50
 8008898:	e003      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800889e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80088ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80088b2:	2300      	movs	r3, #0
 80088b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80088b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80088bc:	460b      	mov	r3, r1
 80088be:	4313      	orrs	r3, r2
 80088c0:	d053      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088ce:	d035      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80088d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088d4:	d82e      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088da:	d031      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80088dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088e0:	d828      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088e6:	d01a      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80088e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ec:	d822      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80088f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088f6:	d007      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80088f8:	e01c      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088fa:	4b32      	ldr	r3, [pc, #200]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	4a31      	ldr	r2, [pc, #196]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008906:	e01c      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890c:	3308      	adds	r3, #8
 800890e:	2100      	movs	r1, #0
 8008910:	4618      	mov	r0, r3
 8008912:	f002 fa55 	bl	800adc0 <RCCEx_PLL2_Config>
 8008916:	4603      	mov	r3, r0
 8008918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800891c:	e011      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008922:	3328      	adds	r3, #40	@ 0x28
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f002 fafc 	bl	800af24 <RCCEx_PLL3_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008932:	e006      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800893a:	e002      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800893c:	bf00      	nop
 800893e:	e000      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800894a:	4b1e      	ldr	r3, [pc, #120]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800894c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800894e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800895a:	4a1a      	ldr	r2, [pc, #104]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800895c:	430b      	orrs	r3, r1
 800895e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008960:	e003      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008976:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800897a:	2300      	movs	r3, #0
 800897c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008980:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008984:	460b      	mov	r3, r1
 8008986:	4313      	orrs	r3, r2
 8008988:	d056      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008996:	d038      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008998:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800899c:	d831      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800899e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089a2:	d034      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80089a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089a8:	d82b      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ae:	d01d      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80089b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089b4:	d825      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d006      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80089ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089be:	d00a      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80089c0:	e01f      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089c2:	bf00      	nop
 80089c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c8:	4ba2      	ldr	r3, [pc, #648]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	4aa1      	ldr	r2, [pc, #644]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089d4:	e01c      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089da:	3308      	adds	r3, #8
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f002 f9ee 	bl	800adc0 <RCCEx_PLL2_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80089ea:	e011      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f0:	3328      	adds	r3, #40	@ 0x28
 80089f2:	2100      	movs	r1, #0
 80089f4:	4618      	mov	r0, r3
 80089f6:	f002 fa95 	bl	800af24 <RCCEx_PLL3_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a00:	e006      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a08:	e002      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a0a:	bf00      	nop
 8008a0c:	e000      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a18:	4b8e      	ldr	r3, [pc, #568]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a28:	4a8a      	ldr	r2, [pc, #552]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a2a:	430b      	orrs	r3, r1
 8008a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a2e:	e003      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008a52:	460b      	mov	r3, r1
 8008a54:	4313      	orrs	r3, r2
 8008a56:	d03a      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a5e:	2b30      	cmp	r3, #48	@ 0x30
 8008a60:	d01f      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008a62:	2b30      	cmp	r3, #48	@ 0x30
 8008a64:	d819      	bhi.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	d00c      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	d815      	bhi.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d019      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008a72:	2b10      	cmp	r3, #16
 8008a74:	d111      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a76:	4b77      	ldr	r3, [pc, #476]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	4a76      	ldr	r2, [pc, #472]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008a82:	e011      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a88:	3308      	adds	r3, #8
 8008a8a:	2102      	movs	r1, #2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f002 f997 	bl	800adc0 <RCCEx_PLL2_Config>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008a98:	e006      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008aa0:	e002      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008aa2:	bf00      	nop
 8008aa4:	e000      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ab0:	4b68      	ldr	r3, [pc, #416]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008abe:	4a65      	ldr	r2, [pc, #404]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ac4:	e003      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008ada:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008ae4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4313      	orrs	r3, r2
 8008aec:	d051      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af8:	d035      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008afe:	d82e      	bhi.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b04:	d031      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008b06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b0a:	d828      	bhi.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b10:	d01a      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b16:	d822      	bhi.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b20:	d007      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008b22:	e01c      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b24:	4b4b      	ldr	r3, [pc, #300]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	4a4a      	ldr	r2, [pc, #296]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b30:	e01c      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b36:	3308      	adds	r3, #8
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f002 f940 	bl	800adc0 <RCCEx_PLL2_Config>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b46:	e011      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4c:	3328      	adds	r3, #40	@ 0x28
 8008b4e:	2100      	movs	r1, #0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f002 f9e7 	bl	800af24 <RCCEx_PLL3_Config>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b5c:	e006      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b64:	e002      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b66:	bf00      	nop
 8008b68:	e000      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b74:	4b37      	ldr	r3, [pc, #220]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b82:	4a34      	ldr	r2, [pc, #208]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b84:	430b      	orrs	r3, r1
 8008b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b88:	e003      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008ba8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008bac:	460b      	mov	r3, r1
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	d056      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bbc:	d033      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008bbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bc2:	d82c      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bc8:	d02f      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008bca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bce:	d826      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bd4:	d02b      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008bd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bda:	d820      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be0:	d012      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be6:	d81a      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d022      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bf0:	d115      	bne.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f002 f8e0 	bl	800adc0 <RCCEx_PLL2_Config>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c06:	e015      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0c:	3328      	adds	r3, #40	@ 0x28
 8008c0e:	2101      	movs	r1, #1
 8008c10:	4618      	mov	r0, r3
 8008c12:	f002 f987 	bl	800af24 <RCCEx_PLL3_Config>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c1c:	e00a      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c24:	e006      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c26:	bf00      	nop
 8008c28:	e004      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c2a:	bf00      	nop
 8008c2c:	e002      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c2e:	bf00      	nop
 8008c30:	e000      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10d      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c3c:	4b05      	ldr	r3, [pc, #20]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c4a:	4a02      	ldr	r2, [pc, #8]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c50:	e006      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008c52:	bf00      	nop
 8008c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c70:	2300      	movs	r3, #0
 8008c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	d055      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c8c:	d033      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c92:	d82c      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c98:	d02f      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9e:	d826      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ca4:	d02b      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008ca6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008caa:	d820      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb0:	d012      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb6:	d81a      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d022      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cc0:	d115      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	2101      	movs	r1, #1
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 f878 	bl	800adc0 <RCCEx_PLL2_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cd6:	e015      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cdc:	3328      	adds	r3, #40	@ 0x28
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f002 f91f 	bl	800af24 <RCCEx_PLL3_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cec:	e00a      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cf4:	e006      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008cf6:	bf00      	nop
 8008cf8:	e004      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008cfa:	bf00      	nop
 8008cfc:	e002      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008cfe:	bf00      	nop
 8008d00:	e000      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d0c:	4ba3      	ldr	r3, [pc, #652]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d10:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d1c:	4a9f      	ldr	r2, [pc, #636]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d1e:	430b      	orrs	r3, r1
 8008d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d22:	e003      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d46:	460b      	mov	r3, r1
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	d037      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d56:	d00e      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d5c:	d816      	bhi.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d018      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d66:	d111      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d68:	4b8c      	ldr	r3, [pc, #560]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6c:	4a8b      	ldr	r2, [pc, #556]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d74:	e00f      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f002 f81e 	bl	800adc0 <RCCEx_PLL2_Config>
 8008d84:	4603      	mov	r3, r0
 8008d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d8a:	e004      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d92:	e000      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dac:	4a7b      	ldr	r2, [pc, #492]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dae:	430b      	orrs	r3, r1
 8008db0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008db2:	e003      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008dd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	d039      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d81c      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008de6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e29 	.word	0x08008e29
 8008df0:	08008dfd 	.word	0x08008dfd
 8008df4:	08008e0b 	.word	0x08008e0b
 8008df8:	08008e29 	.word	0x08008e29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dfc:	4b67      	ldr	r3, [pc, #412]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	4a66      	ldr	r2, [pc, #408]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e08:	e00f      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0e:	3308      	adds	r3, #8
 8008e10:	2102      	movs	r1, #2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 ffd4 	bl	800adc0 <RCCEx_PLL2_Config>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e1e:	e004      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e26:	e000      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e32:	4b5a      	ldr	r3, [pc, #360]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e36:	f023 0103 	bic.w	r1, r3, #3
 8008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e40:	4a56      	ldr	r2, [pc, #344]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e42:	430b      	orrs	r3, r1
 8008e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e46:	e003      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e60:	2300      	movs	r3, #0
 8008e62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f000 809f 	beq.w	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e72:	4b4b      	ldr	r3, [pc, #300]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a4a      	ldr	r2, [pc, #296]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e7e:	f7f9 fa53 	bl	8002328 <HAL_GetTick>
 8008e82:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e86:	e00b      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e88:	f7f9 fa4e 	bl	8002328 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b64      	cmp	r3, #100	@ 0x64
 8008e96:	d903      	bls.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e9e:	e005      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0ed      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d179      	bne.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008eb4:	4b39      	ldr	r3, [pc, #228]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ec0:	4053      	eors	r3, r2
 8008ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d015      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008eca:	4b34      	ldr	r3, [pc, #208]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ed2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ed6:	4b31      	ldr	r3, [pc, #196]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eda:	4a30      	ldr	r2, [pc, #192]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ee0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008eee:	4a2b      	ldr	r2, [pc, #172]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008ef4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f02:	d118      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f04:	f7f9 fa10 	bl	8002328 <HAL_GetTick>
 8008f08:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f0c:	e00d      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f0e:	f7f9 fa0b 	bl	8002328 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008f18:	1ad2      	subs	r2, r2, r3
 8008f1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d903      	bls.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008f28:	e005      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0eb      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d129      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f4e:	d10e      	bne.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008f50:	4b12      	ldr	r3, [pc, #72]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f60:	091a      	lsrs	r2, r3, #4
 8008f62:	4b10      	ldr	r3, [pc, #64]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	4a0d      	ldr	r2, [pc, #52]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	6113      	str	r3, [r2, #16]
 8008f6c:	e005      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	4a0a      	ldr	r2, [pc, #40]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f78:	6113      	str	r3, [r2, #16]
 8008f7a:	4b08      	ldr	r3, [pc, #32]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f7c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f8a:	4a04      	ldr	r2, [pc, #16]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f90:	e00e      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008f9a:	e009      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008f9c:	58024400 	.word	0x58024400
 8008fa0:	58024800 	.word	0x58024800
 8008fa4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f002 0301 	and.w	r3, r2, #1
 8008fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	f000 8089 	beq.w	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fd8:	2b28      	cmp	r3, #40	@ 0x28
 8008fda:	d86b      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	080090bd 	.word	0x080090bd
 8008fe8:	080090b5 	.word	0x080090b5
 8008fec:	080090b5 	.word	0x080090b5
 8008ff0:	080090b5 	.word	0x080090b5
 8008ff4:	080090b5 	.word	0x080090b5
 8008ff8:	080090b5 	.word	0x080090b5
 8008ffc:	080090b5 	.word	0x080090b5
 8009000:	080090b5 	.word	0x080090b5
 8009004:	08009089 	.word	0x08009089
 8009008:	080090b5 	.word	0x080090b5
 800900c:	080090b5 	.word	0x080090b5
 8009010:	080090b5 	.word	0x080090b5
 8009014:	080090b5 	.word	0x080090b5
 8009018:	080090b5 	.word	0x080090b5
 800901c:	080090b5 	.word	0x080090b5
 8009020:	080090b5 	.word	0x080090b5
 8009024:	0800909f 	.word	0x0800909f
 8009028:	080090b5 	.word	0x080090b5
 800902c:	080090b5 	.word	0x080090b5
 8009030:	080090b5 	.word	0x080090b5
 8009034:	080090b5 	.word	0x080090b5
 8009038:	080090b5 	.word	0x080090b5
 800903c:	080090b5 	.word	0x080090b5
 8009040:	080090b5 	.word	0x080090b5
 8009044:	080090bd 	.word	0x080090bd
 8009048:	080090b5 	.word	0x080090b5
 800904c:	080090b5 	.word	0x080090b5
 8009050:	080090b5 	.word	0x080090b5
 8009054:	080090b5 	.word	0x080090b5
 8009058:	080090b5 	.word	0x080090b5
 800905c:	080090b5 	.word	0x080090b5
 8009060:	080090b5 	.word	0x080090b5
 8009064:	080090bd 	.word	0x080090bd
 8009068:	080090b5 	.word	0x080090b5
 800906c:	080090b5 	.word	0x080090b5
 8009070:	080090b5 	.word	0x080090b5
 8009074:	080090b5 	.word	0x080090b5
 8009078:	080090b5 	.word	0x080090b5
 800907c:	080090b5 	.word	0x080090b5
 8009080:	080090b5 	.word	0x080090b5
 8009084:	080090bd 	.word	0x080090bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908c:	3308      	adds	r3, #8
 800908e:	2101      	movs	r1, #1
 8009090:	4618      	mov	r0, r3
 8009092:	f001 fe95 	bl	800adc0 <RCCEx_PLL2_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800909c:	e00f      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a2:	3328      	adds	r3, #40	@ 0x28
 80090a4:	2101      	movs	r1, #1
 80090a6:	4618      	mov	r0, r3
 80090a8:	f001 ff3c 	bl	800af24 <RCCEx_PLL3_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090b2:	e004      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80090bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090c6:	4bbf      	ldr	r3, [pc, #764]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80090ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090d4:	4abb      	ldr	r2, [pc, #748]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090d6:	430b      	orrs	r3, r1
 80090d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80090da:	e003      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80090e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f002 0302 	and.w	r3, r2, #2
 80090f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090f4:	2300      	movs	r3, #0
 80090f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80090fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80090fe:	460b      	mov	r3, r1
 8009100:	4313      	orrs	r3, r2
 8009102:	d041      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800910a:	2b05      	cmp	r3, #5
 800910c:	d824      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	08009161 	.word	0x08009161
 8009118:	0800912d 	.word	0x0800912d
 800911c:	08009143 	.word	0x08009143
 8009120:	08009161 	.word	0x08009161
 8009124:	08009161 	.word	0x08009161
 8009128:	08009161 	.word	0x08009161
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009130:	3308      	adds	r3, #8
 8009132:	2101      	movs	r1, #1
 8009134:	4618      	mov	r0, r3
 8009136:	f001 fe43 	bl	800adc0 <RCCEx_PLL2_Config>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009140:	e00f      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	3328      	adds	r3, #40	@ 0x28
 8009148:	2101      	movs	r1, #1
 800914a:	4618      	mov	r0, r3
 800914c:	f001 feea 	bl	800af24 <RCCEx_PLL3_Config>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009156:	e004      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800915e:	e000      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800916a:	4b96      	ldr	r3, [pc, #600]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800916c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800916e:	f023 0107 	bic.w	r1, r3, #7
 8009172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009178:	4a92      	ldr	r2, [pc, #584]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800917a:	430b      	orrs	r3, r1
 800917c:	6553      	str	r3, [r2, #84]	@ 0x54
 800917e:	e003      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f002 0304 	and.w	r3, r2, #4
 8009194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009198:	2300      	movs	r3, #0
 800919a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800919e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4313      	orrs	r3, r2
 80091a6:	d044      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091b0:	2b05      	cmp	r3, #5
 80091b2:	d825      	bhi.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80091b4:	a201      	add	r2, pc, #4	@ (adr r2, 80091bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80091b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ba:	bf00      	nop
 80091bc:	08009209 	.word	0x08009209
 80091c0:	080091d5 	.word	0x080091d5
 80091c4:	080091eb 	.word	0x080091eb
 80091c8:	08009209 	.word	0x08009209
 80091cc:	08009209 	.word	0x08009209
 80091d0:	08009209 	.word	0x08009209
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d8:	3308      	adds	r3, #8
 80091da:	2101      	movs	r1, #1
 80091dc:	4618      	mov	r0, r3
 80091de:	f001 fdef 	bl	800adc0 <RCCEx_PLL2_Config>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80091e8:	e00f      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ee:	3328      	adds	r3, #40	@ 0x28
 80091f0:	2101      	movs	r1, #1
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 fe96 	bl	800af24 <RCCEx_PLL3_Config>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80091fe:	e004      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009206:	e000      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800920a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10b      	bne.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009212:	4b6c      	ldr	r3, [pc, #432]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009216:	f023 0107 	bic.w	r1, r3, #7
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009222:	4a68      	ldr	r2, [pc, #416]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009224:	430b      	orrs	r3, r1
 8009226:	6593      	str	r3, [r2, #88]	@ 0x58
 8009228:	e003      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f002 0320 	and.w	r3, r2, #32
 800923e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009242:	2300      	movs	r3, #0
 8009244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800924c:	460b      	mov	r3, r1
 800924e:	4313      	orrs	r3, r2
 8009250:	d055      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800925a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800925e:	d033      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009264:	d82c      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800926a:	d02f      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800926c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009270:	d826      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009272:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009276:	d02b      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800927c:	d820      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800927e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009282:	d012      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009288:	d81a      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d022      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800928e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009292:	d115      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009298:	3308      	adds	r3, #8
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f001 fd8f 	bl	800adc0 <RCCEx_PLL2_Config>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092a8:	e015      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ae:	3328      	adds	r3, #40	@ 0x28
 80092b0:	2102      	movs	r1, #2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 fe36 	bl	800af24 <RCCEx_PLL3_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092be:	e00a      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092c6:	e006      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092c8:	bf00      	nop
 80092ca:	e004      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092cc:	bf00      	nop
 80092ce:	e002      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092d0:	bf00      	nop
 80092d2:	e000      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092de:	4b39      	ldr	r3, [pc, #228]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	4a35      	ldr	r2, [pc, #212]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092f0:	430b      	orrs	r3, r1
 80092f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80092f4:	e003      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800930a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800930e:	2300      	movs	r3, #0
 8009310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009314:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009318:	460b      	mov	r3, r1
 800931a:	4313      	orrs	r3, r2
 800931c:	d058      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009326:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800932a:	d033      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800932c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009330:	d82c      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009336:	d02f      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800933c:	d826      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800933e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009342:	d02b      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009348:	d820      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800934a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800934e:	d012      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009354:	d81a      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d022      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800935a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800935e:	d115      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009364:	3308      	adds	r3, #8
 8009366:	2100      	movs	r1, #0
 8009368:	4618      	mov	r0, r3
 800936a:	f001 fd29 	bl	800adc0 <RCCEx_PLL2_Config>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009374:	e015      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937a:	3328      	adds	r3, #40	@ 0x28
 800937c:	2102      	movs	r1, #2
 800937e:	4618      	mov	r0, r3
 8009380:	f001 fdd0 	bl	800af24 <RCCEx_PLL3_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800938a:	e00a      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009392:	e006      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009394:	bf00      	nop
 8009396:	e004      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009398:	bf00      	nop
 800939a:	e002      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800939c:	bf00      	nop
 800939e:	e000      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10e      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093aa:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093ba:	4a02      	ldr	r2, [pc, #8]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093bc:	430b      	orrs	r3, r1
 80093be:	6593      	str	r3, [r2, #88]	@ 0x58
 80093c0:	e006      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80093c2:	bf00      	nop
 80093c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80093dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80093ea:	460b      	mov	r3, r1
 80093ec:	4313      	orrs	r3, r2
 80093ee:	d055      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80093f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80093fc:	d033      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80093fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009402:	d82c      	bhi.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009408:	d02f      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800940a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800940e:	d826      	bhi.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009410:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009414:	d02b      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009416:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800941a:	d820      	bhi.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800941c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009420:	d012      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009426:	d81a      	bhi.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009428:	2b00      	cmp	r3, #0
 800942a:	d022      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800942c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009430:	d115      	bne.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009436:	3308      	adds	r3, #8
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f001 fcc0 	bl	800adc0 <RCCEx_PLL2_Config>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009446:	e015      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944c:	3328      	adds	r3, #40	@ 0x28
 800944e:	2102      	movs	r1, #2
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fd67 	bl	800af24 <RCCEx_PLL3_Config>
 8009456:	4603      	mov	r3, r0
 8009458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800945c:	e00a      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009464:	e006      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009466:	bf00      	nop
 8009468:	e004      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800946a:	bf00      	nop
 800946c:	e002      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800946e:	bf00      	nop
 8009470:	e000      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800947c:	4ba1      	ldr	r3, [pc, #644]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800947e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009480:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800948c:	4a9d      	ldr	r2, [pc, #628]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800948e:	430b      	orrs	r3, r1
 8009490:	6593      	str	r3, [r2, #88]	@ 0x58
 8009492:	e003      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f002 0308 	and.w	r3, r2, #8
 80094a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094ac:	2300      	movs	r3, #0
 80094ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80094b6:	460b      	mov	r3, r1
 80094b8:	4313      	orrs	r3, r2
 80094ba:	d01e      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094c8:	d10c      	bne.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ce:	3328      	adds	r3, #40	@ 0x28
 80094d0:	2102      	movs	r1, #2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fd26 	bl	800af24 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80094e4:	4b87      	ldr	r3, [pc, #540]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094f4:	4a83      	ldr	r2, [pc, #524]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094f6:	430b      	orrs	r3, r1
 80094f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	f002 0310 	and.w	r3, r2, #16
 8009506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800950a:	2300      	movs	r3, #0
 800950c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009510:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009514:	460b      	mov	r3, r1
 8009516:	4313      	orrs	r3, r2
 8009518:	d01e      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009526:	d10c      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952c:	3328      	adds	r3, #40	@ 0x28
 800952e:	2102      	movs	r1, #2
 8009530:	4618      	mov	r0, r3
 8009532:	f001 fcf7 	bl	800af24 <RCCEx_PLL3_Config>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009542:	4b70      	ldr	r3, [pc, #448]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009546:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800954a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009552:	4a6c      	ldr	r2, [pc, #432]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009554:	430b      	orrs	r3, r1
 8009556:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009568:	2300      	movs	r3, #0
 800956a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800956e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009572:	460b      	mov	r3, r1
 8009574:	4313      	orrs	r3, r2
 8009576:	d03e      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009584:	d022      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800958a:	d81b      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009594:	d00b      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009596:	e015      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959c:	3308      	adds	r3, #8
 800959e:	2100      	movs	r1, #0
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 fc0d 	bl	800adc0 <RCCEx_PLL2_Config>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095ac:	e00f      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b2:	3328      	adds	r3, #40	@ 0x28
 80095b4:	2102      	movs	r1, #2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 fcb4 	bl	800af24 <RCCEx_PLL3_Config>
 80095bc:	4603      	mov	r3, r0
 80095be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095c2:	e004      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ca:	e000      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80095cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10b      	bne.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095e6:	4a47      	ldr	r2, [pc, #284]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095e8:	430b      	orrs	r3, r1
 80095ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80095ec:	e003      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009602:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009604:	2300      	movs	r3, #0
 8009606:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009608:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800960c:	460b      	mov	r3, r1
 800960e:	4313      	orrs	r3, r2
 8009610:	d03b      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800961e:	d01f      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009620:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009624:	d818      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800962a:	d003      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800962c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009630:	d007      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009632:	e011      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009634:	4b33      	ldr	r3, [pc, #204]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009638:	4a32      	ldr	r2, [pc, #200]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800963a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800963e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009640:	e00f      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009646:	3328      	adds	r3, #40	@ 0x28
 8009648:	2101      	movs	r1, #1
 800964a:	4618      	mov	r0, r3
 800964c:	f001 fc6a 	bl	800af24 <RCCEx_PLL3_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009656:	e004      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800965e:	e000      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10b      	bne.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800966a:	4b26      	ldr	r3, [pc, #152]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800966c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800967a:	4a22      	ldr	r2, [pc, #136]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800967c:	430b      	orrs	r3, r1
 800967e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009680:	e003      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800968a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009696:	673b      	str	r3, [r7, #112]	@ 0x70
 8009698:	2300      	movs	r3, #0
 800969a:	677b      	str	r3, [r7, #116]	@ 0x74
 800969c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80096a0:	460b      	mov	r3, r1
 80096a2:	4313      	orrs	r3, r2
 80096a4:	d034      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80096b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b4:	d007      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80096b6:	e011      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b8:	4b12      	ldr	r3, [pc, #72]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096bc:	4a11      	ldr	r2, [pc, #68]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096c4:	e00e      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ca:	3308      	adds	r3, #8
 80096cc:	2102      	movs	r1, #2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 fb76 	bl	800adc0 <RCCEx_PLL2_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096da:	e003      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10d      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096ec:	4b05      	ldr	r3, [pc, #20]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fa:	4a02      	ldr	r2, [pc, #8]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096fc:	430b      	orrs	r3, r1
 80096fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009700:	e006      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009702:	bf00      	nop
 8009704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800970c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800971c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800971e:	2300      	movs	r3, #0
 8009720:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009722:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d00c      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800972c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009730:	3328      	adds	r3, #40	@ 0x28
 8009732:	2102      	movs	r1, #2
 8009734:	4618      	mov	r0, r3
 8009736:	f001 fbf5 	bl	800af24 <RCCEx_PLL3_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009752:	663b      	str	r3, [r7, #96]	@ 0x60
 8009754:	2300      	movs	r3, #0
 8009756:	667b      	str	r3, [r7, #100]	@ 0x64
 8009758:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800975c:	460b      	mov	r3, r1
 800975e:	4313      	orrs	r3, r2
 8009760:	d038      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800976a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800976e:	d018      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009774:	d811      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800977a:	d014      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800977c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009780:	d80b      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d011      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800978a:	d106      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800978c:	4bc3      	ldr	r3, [pc, #780]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	4ac2      	ldr	r2, [pc, #776]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009798:	e008      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097a0:	e004      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097a2:	bf00      	nop
 80097a4:	e002      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097a6:	bf00      	nop
 80097a8:	e000      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10b      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097b4:	4bb9      	ldr	r3, [pc, #740]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c4:	4ab5      	ldr	r2, [pc, #724]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097c6:	430b      	orrs	r3, r1
 80097c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80097ca:	e003      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80097e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097e2:	2300      	movs	r3, #0
 80097e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80097ea:	460b      	mov	r3, r1
 80097ec:	4313      	orrs	r3, r2
 80097ee:	d009      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097f0:	4baa      	ldr	r3, [pc, #680]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fe:	4aa7      	ldr	r2, [pc, #668]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009800:	430b      	orrs	r3, r1
 8009802:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009810:	653b      	str	r3, [r7, #80]	@ 0x50
 8009812:	2300      	movs	r3, #0
 8009814:	657b      	str	r3, [r7, #84]	@ 0x54
 8009816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800981a:	460b      	mov	r3, r1
 800981c:	4313      	orrs	r3, r2
 800981e:	d00a      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009820:	4b9e      	ldr	r3, [pc, #632]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009830:	4a9a      	ldr	r2, [pc, #616]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009832:	430b      	orrs	r3, r1
 8009834:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009844:	2300      	movs	r3, #0
 8009846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009848:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800984c:	460b      	mov	r3, r1
 800984e:	4313      	orrs	r3, r2
 8009850:	d009      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009852:	4b92      	ldr	r3, [pc, #584]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009856:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800985a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800985e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009860:	4a8e      	ldr	r2, [pc, #568]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009862:	430b      	orrs	r3, r1
 8009864:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009872:	643b      	str	r3, [r7, #64]	@ 0x40
 8009874:	2300      	movs	r3, #0
 8009876:	647b      	str	r3, [r7, #68]	@ 0x44
 8009878:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800987c:	460b      	mov	r3, r1
 800987e:	4313      	orrs	r3, r2
 8009880:	d00e      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009882:	4b86      	ldr	r3, [pc, #536]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	4a85      	ldr	r2, [pc, #532]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009888:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800988c:	6113      	str	r3, [r2, #16]
 800988e:	4b83      	ldr	r3, [pc, #524]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009890:	6919      	ldr	r1, [r3, #16]
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800989a:	4a80      	ldr	r2, [pc, #512]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800989c:	430b      	orrs	r3, r1
 800989e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80098ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ae:	2300      	movs	r3, #0
 80098b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80098b6:	460b      	mov	r3, r1
 80098b8:	4313      	orrs	r3, r2
 80098ba:	d009      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098bc:	4b77      	ldr	r3, [pc, #476]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ca:	4a74      	ldr	r2, [pc, #464]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098cc:	430b      	orrs	r3, r1
 80098ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80098dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80098de:	2300      	movs	r3, #0
 80098e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80098e6:	460b      	mov	r3, r1
 80098e8:	4313      	orrs	r3, r2
 80098ea:	d00a      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098ec:	4b6b      	ldr	r3, [pc, #428]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80098f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098fc:	4a67      	ldr	r2, [pc, #412]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098fe:	430b      	orrs	r3, r1
 8009900:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	2100      	movs	r1, #0
 800990c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009914:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009918:	460b      	mov	r3, r1
 800991a:	4313      	orrs	r3, r2
 800991c:	d011      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800991e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009922:	3308      	adds	r3, #8
 8009924:	2100      	movs	r1, #0
 8009926:	4618      	mov	r0, r3
 8009928:	f001 fa4a 	bl	800adc0 <RCCEx_PLL2_Config>
 800992c:	4603      	mov	r3, r0
 800992e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800993e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	2100      	movs	r1, #0
 800994c:	6239      	str	r1, [r7, #32]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
 8009954:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009958:	460b      	mov	r3, r1
 800995a:	4313      	orrs	r3, r2
 800995c:	d011      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800995e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009962:	3308      	adds	r3, #8
 8009964:	2101      	movs	r1, #1
 8009966:	4618      	mov	r0, r3
 8009968:	f001 fa2a 	bl	800adc0 <RCCEx_PLL2_Config>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800997e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	2100      	movs	r1, #0
 800998c:	61b9      	str	r1, [r7, #24]
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009998:	460b      	mov	r3, r1
 800999a:	4313      	orrs	r3, r2
 800999c:	d011      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a2:	3308      	adds	r3, #8
 80099a4:	2102      	movs	r1, #2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 fa0a 	bl	800adc0 <RCCEx_PLL2_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80099b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80099c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	2100      	movs	r1, #0
 80099cc:	6139      	str	r1, [r7, #16]
 80099ce:	f003 0308 	and.w	r3, r3, #8
 80099d2:	617b      	str	r3, [r7, #20]
 80099d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099d8:	460b      	mov	r3, r1
 80099da:	4313      	orrs	r3, r2
 80099dc:	d011      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e2:	3328      	adds	r3, #40	@ 0x28
 80099e4:	2100      	movs	r1, #0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 fa9c 	bl	800af24 <RCCEx_PLL3_Config>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80099f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	f003 0310 	and.w	r3, r3, #16
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	d011      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a22:	3328      	adds	r3, #40	@ 0x28
 8009a24:	2101      	movs	r1, #1
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 fa7c 	bl	800af24 <RCCEx_PLL3_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	607b      	str	r3, [r7, #4]
 8009a54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	d011      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a62:	3328      	adds	r3, #40	@ 0x28
 8009a64:	2102      	movs	r1, #2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 fa5c 	bl	800af24 <RCCEx_PLL3_Config>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009a82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	e000      	b.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009a96:	46bd      	mov	sp, r7
 8009a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a9c:	58024400 	.word	0x58024400

08009aa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b090      	sub	sp, #64	@ 0x40
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	f040 8094 	bne.w	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ab8:	4b9e      	ldr	r3, [pc, #632]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	f200 8087 	bhi.w	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009b0d 	.word	0x08009b0d
 8009ad8:	08009b35 	.word	0x08009b35
 8009adc:	08009bd1 	.word	0x08009bd1
 8009ae0:	08009b5d 	.word	0x08009b5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ae4:	4b93      	ldr	r3, [pc, #588]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009af0:	d108      	bne.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 f810 	bl	800ab1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b00:	f000 bd45 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b08:	f000 bd41 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b0c:	4b89      	ldr	r3, [pc, #548]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b18:	d108      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1a:	f107 0318 	add.w	r3, r7, #24
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fd54 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b28:	f000 bd31 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b30:	f000 bd2d 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b34:	4b7f      	ldr	r3, [pc, #508]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b40:	d108      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b42:	f107 030c 	add.w	r3, r7, #12
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fe94 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b50:	f000 bd1d 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b58:	f000 bd19 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b5c:	4b75      	ldr	r3, [pc, #468]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b66:	4b73      	ldr	r3, [pc, #460]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d10c      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d109      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b78:	4b6e      	ldr	r3, [pc, #440]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	08db      	lsrs	r3, r3, #3
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	4a6d      	ldr	r2, [pc, #436]	@ (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b84:	fa22 f303 	lsr.w	r3, r2, r3
 8009b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b8a:	e01f      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b8c:	4b69      	ldr	r3, [pc, #420]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b98:	d106      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba0:	d102      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ba2:	4b66      	ldr	r3, [pc, #408]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba6:	e011      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ba8:	4b62      	ldr	r3, [pc, #392]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bb4:	d106      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bbc:	d102      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bbe:	4b60      	ldr	r3, [pc, #384]	@ (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc2:	e003      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bc8:	f000 bce1 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bcc:	f000 bcdf 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd4:	f000 bcdb 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bdc:	f000 bcd7 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009be8:	430b      	orrs	r3, r1
 8009bea:	f040 80ad 	bne.w	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009bee:	4b51      	ldr	r3, [pc, #324]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009bf6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bfe:	d056      	beq.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c06:	f200 8090 	bhi.w	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c0e:	f000 8088 	beq.w	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c16:	f200 8088 	bhi.w	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	2b80      	cmp	r3, #128	@ 0x80
 8009c1e:	d032      	beq.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c22:	2b80      	cmp	r3, #128	@ 0x80
 8009c24:	f200 8081 	bhi.w	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	2b40      	cmp	r3, #64	@ 0x40
 8009c32:	d014      	beq.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009c34:	e079      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c36:	4b3f      	ldr	r3, [pc, #252]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c42:	d108      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 ff67 	bl	800ab1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c52:	f000 bc9c 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c5a:	f000 bc98 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c5e:	4b35      	ldr	r3, [pc, #212]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c6a:	d108      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6c:	f107 0318 	add.w	r3, r7, #24
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fcab 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c7a:	f000 bc88 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c82:	f000 bc84 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c86:	4b2b      	ldr	r3, [pc, #172]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c92:	d108      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fdeb 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca2:	f000 bc74 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009caa:	f000 bc70 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cae:	4b21      	ldr	r3, [pc, #132]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d10c      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d109      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cca:	4b1a      	ldr	r3, [pc, #104]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	08db      	lsrs	r3, r3, #3
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	4a18      	ldr	r2, [pc, #96]	@ (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cdc:	e01f      	b.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cde:	4b15      	ldr	r3, [pc, #84]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cea:	d106      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cf2:	d102      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cf4:	4b11      	ldr	r3, [pc, #68]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf8:	e011      	b.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d06:	d106      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d0e:	d102      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d10:	4b0b      	ldr	r3, [pc, #44]	@ (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d14:	e003      	b.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d1a:	f000 bc38 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d1e:	f000 bc36 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d22:	4b08      	ldr	r3, [pc, #32]	@ (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d26:	f000 bc32 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d2e:	f000 bc2e 	b.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d32:	bf00      	nop
 8009d34:	58024400 	.word	0x58024400
 8009d38:	03d09000 	.word	0x03d09000
 8009d3c:	003d0900 	.word	0x003d0900
 8009d40:	007a1200 	.word	0x007a1200
 8009d44:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d4c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009d50:	430b      	orrs	r3, r1
 8009d52:	f040 809c 	bne.w	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009d56:	4b9e      	ldr	r3, [pc, #632]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009d5e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d66:	d054      	beq.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d6e:	f200 808b 	bhi.w	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d78:	f000 8083 	beq.w	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d82:	f200 8081 	bhi.w	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d8c:	d02f      	beq.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d94:	d878      	bhi.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d004      	beq.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009da2:	d012      	beq.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009da4:	e070      	b.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009da6:	4b8a      	ldr	r3, [pc, #552]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009db2:	d107      	bne.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 feaf 	bl	800ab1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dc2:	e3e4      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc8:	e3e1      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dca:	4b81      	ldr	r3, [pc, #516]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dd6:	d107      	bne.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dd8:	f107 0318 	add.w	r3, r7, #24
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 fbf5 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009de6:	e3d2      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dec:	e3cf      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dee:	4b78      	ldr	r3, [pc, #480]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dfa:	d107      	bne.n	8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dfc:	f107 030c 	add.w	r3, r7, #12
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 fd37 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e0a:	e3c0      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e10:	e3bd      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e12:	4b6f      	ldr	r3, [pc, #444]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0304 	and.w	r3, r3, #4
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d10c      	bne.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e2e:	4b68      	ldr	r3, [pc, #416]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	08db      	lsrs	r3, r3, #3
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	4a66      	ldr	r2, [pc, #408]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e40:	e01e      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e42:	4b63      	ldr	r3, [pc, #396]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e4e:	d106      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e56:	d102      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e58:	4b5f      	ldr	r3, [pc, #380]	@ (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e5c:	e010      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e6a:	d106      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e72:	d102      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e74:	4b59      	ldr	r3, [pc, #356]	@ (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e78:	e002      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e7e:	e386      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e80:	e385      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e82:	4b57      	ldr	r3, [pc, #348]	@ (8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e86:	e382      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e8c:	e37f      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e92:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009e96:	430b      	orrs	r3, r1
 8009e98:	f040 80a7 	bne.w	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ea0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009ea4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009eac:	d055      	beq.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009eb4:	f200 8096 	bhi.w	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ebe:	f000 8084 	beq.w	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ec8:	f200 808c 	bhi.w	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ed2:	d030      	beq.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009eda:	f200 8083 	bhi.w	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009eea:	d012      	beq.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009eec:	e07a      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009eee:	4b38      	ldr	r3, [pc, #224]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009efa:	d107      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 fe0b 	bl	800ab1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f0a:	e340      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f10:	e33d      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f12:	4b2f      	ldr	r3, [pc, #188]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f1e:	d107      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f20:	f107 0318 	add.w	r3, r7, #24
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fb51 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2e:	e32e      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f34:	e32b      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f36:	4b26      	ldr	r3, [pc, #152]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f42:	d107      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f44:	f107 030c 	add.w	r3, r7, #12
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fc93 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f52:	e31c      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f58:	e319      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f64:	4b1a      	ldr	r3, [pc, #104]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d10c      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d109      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f76:	4b16      	ldr	r3, [pc, #88]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	08db      	lsrs	r3, r3, #3
 8009f7c:	f003 0303 	and.w	r3, r3, #3
 8009f80:	4a14      	ldr	r2, [pc, #80]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f82:	fa22 f303 	lsr.w	r3, r2, r3
 8009f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f88:	e01e      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f8a:	4b11      	ldr	r3, [pc, #68]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f96:	d106      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f9e:	d102      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa4:	e010      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fb2:	d106      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fba:	d102      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fbc:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc0:	e002      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fc6:	e2e2      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fc8:	e2e1      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fca:	4b05      	ldr	r3, [pc, #20]	@ (8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fce:	e2de      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fd0:	58024400 	.word	0x58024400
 8009fd4:	03d09000 	.word	0x03d09000
 8009fd8:	003d0900 	.word	0x003d0900
 8009fdc:	007a1200 	.word	0x007a1200
 8009fe0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe8:	e2d1      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009ff2:	430b      	orrs	r3, r1
 8009ff4:	f040 809c 	bne.w	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009ff8:	4b93      	ldr	r3, [pc, #588]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a000:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a008:	d054      	beq.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a010:	f200 808b 	bhi.w	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a01a:	f000 8083 	beq.w	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a024:	f200 8081 	bhi.w	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a02e:	d02f      	beq.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a036:	d878      	bhi.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a044:	d012      	beq.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a046:	e070      	b.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a048:	4b7f      	ldr	r3, [pc, #508]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a054:	d107      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 fd5e 	bl	800ab1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a064:	e293      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a06a:	e290      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a06c:	4b76      	ldr	r3, [pc, #472]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a078:	d107      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07a:	f107 0318 	add.w	r3, r7, #24
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 faa4 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a088:	e281      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a08e:	e27e      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a090:	4b6d      	ldr	r3, [pc, #436]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a09c:	d107      	bne.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a09e:	f107 030c 	add.w	r3, r7, #12
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fbe6 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ac:	e26f      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b2:	e26c      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0b4:	4b64      	ldr	r3, [pc, #400]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0be:	4b62      	ldr	r3, [pc, #392]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0304 	and.w	r3, r3, #4
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d10c      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d109      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0d0:	4b5d      	ldr	r3, [pc, #372]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	08db      	lsrs	r3, r3, #3
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	4a5c      	ldr	r2, [pc, #368]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0e2:	e01e      	b.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0e4:	4b58      	ldr	r3, [pc, #352]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0f0:	d106      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0f8:	d102      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0fa:	4b55      	ldr	r3, [pc, #340]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0fe:	e010      	b.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a100:	4b51      	ldr	r3, [pc, #324]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a10c:	d106      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a114:	d102      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a116:	4b4f      	ldr	r3, [pc, #316]	@ (800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a11a:	e002      	b.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a120:	e235      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a122:	e234      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a124:	4b4c      	ldr	r3, [pc, #304]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a128:	e231      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a12e:	e22e      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a130:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a134:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a138:	430b      	orrs	r3, r1
 800a13a:	f040 808f 	bne.w	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a13e:	4b42      	ldr	r3, [pc, #264]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a142:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a146:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a14e:	d06b      	beq.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a156:	d874      	bhi.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a15e:	d056      	beq.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a166:	d86c      	bhi.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a16e:	d03b      	beq.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a172:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a176:	d864      	bhi.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a17e:	d021      	beq.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a186:	d85c      	bhi.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a194:	d004      	beq.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a196:	e054      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a198:	f7fe fa0a 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 800a19c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a19e:	e1f6      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1a0:	4b29      	ldr	r3, [pc, #164]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1ac:	d107      	bne.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ae:	f107 0318 	add.w	r3, r7, #24
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 fa0a 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1bc:	e1e7      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c2:	e1e4      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1c4:	4b20      	ldr	r3, [pc, #128]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d0:	d107      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1d2:	f107 030c 	add.w	r3, r7, #12
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fb4c 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1e0:	e1d5      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e6:	e1d2      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1e8:	4b17      	ldr	r3, [pc, #92]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d109      	bne.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1f4:	4b14      	ldr	r3, [pc, #80]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	08db      	lsrs	r3, r3, #3
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	4a13      	ldr	r2, [pc, #76]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
 800a204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a206:	e1c2      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20c:	e1bf      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a20e:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a21a:	d102      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a21c:	4b0c      	ldr	r3, [pc, #48]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a220:	e1b5      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a226:	e1b2      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a228:	4b07      	ldr	r3, [pc, #28]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a234:	d102      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a236:	4b07      	ldr	r3, [pc, #28]	@ (800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a23a:	e1a8      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a240:	e1a5      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a246:	e1a2      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a248:	58024400 	.word	0x58024400
 800a24c:	03d09000 	.word	0x03d09000
 800a250:	003d0900 	.word	0x003d0900
 800a254:	007a1200 	.word	0x007a1200
 800a258:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a25c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a260:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a264:	430b      	orrs	r3, r1
 800a266:	d173      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a268:	4b9c      	ldr	r3, [pc, #624]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a26a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a26c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a270:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a278:	d02f      	beq.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a280:	d863      	bhi.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a28e:	d012      	beq.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a290:	e05b      	b.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a292:	4b92      	ldr	r3, [pc, #584]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a29a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a29e:	d107      	bne.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a0:	f107 0318 	add.w	r3, r7, #24
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 f991 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ae:	e16e      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b4:	e16b      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2b6:	4b89      	ldr	r3, [pc, #548]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c2:	d107      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c4:	f107 030c 	add.w	r3, r7, #12
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fad3 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2d2:	e15c      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d8:	e159      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2da:	4b80      	ldr	r3, [pc, #512]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2e4:	4b7d      	ldr	r3, [pc, #500]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0304 	and.w	r3, r3, #4
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	d10c      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d109      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2f6:	4b79      	ldr	r3, [pc, #484]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	08db      	lsrs	r3, r3, #3
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	4a77      	ldr	r2, [pc, #476]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a302:	fa22 f303 	lsr.w	r3, r2, r3
 800a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a308:	e01e      	b.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a30a:	4b74      	ldr	r3, [pc, #464]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a316:	d106      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a31e:	d102      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a320:	4b70      	ldr	r3, [pc, #448]	@ (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a324:	e010      	b.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a326:	4b6d      	ldr	r3, [pc, #436]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a32e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a332:	d106      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a33a:	d102      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a33c:	4b6a      	ldr	r3, [pc, #424]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a340:	e002      	b.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a346:	e122      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a348:	e121      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34e:	e11e      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a354:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a358:	430b      	orrs	r3, r1
 800a35a:	d133      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a35c:	4b5f      	ldr	r3, [pc, #380]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a35e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a364:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a372:	d012      	beq.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a374:	e023      	b.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a376:	4b59      	ldr	r3, [pc, #356]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a37e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a382:	d107      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fbc7 	bl	800ab1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a392:	e0fc      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a398:	e0f9      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a39a:	4b50      	ldr	r3, [pc, #320]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3a6:	d107      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a8:	f107 0318 	add.w	r3, r7, #24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 f90d 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b6:	e0ea      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3bc:	e0e7      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c2:	e0e4      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3c8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	f040 808d 	bne.w	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a3d2:	4b42      	ldr	r3, [pc, #264]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3d6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a3da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3e2:	d06b      	beq.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3ea:	d874      	bhi.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f2:	d056      	beq.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3fa:	d86c      	bhi.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a402:	d03b      	beq.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a40a:	d864      	bhi.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a412:	d021      	beq.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a41a:	d85c      	bhi.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d004      	beq.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a428:	d004      	beq.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a42a:	e054      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a42c:	f000 f8b8 	bl	800a5a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a430:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a432:	e0ac      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a434:	4b29      	ldr	r3, [pc, #164]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a43c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a440:	d107      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a442:	f107 0318 	add.w	r3, r7, #24
 800a446:	4618      	mov	r0, r3
 800a448:	f000 f8c0 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a450:	e09d      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a456:	e09a      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a458:	4b20      	ldr	r3, [pc, #128]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a464:	d107      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a466:	f107 030c 	add.w	r3, r7, #12
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 fa02 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a474:	e08b      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a47a:	e088      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a47c:	4b17      	ldr	r3, [pc, #92]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b04      	cmp	r3, #4
 800a486:	d109      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a488:	4b14      	ldr	r3, [pc, #80]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	08db      	lsrs	r3, r3, #3
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	4a13      	ldr	r2, [pc, #76]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a494:	fa22 f303 	lsr.w	r3, r2, r3
 800a498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a49a:	e078      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a0:	e075      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ae:	d102      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b4:	e06b      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ba:	e068      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4bc:	4b07      	ldr	r3, [pc, #28]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4c8:	d102      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a4ca:	4b07      	ldr	r3, [pc, #28]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ce:	e05e      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	e05b      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4da:	e058      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4dc:	58024400 	.word	0x58024400
 800a4e0:	03d09000 	.word	0x03d09000
 800a4e4:	003d0900 	.word	0x003d0900
 800a4e8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	d148      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a4f8:	4b27      	ldr	r3, [pc, #156]	@ (800a598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a4fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a500:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a508:	d02a      	beq.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a510:	d838      	bhi.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a514:	2b00      	cmp	r3, #0
 800a516:	d004      	beq.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a51e:	d00d      	beq.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a520:	e030      	b.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a522:	4b1d      	ldr	r3, [pc, #116]	@ (800a598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a52a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a52e:	d102      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a530:	4b1a      	ldr	r3, [pc, #104]	@ (800a59c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a534:	e02b      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a53a:	e028      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a53c:	4b16      	ldr	r3, [pc, #88]	@ (800a598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a548:	d107      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a54a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 fae4 	bl	800ab1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a558:	e019      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55e:	e016      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a560:	4b0d      	ldr	r3, [pc, #52]	@ (800a598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a56c:	d107      	bne.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a56e:	f107 0318 	add.w	r3, r7, #24
 800a572:	4618      	mov	r0, r3
 800a574:	f000 f82a 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a57c:	e007      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a582:	e004      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a588:	e001      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a590:	4618      	mov	r0, r3
 800a592:	3740      	adds	r7, #64	@ 0x40
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	58024400 	.word	0x58024400
 800a59c:	007a1200 	.word	0x007a1200

0800a5a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a5a4:	f7fd ffd4 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	4b06      	ldr	r3, [pc, #24]	@ (800a5c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	091b      	lsrs	r3, r3, #4
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	4904      	ldr	r1, [pc, #16]	@ (800a5c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a5b6:	5ccb      	ldrb	r3, [r1, r3]
 800a5b8:	f003 031f 	and.w	r3, r3, #31
 800a5bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	58024400 	.word	0x58024400
 800a5c8:	080156b8 	.word	0x080156b8

0800a5cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b089      	sub	sp, #36	@ 0x24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5d4:	4ba1      	ldr	r3, [pc, #644]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d8:	f003 0303 	and.w	r3, r3, #3
 800a5dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a5de:	4b9f      	ldr	r3, [pc, #636]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e2:	0b1b      	lsrs	r3, r3, #12
 800a5e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a5ea:	4b9c      	ldr	r3, [pc, #624]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ee:	091b      	lsrs	r3, r3, #4
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a5f6:	4b99      	ldr	r3, [pc, #612]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5fa:	08db      	lsrs	r3, r3, #3
 800a5fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	fb02 f303 	mul.w	r3, r2, r3
 800a606:	ee07 3a90 	vmov	s15, r3
 800a60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a60e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 8111 	beq.w	800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	f000 8083 	beq.w	800a728 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	2b02      	cmp	r3, #2
 800a626:	f200 80a1 	bhi.w	800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d003      	beq.n	800a638 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d056      	beq.n	800a6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a636:	e099      	b.n	800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a638:	4b88      	ldr	r3, [pc, #544]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b00      	cmp	r3, #0
 800a642:	d02d      	beq.n	800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a644:	4b85      	ldr	r3, [pc, #532]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	08db      	lsrs	r3, r3, #3
 800a64a:	f003 0303 	and.w	r3, r3, #3
 800a64e:	4a84      	ldr	r2, [pc, #528]	@ (800a860 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a650:	fa22 f303 	lsr.w	r3, r2, r3
 800a654:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	ee07 3a90 	vmov	s15, r3
 800a65c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	ee07 3a90 	vmov	s15, r3
 800a666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a66e:	4b7b      	ldr	r3, [pc, #492]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a67e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a682:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a68e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a69a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a69e:	e087      	b.n	800a7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a868 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b2:	4b6a      	ldr	r3, [pc, #424]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6e2:	e065      	b.n	800a7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a86c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a6f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f6:	4b59      	ldr	r3, [pc, #356]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a706:	ed97 6a03 	vldr	s12, [r7, #12]
 800a70a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a70e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a726:	e043      	b.n	800a7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a732:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a870 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a73a:	4b48      	ldr	r3, [pc, #288]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a742:	ee07 3a90 	vmov	s15, r3
 800a746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a74a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a74e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a75a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a76a:	e021      	b.n	800a7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	ee07 3a90 	vmov	s15, r3
 800a772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a776:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a86c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a77e:	4b37      	ldr	r3, [pc, #220]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a78e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a792:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a79e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a7b0:	4b2a      	ldr	r3, [pc, #168]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b4:	0a5b      	lsrs	r3, r3, #9
 800a7b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7d6:	ee17 2a90 	vmov	r2, s15
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a7de:	4b1f      	ldr	r3, [pc, #124]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e2:	0c1b      	lsrs	r3, r3, #16
 800a7e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a804:	ee17 2a90 	vmov	r2, s15
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a80c:	4b13      	ldr	r3, [pc, #76]	@ (800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a810:	0e1b      	lsrs	r3, r3, #24
 800a812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a816:	ee07 3a90 	vmov	s15, r3
 800a81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a822:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a826:	edd7 6a07 	vldr	s13, [r7, #28]
 800a82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a82e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a832:	ee17 2a90 	vmov	r2, s15
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a83a:	e008      	b.n	800a84e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	609a      	str	r2, [r3, #8]
}
 800a84e:	bf00      	nop
 800a850:	3724      	adds	r7, #36	@ 0x24
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
 800a860:	03d09000 	.word	0x03d09000
 800a864:	46000000 	.word	0x46000000
 800a868:	4c742400 	.word	0x4c742400
 800a86c:	4a742400 	.word	0x4a742400
 800a870:	4af42400 	.word	0x4af42400

0800a874 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a874:	b480      	push	{r7}
 800a876:	b089      	sub	sp, #36	@ 0x24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a87c:	4ba1      	ldr	r3, [pc, #644]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a880:	f003 0303 	and.w	r3, r3, #3
 800a884:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a886:	4b9f      	ldr	r3, [pc, #636]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a88a:	0d1b      	lsrs	r3, r3, #20
 800a88c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a890:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a892:	4b9c      	ldr	r3, [pc, #624]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a89e:	4b99      	ldr	r3, [pc, #612]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8a2:	08db      	lsrs	r3, r3, #3
 800a8a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	fb02 f303 	mul.w	r3, r2, r3
 800a8ae:	ee07 3a90 	vmov	s15, r3
 800a8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 8111 	beq.w	800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	f000 8083 	beq.w	800a9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	f200 80a1 	bhi.w	800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d003      	beq.n	800a8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d056      	beq.n	800a98c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a8de:	e099      	b.n	800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e0:	4b88      	ldr	r3, [pc, #544]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d02d      	beq.n	800a948 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8ec:	4b85      	ldr	r3, [pc, #532]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	08db      	lsrs	r3, r3, #3
 800a8f2:	f003 0303 	and.w	r3, r3, #3
 800a8f6:	4a84      	ldr	r2, [pc, #528]	@ (800ab08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	ee07 3a90 	vmov	s15, r3
 800a904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a916:	4b7b      	ldr	r3, [pc, #492]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a926:	ed97 6a03 	vldr	s12, [r7, #12]
 800a92a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a946:	e087      	b.n	800aa58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a952:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a95a:	4b6a      	ldr	r3, [pc, #424]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a96a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a96e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a97a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a97e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a982:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a98a:	e065      	b.n	800aa58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a996:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a99e:	4b59      	ldr	r3, [pc, #356]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ce:	e043      	b.n	800aa58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a9de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e2:	4b48      	ldr	r3, [pc, #288]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa12:	e021      	b.n	800aa58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	ee07 3a90 	vmov	s15, r3
 800aa1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa26:	4b37      	ldr	r3, [pc, #220]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa36:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aa58:	4b2a      	ldr	r3, [pc, #168]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5c:	0a5b      	lsrs	r3, r3, #9
 800aa5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa72:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa7e:	ee17 2a90 	vmov	r2, s15
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aa86:	4b1f      	ldr	r3, [pc, #124]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa8a:	0c1b      	lsrs	r3, r3, #16
 800aa8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaac:	ee17 2a90 	vmov	r2, s15
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aab4:	4b13      	ldr	r3, [pc, #76]	@ (800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab8:	0e1b      	lsrs	r3, r3, #24
 800aaba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aace:	edd7 6a07 	vldr	s13, [r7, #28]
 800aad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aada:	ee17 2a90 	vmov	r2, s15
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aae2:	e008      	b.n	800aaf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	609a      	str	r2, [r3, #8]
}
 800aaf6:	bf00      	nop
 800aaf8:	3724      	adds	r7, #36	@ 0x24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	58024400 	.word	0x58024400
 800ab08:	03d09000 	.word	0x03d09000
 800ab0c:	46000000 	.word	0x46000000
 800ab10:	4c742400 	.word	0x4c742400
 800ab14:	4a742400 	.word	0x4a742400
 800ab18:	4af42400 	.word	0x4af42400

0800ab1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b089      	sub	sp, #36	@ 0x24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab24:	4ba0      	ldr	r3, [pc, #640]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab28:	f003 0303 	and.w	r3, r3, #3
 800ab2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ab2e:	4b9e      	ldr	r3, [pc, #632]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab32:	091b      	lsrs	r3, r3, #4
 800ab34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab3a:	4b9b      	ldr	r3, [pc, #620]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab44:	4b98      	ldr	r3, [pc, #608]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab48:	08db      	lsrs	r3, r3, #3
 800ab4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	fb02 f303 	mul.w	r3, r2, r3
 800ab54:	ee07 3a90 	vmov	s15, r3
 800ab58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 8111 	beq.w	800ad8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	f000 8083 	beq.w	800ac76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	f200 80a1 	bhi.w	800acba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d056      	beq.n	800ac32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ab84:	e099      	b.n	800acba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab86:	4b88      	ldr	r3, [pc, #544]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d02d      	beq.n	800abee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab92:	4b85      	ldr	r3, [pc, #532]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	08db      	lsrs	r3, r3, #3
 800ab98:	f003 0303 	and.w	r3, r3, #3
 800ab9c:	4a83      	ldr	r2, [pc, #524]	@ (800adac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ab9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aba2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	ee07 3a90 	vmov	s15, r3
 800abb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abbc:	4b7a      	ldr	r3, [pc, #488]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc4:	ee07 3a90 	vmov	s15, r3
 800abc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800adb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800abec:	e087      	b.n	800acfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800adb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800abfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac00:	4b69      	ldr	r3, [pc, #420]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac14:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800adb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac30:	e065      	b.n	800acfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800adb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ac40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac44:	4b58      	ldr	r3, [pc, #352]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac58:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800adb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac74:	e043      	b.n	800acfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac80:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800adbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ac84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac88:	4b47      	ldr	r3, [pc, #284]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800adb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acb8:	e021      	b.n	800acfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	ee07 3a90 	vmov	s15, r3
 800acc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800adb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800acc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800accc:	4b36      	ldr	r3, [pc, #216]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd4:	ee07 3a90 	vmov	s15, r3
 800acd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800adb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ace4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acfc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800acfe:	4b2a      	ldr	r3, [pc, #168]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad02:	0a5b      	lsrs	r3, r3, #9
 800ad04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad08:	ee07 3a90 	vmov	s15, r3
 800ad0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad18:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad24:	ee17 2a90 	vmov	r2, s15
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ad2c:	4b1e      	ldr	r3, [pc, #120]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad30:	0c1b      	lsrs	r3, r3, #16
 800ad32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad52:	ee17 2a90 	vmov	r2, s15
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ad5a:	4b13      	ldr	r3, [pc, #76]	@ (800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad5e:	0e1b      	lsrs	r3, r3, #24
 800ad60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad64:	ee07 3a90 	vmov	s15, r3
 800ad68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad80:	ee17 2a90 	vmov	r2, s15
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ad88:	e008      	b.n	800ad9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	609a      	str	r2, [r3, #8]
}
 800ad9c:	bf00      	nop
 800ad9e:	3724      	adds	r7, #36	@ 0x24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	58024400 	.word	0x58024400
 800adac:	03d09000 	.word	0x03d09000
 800adb0:	46000000 	.word	0x46000000
 800adb4:	4c742400 	.word	0x4c742400
 800adb8:	4a742400 	.word	0x4a742400
 800adbc:	4af42400 	.word	0x4af42400

0800adc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adce:	4b53      	ldr	r3, [pc, #332]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800add0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add2:	f003 0303 	and.w	r3, r3, #3
 800add6:	2b03      	cmp	r3, #3
 800add8:	d101      	bne.n	800adde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e099      	b.n	800af12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800adde:	4b4f      	ldr	r3, [pc, #316]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a4e      	ldr	r2, [pc, #312]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ade4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ade8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adea:	f7f7 fa9d 	bl	8002328 <HAL_GetTick>
 800adee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800adf0:	e008      	b.n	800ae04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800adf2:	f7f7 fa99 	bl	8002328 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d901      	bls.n	800ae04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e086      	b.n	800af12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae04:	4b45      	ldr	r3, [pc, #276]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1f0      	bne.n	800adf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae10:	4b42      	ldr	r3, [pc, #264]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	031b      	lsls	r3, r3, #12
 800ae1e:	493f      	ldr	r1, [pc, #252]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae20:	4313      	orrs	r3, r2
 800ae22:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	025b      	lsls	r3, r3, #9
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	041b      	lsls	r3, r3, #16
 800ae42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae46:	431a      	orrs	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	061b      	lsls	r3, r3, #24
 800ae50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae54:	4931      	ldr	r1, [pc, #196]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae5a:	4b30      	ldr	r3, [pc, #192]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	492d      	ldr	r1, [pc, #180]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae6c:	4b2b      	ldr	r3, [pc, #172]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae70:	f023 0220 	bic.w	r2, r3, #32
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	4928      	ldr	r1, [pc, #160]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae7e:	4b27      	ldr	r3, [pc, #156]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae82:	4a26      	ldr	r2, [pc, #152]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae84:	f023 0310 	bic.w	r3, r3, #16
 800ae88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae8a:	4b24      	ldr	r3, [pc, #144]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae8e:	4b24      	ldr	r3, [pc, #144]	@ (800af20 <RCCEx_PLL2_Config+0x160>)
 800ae90:	4013      	ands	r3, r2
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	69d2      	ldr	r2, [r2, #28]
 800ae96:	00d2      	lsls	r2, r2, #3
 800ae98:	4920      	ldr	r1, [pc, #128]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ae9e:	4b1f      	ldr	r3, [pc, #124]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea2:	4a1e      	ldr	r2, [pc, #120]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aea4:	f043 0310 	orr.w	r3, r3, #16
 800aea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aeb0:	4b1a      	ldr	r3, [pc, #104]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aeb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb4:	4a19      	ldr	r2, [pc, #100]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aeb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aeba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aebc:	e00f      	b.n	800aede <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d106      	bne.n	800aed2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aec4:	4b15      	ldr	r3, [pc, #84]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec8:	4a14      	ldr	r2, [pc, #80]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aeca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aece:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aed0:	e005      	b.n	800aede <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aed2:	4b12      	ldr	r3, [pc, #72]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed6:	4a11      	ldr	r2, [pc, #68]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aed8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aedc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aede:	4b0f      	ldr	r3, [pc, #60]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a0e      	ldr	r2, [pc, #56]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800aee4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeea:	f7f7 fa1d 	bl	8002328 <HAL_GetTick>
 800aeee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aef0:	e008      	b.n	800af04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aef2:	f7f7 fa19 	bl	8002328 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d901      	bls.n	800af04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e006      	b.n	800af12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af04:	4b05      	ldr	r3, [pc, #20]	@ (800af1c <RCCEx_PLL2_Config+0x15c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0f0      	beq.n	800aef2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	58024400 	.word	0x58024400
 800af20:	ffff0007 	.word	0xffff0007

0800af24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af32:	4b53      	ldr	r3, [pc, #332]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800af34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af36:	f003 0303 	and.w	r3, r3, #3
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d101      	bne.n	800af42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e099      	b.n	800b076 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af42:	4b4f      	ldr	r3, [pc, #316]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a4e      	ldr	r2, [pc, #312]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800af48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af4e:	f7f7 f9eb 	bl	8002328 <HAL_GetTick>
 800af52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af54:	e008      	b.n	800af68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af56:	f7f7 f9e7 	bl	8002328 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	2b02      	cmp	r3, #2
 800af62:	d901      	bls.n	800af68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	e086      	b.n	800b076 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af68:	4b45      	ldr	r3, [pc, #276]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1f0      	bne.n	800af56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af74:	4b42      	ldr	r3, [pc, #264]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800af76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	051b      	lsls	r3, r3, #20
 800af82:	493f      	ldr	r1, [pc, #252]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800af84:	4313      	orrs	r3, r2
 800af86:	628b      	str	r3, [r1, #40]	@ 0x28
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	3b01      	subs	r3, #1
 800af98:	025b      	lsls	r3, r3, #9
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	431a      	orrs	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	041b      	lsls	r3, r3, #16
 800afa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afaa:	431a      	orrs	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	061b      	lsls	r3, r3, #24
 800afb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afb8:	4931      	ldr	r1, [pc, #196]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800afba:	4313      	orrs	r3, r2
 800afbc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800afbe:	4b30      	ldr	r3, [pc, #192]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800afc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	492d      	ldr	r1, [pc, #180]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800afd0:	4b2b      	ldr	r3, [pc, #172]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800afd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	4928      	ldr	r1, [pc, #160]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800afe2:	4b27      	ldr	r3, [pc, #156]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800afe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe6:	4a26      	ldr	r2, [pc, #152]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800afe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800afee:	4b24      	ldr	r3, [pc, #144]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800aff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aff2:	4b24      	ldr	r3, [pc, #144]	@ (800b084 <RCCEx_PLL3_Config+0x160>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	69d2      	ldr	r2, [r2, #28]
 800affa:	00d2      	lsls	r2, r2, #3
 800affc:	4920      	ldr	r1, [pc, #128]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800affe:	4313      	orrs	r3, r2
 800b000:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b002:	4b1f      	ldr	r3, [pc, #124]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b006:	4a1e      	ldr	r2, [pc, #120]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b00c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b014:	4b1a      	ldr	r3, [pc, #104]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b018:	4a19      	ldr	r2, [pc, #100]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b01a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b01e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b020:	e00f      	b.n	800b042 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d106      	bne.n	800b036 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b028:	4b15      	ldr	r3, [pc, #84]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02c:	4a14      	ldr	r2, [pc, #80]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b02e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b032:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b034:	e005      	b.n	800b042 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b036:	4b12      	ldr	r3, [pc, #72]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b03a:	4a11      	ldr	r2, [pc, #68]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b03c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b040:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b042:	4b0f      	ldr	r3, [pc, #60]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a0e      	ldr	r2, [pc, #56]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b04e:	f7f7 f96b 	bl	8002328 <HAL_GetTick>
 800b052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b054:	e008      	b.n	800b068 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b056:	f7f7 f967 	bl	8002328 <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	2b02      	cmp	r3, #2
 800b062:	d901      	bls.n	800b068 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e006      	b.n	800b076 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b068:	4b05      	ldr	r3, [pc, #20]	@ (800b080 <RCCEx_PLL3_Config+0x15c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d0f0      	beq.n	800b056 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b074:	7bfb      	ldrb	r3, [r7, #15]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	58024400 	.word	0x58024400
 800b084:	ffff0007 	.word	0xffff0007

0800b088 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e10f      	b.n	800b2ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a87      	ldr	r2, [pc, #540]	@ (800b2c4 <HAL_SPI_Init+0x23c>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d00f      	beq.n	800b0ca <HAL_SPI_Init+0x42>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a86      	ldr	r2, [pc, #536]	@ (800b2c8 <HAL_SPI_Init+0x240>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d00a      	beq.n	800b0ca <HAL_SPI_Init+0x42>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a84      	ldr	r2, [pc, #528]	@ (800b2cc <HAL_SPI_Init+0x244>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d005      	beq.n	800b0ca <HAL_SPI_Init+0x42>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	2b0f      	cmp	r3, #15
 800b0c4:	d901      	bls.n	800b0ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e0f7      	b.n	800b2ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fbba 	bl	800b844 <SPI_GetPacketSize>
 800b0d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a7b      	ldr	r2, [pc, #492]	@ (800b2c4 <HAL_SPI_Init+0x23c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d00c      	beq.n	800b0f6 <HAL_SPI_Init+0x6e>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a79      	ldr	r2, [pc, #484]	@ (800b2c8 <HAL_SPI_Init+0x240>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d007      	beq.n	800b0f6 <HAL_SPI_Init+0x6e>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a78      	ldr	r2, [pc, #480]	@ (800b2cc <HAL_SPI_Init+0x244>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d002      	beq.n	800b0f6 <HAL_SPI_Init+0x6e>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	d811      	bhi.n	800b11a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b0fa:	4a72      	ldr	r2, [pc, #456]	@ (800b2c4 <HAL_SPI_Init+0x23c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d009      	beq.n	800b114 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a70      	ldr	r2, [pc, #448]	@ (800b2c8 <HAL_SPI_Init+0x240>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d004      	beq.n	800b114 <HAL_SPI_Init+0x8c>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a6f      	ldr	r2, [pc, #444]	@ (800b2cc <HAL_SPI_Init+0x244>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d104      	bne.n	800b11e <HAL_SPI_Init+0x96>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b10      	cmp	r3, #16
 800b118:	d901      	bls.n	800b11e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e0cd      	b.n	800b2ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7f6 fb22 	bl	800177c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0201 	bic.w	r2, r2, #1
 800b14e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b15a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b164:	d119      	bne.n	800b19a <HAL_SPI_Init+0x112>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b16e:	d103      	bne.n	800b178 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b174:	2b00      	cmp	r3, #0
 800b176:	d008      	beq.n	800b18a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10c      	bne.n	800b19a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b188:	d107      	bne.n	800b19a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b198:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00f      	beq.n	800b1c6 <HAL_SPI_Init+0x13e>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b06      	cmp	r3, #6
 800b1ac:	d90b      	bls.n	800b1c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	e007      	b.n	800b1d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b1d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69da      	ldr	r2, [r3, #28]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e8:	ea42 0103 	orr.w	r1, r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	68da      	ldr	r2, [r3, #12]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	430a      	orrs	r2, r1
 800b1f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b206:	431a      	orrs	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	431a      	orrs	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	431a      	orrs	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	695b      	ldr	r3, [r3, #20]
 800b218:	431a      	orrs	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	431a      	orrs	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	431a      	orrs	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b22a:	431a      	orrs	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b236:	ea42 0103 	orr.w	r1, r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d113      	bne.n	800b276 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b260:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b274:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f022 0201 	bic.w	r2, r2, #1
 800b284:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00a      	beq.n	800b2a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	40013000 	.word	0x40013000
 800b2c8:	40003800 	.word	0x40003800
 800b2cc:	40003c00 	.word	0x40003c00

0800b2d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08a      	sub	sp, #40	@ 0x28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b2e8:	6a3a      	ldr	r2, [r7, #32]
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b302:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3330      	adds	r3, #48	@ 0x30
 800b30a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b312:	2b00      	cmp	r3, #0
 800b314:	d010      	beq.n	800b338 <HAL_SPI_IRQHandler+0x68>
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	f003 0308 	and.w	r3, r3, #8
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00b      	beq.n	800b338 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	699a      	ldr	r2, [r3, #24]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b32e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f9c3 	bl	800b6bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b336:	e192      	b.n	800b65e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d113      	bne.n	800b36a <HAL_SPI_IRQHandler+0x9a>
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10e      	bne.n	800b36a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b352:	2b00      	cmp	r3, #0
 800b354:	d009      	beq.n	800b36a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	4798      	blx	r3
    handled = 1UL;
 800b366:	2301      	movs	r3, #1
 800b368:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10f      	bne.n	800b394 <HAL_SPI_IRQHandler+0xc4>
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b384:	2b00      	cmp	r3, #0
 800b386:	d105      	bne.n	800b394 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	4798      	blx	r3
    handled = 1UL;
 800b390:	2301      	movs	r3, #1
 800b392:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10f      	bne.n	800b3be <HAL_SPI_IRQHandler+0xee>
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	f003 0302 	and.w	r3, r3, #2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00a      	beq.n	800b3be <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d105      	bne.n	800b3be <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	4798      	blx	r3
    handled = 1UL;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f040 8147 	bne.w	800b654 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	f003 0308 	and.w	r3, r3, #8
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 808b 	beq.w	800b4e8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	699a      	ldr	r2, [r3, #24]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f042 0208 	orr.w	r2, r2, #8
 800b3e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	699a      	ldr	r2, [r3, #24]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f042 0210 	orr.w	r2, r2, #16
 800b3f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	699a      	ldr	r2, [r3, #24]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b400:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	691a      	ldr	r2, [r3, #16]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f022 0208 	bic.w	r2, r2, #8
 800b410:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d13d      	bne.n	800b49c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b420:	e036      	b.n	800b490 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	d90b      	bls.n	800b442 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b432:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b434:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b43a:	1d1a      	adds	r2, r3, #4
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	665a      	str	r2, [r3, #100]	@ 0x64
 800b440:	e01d      	b.n	800b47e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	2b07      	cmp	r3, #7
 800b448:	d90b      	bls.n	800b462 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	8812      	ldrh	r2, [r2, #0]
 800b452:	b292      	uxth	r2, r2
 800b454:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b45a:	1c9a      	adds	r2, r3, #2
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	665a      	str	r2, [r3, #100]	@ 0x64
 800b460:	e00d      	b.n	800b47e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b46e:	7812      	ldrb	r2, [r2, #0]
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b484:	b29b      	uxth	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	b29a      	uxth	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b496:	b29b      	uxth	r3, r3
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1c2      	bne.n	800b422 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f931 	bl	800b704 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d003      	beq.n	800b4bc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f8f7 	bl	800b6a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b4ba:	e0d0      	b.n	800b65e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b4bc:	7cfb      	ldrb	r3, [r7, #19]
 800b4be:	2b05      	cmp	r3, #5
 800b4c0:	d103      	bne.n	800b4ca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f8e6 	bl	800b694 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b4c8:	e0c6      	b.n	800b658 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b4ca:	7cfb      	ldrb	r3, [r7, #19]
 800b4cc:	2b04      	cmp	r3, #4
 800b4ce:	d103      	bne.n	800b4d8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f8d5 	bl	800b680 <HAL_SPI_RxCpltCallback>
    return;
 800b4d6:	e0bf      	b.n	800b658 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b4d8:	7cfb      	ldrb	r3, [r7, #19]
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	f040 80bc 	bne.w	800b658 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f8c3 	bl	800b66c <HAL_SPI_TxCpltCallback>
    return;
 800b4e6:	e0b7      	b.n	800b658 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 80b5 	beq.w	800b65e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00f      	beq.n	800b51e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b504:	f043 0204 	orr.w	r2, r3, #4
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	699a      	ldr	r2, [r3, #24]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b51c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00f      	beq.n	800b548 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b52e:	f043 0201 	orr.w	r2, r3, #1
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	699a      	ldr	r2, [r3, #24]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b546:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00f      	beq.n	800b572 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b558:	f043 0208 	orr.w	r2, r3, #8
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	699a      	ldr	r2, [r3, #24]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b570:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	f003 0320 	and.w	r3, r3, #32
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00f      	beq.n	800b59c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b582:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0220 	orr.w	r2, r2, #32
 800b59a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d05a      	beq.n	800b65c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f022 0201 	bic.w	r2, r2, #1
 800b5b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	6919      	ldr	r1, [r3, #16]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	4b28      	ldr	r3, [pc, #160]	@ (800b664 <HAL_SPI_IRQHandler+0x394>)
 800b5c2:	400b      	ands	r3, r1
 800b5c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b5cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b5d0:	d138      	bne.n	800b644 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b5e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d013      	beq.n	800b612 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5ee:	4a1e      	ldr	r2, [pc, #120]	@ (800b668 <HAL_SPI_IRQHandler+0x398>)
 800b5f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7f8 fe8c 	bl	8004314 <HAL_DMA_Abort_IT>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b608:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b616:	2b00      	cmp	r3, #0
 800b618:	d020      	beq.n	800b65c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b61e:	4a12      	ldr	r2, [pc, #72]	@ (800b668 <HAL_SPI_IRQHandler+0x398>)
 800b620:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b626:	4618      	mov	r0, r3
 800b628:	f7f8 fe74 	bl	8004314 <HAL_DMA_Abort_IT>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d014      	beq.n	800b65c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b638:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b642:	e00b      	b.n	800b65c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f82b 	bl	800b6a8 <HAL_SPI_ErrorCallback>
    return;
 800b652:	e003      	b.n	800b65c <HAL_SPI_IRQHandler+0x38c>
    return;
 800b654:	bf00      	nop
 800b656:	e002      	b.n	800b65e <HAL_SPI_IRQHandler+0x38e>
    return;
 800b658:	bf00      	nop
 800b65a:	e000      	b.n	800b65e <HAL_SPI_IRQHandler+0x38e>
    return;
 800b65c:	bf00      	nop
  }
}
 800b65e:	3728      	adds	r7, #40	@ 0x28
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	fffffc94 	.word	0xfffffc94
 800b668:	0800b6d1 	.word	0x0800b6d1

0800b66c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7ff ffd6 	bl	800b6a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6fc:	bf00      	nop
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699a      	ldr	r2, [r3, #24]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f042 0208 	orr.w	r2, r2, #8
 800b722:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	699a      	ldr	r2, [r3, #24]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0210 	orr.w	r2, r2, #16
 800b732:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0201 	bic.w	r2, r2, #1
 800b742:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6919      	ldr	r1, [r3, #16]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	4b3c      	ldr	r3, [pc, #240]	@ (800b840 <SPI_CloseTransfer+0x13c>)
 800b750:	400b      	ands	r3, r1
 800b752:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	689a      	ldr	r2, [r3, #8]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b762:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	d014      	beq.n	800b79a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f003 0320 	and.w	r3, r3, #32
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00f      	beq.n	800b79a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b780:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	699a      	ldr	r2, [r3, #24]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f042 0220 	orr.w	r2, r2, #32
 800b798:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d014      	beq.n	800b7d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00f      	beq.n	800b7d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7b6:	f043 0204 	orr.w	r2, r3, #4
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00f      	beq.n	800b7fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7e0:	f043 0201 	orr.w	r2, r3, #1
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	699a      	ldr	r2, [r3, #24]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00f      	beq.n	800b824 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b80a:	f043 0208 	orr.w	r2, r3, #8
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	699a      	ldr	r2, [r3, #24]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b822:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b834:	bf00      	nop
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	fffffc90 	.word	0xfffffc90

0800b844 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b850:	095b      	lsrs	r3, r3, #5
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	3301      	adds	r3, #1
 800b85c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	3307      	adds	r3, #7
 800b862:	08db      	lsrs	r3, r3, #3
 800b864:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	e049      	b.n	800b920 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b00      	cmp	r3, #0
 800b896:	d106      	bne.n	800b8a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f841 	bl	800b928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	f000 f9e7 	bl	800bc8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d001      	beq.n	800b954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e054      	b.n	800b9fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2202      	movs	r2, #2
 800b958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68da      	ldr	r2, [r3, #12]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f042 0201 	orr.w	r2, r2, #1
 800b96a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a26      	ldr	r2, [pc, #152]	@ (800ba0c <HAL_TIM_Base_Start_IT+0xd0>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d022      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b97e:	d01d      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a22      	ldr	r2, [pc, #136]	@ (800ba10 <HAL_TIM_Base_Start_IT+0xd4>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d018      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a21      	ldr	r2, [pc, #132]	@ (800ba14 <HAL_TIM_Base_Start_IT+0xd8>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d013      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a1f      	ldr	r2, [pc, #124]	@ (800ba18 <HAL_TIM_Base_Start_IT+0xdc>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d00e      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba1c <HAL_TIM_Base_Start_IT+0xe0>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d009      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a1c      	ldr	r2, [pc, #112]	@ (800ba20 <HAL_TIM_Base_Start_IT+0xe4>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d004      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a1b      	ldr	r2, [pc, #108]	@ (800ba24 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d115      	bne.n	800b9e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689a      	ldr	r2, [r3, #8]
 800b9c2:	4b19      	ldr	r3, [pc, #100]	@ (800ba28 <HAL_TIM_Base_Start_IT+0xec>)
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b06      	cmp	r3, #6
 800b9cc:	d015      	beq.n	800b9fa <HAL_TIM_Base_Start_IT+0xbe>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9d4:	d011      	beq.n	800b9fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f042 0201 	orr.w	r2, r2, #1
 800b9e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9e6:	e008      	b.n	800b9fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f042 0201 	orr.w	r2, r2, #1
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	e000      	b.n	800b9fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3714      	adds	r7, #20
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	40010000 	.word	0x40010000
 800ba10:	40000400 	.word	0x40000400
 800ba14:	40000800 	.word	0x40000800
 800ba18:	40000c00 	.word	0x40000c00
 800ba1c:	40010400 	.word	0x40010400
 800ba20:	40001800 	.word	0x40001800
 800ba24:	40014000 	.word	0x40014000
 800ba28:	00010007 	.word	0x00010007

0800ba2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d020      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d01b      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f06f 0202 	mvn.w	r2, #2
 800ba60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f8e9 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800ba7c:	e005      	b.n	800ba8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f8db 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f8ec 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f003 0304 	and.w	r3, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d020      	beq.n	800badc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d01b      	beq.n	800badc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f06f 0204 	mvn.w	r2, #4
 800baac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2202      	movs	r2, #2
 800bab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f8c3 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800bac8:	e005      	b.n	800bad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f8b5 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f8c6 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d020      	beq.n	800bb28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f003 0308 	and.w	r3, r3, #8
 800baec:	2b00      	cmp	r3, #0
 800baee:	d01b      	beq.n	800bb28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f06f 0208 	mvn.w	r2, #8
 800baf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2204      	movs	r2, #4
 800bafe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	f003 0303 	and.w	r3, r3, #3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f89d 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800bb14:	e005      	b.n	800bb22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f88f 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f8a0 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f003 0310 	and.w	r3, r3, #16
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d020      	beq.n	800bb74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f003 0310 	and.w	r3, r3, #16
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01b      	beq.n	800bb74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f06f 0210 	mvn.w	r2, #16
 800bb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2208      	movs	r2, #8
 800bb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f877 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800bb60:	e005      	b.n	800bb6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f869 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f87a 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00c      	beq.n	800bb98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f06f 0201 	mvn.w	r2, #1
 800bb90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7f5 fb2a 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00c      	beq.n	800bbc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d007      	beq.n	800bbc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bbbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f90d 	bl	800bde0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00c      	beq.n	800bbea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d007      	beq.n	800bbea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bbe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f905 	bl	800bdf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00c      	beq.n	800bc0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f834 	bl	800bc76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f003 0320 	and.w	r3, r3, #32
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00c      	beq.n	800bc32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f003 0320 	and.w	r3, r3, #32
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d007      	beq.n	800bc32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f06f 0220 	mvn.w	r2, #32
 800bc2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f8cd 	bl	800bdcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc32:	bf00      	nop
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc7e:	bf00      	nop
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
	...

0800bc8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a43      	ldr	r2, [pc, #268]	@ (800bdac <TIM_Base_SetConfig+0x120>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d013      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcaa:	d00f      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a40      	ldr	r2, [pc, #256]	@ (800bdb0 <TIM_Base_SetConfig+0x124>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00b      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a3f      	ldr	r2, [pc, #252]	@ (800bdb4 <TIM_Base_SetConfig+0x128>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d007      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a3e      	ldr	r2, [pc, #248]	@ (800bdb8 <TIM_Base_SetConfig+0x12c>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d003      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a3d      	ldr	r2, [pc, #244]	@ (800bdbc <TIM_Base_SetConfig+0x130>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d108      	bne.n	800bcde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a32      	ldr	r2, [pc, #200]	@ (800bdac <TIM_Base_SetConfig+0x120>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d01f      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcec:	d01b      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a2f      	ldr	r2, [pc, #188]	@ (800bdb0 <TIM_Base_SetConfig+0x124>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d017      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a2e      	ldr	r2, [pc, #184]	@ (800bdb4 <TIM_Base_SetConfig+0x128>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d013      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a2d      	ldr	r2, [pc, #180]	@ (800bdb8 <TIM_Base_SetConfig+0x12c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d00f      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a2c      	ldr	r2, [pc, #176]	@ (800bdbc <TIM_Base_SetConfig+0x130>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d00b      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a2b      	ldr	r2, [pc, #172]	@ (800bdc0 <TIM_Base_SetConfig+0x134>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d007      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a2a      	ldr	r2, [pc, #168]	@ (800bdc4 <TIM_Base_SetConfig+0x138>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d003      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a29      	ldr	r2, [pc, #164]	@ (800bdc8 <TIM_Base_SetConfig+0x13c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d108      	bne.n	800bd38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	689a      	ldr	r2, [r3, #8]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a14      	ldr	r2, [pc, #80]	@ (800bdac <TIM_Base_SetConfig+0x120>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d00f      	beq.n	800bd7e <TIM_Base_SetConfig+0xf2>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a16      	ldr	r2, [pc, #88]	@ (800bdbc <TIM_Base_SetConfig+0x130>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00b      	beq.n	800bd7e <TIM_Base_SetConfig+0xf2>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a15      	ldr	r2, [pc, #84]	@ (800bdc0 <TIM_Base_SetConfig+0x134>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d007      	beq.n	800bd7e <TIM_Base_SetConfig+0xf2>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a14      	ldr	r2, [pc, #80]	@ (800bdc4 <TIM_Base_SetConfig+0x138>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d003      	beq.n	800bd7e <TIM_Base_SetConfig+0xf2>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a13      	ldr	r2, [pc, #76]	@ (800bdc8 <TIM_Base_SetConfig+0x13c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d103      	bne.n	800bd86 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	691a      	ldr	r2, [r3, #16]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f043 0204 	orr.w	r2, r3, #4
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	601a      	str	r2, [r3, #0]
}
 800bd9e:	bf00      	nop
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	40010000 	.word	0x40010000
 800bdb0:	40000400 	.word	0x40000400
 800bdb4:	40000800 	.word	0x40000800
 800bdb8:	40000c00 	.word	0x40000c00
 800bdbc:	40010400 	.word	0x40010400
 800bdc0:	40014000 	.word	0x40014000
 800bdc4:	40014400 	.word	0x40014400
 800bdc8:	40014800 	.word	0x40014800

0800bdcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e042      	b.n	800bea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7f5 fc1f 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2224      	movs	r2, #36	@ 0x24
 800be36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f022 0201 	bic.w	r2, r2, #1
 800be48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f001 fadc 	bl	800d410 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fd71 	bl	800c940 <UART_SetConfig>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b01      	cmp	r3, #1
 800be62:	d101      	bne.n	800be68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e01b      	b.n	800bea0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f042 0201 	orr.w	r2, r2, #1
 800be96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f001 fb5b 	bl	800d554 <UART_CheckIdleState>
 800be9e:	4603      	mov	r3, r0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	@ 0x28
 800beac:	af02      	add	r7, sp, #8
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	4613      	mov	r3, r2
 800beb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bebe:	2b20      	cmp	r3, #32
 800bec0:	d17b      	bne.n	800bfba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d002      	beq.n	800bece <HAL_UART_Transmit+0x26>
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e074      	b.n	800bfbc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2221      	movs	r2, #33	@ 0x21
 800bede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bee2:	f7f6 fa21 	bl	8002328 <HAL_GetTick>
 800bee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	88fa      	ldrh	r2, [r7, #6]
 800beec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	88fa      	ldrh	r2, [r7, #6]
 800bef4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf00:	d108      	bne.n	800bf14 <HAL_UART_Transmit+0x6c>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d104      	bne.n	800bf14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	61bb      	str	r3, [r7, #24]
 800bf12:	e003      	b.n	800bf1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf1c:	e030      	b.n	800bf80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	2200      	movs	r2, #0
 800bf26:	2180      	movs	r1, #128	@ 0x80
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f001 fbbd 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2220      	movs	r2, #32
 800bf38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e03d      	b.n	800bfbc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10b      	bne.n	800bf5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	3302      	adds	r3, #2
 800bf5a:	61bb      	str	r3, [r7, #24]
 800bf5c:	e007      	b.n	800bf6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	781a      	ldrb	r2, [r3, #0]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1c8      	bne.n	800bf1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	2200      	movs	r2, #0
 800bf94:	2140      	movs	r1, #64	@ 0x40
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f001 fb86 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d005      	beq.n	800bfae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e006      	b.n	800bfbc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	e000      	b.n	800bfbc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bfba:	2302      	movs	r3, #2
  }
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b08a      	sub	sp, #40	@ 0x28
 800bfc8:	af02      	add	r7, sp, #8
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	603b      	str	r3, [r7, #0]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfda:	2b20      	cmp	r3, #32
 800bfdc:	f040 80b5 	bne.w	800c14a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d002      	beq.n	800bfec <HAL_UART_Receive+0x28>
 800bfe6:	88fb      	ldrh	r3, [r7, #6]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d101      	bne.n	800bff0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e0ad      	b.n	800c14c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2222      	movs	r2, #34	@ 0x22
 800bffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c006:	f7f6 f98f 	bl	8002328 <HAL_GetTick>
 800c00a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	88fa      	ldrh	r2, [r7, #6]
 800c010:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	88fa      	ldrh	r2, [r7, #6]
 800c018:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c024:	d10e      	bne.n	800c044 <HAL_UART_Receive+0x80>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d105      	bne.n	800c03a <HAL_UART_Receive+0x76>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c038:	e02d      	b.n	800c096 <HAL_UART_Receive+0xd2>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	22ff      	movs	r2, #255	@ 0xff
 800c03e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c042:	e028      	b.n	800c096 <HAL_UART_Receive+0xd2>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10d      	bne.n	800c068 <HAL_UART_Receive+0xa4>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d104      	bne.n	800c05e <HAL_UART_Receive+0x9a>
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	22ff      	movs	r2, #255	@ 0xff
 800c058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c05c:	e01b      	b.n	800c096 <HAL_UART_Receive+0xd2>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	227f      	movs	r2, #127	@ 0x7f
 800c062:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c066:	e016      	b.n	800c096 <HAL_UART_Receive+0xd2>
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c070:	d10d      	bne.n	800c08e <HAL_UART_Receive+0xca>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d104      	bne.n	800c084 <HAL_UART_Receive+0xc0>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	227f      	movs	r2, #127	@ 0x7f
 800c07e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c082:	e008      	b.n	800c096 <HAL_UART_Receive+0xd2>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	223f      	movs	r2, #63	@ 0x3f
 800c088:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c08c:	e003      	b.n	800c096 <HAL_UART_Receive+0xd2>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c09c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0a6:	d108      	bne.n	800c0ba <HAL_UART_Receive+0xf6>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	61bb      	str	r3, [r7, #24]
 800c0b8:	e003      	b.n	800c0c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c0c2:	e036      	b.n	800c132 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	2120      	movs	r1, #32
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f001 faea 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d005      	beq.n	800c0e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e032      	b.n	800c14c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10c      	bne.n	800c106 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	8a7b      	ldrh	r3, [r7, #18]
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	3302      	adds	r3, #2
 800c102:	61bb      	str	r3, [r7, #24]
 800c104:	e00c      	b.n	800c120 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	8a7b      	ldrh	r3, [r7, #18]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	4013      	ands	r3, r2
 800c114:	b2da      	uxtb	r2, r3
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	3301      	adds	r3, #1
 800c11e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c126:	b29b      	uxth	r3, r3
 800c128:	3b01      	subs	r3, #1
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c138:	b29b      	uxth	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1c2      	bne.n	800c0c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2220      	movs	r2, #32
 800c142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	e000      	b.n	800c14c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c14a:	2302      	movs	r3, #2
  }
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3720      	adds	r7, #32
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b0ba      	sub	sp, #232	@ 0xe8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c17a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c17e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c182:	4013      	ands	r3, r2
 800c184:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11b      	bne.n	800c1c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c194:	f003 0320 	and.w	r3, r3, #32
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d015      	beq.n	800c1c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1a0:	f003 0320 	and.w	r3, r3, #32
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d105      	bne.n	800c1b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d009      	beq.n	800c1c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 8393 	beq.w	800c8e4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	4798      	blx	r3
      }
      return;
 800c1c6:	e38d      	b.n	800c8e4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c1c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 8123 	beq.w	800c418 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c1d6:	4b8d      	ldr	r3, [pc, #564]	@ (800c40c <HAL_UART_IRQHandler+0x2b8>)
 800c1d8:	4013      	ands	r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c1de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c1e2:	4b8b      	ldr	r3, [pc, #556]	@ (800c410 <HAL_UART_IRQHandler+0x2bc>)
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 8116 	beq.w	800c418 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d011      	beq.n	800c21c <HAL_UART_IRQHandler+0xc8>
 800c1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2201      	movs	r2, #1
 800c20a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c212:	f043 0201 	orr.w	r2, r3, #1
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c220:	f003 0302 	and.w	r3, r3, #2
 800c224:	2b00      	cmp	r3, #0
 800c226:	d011      	beq.n	800c24c <HAL_UART_IRQHandler+0xf8>
 800c228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c22c:	f003 0301 	and.w	r3, r3, #1
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2202      	movs	r2, #2
 800c23a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c242:	f043 0204 	orr.w	r2, r3, #4
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c250:	f003 0304 	and.w	r3, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	d011      	beq.n	800c27c <HAL_UART_IRQHandler+0x128>
 800c258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00b      	beq.n	800c27c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2204      	movs	r2, #4
 800c26a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c272:	f043 0202 	orr.w	r2, r3, #2
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c280:	f003 0308 	and.w	r3, r3, #8
 800c284:	2b00      	cmp	r3, #0
 800c286:	d017      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c28c:	f003 0320 	and.w	r3, r3, #32
 800c290:	2b00      	cmp	r3, #0
 800c292:	d105      	bne.n	800c2a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c294:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c298:	4b5c      	ldr	r3, [pc, #368]	@ (800c40c <HAL_UART_IRQHandler+0x2b8>)
 800c29a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2208      	movs	r2, #8
 800c2a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2ae:	f043 0208 	orr.w	r2, r3, #8
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d012      	beq.n	800c2ea <HAL_UART_IRQHandler+0x196>
 800c2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00c      	beq.n	800c2ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e0:	f043 0220 	orr.w	r2, r3, #32
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 82f9 	beq.w	800c8e8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2fa:	f003 0320 	and.w	r3, r3, #32
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d013      	beq.n	800c32a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c306:	f003 0320 	and.w	r3, r3, #32
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d105      	bne.n	800c31a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d007      	beq.n	800c32a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c330:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c33e:	2b40      	cmp	r3, #64	@ 0x40
 800c340:	d005      	beq.n	800c34e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c346:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d054      	beq.n	800c3f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f001 fa18 	bl	800d784 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c35e:	2b40      	cmp	r3, #64	@ 0x40
 800c360:	d146      	bne.n	800c3f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	3308      	adds	r3, #8
 800c368:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c378:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c37c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3308      	adds	r3, #8
 800c38a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c38e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c392:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c39a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c39e:	e841 2300 	strex	r3, r2, [r1]
 800c3a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c3a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1d9      	bne.n	800c362 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d017      	beq.n	800c3e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3be:	4a15      	ldr	r2, [pc, #84]	@ (800c414 <HAL_UART_IRQHandler+0x2c0>)
 800c3c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7f7 ffa3 	bl	8004314 <HAL_DMA_Abort_IT>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d019      	beq.n	800c408 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3e6:	e00f      	b.n	800c408 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fa93 	bl	800c914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ee:	e00b      	b.n	800c408 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fa8f 	bl	800c914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f6:	e007      	b.n	800c408 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fa8b 	bl	800c914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c406:	e26f      	b.n	800c8e8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c408:	bf00      	nop
    return;
 800c40a:	e26d      	b.n	800c8e8 <HAL_UART_IRQHandler+0x794>
 800c40c:	10000001 	.word	0x10000001
 800c410:	04000120 	.word	0x04000120
 800c414:	0800d851 	.word	0x0800d851

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	f040 8203 	bne.w	800c828 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c426:	f003 0310 	and.w	r3, r3, #16
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 81fc 	beq.w	800c828 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c434:	f003 0310 	and.w	r3, r3, #16
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 81f5 	beq.w	800c828 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2210      	movs	r2, #16
 800c444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c450:	2b40      	cmp	r3, #64	@ 0x40
 800c452:	f040 816d 	bne.w	800c730 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4aa4      	ldr	r2, [pc, #656]	@ (800c6f0 <HAL_UART_IRQHandler+0x59c>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d068      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4aa1      	ldr	r2, [pc, #644]	@ (800c6f4 <HAL_UART_IRQHandler+0x5a0>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d061      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a9f      	ldr	r2, [pc, #636]	@ (800c6f8 <HAL_UART_IRQHandler+0x5a4>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d05a      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a9c      	ldr	r2, [pc, #624]	@ (800c6fc <HAL_UART_IRQHandler+0x5a8>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d053      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a9a      	ldr	r2, [pc, #616]	@ (800c700 <HAL_UART_IRQHandler+0x5ac>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d04c      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a97      	ldr	r2, [pc, #604]	@ (800c704 <HAL_UART_IRQHandler+0x5b0>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d045      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a95      	ldr	r2, [pc, #596]	@ (800c708 <HAL_UART_IRQHandler+0x5b4>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d03e      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a92      	ldr	r2, [pc, #584]	@ (800c70c <HAL_UART_IRQHandler+0x5b8>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d037      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a90      	ldr	r2, [pc, #576]	@ (800c710 <HAL_UART_IRQHandler+0x5bc>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d030      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a8d      	ldr	r2, [pc, #564]	@ (800c714 <HAL_UART_IRQHandler+0x5c0>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d029      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a8b      	ldr	r2, [pc, #556]	@ (800c718 <HAL_UART_IRQHandler+0x5c4>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d022      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a88      	ldr	r2, [pc, #544]	@ (800c71c <HAL_UART_IRQHandler+0x5c8>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d01b      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a86      	ldr	r2, [pc, #536]	@ (800c720 <HAL_UART_IRQHandler+0x5cc>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d014      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a83      	ldr	r2, [pc, #524]	@ (800c724 <HAL_UART_IRQHandler+0x5d0>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d00d      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a81      	ldr	r2, [pc, #516]	@ (800c728 <HAL_UART_IRQHandler+0x5d4>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d006      	beq.n	800c536 <HAL_UART_IRQHandler+0x3e2>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a7e      	ldr	r2, [pc, #504]	@ (800c72c <HAL_UART_IRQHandler+0x5d8>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d106      	bne.n	800c544 <HAL_UART_IRQHandler+0x3f0>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	b29b      	uxth	r3, r3
 800c542:	e005      	b.n	800c550 <HAL_UART_IRQHandler+0x3fc>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	b29b      	uxth	r3, r3
 800c550:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 80ad 	beq.w	800c6b8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c568:	429a      	cmp	r2, r3
 800c56a:	f080 80a5 	bcs.w	800c6b8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c584:	f000 8087 	beq.w	800c696 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c594:	e853 3f00 	ldrex	r3, [r3]
 800c598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c59c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c5b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c5be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5c2:	e841 2300 	strex	r3, r2, [r1]
 800c5c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c5ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1da      	bne.n	800c588 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5e4:	f023 0301 	bic.w	r3, r3, #1
 800c5e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c602:	e841 2300 	strex	r3, r2, [r1]
 800c606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1e1      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3308      	adds	r3, #8
 800c614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c618:	e853 3f00 	ldrex	r3, [r3]
 800c61c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c61e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3308      	adds	r3, #8
 800c62e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c63a:	e841 2300 	strex	r3, r2, [r1]
 800c63e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1e3      	bne.n	800c60e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2220      	movs	r2, #32
 800c64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c65c:	e853 3f00 	ldrex	r3, [r3]
 800c660:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c664:	f023 0310 	bic.w	r3, r3, #16
 800c668:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	461a      	mov	r2, r3
 800c672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c676:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c678:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c67c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c67e:	e841 2300 	strex	r3, r2, [r1]
 800c682:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1e4      	bne.n	800c654 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c690:	4618      	mov	r0, r3
 800c692:	f7f7 fb21 	bl	8003cd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2202      	movs	r2, #2
 800c69a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f939 	bl	800c928 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c6b6:	e119      	b.n	800c8ec <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	f040 8112 	bne.w	800c8ec <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6ce:	69db      	ldr	r3, [r3, #28]
 800c6d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6d4:	f040 810a 	bne.w	800c8ec <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f91e 	bl	800c928 <HAL_UARTEx_RxEventCallback>
      return;
 800c6ec:	e0fe      	b.n	800c8ec <HAL_UART_IRQHandler+0x798>
 800c6ee:	bf00      	nop
 800c6f0:	40020010 	.word	0x40020010
 800c6f4:	40020028 	.word	0x40020028
 800c6f8:	40020040 	.word	0x40020040
 800c6fc:	40020058 	.word	0x40020058
 800c700:	40020070 	.word	0x40020070
 800c704:	40020088 	.word	0x40020088
 800c708:	400200a0 	.word	0x400200a0
 800c70c:	400200b8 	.word	0x400200b8
 800c710:	40020410 	.word	0x40020410
 800c714:	40020428 	.word	0x40020428
 800c718:	40020440 	.word	0x40020440
 800c71c:	40020458 	.word	0x40020458
 800c720:	40020470 	.word	0x40020470
 800c724:	40020488 	.word	0x40020488
 800c728:	400204a0 	.word	0x400204a0
 800c72c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f000 80cf 	beq.w	800c8f0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800c752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 80ca 	beq.w	800c8f0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	e853 3f00 	ldrex	r3, [r3]
 800c768:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c76c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	461a      	mov	r2, r3
 800c77a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c77e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c780:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e4      	bne.n	800c75c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3308      	adds	r3, #8
 800c798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c7a2:	6a3a      	ldr	r2, [r7, #32]
 800c7a4:	4b55      	ldr	r3, [pc, #340]	@ (800c8fc <HAL_UART_IRQHandler+0x7a8>)
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3308      	adds	r3, #8
 800c7b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c7b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1e3      	bne.n	800c792 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2220      	movs	r2, #32
 800c7ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	e853 3f00 	ldrex	r3, [r3]
 800c7ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f023 0310 	bic.w	r3, r3, #16
 800c7f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c800:	61fb      	str	r3, [r7, #28]
 800c802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c804:	69b9      	ldr	r1, [r7, #24]
 800c806:	69fa      	ldr	r2, [r7, #28]
 800c808:	e841 2300 	strex	r3, r2, [r1]
 800c80c:	617b      	str	r3, [r7, #20]
   return(result);
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1e4      	bne.n	800c7de <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2202      	movs	r2, #2
 800c818:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c81a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c81e:	4619      	mov	r1, r3
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f881 	bl	800c928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c826:	e063      	b.n	800c8f0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c82c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00e      	beq.n	800c852 <HAL_UART_IRQHandler+0x6fe>
 800c834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d008      	beq.n	800c852 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f001 f83d 	bl	800d8ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c850:	e051      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d014      	beq.n	800c888 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c866:	2b00      	cmp	r3, #0
 800c868:	d105      	bne.n	800c876 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c86a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c86e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c872:	2b00      	cmp	r3, #0
 800c874:	d008      	beq.n	800c888 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d03a      	beq.n	800c8f4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	4798      	blx	r3
    }
    return;
 800c886:	e035      	b.n	800c8f4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c890:	2b00      	cmp	r3, #0
 800c892:	d009      	beq.n	800c8a8 <HAL_UART_IRQHandler+0x754>
 800c894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 ffe7 	bl	800d874 <UART_EndTransmit_IT>
    return;
 800c8a6:	e026      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d009      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x774>
 800c8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 f816 	bl	800d8f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8c6:	e016      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d010      	beq.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
 800c8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da0c      	bge.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fffe 	bl	800d8de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8e2:	e008      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c8e4:	bf00      	nop
 800c8e6:	e006      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
    return;
 800c8e8:	bf00      	nop
 800c8ea:	e004      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c8ec:	bf00      	nop
 800c8ee:	e002      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c8f0:	bf00      	nop
 800c8f2:	e000      	b.n	800c8f6 <HAL_UART_IRQHandler+0x7a2>
    return;
 800c8f4:	bf00      	nop
  }
}
 800c8f6:	37e8      	adds	r7, #232	@ 0xe8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	effffffe 	.word	0xeffffffe

0800c900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c944:	b092      	sub	sp, #72	@ 0x48
 800c946:	af00      	add	r7, sp, #0
 800c948:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	689a      	ldr	r2, [r3, #8]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	431a      	orrs	r2, r3
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	431a      	orrs	r2, r3
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	69db      	ldr	r3, [r3, #28]
 800c964:	4313      	orrs	r3, r2
 800c966:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4bbe      	ldr	r3, [pc, #760]	@ (800cc68 <UART_SetConfig+0x328>)
 800c970:	4013      	ands	r3, r2
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	6812      	ldr	r2, [r2, #0]
 800c976:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c978:	430b      	orrs	r3, r1
 800c97a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	68da      	ldr	r2, [r3, #12]
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	430a      	orrs	r2, r1
 800c990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4ab3      	ldr	r2, [pc, #716]	@ (800cc6c <UART_SetConfig+0x32c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d004      	beq.n	800c9ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	689a      	ldr	r2, [r3, #8]
 800c9b2:	4baf      	ldr	r3, [pc, #700]	@ (800cc70 <UART_SetConfig+0x330>)
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	6812      	ldr	r2, [r2, #0]
 800c9ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c9bc:	430b      	orrs	r3, r1
 800c9be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c6:	f023 010f 	bic.w	r1, r3, #15
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	430a      	orrs	r2, r1
 800c9d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4aa6      	ldr	r2, [pc, #664]	@ (800cc74 <UART_SetConfig+0x334>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d177      	bne.n	800cad0 <UART_SetConfig+0x190>
 800c9e0:	4ba5      	ldr	r3, [pc, #660]	@ (800cc78 <UART_SetConfig+0x338>)
 800c9e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9e8:	2b28      	cmp	r3, #40	@ 0x28
 800c9ea:	d86d      	bhi.n	800cac8 <UART_SetConfig+0x188>
 800c9ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c9f4 <UART_SetConfig+0xb4>)
 800c9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f2:	bf00      	nop
 800c9f4:	0800ca99 	.word	0x0800ca99
 800c9f8:	0800cac9 	.word	0x0800cac9
 800c9fc:	0800cac9 	.word	0x0800cac9
 800ca00:	0800cac9 	.word	0x0800cac9
 800ca04:	0800cac9 	.word	0x0800cac9
 800ca08:	0800cac9 	.word	0x0800cac9
 800ca0c:	0800cac9 	.word	0x0800cac9
 800ca10:	0800cac9 	.word	0x0800cac9
 800ca14:	0800caa1 	.word	0x0800caa1
 800ca18:	0800cac9 	.word	0x0800cac9
 800ca1c:	0800cac9 	.word	0x0800cac9
 800ca20:	0800cac9 	.word	0x0800cac9
 800ca24:	0800cac9 	.word	0x0800cac9
 800ca28:	0800cac9 	.word	0x0800cac9
 800ca2c:	0800cac9 	.word	0x0800cac9
 800ca30:	0800cac9 	.word	0x0800cac9
 800ca34:	0800caa9 	.word	0x0800caa9
 800ca38:	0800cac9 	.word	0x0800cac9
 800ca3c:	0800cac9 	.word	0x0800cac9
 800ca40:	0800cac9 	.word	0x0800cac9
 800ca44:	0800cac9 	.word	0x0800cac9
 800ca48:	0800cac9 	.word	0x0800cac9
 800ca4c:	0800cac9 	.word	0x0800cac9
 800ca50:	0800cac9 	.word	0x0800cac9
 800ca54:	0800cab1 	.word	0x0800cab1
 800ca58:	0800cac9 	.word	0x0800cac9
 800ca5c:	0800cac9 	.word	0x0800cac9
 800ca60:	0800cac9 	.word	0x0800cac9
 800ca64:	0800cac9 	.word	0x0800cac9
 800ca68:	0800cac9 	.word	0x0800cac9
 800ca6c:	0800cac9 	.word	0x0800cac9
 800ca70:	0800cac9 	.word	0x0800cac9
 800ca74:	0800cab9 	.word	0x0800cab9
 800ca78:	0800cac9 	.word	0x0800cac9
 800ca7c:	0800cac9 	.word	0x0800cac9
 800ca80:	0800cac9 	.word	0x0800cac9
 800ca84:	0800cac9 	.word	0x0800cac9
 800ca88:	0800cac9 	.word	0x0800cac9
 800ca8c:	0800cac9 	.word	0x0800cac9
 800ca90:	0800cac9 	.word	0x0800cac9
 800ca94:	0800cac1 	.word	0x0800cac1
 800ca98:	2301      	movs	r3, #1
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca9e:	e222      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800caa0:	2304      	movs	r3, #4
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caa6:	e21e      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800caa8:	2308      	movs	r3, #8
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caae:	e21a      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cab0:	2310      	movs	r3, #16
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cab6:	e216      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cab8:	2320      	movs	r3, #32
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cabe:	e212      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cac0:	2340      	movs	r3, #64	@ 0x40
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac6:	e20e      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cac8:	2380      	movs	r3, #128	@ 0x80
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cace:	e20a      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a69      	ldr	r2, [pc, #420]	@ (800cc7c <UART_SetConfig+0x33c>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d130      	bne.n	800cb3c <UART_SetConfig+0x1fc>
 800cada:	4b67      	ldr	r3, [pc, #412]	@ (800cc78 <UART_SetConfig+0x338>)
 800cadc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	2b05      	cmp	r3, #5
 800cae4:	d826      	bhi.n	800cb34 <UART_SetConfig+0x1f4>
 800cae6:	a201      	add	r2, pc, #4	@ (adr r2, 800caec <UART_SetConfig+0x1ac>)
 800cae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caec:	0800cb05 	.word	0x0800cb05
 800caf0:	0800cb0d 	.word	0x0800cb0d
 800caf4:	0800cb15 	.word	0x0800cb15
 800caf8:	0800cb1d 	.word	0x0800cb1d
 800cafc:	0800cb25 	.word	0x0800cb25
 800cb00:	0800cb2d 	.word	0x0800cb2d
 800cb04:	2300      	movs	r3, #0
 800cb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb0a:	e1ec      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb0c:	2304      	movs	r3, #4
 800cb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb12:	e1e8      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb14:	2308      	movs	r3, #8
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1a:	e1e4      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb1c:	2310      	movs	r3, #16
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb22:	e1e0      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb24:	2320      	movs	r3, #32
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2a:	e1dc      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb2c:	2340      	movs	r3, #64	@ 0x40
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb32:	e1d8      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb34:	2380      	movs	r3, #128	@ 0x80
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3a:	e1d4      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a4f      	ldr	r2, [pc, #316]	@ (800cc80 <UART_SetConfig+0x340>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d130      	bne.n	800cba8 <UART_SetConfig+0x268>
 800cb46:	4b4c      	ldr	r3, [pc, #304]	@ (800cc78 <UART_SetConfig+0x338>)
 800cb48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb4a:	f003 0307 	and.w	r3, r3, #7
 800cb4e:	2b05      	cmp	r3, #5
 800cb50:	d826      	bhi.n	800cba0 <UART_SetConfig+0x260>
 800cb52:	a201      	add	r2, pc, #4	@ (adr r2, 800cb58 <UART_SetConfig+0x218>)
 800cb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb58:	0800cb71 	.word	0x0800cb71
 800cb5c:	0800cb79 	.word	0x0800cb79
 800cb60:	0800cb81 	.word	0x0800cb81
 800cb64:	0800cb89 	.word	0x0800cb89
 800cb68:	0800cb91 	.word	0x0800cb91
 800cb6c:	0800cb99 	.word	0x0800cb99
 800cb70:	2300      	movs	r3, #0
 800cb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb76:	e1b6      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb78:	2304      	movs	r3, #4
 800cb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb7e:	e1b2      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb80:	2308      	movs	r3, #8
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb86:	e1ae      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb88:	2310      	movs	r3, #16
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8e:	e1aa      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb90:	2320      	movs	r3, #32
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb96:	e1a6      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cb98:	2340      	movs	r3, #64	@ 0x40
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9e:	e1a2      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cba0:	2380      	movs	r3, #128	@ 0x80
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba6:	e19e      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a35      	ldr	r2, [pc, #212]	@ (800cc84 <UART_SetConfig+0x344>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d130      	bne.n	800cc14 <UART_SetConfig+0x2d4>
 800cbb2:	4b31      	ldr	r3, [pc, #196]	@ (800cc78 <UART_SetConfig+0x338>)
 800cbb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbb6:	f003 0307 	and.w	r3, r3, #7
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	d826      	bhi.n	800cc0c <UART_SetConfig+0x2cc>
 800cbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800cbc4 <UART_SetConfig+0x284>)
 800cbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc4:	0800cbdd 	.word	0x0800cbdd
 800cbc8:	0800cbe5 	.word	0x0800cbe5
 800cbcc:	0800cbed 	.word	0x0800cbed
 800cbd0:	0800cbf5 	.word	0x0800cbf5
 800cbd4:	0800cbfd 	.word	0x0800cbfd
 800cbd8:	0800cc05 	.word	0x0800cc05
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbe2:	e180      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cbe4:	2304      	movs	r3, #4
 800cbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbea:	e17c      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cbec:	2308      	movs	r3, #8
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf2:	e178      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cbf4:	2310      	movs	r3, #16
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfa:	e174      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cbfc:	2320      	movs	r3, #32
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc02:	e170      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc04:	2340      	movs	r3, #64	@ 0x40
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0a:	e16c      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc0c:	2380      	movs	r3, #128	@ 0x80
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc12:	e168      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a1b      	ldr	r2, [pc, #108]	@ (800cc88 <UART_SetConfig+0x348>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d142      	bne.n	800cca4 <UART_SetConfig+0x364>
 800cc1e:	4b16      	ldr	r3, [pc, #88]	@ (800cc78 <UART_SetConfig+0x338>)
 800cc20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	2b05      	cmp	r3, #5
 800cc28:	d838      	bhi.n	800cc9c <UART_SetConfig+0x35c>
 800cc2a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc30 <UART_SetConfig+0x2f0>)
 800cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc30:	0800cc49 	.word	0x0800cc49
 800cc34:	0800cc51 	.word	0x0800cc51
 800cc38:	0800cc59 	.word	0x0800cc59
 800cc3c:	0800cc61 	.word	0x0800cc61
 800cc40:	0800cc8d 	.word	0x0800cc8d
 800cc44:	0800cc95 	.word	0x0800cc95
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4e:	e14a      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc50:	2304      	movs	r3, #4
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc56:	e146      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc58:	2308      	movs	r3, #8
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5e:	e142      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc60:	2310      	movs	r3, #16
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc66:	e13e      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc68:	cfff69f3 	.word	0xcfff69f3
 800cc6c:	58000c00 	.word	0x58000c00
 800cc70:	11fff4ff 	.word	0x11fff4ff
 800cc74:	40011000 	.word	0x40011000
 800cc78:	58024400 	.word	0x58024400
 800cc7c:	40004400 	.word	0x40004400
 800cc80:	40004800 	.word	0x40004800
 800cc84:	40004c00 	.word	0x40004c00
 800cc88:	40005000 	.word	0x40005000
 800cc8c:	2320      	movs	r3, #32
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc92:	e128      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc94:	2340      	movs	r3, #64	@ 0x40
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc9a:	e124      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cc9c:	2380      	movs	r3, #128	@ 0x80
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cca2:	e120      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4acb      	ldr	r2, [pc, #812]	@ (800cfd8 <UART_SetConfig+0x698>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d176      	bne.n	800cd9c <UART_SetConfig+0x45c>
 800ccae:	4bcb      	ldr	r3, [pc, #812]	@ (800cfdc <UART_SetConfig+0x69c>)
 800ccb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccb6:	2b28      	cmp	r3, #40	@ 0x28
 800ccb8:	d86c      	bhi.n	800cd94 <UART_SetConfig+0x454>
 800ccba:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc0 <UART_SetConfig+0x380>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800cd65 	.word	0x0800cd65
 800ccc4:	0800cd95 	.word	0x0800cd95
 800ccc8:	0800cd95 	.word	0x0800cd95
 800cccc:	0800cd95 	.word	0x0800cd95
 800ccd0:	0800cd95 	.word	0x0800cd95
 800ccd4:	0800cd95 	.word	0x0800cd95
 800ccd8:	0800cd95 	.word	0x0800cd95
 800ccdc:	0800cd95 	.word	0x0800cd95
 800cce0:	0800cd6d 	.word	0x0800cd6d
 800cce4:	0800cd95 	.word	0x0800cd95
 800cce8:	0800cd95 	.word	0x0800cd95
 800ccec:	0800cd95 	.word	0x0800cd95
 800ccf0:	0800cd95 	.word	0x0800cd95
 800ccf4:	0800cd95 	.word	0x0800cd95
 800ccf8:	0800cd95 	.word	0x0800cd95
 800ccfc:	0800cd95 	.word	0x0800cd95
 800cd00:	0800cd75 	.word	0x0800cd75
 800cd04:	0800cd95 	.word	0x0800cd95
 800cd08:	0800cd95 	.word	0x0800cd95
 800cd0c:	0800cd95 	.word	0x0800cd95
 800cd10:	0800cd95 	.word	0x0800cd95
 800cd14:	0800cd95 	.word	0x0800cd95
 800cd18:	0800cd95 	.word	0x0800cd95
 800cd1c:	0800cd95 	.word	0x0800cd95
 800cd20:	0800cd7d 	.word	0x0800cd7d
 800cd24:	0800cd95 	.word	0x0800cd95
 800cd28:	0800cd95 	.word	0x0800cd95
 800cd2c:	0800cd95 	.word	0x0800cd95
 800cd30:	0800cd95 	.word	0x0800cd95
 800cd34:	0800cd95 	.word	0x0800cd95
 800cd38:	0800cd95 	.word	0x0800cd95
 800cd3c:	0800cd95 	.word	0x0800cd95
 800cd40:	0800cd85 	.word	0x0800cd85
 800cd44:	0800cd95 	.word	0x0800cd95
 800cd48:	0800cd95 	.word	0x0800cd95
 800cd4c:	0800cd95 	.word	0x0800cd95
 800cd50:	0800cd95 	.word	0x0800cd95
 800cd54:	0800cd95 	.word	0x0800cd95
 800cd58:	0800cd95 	.word	0x0800cd95
 800cd5c:	0800cd95 	.word	0x0800cd95
 800cd60:	0800cd8d 	.word	0x0800cd8d
 800cd64:	2301      	movs	r3, #1
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6a:	e0bc      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cd6c:	2304      	movs	r3, #4
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd72:	e0b8      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cd74:	2308      	movs	r3, #8
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7a:	e0b4      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cd7c:	2310      	movs	r3, #16
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd82:	e0b0      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cd84:	2320      	movs	r3, #32
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8a:	e0ac      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cd8c:	2340      	movs	r3, #64	@ 0x40
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd92:	e0a8      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cd94:	2380      	movs	r3, #128	@ 0x80
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e0a4      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a8f      	ldr	r2, [pc, #572]	@ (800cfe0 <UART_SetConfig+0x6a0>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d130      	bne.n	800ce08 <UART_SetConfig+0x4c8>
 800cda6:	4b8d      	ldr	r3, [pc, #564]	@ (800cfdc <UART_SetConfig+0x69c>)
 800cda8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	d826      	bhi.n	800ce00 <UART_SetConfig+0x4c0>
 800cdb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb8 <UART_SetConfig+0x478>)
 800cdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb8:	0800cdd1 	.word	0x0800cdd1
 800cdbc:	0800cdd9 	.word	0x0800cdd9
 800cdc0:	0800cde1 	.word	0x0800cde1
 800cdc4:	0800cde9 	.word	0x0800cde9
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800cdf9 	.word	0x0800cdf9
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd6:	e086      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cdd8:	2304      	movs	r3, #4
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdde:	e082      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cde0:	2308      	movs	r3, #8
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde6:	e07e      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cde8:	2310      	movs	r3, #16
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdee:	e07a      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cdf0:	2320      	movs	r3, #32
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf6:	e076      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cdf8:	2340      	movs	r3, #64	@ 0x40
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e072      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce00:	2380      	movs	r3, #128	@ 0x80
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e06e      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a75      	ldr	r2, [pc, #468]	@ (800cfe4 <UART_SetConfig+0x6a4>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d130      	bne.n	800ce74 <UART_SetConfig+0x534>
 800ce12:	4b72      	ldr	r3, [pc, #456]	@ (800cfdc <UART_SetConfig+0x69c>)
 800ce14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	2b05      	cmp	r3, #5
 800ce1c:	d826      	bhi.n	800ce6c <UART_SetConfig+0x52c>
 800ce1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce24 <UART_SetConfig+0x4e4>)
 800ce20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce24:	0800ce3d 	.word	0x0800ce3d
 800ce28:	0800ce45 	.word	0x0800ce45
 800ce2c:	0800ce4d 	.word	0x0800ce4d
 800ce30:	0800ce55 	.word	0x0800ce55
 800ce34:	0800ce5d 	.word	0x0800ce5d
 800ce38:	0800ce65 	.word	0x0800ce65
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce42:	e050      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce44:	2304      	movs	r3, #4
 800ce46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4a:	e04c      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce4c:	2308      	movs	r3, #8
 800ce4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce52:	e048      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce54:	2310      	movs	r3, #16
 800ce56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5a:	e044      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce5c:	2320      	movs	r3, #32
 800ce5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce62:	e040      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce64:	2340      	movs	r3, #64	@ 0x40
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6a:	e03c      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce6c:	2380      	movs	r3, #128	@ 0x80
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce72:	e038      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a5b      	ldr	r2, [pc, #364]	@ (800cfe8 <UART_SetConfig+0x6a8>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d130      	bne.n	800cee0 <UART_SetConfig+0x5a0>
 800ce7e:	4b57      	ldr	r3, [pc, #348]	@ (800cfdc <UART_SetConfig+0x69c>)
 800ce80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b05      	cmp	r3, #5
 800ce88:	d826      	bhi.n	800ced8 <UART_SetConfig+0x598>
 800ce8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce90 <UART_SetConfig+0x550>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cea9 	.word	0x0800cea9
 800ce94:	0800ceb1 	.word	0x0800ceb1
 800ce98:	0800ceb9 	.word	0x0800ceb9
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cec9 	.word	0x0800cec9
 800cea4:	0800ced1 	.word	0x0800ced1
 800cea8:	2302      	movs	r3, #2
 800ceaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceae:	e01a      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ceb0:	2304      	movs	r3, #4
 800ceb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb6:	e016      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ceb8:	2308      	movs	r3, #8
 800ceba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cebe:	e012      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cec0:	2310      	movs	r3, #16
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec6:	e00e      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cec8:	2320      	movs	r3, #32
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cece:	e00a      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ced0:	2340      	movs	r3, #64	@ 0x40
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced6:	e006      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800ced8:	2380      	movs	r3, #128	@ 0x80
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cede:	e002      	b.n	800cee6 <UART_SetConfig+0x5a6>
 800cee0:	2380      	movs	r3, #128	@ 0x80
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a3f      	ldr	r2, [pc, #252]	@ (800cfe8 <UART_SetConfig+0x6a8>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	f040 80f8 	bne.w	800d0e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cef2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cef6:	2b20      	cmp	r3, #32
 800cef8:	dc46      	bgt.n	800cf88 <UART_SetConfig+0x648>
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	f2c0 8082 	blt.w	800d004 <UART_SetConfig+0x6c4>
 800cf00:	3b02      	subs	r3, #2
 800cf02:	2b1e      	cmp	r3, #30
 800cf04:	d87e      	bhi.n	800d004 <UART_SetConfig+0x6c4>
 800cf06:	a201      	add	r2, pc, #4	@ (adr r2, 800cf0c <UART_SetConfig+0x5cc>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cf8f 	.word	0x0800cf8f
 800cf10:	0800d005 	.word	0x0800d005
 800cf14:	0800cf97 	.word	0x0800cf97
 800cf18:	0800d005 	.word	0x0800d005
 800cf1c:	0800d005 	.word	0x0800d005
 800cf20:	0800d005 	.word	0x0800d005
 800cf24:	0800cfa7 	.word	0x0800cfa7
 800cf28:	0800d005 	.word	0x0800d005
 800cf2c:	0800d005 	.word	0x0800d005
 800cf30:	0800d005 	.word	0x0800d005
 800cf34:	0800d005 	.word	0x0800d005
 800cf38:	0800d005 	.word	0x0800d005
 800cf3c:	0800d005 	.word	0x0800d005
 800cf40:	0800d005 	.word	0x0800d005
 800cf44:	0800cfb7 	.word	0x0800cfb7
 800cf48:	0800d005 	.word	0x0800d005
 800cf4c:	0800d005 	.word	0x0800d005
 800cf50:	0800d005 	.word	0x0800d005
 800cf54:	0800d005 	.word	0x0800d005
 800cf58:	0800d005 	.word	0x0800d005
 800cf5c:	0800d005 	.word	0x0800d005
 800cf60:	0800d005 	.word	0x0800d005
 800cf64:	0800d005 	.word	0x0800d005
 800cf68:	0800d005 	.word	0x0800d005
 800cf6c:	0800d005 	.word	0x0800d005
 800cf70:	0800d005 	.word	0x0800d005
 800cf74:	0800d005 	.word	0x0800d005
 800cf78:	0800d005 	.word	0x0800d005
 800cf7c:	0800d005 	.word	0x0800d005
 800cf80:	0800d005 	.word	0x0800d005
 800cf84:	0800cff7 	.word	0x0800cff7
 800cf88:	2b40      	cmp	r3, #64	@ 0x40
 800cf8a:	d037      	beq.n	800cffc <UART_SetConfig+0x6bc>
 800cf8c:	e03a      	b.n	800d004 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf8e:	f7fd fb07 	bl	800a5a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cf94:	e03c      	b.n	800d010 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fd fb16 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfa4:	e034      	b.n	800d010 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfa6:	f107 0318 	add.w	r3, r7, #24
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fd fc62 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfb4:	e02c      	b.n	800d010 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfb6:	4b09      	ldr	r3, [pc, #36]	@ (800cfdc <UART_SetConfig+0x69c>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 0320 	and.w	r3, r3, #32
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d016      	beq.n	800cff0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfc2:	4b06      	ldr	r3, [pc, #24]	@ (800cfdc <UART_SetConfig+0x69c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	08db      	lsrs	r3, r3, #3
 800cfc8:	f003 0303 	and.w	r3, r3, #3
 800cfcc:	4a07      	ldr	r2, [pc, #28]	@ (800cfec <UART_SetConfig+0x6ac>)
 800cfce:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfd4:	e01c      	b.n	800d010 <UART_SetConfig+0x6d0>
 800cfd6:	bf00      	nop
 800cfd8:	40011400 	.word	0x40011400
 800cfdc:	58024400 	.word	0x58024400
 800cfe0:	40007800 	.word	0x40007800
 800cfe4:	40007c00 	.word	0x40007c00
 800cfe8:	58000c00 	.word	0x58000c00
 800cfec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cff0:	4b9d      	ldr	r3, [pc, #628]	@ (800d268 <UART_SetConfig+0x928>)
 800cff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff4:	e00c      	b.n	800d010 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cff6:	4b9d      	ldr	r3, [pc, #628]	@ (800d26c <UART_SetConfig+0x92c>)
 800cff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cffa:	e009      	b.n	800d010 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d002:	e005      	b.n	800d010 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d004:	2300      	movs	r3, #0
 800d006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d008:	2301      	movs	r3, #1
 800d00a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d00e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d012:	2b00      	cmp	r3, #0
 800d014:	f000 81de 	beq.w	800d3d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01c:	4a94      	ldr	r2, [pc, #592]	@ (800d270 <UART_SetConfig+0x930>)
 800d01e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d022:	461a      	mov	r2, r3
 800d024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d026:	fbb3 f3f2 	udiv	r3, r3, r2
 800d02a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	685a      	ldr	r2, [r3, #4]
 800d030:	4613      	mov	r3, r2
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	4413      	add	r3, r2
 800d036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d038:	429a      	cmp	r2, r3
 800d03a:	d305      	bcc.n	800d048 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d044:	429a      	cmp	r2, r3
 800d046:	d903      	bls.n	800d050 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d048:	2301      	movs	r3, #1
 800d04a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d04e:	e1c1      	b.n	800d3d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d052:	2200      	movs	r2, #0
 800d054:	60bb      	str	r3, [r7, #8]
 800d056:	60fa      	str	r2, [r7, #12]
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05c:	4a84      	ldr	r2, [pc, #528]	@ (800d270 <UART_SetConfig+0x930>)
 800d05e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d062:	b29b      	uxth	r3, r3
 800d064:	2200      	movs	r2, #0
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	607a      	str	r2, [r7, #4]
 800d06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d06e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d072:	f7f3 f985 	bl	8000380 <__aeabi_uldivmod>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	4610      	mov	r0, r2
 800d07c:	4619      	mov	r1, r3
 800d07e:	f04f 0200 	mov.w	r2, #0
 800d082:	f04f 0300 	mov.w	r3, #0
 800d086:	020b      	lsls	r3, r1, #8
 800d088:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d08c:	0202      	lsls	r2, r0, #8
 800d08e:	6979      	ldr	r1, [r7, #20]
 800d090:	6849      	ldr	r1, [r1, #4]
 800d092:	0849      	lsrs	r1, r1, #1
 800d094:	2000      	movs	r0, #0
 800d096:	460c      	mov	r4, r1
 800d098:	4605      	mov	r5, r0
 800d09a:	eb12 0804 	adds.w	r8, r2, r4
 800d09e:	eb43 0905 	adc.w	r9, r3, r5
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	469a      	mov	sl, r3
 800d0aa:	4693      	mov	fp, r2
 800d0ac:	4652      	mov	r2, sl
 800d0ae:	465b      	mov	r3, fp
 800d0b0:	4640      	mov	r0, r8
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	f7f3 f964 	bl	8000380 <__aeabi_uldivmod>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	4613      	mov	r3, r2
 800d0be:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0c6:	d308      	bcc.n	800d0da <UART_SetConfig+0x79a>
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0ce:	d204      	bcs.n	800d0da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0d6:	60da      	str	r2, [r3, #12]
 800d0d8:	e17c      	b.n	800d3d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d0e0:	e178      	b.n	800d3d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	69db      	ldr	r3, [r3, #28]
 800d0e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d0ea:	f040 80c5 	bne.w	800d278 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d0ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	2b20      	cmp	r3, #32
 800d0f4:	dc48      	bgt.n	800d188 <UART_SetConfig+0x848>
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	db7b      	blt.n	800d1f2 <UART_SetConfig+0x8b2>
 800d0fa:	2b20      	cmp	r3, #32
 800d0fc:	d879      	bhi.n	800d1f2 <UART_SetConfig+0x8b2>
 800d0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d104 <UART_SetConfig+0x7c4>)
 800d100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d104:	0800d18f 	.word	0x0800d18f
 800d108:	0800d197 	.word	0x0800d197
 800d10c:	0800d1f3 	.word	0x0800d1f3
 800d110:	0800d1f3 	.word	0x0800d1f3
 800d114:	0800d19f 	.word	0x0800d19f
 800d118:	0800d1f3 	.word	0x0800d1f3
 800d11c:	0800d1f3 	.word	0x0800d1f3
 800d120:	0800d1f3 	.word	0x0800d1f3
 800d124:	0800d1af 	.word	0x0800d1af
 800d128:	0800d1f3 	.word	0x0800d1f3
 800d12c:	0800d1f3 	.word	0x0800d1f3
 800d130:	0800d1f3 	.word	0x0800d1f3
 800d134:	0800d1f3 	.word	0x0800d1f3
 800d138:	0800d1f3 	.word	0x0800d1f3
 800d13c:	0800d1f3 	.word	0x0800d1f3
 800d140:	0800d1f3 	.word	0x0800d1f3
 800d144:	0800d1bf 	.word	0x0800d1bf
 800d148:	0800d1f3 	.word	0x0800d1f3
 800d14c:	0800d1f3 	.word	0x0800d1f3
 800d150:	0800d1f3 	.word	0x0800d1f3
 800d154:	0800d1f3 	.word	0x0800d1f3
 800d158:	0800d1f3 	.word	0x0800d1f3
 800d15c:	0800d1f3 	.word	0x0800d1f3
 800d160:	0800d1f3 	.word	0x0800d1f3
 800d164:	0800d1f3 	.word	0x0800d1f3
 800d168:	0800d1f3 	.word	0x0800d1f3
 800d16c:	0800d1f3 	.word	0x0800d1f3
 800d170:	0800d1f3 	.word	0x0800d1f3
 800d174:	0800d1f3 	.word	0x0800d1f3
 800d178:	0800d1f3 	.word	0x0800d1f3
 800d17c:	0800d1f3 	.word	0x0800d1f3
 800d180:	0800d1f3 	.word	0x0800d1f3
 800d184:	0800d1e5 	.word	0x0800d1e5
 800d188:	2b40      	cmp	r3, #64	@ 0x40
 800d18a:	d02e      	beq.n	800d1ea <UART_SetConfig+0x8aa>
 800d18c:	e031      	b.n	800d1f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d18e:	f7fb fa0f 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 800d192:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d194:	e033      	b.n	800d1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d196:	f7fb fa21 	bl	80085dc <HAL_RCC_GetPCLK2Freq>
 800d19a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d19c:	e02f      	b.n	800d1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d19e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7fd fa12 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ac:	e027      	b.n	800d1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1ae:	f107 0318 	add.w	r3, r7, #24
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fd fb5e 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1bc:	e01f      	b.n	800d1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1be:	4b2d      	ldr	r3, [pc, #180]	@ (800d274 <UART_SetConfig+0x934>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f003 0320 	and.w	r3, r3, #32
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d009      	beq.n	800d1de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1ca:	4b2a      	ldr	r3, [pc, #168]	@ (800d274 <UART_SetConfig+0x934>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	08db      	lsrs	r3, r3, #3
 800d1d0:	f003 0303 	and.w	r3, r3, #3
 800d1d4:	4a24      	ldr	r2, [pc, #144]	@ (800d268 <UART_SetConfig+0x928>)
 800d1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1dc:	e00f      	b.n	800d1fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d1de:	4b22      	ldr	r3, [pc, #136]	@ (800d268 <UART_SetConfig+0x928>)
 800d1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1e2:	e00c      	b.n	800d1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1e4:	4b21      	ldr	r3, [pc, #132]	@ (800d26c <UART_SetConfig+0x92c>)
 800d1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1e8:	e009      	b.n	800d1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1f0:	e005      	b.n	800d1fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d1fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d200:	2b00      	cmp	r3, #0
 800d202:	f000 80e7 	beq.w	800d3d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d20a:	4a19      	ldr	r2, [pc, #100]	@ (800d270 <UART_SetConfig+0x930>)
 800d20c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d210:	461a      	mov	r2, r3
 800d212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d214:	fbb3 f3f2 	udiv	r3, r3, r2
 800d218:	005a      	lsls	r2, r3, #1
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	085b      	lsrs	r3, r3, #1
 800d220:	441a      	add	r2, r3
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22e:	2b0f      	cmp	r3, #15
 800d230:	d916      	bls.n	800d260 <UART_SetConfig+0x920>
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d238:	d212      	bcs.n	800d260 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	f023 030f 	bic.w	r3, r3, #15
 800d242:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d246:	085b      	lsrs	r3, r3, #1
 800d248:	b29b      	uxth	r3, r3
 800d24a:	f003 0307 	and.w	r3, r3, #7
 800d24e:	b29a      	uxth	r2, r3
 800d250:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d252:	4313      	orrs	r3, r2
 800d254:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d25c:	60da      	str	r2, [r3, #12]
 800d25e:	e0b9      	b.n	800d3d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d266:	e0b5      	b.n	800d3d4 <UART_SetConfig+0xa94>
 800d268:	03d09000 	.word	0x03d09000
 800d26c:	003d0900 	.word	0x003d0900
 800d270:	080156d0 	.word	0x080156d0
 800d274:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d278:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d27c:	2b20      	cmp	r3, #32
 800d27e:	dc49      	bgt.n	800d314 <UART_SetConfig+0x9d4>
 800d280:	2b00      	cmp	r3, #0
 800d282:	db7c      	blt.n	800d37e <UART_SetConfig+0xa3e>
 800d284:	2b20      	cmp	r3, #32
 800d286:	d87a      	bhi.n	800d37e <UART_SetConfig+0xa3e>
 800d288:	a201      	add	r2, pc, #4	@ (adr r2, 800d290 <UART_SetConfig+0x950>)
 800d28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28e:	bf00      	nop
 800d290:	0800d31b 	.word	0x0800d31b
 800d294:	0800d323 	.word	0x0800d323
 800d298:	0800d37f 	.word	0x0800d37f
 800d29c:	0800d37f 	.word	0x0800d37f
 800d2a0:	0800d32b 	.word	0x0800d32b
 800d2a4:	0800d37f 	.word	0x0800d37f
 800d2a8:	0800d37f 	.word	0x0800d37f
 800d2ac:	0800d37f 	.word	0x0800d37f
 800d2b0:	0800d33b 	.word	0x0800d33b
 800d2b4:	0800d37f 	.word	0x0800d37f
 800d2b8:	0800d37f 	.word	0x0800d37f
 800d2bc:	0800d37f 	.word	0x0800d37f
 800d2c0:	0800d37f 	.word	0x0800d37f
 800d2c4:	0800d37f 	.word	0x0800d37f
 800d2c8:	0800d37f 	.word	0x0800d37f
 800d2cc:	0800d37f 	.word	0x0800d37f
 800d2d0:	0800d34b 	.word	0x0800d34b
 800d2d4:	0800d37f 	.word	0x0800d37f
 800d2d8:	0800d37f 	.word	0x0800d37f
 800d2dc:	0800d37f 	.word	0x0800d37f
 800d2e0:	0800d37f 	.word	0x0800d37f
 800d2e4:	0800d37f 	.word	0x0800d37f
 800d2e8:	0800d37f 	.word	0x0800d37f
 800d2ec:	0800d37f 	.word	0x0800d37f
 800d2f0:	0800d37f 	.word	0x0800d37f
 800d2f4:	0800d37f 	.word	0x0800d37f
 800d2f8:	0800d37f 	.word	0x0800d37f
 800d2fc:	0800d37f 	.word	0x0800d37f
 800d300:	0800d37f 	.word	0x0800d37f
 800d304:	0800d37f 	.word	0x0800d37f
 800d308:	0800d37f 	.word	0x0800d37f
 800d30c:	0800d37f 	.word	0x0800d37f
 800d310:	0800d371 	.word	0x0800d371
 800d314:	2b40      	cmp	r3, #64	@ 0x40
 800d316:	d02e      	beq.n	800d376 <UART_SetConfig+0xa36>
 800d318:	e031      	b.n	800d37e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d31a:	f7fb f949 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 800d31e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d320:	e033      	b.n	800d38a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d322:	f7fb f95b 	bl	80085dc <HAL_RCC_GetPCLK2Freq>
 800d326:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d328:	e02f      	b.n	800d38a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d32a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fd f94c 	bl	800a5cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d338:	e027      	b.n	800d38a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d33a:	f107 0318 	add.w	r3, r7, #24
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fd fa98 	bl	800a874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d348:	e01f      	b.n	800d38a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d34a:	4b2d      	ldr	r3, [pc, #180]	@ (800d400 <UART_SetConfig+0xac0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 0320 	and.w	r3, r3, #32
 800d352:	2b00      	cmp	r3, #0
 800d354:	d009      	beq.n	800d36a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d356:	4b2a      	ldr	r3, [pc, #168]	@ (800d400 <UART_SetConfig+0xac0>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	08db      	lsrs	r3, r3, #3
 800d35c:	f003 0303 	and.w	r3, r3, #3
 800d360:	4a28      	ldr	r2, [pc, #160]	@ (800d404 <UART_SetConfig+0xac4>)
 800d362:	fa22 f303 	lsr.w	r3, r2, r3
 800d366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d368:	e00f      	b.n	800d38a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d36a:	4b26      	ldr	r3, [pc, #152]	@ (800d404 <UART_SetConfig+0xac4>)
 800d36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d36e:	e00c      	b.n	800d38a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d370:	4b25      	ldr	r3, [pc, #148]	@ (800d408 <UART_SetConfig+0xac8>)
 800d372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d374:	e009      	b.n	800d38a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d37c:	e005      	b.n	800d38a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d388:	bf00      	nop
    }

    if (pclk != 0U)
 800d38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d021      	beq.n	800d3d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d394:	4a1d      	ldr	r2, [pc, #116]	@ (800d40c <UART_SetConfig+0xacc>)
 800d396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d39a:	461a      	mov	r2, r3
 800d39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	085b      	lsrs	r3, r3, #1
 800d3a8:	441a      	add	r2, r3
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b6:	2b0f      	cmp	r3, #15
 800d3b8:	d909      	bls.n	800d3ce <UART_SetConfig+0xa8e>
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3c0:	d205      	bcs.n	800d3ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60da      	str	r2, [r3, #12]
 800d3cc:	e002      	b.n	800d3d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3f0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3748      	adds	r7, #72	@ 0x48
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3fe:	bf00      	nop
 800d400:	58024400 	.word	0x58024400
 800d404:	03d09000 	.word	0x03d09000
 800d408:	003d0900 	.word	0x003d0900
 800d40c:	080156d0 	.word	0x080156d0

0800d410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41c:	f003 0308 	and.w	r3, r3, #8
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00a      	beq.n	800d43a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	430a      	orrs	r2, r1
 800d45a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d460:	f003 0302 	and.w	r3, r3, #2
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00a      	beq.n	800d47e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	430a      	orrs	r2, r1
 800d47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d482:	f003 0304 	and.w	r3, r3, #4
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00a      	beq.n	800d4a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	430a      	orrs	r2, r1
 800d49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a4:	f003 0310 	and.w	r3, r3, #16
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00a      	beq.n	800d4c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	430a      	orrs	r2, r1
 800d4c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c6:	f003 0320 	and.w	r3, r3, #32
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00a      	beq.n	800d4e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	430a      	orrs	r2, r1
 800d4e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d01a      	beq.n	800d526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d50a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d50e:	d10a      	bne.n	800d526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00a      	beq.n	800d548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	605a      	str	r2, [r3, #4]
  }
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b098      	sub	sp, #96	@ 0x60
 800d558:	af02      	add	r7, sp, #8
 800d55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d564:	f7f4 fee0 	bl	8002328 <HAL_GetTick>
 800d568:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 0308 	and.w	r3, r3, #8
 800d574:	2b08      	cmp	r3, #8
 800d576:	d12f      	bne.n	800d5d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d580:	2200      	movs	r2, #0
 800d582:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f88e 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d022      	beq.n	800d5d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59a:	e853 3f00 	ldrex	r3, [r3]
 800d59e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5b8:	e841 2300 	strex	r3, r2, [r1]
 800d5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1e6      	bne.n	800d592 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2220      	movs	r2, #32
 800d5c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	e063      	b.n	800d6a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0304 	and.w	r3, r3, #4
 800d5e2:	2b04      	cmp	r3, #4
 800d5e4:	d149      	bne.n	800d67a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f857 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d03c      	beq.n	800d67a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d608:	e853 3f00 	ldrex	r3, [r3]
 800d60c:	623b      	str	r3, [r7, #32]
   return(result);
 800d60e:	6a3b      	ldr	r3, [r7, #32]
 800d610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	461a      	mov	r2, r3
 800d61c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d61e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d620:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d626:	e841 2300 	strex	r3, r2, [r1]
 800d62a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1e6      	bne.n	800d600 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3308      	adds	r3, #8
 800d638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	e853 3f00 	ldrex	r3, [r3]
 800d640:	60fb      	str	r3, [r7, #12]
   return(result);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f023 0301 	bic.w	r3, r3, #1
 800d648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	3308      	adds	r3, #8
 800d650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d652:	61fa      	str	r2, [r7, #28]
 800d654:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d656:	69b9      	ldr	r1, [r7, #24]
 800d658:	69fa      	ldr	r2, [r7, #28]
 800d65a:	e841 2300 	strex	r3, r2, [r1]
 800d65e:	617b      	str	r3, [r7, #20]
   return(result);
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1e5      	bne.n	800d632 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2220      	movs	r2, #32
 800d66a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d676:	2303      	movs	r3, #3
 800d678:	e012      	b.n	800d6a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2220      	movs	r2, #32
 800d67e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2220      	movs	r2, #32
 800d686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3758      	adds	r7, #88	@ 0x58
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6b8:	e04f      	b.n	800d75a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6c0:	d04b      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6c2:	f7f4 fe31 	bl	8002328 <HAL_GetTick>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	69ba      	ldr	r2, [r7, #24]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d302      	bcc.n	800d6d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	e04e      	b.n	800d77a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f003 0304 	and.w	r3, r3, #4
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d037      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	2b80      	cmp	r3, #128	@ 0x80
 800d6ee:	d034      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b40      	cmp	r3, #64	@ 0x40
 800d6f4:	d031      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	69db      	ldr	r3, [r3, #28]
 800d6fc:	f003 0308 	and.w	r3, r3, #8
 800d700:	2b08      	cmp	r3, #8
 800d702:	d110      	bne.n	800d726 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2208      	movs	r2, #8
 800d70a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f000 f839 	bl	800d784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2208      	movs	r2, #8
 800d716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	e029      	b.n	800d77a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	69db      	ldr	r3, [r3, #28]
 800d72c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d734:	d111      	bne.n	800d75a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d73e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f000 f81f 	bl	800d784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d756:	2303      	movs	r3, #3
 800d758:	e00f      	b.n	800d77a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	69da      	ldr	r2, [r3, #28]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	4013      	ands	r3, r2
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	429a      	cmp	r2, r3
 800d768:	bf0c      	ite	eq
 800d76a:	2301      	moveq	r3, #1
 800d76c:	2300      	movne	r3, #0
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	461a      	mov	r2, r3
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	429a      	cmp	r2, r3
 800d776:	d0a0      	beq.n	800d6ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
	...

0800d784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d784:	b480      	push	{r7}
 800d786:	b095      	sub	sp, #84	@ 0x54
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d794:	e853 3f00 	ldrex	r3, [r3]
 800d798:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7b2:	e841 2300 	strex	r3, r2, [r1]
 800d7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1e6      	bne.n	800d78c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	e853 3f00 	ldrex	r3, [r3]
 800d7cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7ce:	69fa      	ldr	r2, [r7, #28]
 800d7d0:	4b1e      	ldr	r3, [pc, #120]	@ (800d84c <UART_EndRxTransfer+0xc8>)
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3308      	adds	r3, #8
 800d7dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7e6:	e841 2300 	strex	r3, r2, [r1]
 800d7ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1e5      	bne.n	800d7be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d118      	bne.n	800d82c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	e853 3f00 	ldrex	r3, [r3]
 800d806:	60bb      	str	r3, [r7, #8]
   return(result);
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	f023 0310 	bic.w	r3, r3, #16
 800d80e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	461a      	mov	r2, r3
 800d816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d818:	61bb      	str	r3, [r7, #24]
 800d81a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81c:	6979      	ldr	r1, [r7, #20]
 800d81e:	69ba      	ldr	r2, [r7, #24]
 800d820:	e841 2300 	strex	r3, r2, [r1]
 800d824:	613b      	str	r3, [r7, #16]
   return(result);
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1e6      	bne.n	800d7fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2220      	movs	r2, #32
 800d830:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d840:	bf00      	nop
 800d842:	3754      	adds	r7, #84	@ 0x54
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	effffffe 	.word	0xeffffffe

0800d850 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d85c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f7ff f854 	bl	800c914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d86c:	bf00      	nop
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	e853 3f00 	ldrex	r3, [r3]
 800d888:	60bb      	str	r3, [r7, #8]
   return(result);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d890:	61fb      	str	r3, [r7, #28]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	61bb      	str	r3, [r7, #24]
 800d89c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89e:	6979      	ldr	r1, [r7, #20]
 800d8a0:	69ba      	ldr	r2, [r7, #24]
 800d8a2:	e841 2300 	strex	r3, r2, [r1]
 800d8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e6      	bne.n	800d87c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff f81f 	bl	800c900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8c2:	bf00      	nop
 800d8c4:	3720      	adds	r7, #32
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b083      	sub	sp, #12
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d8d2:	bf00      	nop
 800d8d4:	370c      	adds	r7, #12
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr

0800d8de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d8e6:	bf00      	nop
 800d8e8:	370c      	adds	r7, #12
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b083      	sub	sp, #12
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d8fa:	bf00      	nop
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d906:	b480      	push	{r7}
 800d908:	b085      	sub	sp, #20
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d914:	2b01      	cmp	r3, #1
 800d916:	d101      	bne.n	800d91c <HAL_UARTEx_DisableFifoMode+0x16>
 800d918:	2302      	movs	r3, #2
 800d91a:	e027      	b.n	800d96c <HAL_UARTEx_DisableFifoMode+0x66>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2224      	movs	r2, #36	@ 0x24
 800d928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f022 0201 	bic.w	r2, r2, #1
 800d942:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d94a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2220      	movs	r2, #32
 800d95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3714      	adds	r7, #20
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d101      	bne.n	800d990 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d98c:	2302      	movs	r3, #2
 800d98e:	e02d      	b.n	800d9ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2201      	movs	r2, #1
 800d994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2224      	movs	r2, #36	@ 0x24
 800d99c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f022 0201 	bic.w	r2, r2, #1
 800d9b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	430a      	orrs	r2, r1
 800d9ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f84f 	bl	800da70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2220      	movs	r2, #32
 800d9de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da04:	2b01      	cmp	r3, #1
 800da06:	d101      	bne.n	800da0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da08:	2302      	movs	r3, #2
 800da0a:	e02d      	b.n	800da68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2224      	movs	r2, #36	@ 0x24
 800da18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f022 0201 	bic.w	r2, r2, #1
 800da32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f811 	bl	800da70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2220      	movs	r2, #32
 800da5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d108      	bne.n	800da92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da90:	e031      	b.n	800daf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da92:	2310      	movs	r3, #16
 800da94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da96:	2310      	movs	r3, #16
 800da98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	0e5b      	lsrs	r3, r3, #25
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	f003 0307 	and.w	r3, r3, #7
 800daa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	0f5b      	lsrs	r3, r3, #29
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	f003 0307 	and.w	r3, r3, #7
 800dab8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800daba:	7bbb      	ldrb	r3, [r7, #14]
 800dabc:	7b3a      	ldrb	r2, [r7, #12]
 800dabe:	4911      	ldr	r1, [pc, #68]	@ (800db04 <UARTEx_SetNbDataToProcess+0x94>)
 800dac0:	5c8a      	ldrb	r2, [r1, r2]
 800dac2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dac6:	7b3a      	ldrb	r2, [r7, #12]
 800dac8:	490f      	ldr	r1, [pc, #60]	@ (800db08 <UARTEx_SetNbDataToProcess+0x98>)
 800daca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dacc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	7b7a      	ldrb	r2, [r7, #13]
 800dadc:	4909      	ldr	r1, [pc, #36]	@ (800db04 <UARTEx_SetNbDataToProcess+0x94>)
 800dade:	5c8a      	ldrb	r2, [r1, r2]
 800dae0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dae4:	7b7a      	ldrb	r2, [r7, #13]
 800dae6:	4908      	ldr	r1, [pc, #32]	@ (800db08 <UARTEx_SetNbDataToProcess+0x98>)
 800dae8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daea:	fb93 f3f2 	sdiv	r3, r3, r2
 800daee:	b29a      	uxth	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800daf6:	bf00      	nop
 800daf8:	3714      	adds	r7, #20
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop
 800db04:	080156e8 	.word	0x080156e8
 800db08:	080156f0 	.word	0x080156f0

0800db0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db0c:	b084      	sub	sp, #16
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	f107 001c 	add.w	r0, r7, #28
 800db1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800db22:	2b01      	cmp	r3, #1
 800db24:	d121      	bne.n	800db6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	4b2c      	ldr	r3, [pc, #176]	@ (800dbe8 <USB_CoreInit+0xdc>)
 800db38:	4013      	ands	r3, r2
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800db4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d105      	bne.n	800db5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f001 fafa 	bl	800f158 <USB_CoreReset>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
 800db68:	e01b      	b.n	800dba2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f001 faee 	bl	800f158 <USB_CoreReset>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800db80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800db84:	2b00      	cmp	r3, #0
 800db86:	d106      	bne.n	800db96 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	639a      	str	r2, [r3, #56]	@ 0x38
 800db94:	e005      	b.n	800dba2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dba2:	7fbb      	ldrb	r3, [r7, #30]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d116      	bne.n	800dbd6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dbec <USB_CoreInit+0xe0>)
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	f043 0206 	orr.w	r2, r3, #6
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	f043 0220 	orr.w	r2, r3, #32
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbe2:	b004      	add	sp, #16
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	ffbdffbf 	.word	0xffbdffbf
 800dbec:	03ee0000 	.word	0x03ee0000

0800dbf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d165      	bne.n	800dcd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	4a41      	ldr	r2, [pc, #260]	@ (800dd0c <USB_SetTurnaroundTime+0x11c>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d906      	bls.n	800dc1a <USB_SetTurnaroundTime+0x2a>
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	4a40      	ldr	r2, [pc, #256]	@ (800dd10 <USB_SetTurnaroundTime+0x120>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d202      	bcs.n	800dc1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dc14:	230f      	movs	r3, #15
 800dc16:	617b      	str	r3, [r7, #20]
 800dc18:	e062      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	4a3c      	ldr	r2, [pc, #240]	@ (800dd10 <USB_SetTurnaroundTime+0x120>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d306      	bcc.n	800dc30 <USB_SetTurnaroundTime+0x40>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	4a3b      	ldr	r2, [pc, #236]	@ (800dd14 <USB_SetTurnaroundTime+0x124>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d202      	bcs.n	800dc30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dc2a:	230e      	movs	r3, #14
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	e057      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	4a38      	ldr	r2, [pc, #224]	@ (800dd14 <USB_SetTurnaroundTime+0x124>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d306      	bcc.n	800dc46 <USB_SetTurnaroundTime+0x56>
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	4a37      	ldr	r2, [pc, #220]	@ (800dd18 <USB_SetTurnaroundTime+0x128>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d202      	bcs.n	800dc46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dc40:	230d      	movs	r3, #13
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e04c      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	4a33      	ldr	r2, [pc, #204]	@ (800dd18 <USB_SetTurnaroundTime+0x128>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d306      	bcc.n	800dc5c <USB_SetTurnaroundTime+0x6c>
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	4a32      	ldr	r2, [pc, #200]	@ (800dd1c <USB_SetTurnaroundTime+0x12c>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d802      	bhi.n	800dc5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dc56:	230c      	movs	r3, #12
 800dc58:	617b      	str	r3, [r7, #20]
 800dc5a:	e041      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	4a2f      	ldr	r2, [pc, #188]	@ (800dd1c <USB_SetTurnaroundTime+0x12c>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d906      	bls.n	800dc72 <USB_SetTurnaroundTime+0x82>
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	4a2e      	ldr	r2, [pc, #184]	@ (800dd20 <USB_SetTurnaroundTime+0x130>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d802      	bhi.n	800dc72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dc6c:	230b      	movs	r3, #11
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	e036      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	4a2a      	ldr	r2, [pc, #168]	@ (800dd20 <USB_SetTurnaroundTime+0x130>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d906      	bls.n	800dc88 <USB_SetTurnaroundTime+0x98>
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4a29      	ldr	r2, [pc, #164]	@ (800dd24 <USB_SetTurnaroundTime+0x134>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d802      	bhi.n	800dc88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dc82:	230a      	movs	r3, #10
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	e02b      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	4a26      	ldr	r2, [pc, #152]	@ (800dd24 <USB_SetTurnaroundTime+0x134>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d906      	bls.n	800dc9e <USB_SetTurnaroundTime+0xae>
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	4a25      	ldr	r2, [pc, #148]	@ (800dd28 <USB_SetTurnaroundTime+0x138>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d202      	bcs.n	800dc9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dc98:	2309      	movs	r3, #9
 800dc9a:	617b      	str	r3, [r7, #20]
 800dc9c:	e020      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	4a21      	ldr	r2, [pc, #132]	@ (800dd28 <USB_SetTurnaroundTime+0x138>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d306      	bcc.n	800dcb4 <USB_SetTurnaroundTime+0xc4>
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	4a20      	ldr	r2, [pc, #128]	@ (800dd2c <USB_SetTurnaroundTime+0x13c>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d802      	bhi.n	800dcb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dcae:	2308      	movs	r3, #8
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e015      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	4a1d      	ldr	r2, [pc, #116]	@ (800dd2c <USB_SetTurnaroundTime+0x13c>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d906      	bls.n	800dcca <USB_SetTurnaroundTime+0xda>
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	4a1c      	ldr	r2, [pc, #112]	@ (800dd30 <USB_SetTurnaroundTime+0x140>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d202      	bcs.n	800dcca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dcc4:	2307      	movs	r3, #7
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	e00a      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dcca:	2306      	movs	r3, #6
 800dccc:	617b      	str	r3, [r7, #20]
 800dcce:	e007      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dcd0:	79fb      	ldrb	r3, [r7, #7]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dcd6:	2309      	movs	r3, #9
 800dcd8:	617b      	str	r3, [r7, #20]
 800dcda:	e001      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dcdc:	2309      	movs	r3, #9
 800dcde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68da      	ldr	r2, [r3, #12]
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	029b      	lsls	r3, r3, #10
 800dcf4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800dcf8:	431a      	orrs	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	371c      	adds	r7, #28
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	00d8acbf 	.word	0x00d8acbf
 800dd10:	00e4e1c0 	.word	0x00e4e1c0
 800dd14:	00f42400 	.word	0x00f42400
 800dd18:	01067380 	.word	0x01067380
 800dd1c:	011a499f 	.word	0x011a499f
 800dd20:	01312cff 	.word	0x01312cff
 800dd24:	014ca43f 	.word	0x014ca43f
 800dd28:	016e3600 	.word	0x016e3600
 800dd2c:	01a6ab1f 	.word	0x01a6ab1f
 800dd30:	01e84800 	.word	0x01e84800

0800dd34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	f043 0201 	orr.w	r2, r3, #1
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b083      	sub	sp, #12
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	f023 0201 	bic.w	r2, r3, #1
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	460b      	mov	r3, r1
 800dd82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dd84:	2300      	movs	r3, #0
 800dd86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dd94:	78fb      	ldrb	r3, [r7, #3]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d115      	bne.n	800ddc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dda6:	200a      	movs	r0, #10
 800dda8:	f7f4 faca 	bl	8002340 <HAL_Delay>
      ms += 10U;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	330a      	adds	r3, #10
 800ddb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f001 f93f 	bl	800f036 <USB_GetMode>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d01e      	beq.n	800ddfc <USB_SetCurrentMode+0x84>
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2bc7      	cmp	r3, #199	@ 0xc7
 800ddc2:	d9f0      	bls.n	800dda6 <USB_SetCurrentMode+0x2e>
 800ddc4:	e01a      	b.n	800ddfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ddc6:	78fb      	ldrb	r3, [r7, #3]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d115      	bne.n	800ddf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ddd8:	200a      	movs	r0, #10
 800ddda:	f7f4 fab1 	bl	8002340 <HAL_Delay>
      ms += 10U;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	330a      	adds	r3, #10
 800dde2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f001 f926 	bl	800f036 <USB_GetMode>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d005      	beq.n	800ddfc <USB_SetCurrentMode+0x84>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2bc7      	cmp	r3, #199	@ 0xc7
 800ddf4:	d9f0      	bls.n	800ddd8 <USB_SetCurrentMode+0x60>
 800ddf6:	e001      	b.n	800ddfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e005      	b.n	800de08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2bc8      	cmp	r3, #200	@ 0xc8
 800de00:	d101      	bne.n	800de06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	e000      	b.n	800de08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de10:	b084      	sub	sp, #16
 800de12:	b580      	push	{r7, lr}
 800de14:	b086      	sub	sp, #24
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800de1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800de2a:	2300      	movs	r3, #0
 800de2c:	613b      	str	r3, [r7, #16]
 800de2e:	e009      	b.n	800de44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	3340      	adds	r3, #64	@ 0x40
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	2200      	movs	r2, #0
 800de3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	3301      	adds	r3, #1
 800de42:	613b      	str	r3, [r7, #16]
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	2b0e      	cmp	r3, #14
 800de48:	d9f2      	bls.n	800de30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800de4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d11c      	bne.n	800de8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de60:	f043 0302 	orr.w	r3, r3, #2
 800de64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	601a      	str	r2, [r3, #0]
 800de8a:	e005      	b.n	800de98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800de9e:	461a      	mov	r2, r3
 800dea0:	2300      	movs	r3, #0
 800dea2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dea4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d10d      	bne.n	800dec8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800deac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d104      	bne.n	800debe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800deb4:	2100      	movs	r1, #0
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f968 	bl	800e18c <USB_SetDevSpeed>
 800debc:	e008      	b.n	800ded0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800debe:	2101      	movs	r1, #1
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f963 	bl	800e18c <USB_SetDevSpeed>
 800dec6:	e003      	b.n	800ded0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dec8:	2103      	movs	r1, #3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f95e 	bl	800e18c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ded0:	2110      	movs	r1, #16
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f8fa 	bl	800e0cc <USB_FlushTxFifo>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d001      	beq.n	800dee2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 f924 	bl	800e130 <USB_FlushRxFifo>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d001      	beq.n	800def2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800def8:	461a      	mov	r2, r3
 800defa:	2300      	movs	r3, #0
 800defc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df04:	461a      	mov	r2, r3
 800df06:	2300      	movs	r3, #0
 800df08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df10:	461a      	mov	r2, r3
 800df12:	2300      	movs	r3, #0
 800df14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df16:	2300      	movs	r3, #0
 800df18:	613b      	str	r3, [r7, #16]
 800df1a:	e043      	b.n	800dfa4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	015a      	lsls	r2, r3, #5
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	4413      	add	r3, r2
 800df24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df32:	d118      	bne.n	800df66 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10a      	bne.n	800df50 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	015a      	lsls	r2, r3, #5
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	4413      	add	r3, r2
 800df42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df46:	461a      	mov	r2, r3
 800df48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	e013      	b.n	800df78 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	015a      	lsls	r2, r3, #5
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	4413      	add	r3, r2
 800df58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df5c:	461a      	mov	r2, r3
 800df5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800df62:	6013      	str	r3, [r2, #0]
 800df64:	e008      	b.n	800df78 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df72:	461a      	mov	r2, r3
 800df74:	2300      	movs	r3, #0
 800df76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	015a      	lsls	r2, r3, #5
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	4413      	add	r3, r2
 800df80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df84:	461a      	mov	r2, r3
 800df86:	2300      	movs	r3, #0
 800df88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	015a      	lsls	r2, r3, #5
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	4413      	add	r3, r2
 800df92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df96:	461a      	mov	r2, r3
 800df98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800df9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	613b      	str	r3, [r7, #16]
 800dfa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d3b5      	bcc.n	800df1c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	613b      	str	r3, [r7, #16]
 800dfb4:	e043      	b.n	800e03e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	015a      	lsls	r2, r3, #5
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dfc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dfcc:	d118      	bne.n	800e000 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10a      	bne.n	800dfea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	015a      	lsls	r2, r3, #5
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4413      	add	r3, r2
 800dfdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dfe6:	6013      	str	r3, [r2, #0]
 800dfe8:	e013      	b.n	800e012 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	015a      	lsls	r2, r3, #5
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	4413      	add	r3, r2
 800dff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dff6:	461a      	mov	r2, r3
 800dff8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	e008      	b.n	800e012 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	015a      	lsls	r2, r3, #5
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4413      	add	r3, r2
 800e008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e00c:	461a      	mov	r2, r3
 800e00e:	2300      	movs	r3, #0
 800e010:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	015a      	lsls	r2, r3, #5
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	4413      	add	r3, r2
 800e01a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e01e:	461a      	mov	r2, r3
 800e020:	2300      	movs	r3, #0
 800e022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	015a      	lsls	r2, r3, #5
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	4413      	add	r3, r2
 800e02c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e030:	461a      	mov	r2, r3
 800e032:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	3301      	adds	r3, #1
 800e03c:	613b      	str	r3, [r7, #16]
 800e03e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e042:	461a      	mov	r2, r3
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	4293      	cmp	r3, r2
 800e048:	d3b5      	bcc.n	800dfb6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e05c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e06a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e06c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e070:	2b00      	cmp	r3, #0
 800e072:	d105      	bne.n	800e080 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	f043 0210 	orr.w	r2, r3, #16
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	699a      	ldr	r2, [r3, #24]
 800e084:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c4 <USB_DevInit+0x2b4>)
 800e086:	4313      	orrs	r3, r2
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e08c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e090:	2b00      	cmp	r3, #0
 800e092:	d005      	beq.n	800e0a0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	f043 0208 	orr.w	r2, r3, #8
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e0a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d105      	bne.n	800e0b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	699a      	ldr	r2, [r3, #24]
 800e0ac:	4b06      	ldr	r3, [pc, #24]	@ (800e0c8 <USB_DevInit+0x2b8>)
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3718      	adds	r7, #24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0c0:	b004      	add	sp, #16
 800e0c2:	4770      	bx	lr
 800e0c4:	803c3800 	.word	0x803c3800
 800e0c8:	40000004 	.word	0x40000004

0800e0cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e0e6:	d901      	bls.n	800e0ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	e01b      	b.n	800e124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	daf2      	bge.n	800e0da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	019b      	lsls	r3, r3, #6
 800e0fc:	f043 0220 	orr.w	r2, r3, #32
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	3301      	adds	r3, #1
 800e108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e110:	d901      	bls.n	800e116 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e112:	2303      	movs	r3, #3
 800e114:	e006      	b.n	800e124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	f003 0320 	and.w	r3, r3, #32
 800e11e:	2b20      	cmp	r3, #32
 800e120:	d0f0      	beq.n	800e104 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e138:	2300      	movs	r3, #0
 800e13a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3301      	adds	r3, #1
 800e140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e148:	d901      	bls.n	800e14e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e14a:	2303      	movs	r3, #3
 800e14c:	e018      	b.n	800e180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	daf2      	bge.n	800e13c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2210      	movs	r2, #16
 800e15e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3301      	adds	r3, #1
 800e164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e16c:	d901      	bls.n	800e172 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e006      	b.n	800e180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	691b      	ldr	r3, [r3, #16]
 800e176:	f003 0310 	and.w	r3, r3, #16
 800e17a:	2b10      	cmp	r3, #16
 800e17c:	d0f0      	beq.n	800e160 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	78fb      	ldrb	r3, [r7, #3]
 800e1a6:	68f9      	ldr	r1, [r7, #12]
 800e1a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e1be:	b480      	push	{r7}
 800e1c0:	b087      	sub	sp, #28
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	f003 0306 	and.w	r3, r3, #6
 800e1d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d102      	bne.n	800e1e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	75fb      	strb	r3, [r7, #23]
 800e1e2:	e00a      	b.n	800e1fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d002      	beq.n	800e1f0 <USB_GetDevSpeed+0x32>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b06      	cmp	r3, #6
 800e1ee:	d102      	bne.n	800e1f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e1f0:	2302      	movs	r3, #2
 800e1f2:	75fb      	strb	r3, [r7, #23]
 800e1f4:	e001      	b.n	800e1fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e1f6:	230f      	movs	r3, #15
 800e1f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	371c      	adds	r7, #28
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e208:	b480      	push	{r7}
 800e20a:	b085      	sub	sp, #20
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	785b      	ldrb	r3, [r3, #1]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d139      	bne.n	800e298 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e22a:	69da      	ldr	r2, [r3, #28]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	f003 030f 	and.w	r3, r3, #15
 800e234:	2101      	movs	r1, #1
 800e236:	fa01 f303 	lsl.w	r3, r1, r3
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	68f9      	ldr	r1, [r7, #12]
 800e23e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e242:	4313      	orrs	r3, r2
 800e244:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	015a      	lsls	r2, r3, #5
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	4413      	add	r3, r2
 800e24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d153      	bne.n	800e304 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	015a      	lsls	r2, r3, #5
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	4413      	add	r3, r2
 800e264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	791b      	ldrb	r3, [r3, #4]
 800e276:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e278:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	059b      	lsls	r3, r3, #22
 800e27e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e280:	431a      	orrs	r2, r3
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	0159      	lsls	r1, r3, #5
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	440b      	add	r3, r1
 800e28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e28e:	4619      	mov	r1, r3
 800e290:	4b20      	ldr	r3, [pc, #128]	@ (800e314 <USB_ActivateEndpoint+0x10c>)
 800e292:	4313      	orrs	r3, r2
 800e294:	600b      	str	r3, [r1, #0]
 800e296:	e035      	b.n	800e304 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e29e:	69da      	ldr	r2, [r3, #28]
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	f003 030f 	and.w	r3, r3, #15
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e2ae:	041b      	lsls	r3, r3, #16
 800e2b0:	68f9      	ldr	r1, [r7, #12]
 800e2b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d119      	bne.n	800e304 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	015a      	lsls	r2, r3, #5
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	689b      	ldr	r3, [r3, #8]
 800e2e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	791b      	ldrb	r3, [r3, #4]
 800e2ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e2ec:	430b      	orrs	r3, r1
 800e2ee:	431a      	orrs	r2, r3
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	0159      	lsls	r1, r3, #5
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	440b      	add	r3, r1
 800e2f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4b05      	ldr	r3, [pc, #20]	@ (800e314 <USB_ActivateEndpoint+0x10c>)
 800e300:	4313      	orrs	r3, r2
 800e302:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	10008000 	.word	0x10008000

0800e318 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	785b      	ldrb	r3, [r3, #1]
 800e330:	2b01      	cmp	r3, #1
 800e332:	d161      	bne.n	800e3f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	015a      	lsls	r2, r3, #5
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	4413      	add	r3, r2
 800e33c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e34a:	d11f      	bne.n	800e38c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	015a      	lsls	r2, r3, #5
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	4413      	add	r3, r2
 800e354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	0151      	lsls	r1, r2, #5
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	440a      	add	r2, r1
 800e362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e366:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e36a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	015a      	lsls	r2, r3, #5
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	4413      	add	r3, r2
 800e374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	0151      	lsls	r1, r2, #5
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	440a      	add	r2, r1
 800e382:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e386:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e38a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f003 030f 	and.w	r3, r3, #15
 800e39c:	2101      	movs	r1, #1
 800e39e:	fa01 f303 	lsl.w	r3, r1, r3
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	43db      	mvns	r3, r3
 800e3a6:	68f9      	ldr	r1, [r7, #12]
 800e3a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3ac:	4013      	ands	r3, r2
 800e3ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3b6:	69da      	ldr	r2, [r3, #28]
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	f003 030f 	and.w	r3, r3, #15
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	43db      	mvns	r3, r3
 800e3ca:	68f9      	ldr	r1, [r7, #12]
 800e3cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	0159      	lsls	r1, r3, #5
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	440b      	add	r3, r1
 800e3ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4b35      	ldr	r3, [pc, #212]	@ (800e4c8 <USB_DeactivateEndpoint+0x1b0>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	600b      	str	r3, [r1, #0]
 800e3f6:	e060      	b.n	800e4ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	015a      	lsls	r2, r3, #5
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	4413      	add	r3, r2
 800e400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e40a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e40e:	d11f      	bne.n	800e450 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	015a      	lsls	r2, r3, #5
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	4413      	add	r3, r2
 800e418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	68ba      	ldr	r2, [r7, #8]
 800e420:	0151      	lsls	r1, r2, #5
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	440a      	add	r2, r1
 800e426:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e42a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e42e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	015a      	lsls	r2, r3, #5
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	4413      	add	r3, r2
 800e438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	0151      	lsls	r1, r2, #5
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	440a      	add	r2, r1
 800e446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e44a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e44e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	f003 030f 	and.w	r3, r3, #15
 800e460:	2101      	movs	r1, #1
 800e462:	fa01 f303 	lsl.w	r3, r1, r3
 800e466:	041b      	lsls	r3, r3, #16
 800e468:	43db      	mvns	r3, r3
 800e46a:	68f9      	ldr	r1, [r7, #12]
 800e46c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e470:	4013      	ands	r3, r2
 800e472:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e47a:	69da      	ldr	r2, [r3, #28]
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	f003 030f 	and.w	r3, r3, #15
 800e484:	2101      	movs	r1, #1
 800e486:	fa01 f303 	lsl.w	r3, r1, r3
 800e48a:	041b      	lsls	r3, r3, #16
 800e48c:	43db      	mvns	r3, r3
 800e48e:	68f9      	ldr	r1, [r7, #12]
 800e490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e494:	4013      	ands	r3, r2
 800e496:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	0159      	lsls	r1, r3, #5
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	440b      	add	r3, r1
 800e4ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	4b05      	ldr	r3, [pc, #20]	@ (800e4cc <USB_DeactivateEndpoint+0x1b4>)
 800e4b6:	4013      	ands	r3, r2
 800e4b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	ec337800 	.word	0xec337800
 800e4cc:	eff37800 	.word	0xeff37800

0800e4d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b08a      	sub	sp, #40	@ 0x28
 800e4d4:	af02      	add	r7, sp, #8
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	785b      	ldrb	r3, [r3, #1]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	f040 8185 	bne.w	800e7fc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d132      	bne.n	800e560 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	015a      	lsls	r2, r3, #5
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	4413      	add	r3, r2
 800e502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e506:	691a      	ldr	r2, [r3, #16]
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	0159      	lsls	r1, r3, #5
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	440b      	add	r3, r1
 800e510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e514:	4619      	mov	r1, r3
 800e516:	4ba7      	ldr	r3, [pc, #668]	@ (800e7b4 <USB_EPStartXfer+0x2e4>)
 800e518:	4013      	ands	r3, r2
 800e51a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	015a      	lsls	r2, r3, #5
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	4413      	add	r3, r2
 800e524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	69ba      	ldr	r2, [r7, #24]
 800e52c:	0151      	lsls	r1, r2, #5
 800e52e:	69fa      	ldr	r2, [r7, #28]
 800e530:	440a      	add	r2, r1
 800e532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e536:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e53a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	015a      	lsls	r2, r3, #5
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	4413      	add	r3, r2
 800e544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e548:	691a      	ldr	r2, [r3, #16]
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	0159      	lsls	r1, r3, #5
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	440b      	add	r3, r1
 800e552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e556:	4619      	mov	r1, r3
 800e558:	4b97      	ldr	r3, [pc, #604]	@ (800e7b8 <USB_EPStartXfer+0x2e8>)
 800e55a:	4013      	ands	r3, r2
 800e55c:	610b      	str	r3, [r1, #16]
 800e55e:	e097      	b.n	800e690 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	015a      	lsls	r2, r3, #5
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	4413      	add	r3, r2
 800e568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e56c:	691a      	ldr	r2, [r3, #16]
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	0159      	lsls	r1, r3, #5
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	440b      	add	r3, r1
 800e576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e57a:	4619      	mov	r1, r3
 800e57c:	4b8e      	ldr	r3, [pc, #568]	@ (800e7b8 <USB_EPStartXfer+0x2e8>)
 800e57e:	4013      	ands	r3, r2
 800e580:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	015a      	lsls	r2, r3, #5
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	4413      	add	r3, r2
 800e58a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e58e:	691a      	ldr	r2, [r3, #16]
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	0159      	lsls	r1, r3, #5
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	440b      	add	r3, r1
 800e598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e59c:	4619      	mov	r1, r3
 800e59e:	4b85      	ldr	r3, [pc, #532]	@ (800e7b4 <USB_EPStartXfer+0x2e4>)
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d11a      	bne.n	800e5e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	691a      	ldr	r2, [r3, #16]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	689b      	ldr	r3, [r3, #8]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d903      	bls.n	800e5be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	689a      	ldr	r2, [r3, #8]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	69ba      	ldr	r2, [r7, #24]
 800e5ce:	0151      	lsls	r1, r2, #5
 800e5d0:	69fa      	ldr	r2, [r7, #28]
 800e5d2:	440a      	add	r2, r1
 800e5d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e5dc:	6113      	str	r3, [r2, #16]
 800e5de:	e044      	b.n	800e66a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	691a      	ldr	r2, [r3, #16]
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	1e5a      	subs	r2, r3, #1
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5f4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	015a      	lsls	r2, r3, #5
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e602:	691a      	ldr	r2, [r3, #16]
 800e604:	8afb      	ldrh	r3, [r7, #22]
 800e606:	04d9      	lsls	r1, r3, #19
 800e608:	4b6c      	ldr	r3, [pc, #432]	@ (800e7bc <USB_EPStartXfer+0x2ec>)
 800e60a:	400b      	ands	r3, r1
 800e60c:	69b9      	ldr	r1, [r7, #24]
 800e60e:	0148      	lsls	r0, r1, #5
 800e610:	69f9      	ldr	r1, [r7, #28]
 800e612:	4401      	add	r1, r0
 800e614:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e618:	4313      	orrs	r3, r2
 800e61a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	791b      	ldrb	r3, [r3, #4]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d122      	bne.n	800e66a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	015a      	lsls	r2, r3, #5
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	4413      	add	r3, r2
 800e62c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	69ba      	ldr	r2, [r7, #24]
 800e634:	0151      	lsls	r1, r2, #5
 800e636:	69fa      	ldr	r2, [r7, #28]
 800e638:	440a      	add	r2, r1
 800e63a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e63e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e642:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e650:	691a      	ldr	r2, [r3, #16]
 800e652:	8afb      	ldrh	r3, [r7, #22]
 800e654:	075b      	lsls	r3, r3, #29
 800e656:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e65a:	69b9      	ldr	r1, [r7, #24]
 800e65c:	0148      	lsls	r0, r1, #5
 800e65e:	69f9      	ldr	r1, [r7, #28]
 800e660:	4401      	add	r1, r0
 800e662:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e666:	4313      	orrs	r3, r2
 800e668:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	015a      	lsls	r2, r3, #5
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	4413      	add	r3, r2
 800e672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e676:	691a      	ldr	r2, [r3, #16]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	691b      	ldr	r3, [r3, #16]
 800e67c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e680:	69b9      	ldr	r1, [r7, #24]
 800e682:	0148      	lsls	r0, r1, #5
 800e684:	69f9      	ldr	r1, [r7, #28]
 800e686:	4401      	add	r1, r0
 800e688:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e68c:	4313      	orrs	r3, r2
 800e68e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e690:	79fb      	ldrb	r3, [r7, #7]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d14b      	bne.n	800e72e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	69db      	ldr	r3, [r3, #28]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d009      	beq.n	800e6b2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	015a      	lsls	r2, r3, #5
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	69db      	ldr	r3, [r3, #28]
 800e6b0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	791b      	ldrb	r3, [r3, #4]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d128      	bne.n	800e70c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d110      	bne.n	800e6ec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	015a      	lsls	r2, r3, #5
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	69ba      	ldr	r2, [r7, #24]
 800e6da:	0151      	lsls	r1, r2, #5
 800e6dc:	69fa      	ldr	r2, [r7, #28]
 800e6de:	440a      	add	r2, r1
 800e6e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	e00f      	b.n	800e70c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	015a      	lsls	r2, r3, #5
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	69ba      	ldr	r2, [r7, #24]
 800e6fc:	0151      	lsls	r1, r2, #5
 800e6fe:	69fa      	ldr	r2, [r7, #28]
 800e700:	440a      	add	r2, r1
 800e702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e70a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	015a      	lsls	r2, r3, #5
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	4413      	add	r3, r2
 800e714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	69ba      	ldr	r2, [r7, #24]
 800e71c:	0151      	lsls	r1, r2, #5
 800e71e:	69fa      	ldr	r2, [r7, #28]
 800e720:	440a      	add	r2, r1
 800e722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e726:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e72a:	6013      	str	r3, [r2, #0]
 800e72c:	e169      	b.n	800ea02 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	015a      	lsls	r2, r3, #5
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	4413      	add	r3, r2
 800e736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	69ba      	ldr	r2, [r7, #24]
 800e73e:	0151      	lsls	r1, r2, #5
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	440a      	add	r2, r1
 800e744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e748:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e74c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	791b      	ldrb	r3, [r3, #4]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d015      	beq.n	800e782 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f000 8151 	beq.w	800ea02 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	f003 030f 	and.w	r3, r3, #15
 800e770:	2101      	movs	r1, #1
 800e772:	fa01 f303 	lsl.w	r3, r1, r3
 800e776:	69f9      	ldr	r1, [r7, #28]
 800e778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e77c:	4313      	orrs	r3, r2
 800e77e:	634b      	str	r3, [r1, #52]	@ 0x34
 800e780:	e13f      	b.n	800ea02 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e782:	69fb      	ldr	r3, [r7, #28]
 800e784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d116      	bne.n	800e7c0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	015a      	lsls	r2, r3, #5
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	4413      	add	r3, r2
 800e79a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	69ba      	ldr	r2, [r7, #24]
 800e7a2:	0151      	lsls	r1, r2, #5
 800e7a4:	69fa      	ldr	r2, [r7, #28]
 800e7a6:	440a      	add	r2, r1
 800e7a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e7b0:	6013      	str	r3, [r2, #0]
 800e7b2:	e015      	b.n	800e7e0 <USB_EPStartXfer+0x310>
 800e7b4:	e007ffff 	.word	0xe007ffff
 800e7b8:	fff80000 	.word	0xfff80000
 800e7bc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	015a      	lsls	r2, r3, #5
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	69ba      	ldr	r2, [r7, #24]
 800e7d0:	0151      	lsls	r1, r2, #5
 800e7d2:	69fa      	ldr	r2, [r7, #28]
 800e7d4:	440a      	add	r2, r1
 800e7d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e7de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	68d9      	ldr	r1, [r3, #12]
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	781a      	ldrb	r2, [r3, #0]
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	b298      	uxth	r0, r3
 800e7ee:	79fb      	ldrb	r3, [r7, #7]
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 f9b9 	bl	800eb6c <USB_WritePacket>
 800e7fa:	e102      	b.n	800ea02 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	015a      	lsls	r2, r3, #5
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	4413      	add	r3, r2
 800e804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e808:	691a      	ldr	r2, [r3, #16]
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	0159      	lsls	r1, r3, #5
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	440b      	add	r3, r1
 800e812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e816:	4619      	mov	r1, r3
 800e818:	4b7c      	ldr	r3, [pc, #496]	@ (800ea0c <USB_EPStartXfer+0x53c>)
 800e81a:	4013      	ands	r3, r2
 800e81c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	4413      	add	r3, r2
 800e826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e82a:	691a      	ldr	r2, [r3, #16]
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	0159      	lsls	r1, r3, #5
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	440b      	add	r3, r1
 800e834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e838:	4619      	mov	r1, r3
 800e83a:	4b75      	ldr	r3, [pc, #468]	@ (800ea10 <USB_EPStartXfer+0x540>)
 800e83c:	4013      	ands	r3, r2
 800e83e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d12f      	bne.n	800e8a6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d003      	beq.n	800e856 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	689a      	ldr	r2, [r3, #8]
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	689a      	ldr	r2, [r3, #8]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	015a      	lsls	r2, r3, #5
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	4413      	add	r3, r2
 800e866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e86a:	691a      	ldr	r2, [r3, #16]
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	6a1b      	ldr	r3, [r3, #32]
 800e870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e874:	69b9      	ldr	r1, [r7, #24]
 800e876:	0148      	lsls	r0, r1, #5
 800e878:	69f9      	ldr	r1, [r7, #28]
 800e87a:	4401      	add	r1, r0
 800e87c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e880:	4313      	orrs	r3, r2
 800e882:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	015a      	lsls	r2, r3, #5
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	4413      	add	r3, r2
 800e88c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	69ba      	ldr	r2, [r7, #24]
 800e894:	0151      	lsls	r1, r2, #5
 800e896:	69fa      	ldr	r2, [r7, #28]
 800e898:	440a      	add	r2, r1
 800e89a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e89e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e8a2:	6113      	str	r3, [r2, #16]
 800e8a4:	e05f      	b.n	800e966 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d123      	bne.n	800e8f6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	015a      	lsls	r2, r3, #5
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8ba:	691a      	ldr	r2, [r3, #16]
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8c4:	69b9      	ldr	r1, [r7, #24]
 800e8c6:	0148      	lsls	r0, r1, #5
 800e8c8:	69f9      	ldr	r1, [r7, #28]
 800e8ca:	4401      	add	r1, r0
 800e8cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	015a      	lsls	r2, r3, #5
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	69ba      	ldr	r2, [r7, #24]
 800e8e4:	0151      	lsls	r1, r2, #5
 800e8e6:	69fa      	ldr	r2, [r7, #28]
 800e8e8:	440a      	add	r2, r1
 800e8ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e8f2:	6113      	str	r3, [r2, #16]
 800e8f4:	e037      	b.n	800e966 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	691a      	ldr	r2, [r3, #16]
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	4413      	add	r3, r2
 800e900:	1e5a      	subs	r2, r3, #1
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	fbb2 f3f3 	udiv	r3, r2, r3
 800e90a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	8afa      	ldrh	r2, [r7, #22]
 800e912:	fb03 f202 	mul.w	r2, r3, r2
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	015a      	lsls	r2, r3, #5
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	4413      	add	r3, r2
 800e922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e926:	691a      	ldr	r2, [r3, #16]
 800e928:	8afb      	ldrh	r3, [r7, #22]
 800e92a:	04d9      	lsls	r1, r3, #19
 800e92c:	4b39      	ldr	r3, [pc, #228]	@ (800ea14 <USB_EPStartXfer+0x544>)
 800e92e:	400b      	ands	r3, r1
 800e930:	69b9      	ldr	r1, [r7, #24]
 800e932:	0148      	lsls	r0, r1, #5
 800e934:	69f9      	ldr	r1, [r7, #28]
 800e936:	4401      	add	r1, r0
 800e938:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e93c:	4313      	orrs	r3, r2
 800e93e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	4413      	add	r3, r2
 800e948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e94c:	691a      	ldr	r2, [r3, #16]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e956:	69b9      	ldr	r1, [r7, #24]
 800e958:	0148      	lsls	r0, r1, #5
 800e95a:	69f9      	ldr	r1, [r7, #28]
 800e95c:	4401      	add	r1, r0
 800e95e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e962:	4313      	orrs	r3, r2
 800e964:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e966:	79fb      	ldrb	r3, [r7, #7]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d10d      	bne.n	800e988 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d009      	beq.n	800e988 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	68d9      	ldr	r1, [r3, #12]
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	015a      	lsls	r2, r3, #5
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	4413      	add	r3, r2
 800e980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e984:	460a      	mov	r2, r1
 800e986:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	791b      	ldrb	r3, [r3, #4]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d128      	bne.n	800e9e2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d110      	bne.n	800e9c2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	015a      	lsls	r2, r3, #5
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	4413      	add	r3, r2
 800e9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	69ba      	ldr	r2, [r7, #24]
 800e9b0:	0151      	lsls	r1, r2, #5
 800e9b2:	69fa      	ldr	r2, [r7, #28]
 800e9b4:	440a      	add	r2, r1
 800e9b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e9be:	6013      	str	r3, [r2, #0]
 800e9c0:	e00f      	b.n	800e9e2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	015a      	lsls	r2, r3, #5
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	69ba      	ldr	r2, [r7, #24]
 800e9d2:	0151      	lsls	r1, r2, #5
 800e9d4:	69fa      	ldr	r2, [r7, #28]
 800e9d6:	440a      	add	r2, r1
 800e9d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9e0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	015a      	lsls	r2, r3, #5
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	69ba      	ldr	r2, [r7, #24]
 800e9f2:	0151      	lsls	r1, r2, #5
 800e9f4:	69fa      	ldr	r2, [r7, #28]
 800e9f6:	440a      	add	r2, r1
 800e9f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ea00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3720      	adds	r7, #32
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	fff80000 	.word	0xfff80000
 800ea10:	e007ffff 	.word	0xe007ffff
 800ea14:	1ff80000 	.word	0x1ff80000

0800ea18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ea22:	2300      	movs	r3, #0
 800ea24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	785b      	ldrb	r3, [r3, #1]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d14a      	bne.n	800eacc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	015a      	lsls	r2, r3, #5
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	4413      	add	r3, r2
 800ea40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ea4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ea4e:	f040 8086 	bne.w	800eb5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	015a      	lsls	r2, r3, #5
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	683a      	ldr	r2, [r7, #0]
 800ea64:	7812      	ldrb	r2, [r2, #0]
 800ea66:	0151      	lsls	r1, r2, #5
 800ea68:	693a      	ldr	r2, [r7, #16]
 800ea6a:	440a      	add	r2, r1
 800ea6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ea74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	015a      	lsls	r2, r3, #5
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	4413      	add	r3, r2
 800ea80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	683a      	ldr	r2, [r7, #0]
 800ea88:	7812      	ldrb	r2, [r2, #0]
 800ea8a:	0151      	lsls	r1, r2, #5
 800ea8c:	693a      	ldr	r2, [r7, #16]
 800ea8e:	440a      	add	r2, r1
 800ea90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d902      	bls.n	800eab0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	75fb      	strb	r3, [r7, #23]
          break;
 800eaae:	e056      	b.n	800eb5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	015a      	lsls	r2, r3, #5
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	4413      	add	r3, r2
 800eaba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eac8:	d0e7      	beq.n	800ea9a <USB_EPStopXfer+0x82>
 800eaca:	e048      	b.n	800eb5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	015a      	lsls	r2, r3, #5
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	4413      	add	r3, r2
 800ead6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eae4:	d13b      	bne.n	800eb5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	683a      	ldr	r2, [r7, #0]
 800eaf8:	7812      	ldrb	r2, [r2, #0]
 800eafa:	0151      	lsls	r1, r2, #5
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	440a      	add	r2, r1
 800eb00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eb08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	015a      	lsls	r2, r3, #5
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	4413      	add	r3, r2
 800eb14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	7812      	ldrb	r2, [r2, #0]
 800eb1e:	0151      	lsls	r1, r2, #5
 800eb20:	693a      	ldr	r2, [r7, #16]
 800eb22:	440a      	add	r2, r1
 800eb24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	3301      	adds	r3, #1
 800eb32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f242 7210 	movw	r2, #10000	@ 0x2710
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d902      	bls.n	800eb44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	75fb      	strb	r3, [r7, #23]
          break;
 800eb42:	e00c      	b.n	800eb5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	015a      	lsls	r2, r3, #5
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb5c:	d0e7      	beq.n	800eb2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	371c      	adds	r7, #28
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b089      	sub	sp, #36	@ 0x24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	4611      	mov	r1, r2
 800eb78:	461a      	mov	r2, r3
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	71fb      	strb	r3, [r7, #7]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800eb8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d123      	bne.n	800ebda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800eb92:	88bb      	ldrh	r3, [r7, #4]
 800eb94:	3303      	adds	r3, #3
 800eb96:	089b      	lsrs	r3, r3, #2
 800eb98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	61bb      	str	r3, [r7, #24]
 800eb9e:	e018      	b.n	800ebd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	031a      	lsls	r2, r3, #12
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	4413      	add	r3, r2
 800eba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ebac:	461a      	mov	r2, r3
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	61bb      	str	r3, [r7, #24]
 800ebd2:	69ba      	ldr	r2, [r7, #24]
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d3e2      	bcc.n	800eba0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3724      	adds	r7, #36	@ 0x24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b08b      	sub	sp, #44	@ 0x2c
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ebfe:	88fb      	ldrh	r3, [r7, #6]
 800ec00:	089b      	lsrs	r3, r3, #2
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ec06:	88fb      	ldrh	r3, [r7, #6]
 800ec08:	f003 0303 	and.w	r3, r3, #3
 800ec0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ec0e:	2300      	movs	r3, #0
 800ec10:	623b      	str	r3, [r7, #32]
 800ec12:	e014      	b.n	800ec3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ec20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec22:	3301      	adds	r3, #1
 800ec24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec28:	3301      	adds	r3, #1
 800ec2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2e:	3301      	adds	r3, #1
 800ec30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ec32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec34:	3301      	adds	r3, #1
 800ec36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ec38:	6a3b      	ldr	r3, [r7, #32]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	623b      	str	r3, [r7, #32]
 800ec3e:	6a3a      	ldr	r2, [r7, #32]
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d3e6      	bcc.n	800ec14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ec46:	8bfb      	ldrh	r3, [r7, #30]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d01e      	beq.n	800ec8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec56:	461a      	mov	r2, r3
 800ec58:	f107 0310 	add.w	r3, r7, #16
 800ec5c:	6812      	ldr	r2, [r2, #0]
 800ec5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ec60:	693a      	ldr	r2, [r7, #16]
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	fa22 f303 	lsr.w	r3, r2, r3
 800ec6c:	b2da      	uxtb	r2, r3
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec70:	701a      	strb	r2, [r3, #0]
      i++;
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	3301      	adds	r3, #1
 800ec76:	623b      	str	r3, [r7, #32]
      pDest++;
 800ec78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ec7e:	8bfb      	ldrh	r3, [r7, #30]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ec84:	8bfb      	ldrh	r3, [r7, #30]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1ea      	bne.n	800ec60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	372c      	adds	r7, #44	@ 0x2c
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	785b      	ldrb	r3, [r3, #1]
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d12c      	bne.n	800ed0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	015a      	lsls	r2, r3, #5
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	db12      	blt.n	800ecec <USB_EPSetStall+0x54>
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00f      	beq.n	800ecec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	015a      	lsls	r2, r3, #5
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68ba      	ldr	r2, [r7, #8]
 800ecdc:	0151      	lsls	r1, r2, #5
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	440a      	add	r2, r1
 800ece2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ece6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ecea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	015a      	lsls	r2, r3, #5
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	0151      	lsls	r1, r2, #5
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	440a      	add	r2, r1
 800ed02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ed0a:	6013      	str	r3, [r2, #0]
 800ed0c:	e02b      	b.n	800ed66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	015a      	lsls	r2, r3, #5
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	4413      	add	r3, r2
 800ed16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	db12      	blt.n	800ed46 <USB_EPSetStall+0xae>
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00f      	beq.n	800ed46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	015a      	lsls	r2, r3, #5
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	0151      	lsls	r1, r2, #5
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	440a      	add	r2, r1
 800ed3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ed44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	015a      	lsls	r2, r3, #5
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	68ba      	ldr	r2, [r7, #8]
 800ed56:	0151      	lsls	r1, r2, #5
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	440a      	add	r2, r1
 800ed5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ed64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3714      	adds	r7, #20
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	785b      	ldrb	r3, [r3, #1]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d128      	bne.n	800ede2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	015a      	lsls	r2, r3, #5
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4413      	add	r3, r2
 800ed98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	0151      	lsls	r1, r2, #5
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	440a      	add	r2, r1
 800eda6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800edae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	791b      	ldrb	r3, [r3, #4]
 800edb4:	2b03      	cmp	r3, #3
 800edb6:	d003      	beq.n	800edc0 <USB_EPClearStall+0x4c>
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	791b      	ldrb	r3, [r3, #4]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d138      	bne.n	800ee32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	015a      	lsls	r2, r3, #5
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	4413      	add	r3, r2
 800edc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	0151      	lsls	r1, r2, #5
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	440a      	add	r2, r1
 800edd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	e027      	b.n	800ee32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	015a      	lsls	r2, r3, #5
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	4413      	add	r3, r2
 800edea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	0151      	lsls	r1, r2, #5
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	440a      	add	r2, r1
 800edf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800edfc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ee00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	791b      	ldrb	r3, [r3, #4]
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d003      	beq.n	800ee12 <USB_EPClearStall+0x9e>
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	791b      	ldrb	r3, [r3, #4]
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d10f      	bne.n	800ee32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	015a      	lsls	r2, r3, #5
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	4413      	add	r3, r2
 800ee1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	0151      	lsls	r1, r2, #5
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	440a      	add	r2, r1
 800ee28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3714      	adds	r7, #20
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ee5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ee62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	78fb      	ldrb	r3, [r7, #3]
 800ee6e:	011b      	lsls	r3, r3, #4
 800ee70:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ee74:	68f9      	ldr	r1, [r7, #12]
 800ee76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3714      	adds	r7, #20
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eea6:	f023 0303 	bic.w	r3, r3, #3
 800eeaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eeba:	f023 0302 	bic.w	r3, r3, #2
 800eebe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr

0800eece <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800eece:	b480      	push	{r7}
 800eed0:	b085      	sub	sp, #20
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eee8:	f023 0303 	bic.w	r3, r3, #3
 800eeec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eefc:	f043 0302 	orr.w	r3, r3, #2
 800ef00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	695b      	ldr	r3, [r3, #20]
 800ef1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	4013      	ands	r3, r2
 800ef26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ef28:	68fb      	ldr	r3, [r7, #12]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3714      	adds	r7, #20
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ef36:	b480      	push	{r7}
 800ef38:	b085      	sub	sp, #20
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef52:	69db      	ldr	r3, [r3, #28]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	4013      	ands	r3, r2
 800ef58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	0c1b      	lsrs	r3, r3, #16
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b085      	sub	sp, #20
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef7c:	699b      	ldr	r3, [r3, #24]
 800ef7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef86:	69db      	ldr	r3, [r3, #28]
 800ef88:	68ba      	ldr	r2, [r7, #8]
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	b29b      	uxth	r3, r3
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b085      	sub	sp, #20
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	460b      	mov	r3, r1
 800efa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800efae:	78fb      	ldrb	r3, [r7, #3]
 800efb0:	015a      	lsls	r2, r3, #5
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	4413      	add	r3, r2
 800efb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efc4:	695b      	ldr	r3, [r3, #20]
 800efc6:	68ba      	ldr	r2, [r7, #8]
 800efc8:	4013      	ands	r3, r2
 800efca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800efcc:	68bb      	ldr	r3, [r7, #8]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3714      	adds	r7, #20
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr

0800efda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800efda:	b480      	push	{r7}
 800efdc:	b087      	sub	sp, #28
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	460b      	mov	r3, r1
 800efe4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800effa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800effc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800effe:	78fb      	ldrb	r3, [r7, #3]
 800f000:	f003 030f 	and.w	r3, r3, #15
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	fa22 f303 	lsr.w	r3, r2, r3
 800f00a:	01db      	lsls	r3, r3, #7
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	693a      	ldr	r2, [r7, #16]
 800f010:	4313      	orrs	r3, r2
 800f012:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f014:	78fb      	ldrb	r3, [r7, #3]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	4013      	ands	r3, r2
 800f026:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f028:	68bb      	ldr	r3, [r7, #8]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	371c      	adds	r7, #28
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr

0800f036 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f036:	b480      	push	{r7}
 800f038:	b083      	sub	sp, #12
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	695b      	ldr	r3, [r3, #20]
 800f042:	f003 0301 	and.w	r3, r3, #1
}
 800f046:	4618      	mov	r0, r3
 800f048:	370c      	adds	r7, #12
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
	...

0800f054 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f06e:	4619      	mov	r1, r3
 800f070:	4b09      	ldr	r3, [pc, #36]	@ (800f098 <USB_ActivateSetup+0x44>)
 800f072:	4013      	ands	r3, r2
 800f074:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	68fa      	ldr	r2, [r7, #12]
 800f080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f088:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3714      	adds	r7, #20
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr
 800f098:	fffff800 	.word	0xfffff800

0800f09c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b087      	sub	sp, #28
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	607a      	str	r2, [r7, #4]
 800f0a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	333c      	adds	r3, #60	@ 0x3c
 800f0b2:	3304      	adds	r3, #4
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	4a26      	ldr	r2, [pc, #152]	@ (800f154 <USB_EP0_OutStart+0xb8>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d90a      	bls.n	800f0d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f0cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f0d0:	d101      	bne.n	800f0d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e037      	b.n	800f146 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0dc:	461a      	mov	r2, r3
 800f0de:	2300      	movs	r3, #0
 800f0e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	697a      	ldr	r2, [r7, #20]
 800f0ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f0f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0fc:	691b      	ldr	r3, [r3, #16]
 800f0fe:	697a      	ldr	r2, [r7, #20]
 800f100:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f104:	f043 0318 	orr.w	r3, r3, #24
 800f108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f118:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f11c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f11e:	7afb      	ldrb	r3, [r7, #11]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d10f      	bne.n	800f144 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f12a:	461a      	mov	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	697a      	ldr	r2, [r7, #20]
 800f13a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f13e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	371c      	adds	r7, #28
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	4f54300a 	.word	0x4f54300a

0800f158 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f160:	2300      	movs	r3, #0
 800f162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	3301      	adds	r3, #1
 800f168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f170:	d901      	bls.n	800f176 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f172:	2303      	movs	r3, #3
 800f174:	e01b      	b.n	800f1ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	691b      	ldr	r3, [r3, #16]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	daf2      	bge.n	800f164 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f17e:	2300      	movs	r3, #0
 800f180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	f043 0201 	orr.w	r2, r3, #1
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	3301      	adds	r3, #1
 800f192:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f19a:	d901      	bls.n	800f1a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f19c:	2303      	movs	r3, #3
 800f19e:	e006      	b.n	800f1ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	f003 0301 	and.w	r3, r3, #1
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d0f0      	beq.n	800f18e <USB_CoreReset+0x36>

  return HAL_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3714      	adds	r7, #20
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr
	...

0800f1bc <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800f1c8:	f643 4050 	movw	r0, #15440	@ 0x3c50
 800f1cc:	f005 f97c 	bl	80144c8 <USBD_static_malloc>
 800f1d0:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d109      	bne.n	800f1ec <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	32b0      	adds	r2, #176	@ 0xb0
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	e07e      	b.n	800f2ea <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	32b0      	adds	r2, #176	@ 0xb0
 800f1f6:	68f9      	ldr	r1, [r7, #12]
 800f1f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	32b0      	adds	r2, #176	@ 0xb0
 800f206:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7c1b      	ldrb	r3, [r3, #16]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10e      	bne.n	800f236 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800f218:	4b36      	ldr	r3, [pc, #216]	@ (800f2f4 <USBD_AUDIO_Init+0x138>)
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	f003 020f 	and.w	r2, r3, #15
 800f220:	6879      	ldr	r1, [r7, #4]
 800f222:	4613      	mov	r3, r2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	440b      	add	r3, r1
 800f22c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f230:	2201      	movs	r2, #1
 800f232:	801a      	strh	r2, [r3, #0]
 800f234:	e00d      	b.n	800f252 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800f236:	4b2f      	ldr	r3, [pc, #188]	@ (800f2f4 <USBD_AUDIO_Init+0x138>)
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	f003 020f 	and.w	r2, r3, #15
 800f23e:	6879      	ldr	r1, [r7, #4]
 800f240:	4613      	mov	r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4413      	add	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	440b      	add	r3, r1
 800f24a:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f24e:	2201      	movs	r2, #1
 800f250:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800f252:	4b28      	ldr	r3, [pc, #160]	@ (800f2f4 <USBD_AUDIO_Init+0x138>)
 800f254:	7819      	ldrb	r1, [r3, #0]
 800f256:	23c0      	movs	r3, #192	@ 0xc0
 800f258:	2201      	movs	r2, #1
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f005 f811 	bl	8014282 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800f260:	4b24      	ldr	r3, [pc, #144]	@ (800f2f4 <USBD_AUDIO_Init+0x138>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	f003 020f 	and.w	r2, r3, #15
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	4613      	mov	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4413      	add	r3, r2
 800f270:	009b      	lsls	r3, r3, #2
 800f272:	440b      	add	r3, r1
 800f274:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f278:	2201      	movs	r2, #1
 800f27a:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f288:	2203      	movs	r2, #3
 800f28a:	f883 2c04 	strb.w	r2, [r3, #3076]	@ 0xc04
  haudio->wr_ptr = 0U;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f294:	2200      	movs	r2, #0
 800f296:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08
  haudio->rd_ptr = 0U;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f8a3 2c06 	strh.w	r2, [r3, #3078]	@ 0xc06
  haudio->rd_enable = 0U;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 2c05 	strb.w	r2, [r3, #3077]	@ 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	33b0      	adds	r3, #176	@ 0xb0
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	4413      	add	r3, r2
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	2146      	movs	r1, #70	@ 0x46
 800f2c8:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800f2cc:	4798      	blx	r3
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d001      	beq.n	800f2d8 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800f2d4:	2303      	movs	r3, #3
 800f2d6:	e008      	b.n	800f2ea <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800f2d8:	4b06      	ldr	r3, [pc, #24]	@ (800f2f4 <USBD_AUDIO_Init+0x138>)
 800f2da:	7819      	ldrb	r1, [r3, #0]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	1d1a      	adds	r2, r3, #4
 800f2e0:	23c0      	movs	r3, #192	@ 0xc0
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f005 f8bc 	bl	8014460 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	240000c2 	.word	0x240000c2

0800f2f8 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	460b      	mov	r3, r1
 800f302:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800f304:	4b28      	ldr	r3, [pc, #160]	@ (800f3a8 <USBD_AUDIO_DeInit+0xb0>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f004 ffdf 	bl	80142ce <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800f310:	4b25      	ldr	r3, [pc, #148]	@ (800f3a8 <USBD_AUDIO_DeInit+0xb0>)
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	f003 020f 	and.w	r2, r3, #15
 800f318:	6879      	ldr	r1, [r7, #4]
 800f31a:	4613      	mov	r3, r2
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	4413      	add	r3, r2
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	440b      	add	r3, r1
 800f324:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f328:	2200      	movs	r2, #0
 800f32a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 800f32c:	4b1e      	ldr	r3, [pc, #120]	@ (800f3a8 <USBD_AUDIO_DeInit+0xb0>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	f003 020f 	and.w	r2, r3, #15
 800f334:	6879      	ldr	r1, [r7, #4]
 800f336:	4613      	mov	r3, r2
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	4413      	add	r3, r2
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	440b      	add	r3, r1
 800f340:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f344:	2200      	movs	r2, #0
 800f346:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	32b0      	adds	r2, #176	@ 0xb0
 800f352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d020      	beq.n	800f39c <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	33b0      	adds	r3, #176	@ 0xb0
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	2000      	movs	r0, #0
 800f36e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	32b0      	adds	r2, #176	@ 0xb0
 800f37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f37e:	4618      	mov	r0, r3
 800f380:	f005 f8b0 	bl	80144e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	32b0      	adds	r2, #176	@ 0xb0
 800f38e:	2100      	movs	r1, #0
 800f390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f39c:	2300      	movs	r3, #0
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	240000c2 	.word	0x240000c2

0800f3ac <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	32b0      	adds	r2, #176	@ 0xb0
 800f3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3cc:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d101      	bne.n	800f3d8 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800f3d4:	2303      	movs	r3, #3
 800f3d6:	e0c1      	b.n	800f55c <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d01a      	beq.n	800f41a <USBD_AUDIO_Setup+0x6e>
 800f3e4:	2b20      	cmp	r3, #32
 800f3e6:	f040 80b1 	bne.w	800f54c <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	785b      	ldrb	r3, [r3, #1]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d006      	beq.n	800f400 <USBD_AUDIO_Setup+0x54>
 800f3f2:	2b81      	cmp	r3, #129	@ 0x81
 800f3f4:	d109      	bne.n	800f40a <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800f3f6:	6839      	ldr	r1, [r7, #0]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f9f5 	bl	800f7e8 <AUDIO_REQ_GetCurrent>
          break;
 800f3fe:	e00b      	b.n	800f418 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 800f400:	6839      	ldr	r1, [r7, #0]
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fa1c 	bl	800f840 <AUDIO_REQ_SetCurrent>
          break;
 800f408:	e006      	b.n	800f418 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f001 fcca 	bl	8010da6 <USBD_CtlError>
          ret = USBD_FAIL;
 800f412:	2303      	movs	r3, #3
 800f414:	75fb      	strb	r3, [r7, #23]
          break;
 800f416:	bf00      	nop
      }
      break;
 800f418:	e09f      	b.n	800f55a <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	785b      	ldrb	r3, [r3, #1]
 800f41e:	2b0b      	cmp	r3, #11
 800f420:	f200 8089 	bhi.w	800f536 <USBD_AUDIO_Setup+0x18a>
 800f424:	a201      	add	r2, pc, #4	@ (adr r2, 800f42c <USBD_AUDIO_Setup+0x80>)
 800f426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42a:	bf00      	nop
 800f42c:	0800f45d 	.word	0x0800f45d
 800f430:	0800f545 	.word	0x0800f545
 800f434:	0800f537 	.word	0x0800f537
 800f438:	0800f537 	.word	0x0800f537
 800f43c:	0800f537 	.word	0x0800f537
 800f440:	0800f537 	.word	0x0800f537
 800f444:	0800f487 	.word	0x0800f487
 800f448:	0800f537 	.word	0x0800f537
 800f44c:	0800f537 	.word	0x0800f537
 800f450:	0800f537 	.word	0x0800f537
 800f454:	0800f4cf 	.word	0x0800f4cf
 800f458:	0800f4f7 	.word	0x0800f4f7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b03      	cmp	r3, #3
 800f466:	d107      	bne.n	800f478 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f468:	f107 0308 	add.w	r3, r7, #8
 800f46c:	2202      	movs	r2, #2
 800f46e:	4619      	mov	r1, r3
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f001 fd15 	bl	8010ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f476:	e068      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f001 fc93 	bl	8010da6 <USBD_CtlError>
            ret = USBD_FAIL;
 800f480:	2303      	movs	r3, #3
 800f482:	75fb      	strb	r3, [r7, #23]
          break;
 800f484:	e061      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	885b      	ldrh	r3, [r3, #2]
 800f48a:	0a1b      	lsrs	r3, r3, #8
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	2b21      	cmp	r3, #33	@ 0x21
 800f490:	d15a      	bne.n	800f548 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 fa3f 	bl	800f91c <USBD_AUDIO_GetAudioHeaderDesc>
 800f49e:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00c      	beq.n	800f4c0 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	88db      	ldrh	r3, [r3, #6]
 800f4aa:	2b09      	cmp	r3, #9
 800f4ac:	bf28      	it	cs
 800f4ae:	2309      	movcs	r3, #9
 800f4b0:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800f4b2:	897b      	ldrh	r3, [r7, #10]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	68f9      	ldr	r1, [r7, #12]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f001 fcf1 	bl	8010ea0 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800f4be:	e043      	b.n	800f548 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f001 fc6f 	bl	8010da6 <USBD_CtlError>
              ret = USBD_FAIL;
 800f4c8:	2303      	movs	r3, #3
 800f4ca:	75fb      	strb	r3, [r7, #23]
          break;
 800f4cc:	e03c      	b.n	800f548 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	d106      	bne.n	800f4e8 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	2201      	movs	r2, #1
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f001 fcdd 	bl	8010ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f4e6:	e030      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f001 fc5b 	bl	8010da6 <USBD_CtlError>
            ret = USBD_FAIL;
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	75fb      	strb	r3, [r7, #23]
          break;
 800f4f4:	e029      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d112      	bne.n	800f528 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	885b      	ldrh	r3, [r3, #2]
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d806      	bhi.n	800f51a <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	885b      	ldrh	r3, [r3, #2]
 800f510:	b2db      	uxtb	r3, r3
 800f512:	461a      	mov	r2, r3
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f518:	e017      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 800f51a:	6839      	ldr	r1, [r7, #0]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f001 fc42 	bl	8010da6 <USBD_CtlError>
              ret = USBD_FAIL;
 800f522:	2303      	movs	r3, #3
 800f524:	75fb      	strb	r3, [r7, #23]
          break;
 800f526:	e010      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f001 fc3b 	bl	8010da6 <USBD_CtlError>
            ret = USBD_FAIL;
 800f530:	2303      	movs	r3, #3
 800f532:	75fb      	strb	r3, [r7, #23]
          break;
 800f534:	e009      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f536:	6839      	ldr	r1, [r7, #0]
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f001 fc34 	bl	8010da6 <USBD_CtlError>
          ret = USBD_FAIL;
 800f53e:	2303      	movs	r3, #3
 800f540:	75fb      	strb	r3, [r7, #23]
          break;
 800f542:	e002      	b.n	800f54a <USBD_AUDIO_Setup+0x19e>
          break;
 800f544:	bf00      	nop
 800f546:	e008      	b.n	800f55a <USBD_AUDIO_Setup+0x1ae>
          break;
 800f548:	bf00      	nop
      }
      break;
 800f54a:	e006      	b.n	800f55a <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f001 fc29 	bl	8010da6 <USBD_CtlError>
      ret = USBD_FAIL;
 800f554:	2303      	movs	r3, #3
 800f556:	75fb      	strb	r3, [r7, #23]
      break;
 800f558:	bf00      	nop
  }

  return (uint8_t)ret;
 800f55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3718      	adds	r7, #24
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	226d      	movs	r2, #109	@ 0x6d
 800f570:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800f572:	4b03      	ldr	r3, [pc, #12]	@ (800f580 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800f574:	4618      	mov	r0, r3
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	24000048 	.word	0x24000048

0800f584 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b084      	sub	sp, #16
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	32b0      	adds	r2, #176	@ 0xb0
 800f5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d101      	bne.n	800f5c0 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e02a      	b.n	800f616 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f5c6:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	@ 0xc0a
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d122      	bne.n	800f614 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f5d4:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	@ 0xc4c
 800f5d8:	2b02      	cmp	r3, #2
 800f5da:	d11b      	bne.n	800f614 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	33b0      	adds	r3, #176	@ 0xb0
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4413      	add	r3, r2
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	691b      	ldr	r3, [r3, #16]
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800f5f4:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	@ 0xc0b
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2c0a 	strb.w	r2, [r3, #3082]	@ 0xc0a
      haudio->control.len = 0U;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2c4b 	strb.w	r2, [r3, #3147]	@ 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	3710      	adds	r7, #16
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800f61e:	b480      	push	{r7}
 800f620:	b083      	sub	sp, #12
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f64a:	b480      	push	{r7}
 800f64c:	b083      	sub	sp, #12
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	460b      	mov	r3, r1
 800f654:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	460b      	mov	r3, r1
 800f66e:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	32b0      	adds	r2, #176	@ 0xb0
 800f67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d101      	bne.n	800f686 <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f682:	2303      	movs	r3, #3
 800f684:	e016      	b.n	800f6b4 <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	32b0      	adds	r2, #176	@ 0xb0
 800f690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f694:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f69c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 800f6a0:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	1d1a      	adds	r2, r3, #4
 800f6a8:	78f9      	ldrb	r1, [r7, #3]
 800f6aa:	23c0      	movs	r3, #192	@ 0xc0
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f004 fed7 	bl	8014460 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	32b0      	adds	r2, #176	@ 0xb0
 800f6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6d6:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d101      	bne.n	800f6e2 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f6de:	2303      	movs	r3, #3
 800f6e0:	e07c      	b.n	800f7dc <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800f6e2:	4b40      	ldr	r3, [pc, #256]	@ (800f7e4 <USBD_AUDIO_DataOut+0x128>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	78fa      	ldrb	r2, [r7, #3]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d176      	bne.n	800f7da <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800f6ec:	78fb      	ldrb	r3, [r7, #3]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f004 fed6 	bl	80144a2 <USBD_LL_GetRxDataSize>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	33b0      	adds	r3, #176	@ 0xb0
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800f712:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	@ 0xc08
 800f716:	4611      	mov	r1, r2
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	440a      	add	r2, r1
 800f71c:	1d10      	adds	r0, r2, #4
 800f71e:	8979      	ldrh	r1, [r7, #10]
 800f720:	2201      	movs	r2, #1
 800f722:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f72a:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	@ 0xc08
 800f72e:	897b      	ldrh	r3, [r7, #10]
 800f730:	4413      	add	r3, r2
 800f732:	b29a      	uxth	r2, r3
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f73a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f744:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 800f748:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800f74c:	d321      	bcc.n	800f792 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f754:	2200      	movs	r2, #0
 800f756:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f760:	f893 3c04 	ldrb.w	r3, [r3, #3076]	@ 0xc04
 800f764:	2b03      	cmp	r3, #3
 800f766:	d114      	bne.n	800f792 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	33b0      	adds	r3, #176	@ 0xb0
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4413      	add	r3, r2
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	1d10      	adds	r0, r2, #4
 800f77e:	2201      	movs	r2, #1
 800f780:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800f784:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 2c04 	strb.w	r2, [r3, #3076]	@ 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f798:	f893 3c05 	ldrb.w	r3, [r3, #3077]	@ 0xc05
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10d      	bne.n	800f7bc <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f7a6:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 800f7aa:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800f7ae:	d105      	bne.n	800f7bc <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f883 2c05 	strb.w	r2, [r3, #3077]	@ 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800f7bc:	4b09      	ldr	r3, [pc, #36]	@ (800f7e4 <USBD_AUDIO_DataOut+0x128>)
 800f7be:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f7c6:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 800f7ca:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	1d1a      	adds	r2, r3, #4
 800f7d2:	23c0      	movs	r3, #192	@ 0xc0
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f004 fe43 	bl	8014460 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	240000c2 	.word	0x240000c2

0800f7e8 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	32b0      	adds	r2, #176	@ 0xb0
 800f7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f800:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d017      	beq.n	800f838 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	f643 430b 	movw	r3, #15371	@ 0x3c0b
 800f80e:	4413      	add	r3, r2
 800f810:	2240      	movs	r2, #64	@ 0x40
 800f812:	2100      	movs	r1, #0
 800f814:	4618      	mov	r0, r3
 800f816:	f005 f8ad 	bl	8014974 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800f81a:	68fa      	ldr	r2, [r7, #12]
 800f81c:	f643 430b 	movw	r3, #15371	@ 0x3c0b
 800f820:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800f822:	683a      	ldr	r2, [r7, #0]
 800f824:	88d2      	ldrh	r2, [r2, #6]
 800f826:	2a40      	cmp	r2, #64	@ 0x40
 800f828:	bf28      	it	cs
 800f82a:	2240      	movcs	r2, #64	@ 0x40
 800f82c:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800f82e:	4619      	mov	r1, r3
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f001 fb35 	bl	8010ea0 <USBD_CtlSendData>
 800f836:	e000      	b.n	800f83a <AUDIO_REQ_GetCurrent+0x52>
    return;
 800f838:	bf00      	nop
}
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	32b0      	adds	r2, #176	@ 0xb0
 800f854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f858:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d02f      	beq.n	800f8c0 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	88db      	ldrh	r3, [r3, #6]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d02c      	beq.n	800f8c2 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2c0a 	strb.w	r2, [r3, #3082]	@ 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	88db      	ldrh	r3, [r3, #6]
 800f878:	2b3f      	cmp	r3, #63	@ 0x3f
 800f87a:	d803      	bhi.n	800f884 <AUDIO_REQ_SetCurrent+0x44>
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	88db      	ldrh	r3, [r3, #6]
 800f880:	b2da      	uxtb	r2, r3
 800f882:	e000      	b.n	800f886 <AUDIO_REQ_SetCurrent+0x46>
 800f884:	2240      	movs	r2, #64	@ 0x40
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f88c:	f883 2c4b 	strb.w	r2, [r3, #3147]	@ 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	889b      	ldrh	r3, [r3, #4]
 800f894:	0a1b      	lsrs	r3, r3, #8
 800f896:	b29b      	uxth	r3, r3
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800f8a0:	f883 2c4c 	strb.w	r2, [r3, #3148]	@ 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	f643 430b 	movw	r3, #15371	@ 0x3c0b
 800f8aa:	4413      	add	r3, r2
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800f8b2:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	@ 0xc4b
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f001 fb1d 	bl	8010ef8 <USBD_CtlPrepareRx>
 800f8be:	e000      	b.n	800f8c2 <AUDIO_REQ_SetCurrent+0x82>
    return;
 800f8c0:	bf00      	nop
  }
}
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	220a      	movs	r2, #10
 800f8d4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800f8d6:	4b03      	ldr	r3, [pc, #12]	@ (800f8e4 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	370c      	adds	r7, #12
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr
 800f8e4:	240000b8 	.word	0x240000b8

0800f8e8 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	e009      	b.n	800f910 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	33b0      	adds	r3, #176	@ 0xb0
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f90e:	2300      	movs	r3, #0
}
 800f910:	4618      	mov	r0, r3
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b086      	sub	sp, #24
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800f92c:	2300      	movs	r3, #0
 800f92e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	885b      	ldrh	r3, [r3, #2]
 800f934:	b29b      	uxth	r3, r3
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	7812      	ldrb	r2, [r2, #0]
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d91b      	bls.n	800f976 <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f944:	e011      	b.n	800f96a <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f946:	f107 030a 	add.w	r3, r7, #10
 800f94a:	4619      	mov	r1, r3
 800f94c:	6978      	ldr	r0, [r7, #20]
 800f94e:	f000 fc02 	bl	8010156 <USBD_GetNextDesc>
 800f952:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	785b      	ldrb	r3, [r3, #1]
 800f958:	2b24      	cmp	r3, #36	@ 0x24
 800f95a:	d106      	bne.n	800f96a <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800f960:	2b01      	cmp	r3, #1
 800f962:	d102      	bne.n	800f96a <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	613b      	str	r3, [r7, #16]
        break;
 800f968:	e005      	b.n	800f976 <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	885b      	ldrh	r3, [r3, #2]
 800f96e:	b29a      	uxth	r2, r3
 800f970:	897b      	ldrh	r3, [r7, #10]
 800f972:	429a      	cmp	r2, r3
 800f974:	d8e7      	bhi.n	800f946 <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 800f976:	693b      	ldr	r3, [r7, #16]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	4613      	mov	r3, r2
 800f98c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10a      	bne.n	800f9aa <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800f994:	4817      	ldr	r0, [pc, #92]	@ (800f9f4 <USBD_Init+0x74>)
 800f996:	f004 fe9d 	bl	80146d4 <iprintf>
 800f99a:	4817      	ldr	r0, [pc, #92]	@ (800f9f8 <USBD_Init+0x78>)
 800f99c:	f004 fe9a 	bl	80146d4 <iprintf>
 800f9a0:	200a      	movs	r0, #10
 800f9a2:	f004 fea9 	bl	80146f8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f9a6:	2303      	movs	r3, #3
 800f9a8:	e01f      	b.n	800f9ea <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	79fa      	ldrb	r2, [r7, #7]
 800f9dc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f004 fbe4 	bl	80141ac <USBD_LL_Init>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3718      	adds	r7, #24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	08015600 	.word	0x08015600
 800f9f8:	08015608 	.word	0x08015608

0800f9fc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa06:	2300      	movs	r3, #0
 800fa08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10a      	bne.n	800fa26 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800fa10:	481a      	ldr	r0, [pc, #104]	@ (800fa7c <USBD_RegisterClass+0x80>)
 800fa12:	f004 fe5f 	bl	80146d4 <iprintf>
 800fa16:	481a      	ldr	r0, [pc, #104]	@ (800fa80 <USBD_RegisterClass+0x84>)
 800fa18:	f004 fe5c 	bl	80146d4 <iprintf>
 800fa1c:	200a      	movs	r0, #10
 800fa1e:	f004 fe6b 	bl	80146f8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fa22:	2303      	movs	r3, #3
 800fa24:	e025      	b.n	800fa72 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	32ae      	adds	r2, #174	@ 0xae
 800fa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00f      	beq.n	800fa62 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	32ae      	adds	r2, #174	@ 0xae
 800fa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa52:	f107 020e 	add.w	r2, r7, #14
 800fa56:	4610      	mov	r0, r2
 800fa58:	4798      	blx	r3
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa68:	1c5a      	adds	r2, r3, #1
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3710      	adds	r7, #16
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	08015600 	.word	0x08015600
 800fa80:	08015620 	.word	0x08015620

0800fa84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f004 fbdd 	bl	801424c <USBD_LL_Start>
 800fa92:	4603      	mov	r3, r0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800faa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b084      	sub	sp, #16
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	460b      	mov	r3, r1
 800fabc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fabe:	2300      	movs	r3, #0
 800fac0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d009      	beq.n	800fae0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	78fa      	ldrb	r2, [r7, #3]
 800fad6:	4611      	mov	r1, r2
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	4798      	blx	r3
 800fadc:	4603      	mov	r3, r0
 800fade:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b084      	sub	sp, #16
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	460b      	mov	r3, r1
 800faf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	78fa      	ldrb	r2, [r7, #3]
 800fb04:	4611      	mov	r1, r2
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	4798      	blx	r3
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fb10:	2303      	movs	r3, #3
 800fb12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b084      	sub	sp, #16
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
 800fb26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f001 f8fe 	bl	8010d32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fb44:	461a      	mov	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fb52:	f003 031f 	and.w	r3, r3, #31
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d01a      	beq.n	800fb90 <USBD_LL_SetupStage+0x72>
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d822      	bhi.n	800fba4 <USBD_LL_SetupStage+0x86>
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d002      	beq.n	800fb68 <USBD_LL_SetupStage+0x4a>
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d00a      	beq.n	800fb7c <USBD_LL_SetupStage+0x5e>
 800fb66:	e01d      	b.n	800fba4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fb2b 	bl	80101cc <USBD_StdDevReq>
 800fb76:	4603      	mov	r3, r0
 800fb78:	73fb      	strb	r3, [r7, #15]
      break;
 800fb7a:	e020      	b.n	800fbbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb82:	4619      	mov	r1, r3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 fb93 	bl	80102b0 <USBD_StdItfReq>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb8e:	e016      	b.n	800fbbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb96:	4619      	mov	r1, r3
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fbf5 	bl	8010388 <USBD_StdEPReq>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	73fb      	strb	r3, [r7, #15]
      break;
 800fba2:	e00c      	b.n	800fbbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fbaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f004 fbaa 	bl	801430c <USBD_LL_StallEP>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	73fb      	strb	r3, [r7, #15]
      break;
 800fbbc:	bf00      	nop
  }

  return ret;
 800fbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3710      	adds	r7, #16
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fbda:	7afb      	ldrb	r3, [r7, #11]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d16e      	bne.n	800fcbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fbe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	f040 8098 	bne.w	800fd24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	689a      	ldr	r2, [r3, #8]
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d913      	bls.n	800fc28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	689a      	ldr	r2, [r3, #8]
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	1ad2      	subs	r2, r2, r3
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	68da      	ldr	r2, [r3, #12]
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	4293      	cmp	r3, r2
 800fc18:	bf28      	it	cs
 800fc1a:	4613      	movcs	r3, r2
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	6879      	ldr	r1, [r7, #4]
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f001 f986 	bl	8010f32 <USBD_CtlContinueRx>
 800fc26:	e07d      	b.n	800fd24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fc2e:	f003 031f 	and.w	r3, r3, #31
 800fc32:	2b02      	cmp	r3, #2
 800fc34:	d014      	beq.n	800fc60 <USBD_LL_DataOutStage+0x98>
 800fc36:	2b02      	cmp	r3, #2
 800fc38:	d81d      	bhi.n	800fc76 <USBD_LL_DataOutStage+0xae>
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d002      	beq.n	800fc44 <USBD_LL_DataOutStage+0x7c>
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d003      	beq.n	800fc4a <USBD_LL_DataOutStage+0x82>
 800fc42:	e018      	b.n	800fc76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fc44:	2300      	movs	r3, #0
 800fc46:	75bb      	strb	r3, [r7, #22]
            break;
 800fc48:	e018      	b.n	800fc7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	4619      	mov	r1, r3
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f000 fa64 	bl	8010122 <USBD_CoreFindIF>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	75bb      	strb	r3, [r7, #22]
            break;
 800fc5e:	e00d      	b.n	800fc7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	4619      	mov	r1, r3
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f000 fa66 	bl	801013c <USBD_CoreFindEP>
 800fc70:	4603      	mov	r3, r0
 800fc72:	75bb      	strb	r3, [r7, #22]
            break;
 800fc74:	e002      	b.n	800fc7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fc76:	2300      	movs	r3, #0
 800fc78:	75bb      	strb	r3, [r7, #22]
            break;
 800fc7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fc7c:	7dbb      	ldrb	r3, [r7, #22]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d119      	bne.n	800fcb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	2b03      	cmp	r3, #3
 800fc8c:	d113      	bne.n	800fcb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fc8e:	7dba      	ldrb	r2, [r7, #22]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	32ae      	adds	r2, #174	@ 0xae
 800fc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00b      	beq.n	800fcb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fc9e:	7dba      	ldrb	r2, [r7, #22]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fca6:	7dba      	ldrb	r2, [r7, #22]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	32ae      	adds	r2, #174	@ 0xae
 800fcac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb0:	691b      	ldr	r3, [r3, #16]
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f001 f94c 	bl	8010f54 <USBD_CtlSendStatus>
 800fcbc:	e032      	b.n	800fd24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fcbe:	7afb      	ldrb	r3, [r7, #11]
 800fcc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f000 fa37 	bl	801013c <USBD_CoreFindEP>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fcd2:	7dbb      	ldrb	r3, [r7, #22]
 800fcd4:	2bff      	cmp	r3, #255	@ 0xff
 800fcd6:	d025      	beq.n	800fd24 <USBD_LL_DataOutStage+0x15c>
 800fcd8:	7dbb      	ldrb	r3, [r7, #22]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d122      	bne.n	800fd24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	d117      	bne.n	800fd1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fcea:	7dba      	ldrb	r2, [r7, #22]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	32ae      	adds	r2, #174	@ 0xae
 800fcf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00f      	beq.n	800fd1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fcfa:	7dba      	ldrb	r2, [r7, #22]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fd02:	7dba      	ldrb	r2, [r7, #22]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	32ae      	adds	r2, #174	@ 0xae
 800fd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	7afa      	ldrb	r2, [r7, #11]
 800fd10:	4611      	mov	r1, r2
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	4798      	blx	r3
 800fd16:	4603      	mov	r3, r0
 800fd18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d001      	beq.n	800fd24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fd20:	7dfb      	ldrb	r3, [r7, #23]
 800fd22:	e000      	b.n	800fd26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b086      	sub	sp, #24
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	60f8      	str	r0, [r7, #12]
 800fd36:	460b      	mov	r3, r1
 800fd38:	607a      	str	r2, [r7, #4]
 800fd3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fd3c:	7afb      	ldrb	r3, [r7, #11]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d16f      	bne.n	800fe22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	3314      	adds	r3, #20
 800fd46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	d15a      	bne.n	800fe08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	689a      	ldr	r2, [r3, #8]
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d914      	bls.n	800fd88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	689a      	ldr	r2, [r3, #8]
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	1ad2      	subs	r2, r2, r3
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	461a      	mov	r2, r3
 800fd72:	6879      	ldr	r1, [r7, #4]
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f001 f8ae 	bl	8010ed6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	2100      	movs	r1, #0
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f004 fb6d 	bl	8014460 <USBD_LL_PrepareReceive>
 800fd86:	e03f      	b.n	800fe08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	68da      	ldr	r2, [r3, #12]
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d11c      	bne.n	800fdce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	685a      	ldr	r2, [r3, #4]
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d316      	bcc.n	800fdce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d20f      	bcs.n	800fdce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fdae:	2200      	movs	r2, #0
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f001 f88f 	bl	8010ed6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f004 fb4a 	bl	8014460 <USBD_LL_PrepareReceive>
 800fdcc:	e01c      	b.n	800fe08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d10f      	bne.n	800fdfa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d009      	beq.n	800fdfa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdfa:	2180      	movs	r1, #128	@ 0x80
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f004 fa85 	bl	801430c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	f001 f8b9 	bl	8010f7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d03a      	beq.n	800fe88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f7ff fe42 	bl	800fa9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fe20:	e032      	b.n	800fe88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fe22:	7afb      	ldrb	r3, [r7, #11]
 800fe24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f000 f985 	bl	801013c <USBD_CoreFindEP>
 800fe32:	4603      	mov	r3, r0
 800fe34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe36:	7dfb      	ldrb	r3, [r7, #23]
 800fe38:	2bff      	cmp	r3, #255	@ 0xff
 800fe3a:	d025      	beq.n	800fe88 <USBD_LL_DataInStage+0x15a>
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d122      	bne.n	800fe88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b03      	cmp	r3, #3
 800fe4c:	d11c      	bne.n	800fe88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fe4e:	7dfa      	ldrb	r2, [r7, #23]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	32ae      	adds	r2, #174	@ 0xae
 800fe54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe58:	695b      	ldr	r3, [r3, #20]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d014      	beq.n	800fe88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fe5e:	7dfa      	ldrb	r2, [r7, #23]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fe66:	7dfa      	ldrb	r2, [r7, #23]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	32ae      	adds	r2, #174	@ 0xae
 800fe6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	7afa      	ldrb	r2, [r7, #11]
 800fe74:	4611      	mov	r1, r2
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	4798      	blx	r3
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fe7e:	7dbb      	ldrb	r3, [r7, #22]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d001      	beq.n	800fe88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fe84:	7dbb      	ldrb	r3, [r7, #22]
 800fe86:	e000      	b.n	800fe8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3718      	adds	r7, #24
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b084      	sub	sp, #16
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2201      	movs	r2, #1
 800fea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d014      	beq.n	800fef8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00e      	beq.n	800fef8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	6852      	ldr	r2, [r2, #4]
 800fee6:	b2d2      	uxtb	r2, r2
 800fee8:	4611      	mov	r1, r2
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	4798      	blx	r3
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fef4:	2303      	movs	r3, #3
 800fef6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fef8:	2340      	movs	r3, #64	@ 0x40
 800fefa:	2200      	movs	r2, #0
 800fefc:	2100      	movs	r1, #0
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f004 f9bf 	bl	8014282 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2201      	movs	r2, #1
 800ff08:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2240      	movs	r2, #64	@ 0x40
 800ff10:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ff14:	2340      	movs	r3, #64	@ 0x40
 800ff16:	2200      	movs	r2, #0
 800ff18:	2180      	movs	r1, #128	@ 0x80
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f004 f9b1 	bl	8014282 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2201      	movs	r2, #1
 800ff24:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2240      	movs	r2, #64	@ 0x40
 800ff2a:	621a      	str	r2, [r3, #32]

  return ret;
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ff36:	b480      	push	{r7}
 800ff38:	b083      	sub	sp, #12
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	460b      	mov	r3, r1
 800ff40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	78fa      	ldrb	r2, [r7, #3]
 800ff46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ff48:	2300      	movs	r3, #0
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ff56:	b480      	push	{r7}
 800ff58:	b083      	sub	sp, #12
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	2b04      	cmp	r3, #4
 800ff68:	d006      	beq.n	800ff78 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff70:	b2da      	uxtb	r2, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2204      	movs	r2, #4
 800ff7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	370c      	adds	r7, #12
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ff8e:	b480      	push	{r7}
 800ff90:	b083      	sub	sp, #12
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	2b04      	cmp	r3, #4
 800ffa0:	d106      	bne.n	800ffb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ffa8:	b2da      	uxtb	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	370c      	adds	r7, #12
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d110      	bne.n	800fff4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d00b      	beq.n	800fff4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffe2:	69db      	ldr	r3, [r3, #28]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d005      	beq.n	800fff4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffee:	69db      	ldr	r3, [r3, #28]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b082      	sub	sp, #8
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	460b      	mov	r3, r1
 8010008:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	32ae      	adds	r2, #174	@ 0xae
 8010014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d101      	bne.n	8010020 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801001c:	2303      	movs	r3, #3
 801001e:	e01c      	b.n	801005a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010026:	b2db      	uxtb	r3, r3
 8010028:	2b03      	cmp	r3, #3
 801002a:	d115      	bne.n	8010058 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	32ae      	adds	r2, #174	@ 0xae
 8010036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801003a:	6a1b      	ldr	r3, [r3, #32]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00b      	beq.n	8010058 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	32ae      	adds	r2, #174	@ 0xae
 801004a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801004e:	6a1b      	ldr	r3, [r3, #32]
 8010050:	78fa      	ldrb	r2, [r7, #3]
 8010052:	4611      	mov	r1, r2
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b082      	sub	sp, #8
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	460b      	mov	r3, r1
 801006c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	32ae      	adds	r2, #174	@ 0xae
 8010078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d101      	bne.n	8010084 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010080:	2303      	movs	r3, #3
 8010082:	e01c      	b.n	80100be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801008a:	b2db      	uxtb	r3, r3
 801008c:	2b03      	cmp	r3, #3
 801008e:	d115      	bne.n	80100bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	32ae      	adds	r2, #174	@ 0xae
 801009a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801009e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00b      	beq.n	80100bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	32ae      	adds	r2, #174	@ 0xae
 80100ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100b4:	78fa      	ldrb	r2, [r7, #3]
 80100b6:	4611      	mov	r1, r2
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3708      	adds	r7, #8
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80100c6:	b480      	push	{r7}
 80100c8:	b083      	sub	sp, #12
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	370c      	adds	r7, #12
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80100e4:	2300      	movs	r3, #0
 80100e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00e      	beq.n	8010118 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	6852      	ldr	r2, [r2, #4]
 8010106:	b2d2      	uxtb	r2, r2
 8010108:	4611      	mov	r1, r2
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	4798      	blx	r3
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d001      	beq.n	8010118 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010114:	2303      	movs	r3, #3
 8010116:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010118:	7bfb      	ldrb	r3, [r7, #15]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010122:	b480      	push	{r7}
 8010124:	b083      	sub	sp, #12
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
 801012a:	460b      	mov	r3, r1
 801012c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801012e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010130:	4618      	mov	r0, r3
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	460b      	mov	r3, r1
 8010146:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010148:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801014a:	4618      	mov	r0, r3
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr

08010156 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010156:	b480      	push	{r7}
 8010158:	b085      	sub	sp, #20
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	7812      	ldrb	r2, [r2, #0]
 801016c:	4413      	add	r3, r2
 801016e:	b29a      	uxth	r2, r3
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	461a      	mov	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4413      	add	r3, r2
 801017e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010180:	68fb      	ldr	r3, [r7, #12]
}
 8010182:	4618      	mov	r0, r3
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801018e:	b480      	push	{r7}
 8010190:	b087      	sub	sp, #28
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	3301      	adds	r3, #1
 80101a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80101ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80101b0:	021b      	lsls	r3, r3, #8
 80101b2:	b21a      	sxth	r2, r3
 80101b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101b8:	4313      	orrs	r3, r2
 80101ba:	b21b      	sxth	r3, r3
 80101bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80101be:	89fb      	ldrh	r3, [r7, #14]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	371c      	adds	r7, #28
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101d6:	2300      	movs	r3, #0
 80101d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80101e2:	2b40      	cmp	r3, #64	@ 0x40
 80101e4:	d005      	beq.n	80101f2 <USBD_StdDevReq+0x26>
 80101e6:	2b40      	cmp	r3, #64	@ 0x40
 80101e8:	d857      	bhi.n	801029a <USBD_StdDevReq+0xce>
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00f      	beq.n	801020e <USBD_StdDevReq+0x42>
 80101ee:	2b20      	cmp	r3, #32
 80101f0:	d153      	bne.n	801029a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	32ae      	adds	r2, #174	@ 0xae
 80101fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	6839      	ldr	r1, [r7, #0]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	4798      	blx	r3
 8010208:	4603      	mov	r3, r0
 801020a:	73fb      	strb	r3, [r7, #15]
      break;
 801020c:	e04a      	b.n	80102a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	785b      	ldrb	r3, [r3, #1]
 8010212:	2b09      	cmp	r3, #9
 8010214:	d83b      	bhi.n	801028e <USBD_StdDevReq+0xc2>
 8010216:	a201      	add	r2, pc, #4	@ (adr r2, 801021c <USBD_StdDevReq+0x50>)
 8010218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801021c:	08010271 	.word	0x08010271
 8010220:	08010285 	.word	0x08010285
 8010224:	0801028f 	.word	0x0801028f
 8010228:	0801027b 	.word	0x0801027b
 801022c:	0801028f 	.word	0x0801028f
 8010230:	0801024f 	.word	0x0801024f
 8010234:	08010245 	.word	0x08010245
 8010238:	0801028f 	.word	0x0801028f
 801023c:	08010267 	.word	0x08010267
 8010240:	08010259 	.word	0x08010259
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010244:	6839      	ldr	r1, [r7, #0]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 fa3c 	bl	80106c4 <USBD_GetDescriptor>
          break;
 801024c:	e024      	b.n	8010298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801024e:	6839      	ldr	r1, [r7, #0]
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 fbcb 	bl	80109ec <USBD_SetAddress>
          break;
 8010256:	e01f      	b.n	8010298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010258:	6839      	ldr	r1, [r7, #0]
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 fc0a 	bl	8010a74 <USBD_SetConfig>
 8010260:	4603      	mov	r3, r0
 8010262:	73fb      	strb	r3, [r7, #15]
          break;
 8010264:	e018      	b.n	8010298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010266:	6839      	ldr	r1, [r7, #0]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fcad 	bl	8010bc8 <USBD_GetConfig>
          break;
 801026e:	e013      	b.n	8010298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010270:	6839      	ldr	r1, [r7, #0]
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 fcde 	bl	8010c34 <USBD_GetStatus>
          break;
 8010278:	e00e      	b.n	8010298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fd0d 	bl	8010c9c <USBD_SetFeature>
          break;
 8010282:	e009      	b.n	8010298 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 fd31 	bl	8010cee <USBD_ClrFeature>
          break;
 801028c:	e004      	b.n	8010298 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801028e:	6839      	ldr	r1, [r7, #0]
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 fd88 	bl	8010da6 <USBD_CtlError>
          break;
 8010296:	bf00      	nop
      }
      break;
 8010298:	e004      	b.n	80102a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801029a:	6839      	ldr	r1, [r7, #0]
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 fd82 	bl	8010da6 <USBD_CtlError>
      break;
 80102a2:	bf00      	nop
  }

  return ret;
 80102a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3710      	adds	r7, #16
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop

080102b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80102ba:	2300      	movs	r3, #0
 80102bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80102c6:	2b40      	cmp	r3, #64	@ 0x40
 80102c8:	d005      	beq.n	80102d6 <USBD_StdItfReq+0x26>
 80102ca:	2b40      	cmp	r3, #64	@ 0x40
 80102cc:	d852      	bhi.n	8010374 <USBD_StdItfReq+0xc4>
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d001      	beq.n	80102d6 <USBD_StdItfReq+0x26>
 80102d2:	2b20      	cmp	r3, #32
 80102d4:	d14e      	bne.n	8010374 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	3b01      	subs	r3, #1
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d840      	bhi.n	8010366 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	889b      	ldrh	r3, [r3, #4]
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	2b02      	cmp	r3, #2
 80102ec:	d836      	bhi.n	801035c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	889b      	ldrh	r3, [r3, #4]
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	4619      	mov	r1, r3
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7ff ff13 	bl	8010122 <USBD_CoreFindIF>
 80102fc:	4603      	mov	r3, r0
 80102fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010300:	7bbb      	ldrb	r3, [r7, #14]
 8010302:	2bff      	cmp	r3, #255	@ 0xff
 8010304:	d01d      	beq.n	8010342 <USBD_StdItfReq+0x92>
 8010306:	7bbb      	ldrb	r3, [r7, #14]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d11a      	bne.n	8010342 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801030c:	7bba      	ldrb	r2, [r7, #14]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	32ae      	adds	r2, #174	@ 0xae
 8010312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00f      	beq.n	801033c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801031c:	7bba      	ldrb	r2, [r7, #14]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010324:	7bba      	ldrb	r2, [r7, #14]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	32ae      	adds	r2, #174	@ 0xae
 801032a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	6839      	ldr	r1, [r7, #0]
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	4798      	blx	r3
 8010336:	4603      	mov	r3, r0
 8010338:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801033a:	e004      	b.n	8010346 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801033c:	2303      	movs	r3, #3
 801033e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010340:	e001      	b.n	8010346 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010342:	2303      	movs	r3, #3
 8010344:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	88db      	ldrh	r3, [r3, #6]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d110      	bne.n	8010370 <USBD_StdItfReq+0xc0>
 801034e:	7bfb      	ldrb	r3, [r7, #15]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d10d      	bne.n	8010370 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f000 fdfd 	bl	8010f54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801035a:	e009      	b.n	8010370 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801035c:	6839      	ldr	r1, [r7, #0]
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 fd21 	bl	8010da6 <USBD_CtlError>
          break;
 8010364:	e004      	b.n	8010370 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010366:	6839      	ldr	r1, [r7, #0]
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 fd1c 	bl	8010da6 <USBD_CtlError>
          break;
 801036e:	e000      	b.n	8010372 <USBD_StdItfReq+0xc2>
          break;
 8010370:	bf00      	nop
      }
      break;
 8010372:	e004      	b.n	801037e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010374:	6839      	ldr	r1, [r7, #0]
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 fd15 	bl	8010da6 <USBD_CtlError>
      break;
 801037c:	bf00      	nop
  }

  return ret;
 801037e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010392:	2300      	movs	r3, #0
 8010394:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	889b      	ldrh	r3, [r3, #4]
 801039a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80103a4:	2b40      	cmp	r3, #64	@ 0x40
 80103a6:	d007      	beq.n	80103b8 <USBD_StdEPReq+0x30>
 80103a8:	2b40      	cmp	r3, #64	@ 0x40
 80103aa:	f200 817f 	bhi.w	80106ac <USBD_StdEPReq+0x324>
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d02a      	beq.n	8010408 <USBD_StdEPReq+0x80>
 80103b2:	2b20      	cmp	r3, #32
 80103b4:	f040 817a 	bne.w	80106ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80103b8:	7bbb      	ldrb	r3, [r7, #14]
 80103ba:	4619      	mov	r1, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7ff febd 	bl	801013c <USBD_CoreFindEP>
 80103c2:	4603      	mov	r3, r0
 80103c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80103c6:	7b7b      	ldrb	r3, [r7, #13]
 80103c8:	2bff      	cmp	r3, #255	@ 0xff
 80103ca:	f000 8174 	beq.w	80106b6 <USBD_StdEPReq+0x32e>
 80103ce:	7b7b      	ldrb	r3, [r7, #13]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f040 8170 	bne.w	80106b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80103d6:	7b7a      	ldrb	r2, [r7, #13]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80103de:	7b7a      	ldrb	r2, [r7, #13]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	32ae      	adds	r2, #174	@ 0xae
 80103e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 8163 	beq.w	80106b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80103f0:	7b7a      	ldrb	r2, [r7, #13]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	32ae      	adds	r2, #174	@ 0xae
 80103f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	6839      	ldr	r1, [r7, #0]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	4798      	blx	r3
 8010402:	4603      	mov	r3, r0
 8010404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010406:	e156      	b.n	80106b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	785b      	ldrb	r3, [r3, #1]
 801040c:	2b03      	cmp	r3, #3
 801040e:	d008      	beq.n	8010422 <USBD_StdEPReq+0x9a>
 8010410:	2b03      	cmp	r3, #3
 8010412:	f300 8145 	bgt.w	80106a0 <USBD_StdEPReq+0x318>
 8010416:	2b00      	cmp	r3, #0
 8010418:	f000 809b 	beq.w	8010552 <USBD_StdEPReq+0x1ca>
 801041c:	2b01      	cmp	r3, #1
 801041e:	d03c      	beq.n	801049a <USBD_StdEPReq+0x112>
 8010420:	e13e      	b.n	80106a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010428:	b2db      	uxtb	r3, r3
 801042a:	2b02      	cmp	r3, #2
 801042c:	d002      	beq.n	8010434 <USBD_StdEPReq+0xac>
 801042e:	2b03      	cmp	r3, #3
 8010430:	d016      	beq.n	8010460 <USBD_StdEPReq+0xd8>
 8010432:	e02c      	b.n	801048e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010434:	7bbb      	ldrb	r3, [r7, #14]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d00d      	beq.n	8010456 <USBD_StdEPReq+0xce>
 801043a:	7bbb      	ldrb	r3, [r7, #14]
 801043c:	2b80      	cmp	r3, #128	@ 0x80
 801043e:	d00a      	beq.n	8010456 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010440:	7bbb      	ldrb	r3, [r7, #14]
 8010442:	4619      	mov	r1, r3
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f003 ff61 	bl	801430c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801044a:	2180      	movs	r1, #128	@ 0x80
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f003 ff5d 	bl	801430c <USBD_LL_StallEP>
 8010452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010454:	e020      	b.n	8010498 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010456:	6839      	ldr	r1, [r7, #0]
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f000 fca4 	bl	8010da6 <USBD_CtlError>
              break;
 801045e:	e01b      	b.n	8010498 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	885b      	ldrh	r3, [r3, #2]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d10e      	bne.n	8010486 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010468:	7bbb      	ldrb	r3, [r7, #14]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00b      	beq.n	8010486 <USBD_StdEPReq+0xfe>
 801046e:	7bbb      	ldrb	r3, [r7, #14]
 8010470:	2b80      	cmp	r3, #128	@ 0x80
 8010472:	d008      	beq.n	8010486 <USBD_StdEPReq+0xfe>
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	88db      	ldrh	r3, [r3, #6]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d104      	bne.n	8010486 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801047c:	7bbb      	ldrb	r3, [r7, #14]
 801047e:	4619      	mov	r1, r3
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f003 ff43 	bl	801430c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f000 fd64 	bl	8010f54 <USBD_CtlSendStatus>

              break;
 801048c:	e004      	b.n	8010498 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801048e:	6839      	ldr	r1, [r7, #0]
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 fc88 	bl	8010da6 <USBD_CtlError>
              break;
 8010496:	bf00      	nop
          }
          break;
 8010498:	e107      	b.n	80106aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	2b02      	cmp	r3, #2
 80104a4:	d002      	beq.n	80104ac <USBD_StdEPReq+0x124>
 80104a6:	2b03      	cmp	r3, #3
 80104a8:	d016      	beq.n	80104d8 <USBD_StdEPReq+0x150>
 80104aa:	e04b      	b.n	8010544 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104ac:	7bbb      	ldrb	r3, [r7, #14]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00d      	beq.n	80104ce <USBD_StdEPReq+0x146>
 80104b2:	7bbb      	ldrb	r3, [r7, #14]
 80104b4:	2b80      	cmp	r3, #128	@ 0x80
 80104b6:	d00a      	beq.n	80104ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80104b8:	7bbb      	ldrb	r3, [r7, #14]
 80104ba:	4619      	mov	r1, r3
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f003 ff25 	bl	801430c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80104c2:	2180      	movs	r1, #128	@ 0x80
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f003 ff21 	bl	801430c <USBD_LL_StallEP>
 80104ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80104cc:	e040      	b.n	8010550 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80104ce:	6839      	ldr	r1, [r7, #0]
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f000 fc68 	bl	8010da6 <USBD_CtlError>
              break;
 80104d6:	e03b      	b.n	8010550 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	885b      	ldrh	r3, [r3, #2]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d136      	bne.n	801054e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80104e0:	7bbb      	ldrb	r3, [r7, #14]
 80104e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d004      	beq.n	80104f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80104ea:	7bbb      	ldrb	r3, [r7, #14]
 80104ec:	4619      	mov	r1, r3
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f003 ff2b 	bl	801434a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 fd2d 	bl	8010f54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80104fa:	7bbb      	ldrb	r3, [r7, #14]
 80104fc:	4619      	mov	r1, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff fe1c 	bl	801013c <USBD_CoreFindEP>
 8010504:	4603      	mov	r3, r0
 8010506:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010508:	7b7b      	ldrb	r3, [r7, #13]
 801050a:	2bff      	cmp	r3, #255	@ 0xff
 801050c:	d01f      	beq.n	801054e <USBD_StdEPReq+0x1c6>
 801050e:	7b7b      	ldrb	r3, [r7, #13]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d11c      	bne.n	801054e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010514:	7b7a      	ldrb	r2, [r7, #13]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801051c:	7b7a      	ldrb	r2, [r7, #13]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	32ae      	adds	r2, #174	@ 0xae
 8010522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d010      	beq.n	801054e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801052c:	7b7a      	ldrb	r2, [r7, #13]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	32ae      	adds	r2, #174	@ 0xae
 8010532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	6839      	ldr	r1, [r7, #0]
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	4798      	blx	r3
 801053e:	4603      	mov	r3, r0
 8010540:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010542:	e004      	b.n	801054e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010544:	6839      	ldr	r1, [r7, #0]
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fc2d 	bl	8010da6 <USBD_CtlError>
              break;
 801054c:	e000      	b.n	8010550 <USBD_StdEPReq+0x1c8>
              break;
 801054e:	bf00      	nop
          }
          break;
 8010550:	e0ab      	b.n	80106aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010558:	b2db      	uxtb	r3, r3
 801055a:	2b02      	cmp	r3, #2
 801055c:	d002      	beq.n	8010564 <USBD_StdEPReq+0x1dc>
 801055e:	2b03      	cmp	r3, #3
 8010560:	d032      	beq.n	80105c8 <USBD_StdEPReq+0x240>
 8010562:	e097      	b.n	8010694 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010564:	7bbb      	ldrb	r3, [r7, #14]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d007      	beq.n	801057a <USBD_StdEPReq+0x1f2>
 801056a:	7bbb      	ldrb	r3, [r7, #14]
 801056c:	2b80      	cmp	r3, #128	@ 0x80
 801056e:	d004      	beq.n	801057a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010570:	6839      	ldr	r1, [r7, #0]
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 fc17 	bl	8010da6 <USBD_CtlError>
                break;
 8010578:	e091      	b.n	801069e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801057a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801057e:	2b00      	cmp	r3, #0
 8010580:	da0b      	bge.n	801059a <USBD_StdEPReq+0x212>
 8010582:	7bbb      	ldrb	r3, [r7, #14]
 8010584:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010588:	4613      	mov	r3, r2
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4413      	add	r3, r2
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	3310      	adds	r3, #16
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	4413      	add	r3, r2
 8010596:	3304      	adds	r3, #4
 8010598:	e00b      	b.n	80105b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801059a:	7bbb      	ldrb	r3, [r7, #14]
 801059c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80105a0:	4613      	mov	r3, r2
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	4413      	add	r3, r2
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	4413      	add	r3, r2
 80105b0:	3304      	adds	r3, #4
 80105b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	2200      	movs	r2, #0
 80105b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2202      	movs	r2, #2
 80105be:	4619      	mov	r1, r3
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 fc6d 	bl	8010ea0 <USBD_CtlSendData>
              break;
 80105c6:	e06a      	b.n	801069e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80105c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	da11      	bge.n	80105f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80105d0:	7bbb      	ldrb	r3, [r7, #14]
 80105d2:	f003 020f 	and.w	r2, r3, #15
 80105d6:	6879      	ldr	r1, [r7, #4]
 80105d8:	4613      	mov	r3, r2
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	4413      	add	r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	440b      	add	r3, r1
 80105e2:	3324      	adds	r3, #36	@ 0x24
 80105e4:	881b      	ldrh	r3, [r3, #0]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d117      	bne.n	801061a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80105ea:	6839      	ldr	r1, [r7, #0]
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fbda 	bl	8010da6 <USBD_CtlError>
                  break;
 80105f2:	e054      	b.n	801069e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80105f4:	7bbb      	ldrb	r3, [r7, #14]
 80105f6:	f003 020f 	and.w	r2, r3, #15
 80105fa:	6879      	ldr	r1, [r7, #4]
 80105fc:	4613      	mov	r3, r2
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	4413      	add	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	440b      	add	r3, r1
 8010606:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801060a:	881b      	ldrh	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d104      	bne.n	801061a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010610:	6839      	ldr	r1, [r7, #0]
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fbc7 	bl	8010da6 <USBD_CtlError>
                  break;
 8010618:	e041      	b.n	801069e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801061e:	2b00      	cmp	r3, #0
 8010620:	da0b      	bge.n	801063a <USBD_StdEPReq+0x2b2>
 8010622:	7bbb      	ldrb	r3, [r7, #14]
 8010624:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010628:	4613      	mov	r3, r2
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4413      	add	r3, r2
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	3310      	adds	r3, #16
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	4413      	add	r3, r2
 8010636:	3304      	adds	r3, #4
 8010638:	e00b      	b.n	8010652 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801063a:	7bbb      	ldrb	r3, [r7, #14]
 801063c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010640:	4613      	mov	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	4413      	add	r3, r2
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	4413      	add	r3, r2
 8010650:	3304      	adds	r3, #4
 8010652:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010654:	7bbb      	ldrb	r3, [r7, #14]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d002      	beq.n	8010660 <USBD_StdEPReq+0x2d8>
 801065a:	7bbb      	ldrb	r3, [r7, #14]
 801065c:	2b80      	cmp	r3, #128	@ 0x80
 801065e:	d103      	bne.n	8010668 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2200      	movs	r2, #0
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	e00e      	b.n	8010686 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010668:	7bbb      	ldrb	r3, [r7, #14]
 801066a:	4619      	mov	r1, r3
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f003 fe8b 	bl	8014388 <USBD_LL_IsStallEP>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d003      	beq.n	8010680 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2201      	movs	r2, #1
 801067c:	601a      	str	r2, [r3, #0]
 801067e:	e002      	b.n	8010686 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	2200      	movs	r2, #0
 8010684:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	2202      	movs	r2, #2
 801068a:	4619      	mov	r1, r3
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 fc07 	bl	8010ea0 <USBD_CtlSendData>
              break;
 8010692:	e004      	b.n	801069e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010694:	6839      	ldr	r1, [r7, #0]
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 fb85 	bl	8010da6 <USBD_CtlError>
              break;
 801069c:	bf00      	nop
          }
          break;
 801069e:	e004      	b.n	80106aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80106a0:	6839      	ldr	r1, [r7, #0]
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 fb7f 	bl	8010da6 <USBD_CtlError>
          break;
 80106a8:	bf00      	nop
      }
      break;
 80106aa:	e005      	b.n	80106b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80106ac:	6839      	ldr	r1, [r7, #0]
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 fb79 	bl	8010da6 <USBD_CtlError>
      break;
 80106b4:	e000      	b.n	80106b8 <USBD_StdEPReq+0x330>
      break;
 80106b6:	bf00      	nop
  }

  return ret;
 80106b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
	...

080106c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80106ce:	2300      	movs	r3, #0
 80106d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80106d2:	2300      	movs	r3, #0
 80106d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80106d6:	2300      	movs	r3, #0
 80106d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	885b      	ldrh	r3, [r3, #2]
 80106de:	0a1b      	lsrs	r3, r3, #8
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	3b01      	subs	r3, #1
 80106e4:	2b0e      	cmp	r3, #14
 80106e6:	f200 8152 	bhi.w	801098e <USBD_GetDescriptor+0x2ca>
 80106ea:	a201      	add	r2, pc, #4	@ (adr r2, 80106f0 <USBD_GetDescriptor+0x2c>)
 80106ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f0:	08010761 	.word	0x08010761
 80106f4:	08010779 	.word	0x08010779
 80106f8:	080107b9 	.word	0x080107b9
 80106fc:	0801098f 	.word	0x0801098f
 8010700:	0801098f 	.word	0x0801098f
 8010704:	0801092f 	.word	0x0801092f
 8010708:	0801095b 	.word	0x0801095b
 801070c:	0801098f 	.word	0x0801098f
 8010710:	0801098f 	.word	0x0801098f
 8010714:	0801098f 	.word	0x0801098f
 8010718:	0801098f 	.word	0x0801098f
 801071c:	0801098f 	.word	0x0801098f
 8010720:	0801098f 	.word	0x0801098f
 8010724:	0801098f 	.word	0x0801098f
 8010728:	0801072d 	.word	0x0801072d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010732:	69db      	ldr	r3, [r3, #28]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00b      	beq.n	8010750 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801073e:	69db      	ldr	r3, [r3, #28]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	7c12      	ldrb	r2, [r2, #16]
 8010744:	f107 0108 	add.w	r1, r7, #8
 8010748:	4610      	mov	r0, r2
 801074a:	4798      	blx	r3
 801074c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801074e:	e126      	b.n	801099e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010750:	6839      	ldr	r1, [r7, #0]
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 fb27 	bl	8010da6 <USBD_CtlError>
        err++;
 8010758:	7afb      	ldrb	r3, [r7, #11]
 801075a:	3301      	adds	r3, #1
 801075c:	72fb      	strb	r3, [r7, #11]
      break;
 801075e:	e11e      	b.n	801099e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	7c12      	ldrb	r2, [r2, #16]
 801076c:	f107 0108 	add.w	r1, r7, #8
 8010770:	4610      	mov	r0, r2
 8010772:	4798      	blx	r3
 8010774:	60f8      	str	r0, [r7, #12]
      break;
 8010776:	e112      	b.n	801099e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	7c1b      	ldrb	r3, [r3, #16]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10d      	bne.n	801079c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010788:	f107 0208 	add.w	r2, r7, #8
 801078c:	4610      	mov	r0, r2
 801078e:	4798      	blx	r3
 8010790:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	3301      	adds	r3, #1
 8010796:	2202      	movs	r2, #2
 8010798:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801079a:	e100      	b.n	801099e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a4:	f107 0208 	add.w	r2, r7, #8
 80107a8:	4610      	mov	r0, r2
 80107aa:	4798      	blx	r3
 80107ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	3301      	adds	r3, #1
 80107b2:	2202      	movs	r2, #2
 80107b4:	701a      	strb	r2, [r3, #0]
      break;
 80107b6:	e0f2      	b.n	801099e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	885b      	ldrh	r3, [r3, #2]
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2b05      	cmp	r3, #5
 80107c0:	f200 80ac 	bhi.w	801091c <USBD_GetDescriptor+0x258>
 80107c4:	a201      	add	r2, pc, #4	@ (adr r2, 80107cc <USBD_GetDescriptor+0x108>)
 80107c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ca:	bf00      	nop
 80107cc:	080107e5 	.word	0x080107e5
 80107d0:	08010819 	.word	0x08010819
 80107d4:	0801084d 	.word	0x0801084d
 80107d8:	08010881 	.word	0x08010881
 80107dc:	080108b5 	.word	0x080108b5
 80107e0:	080108e9 	.word	0x080108e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d00b      	beq.n	8010808 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	7c12      	ldrb	r2, [r2, #16]
 80107fc:	f107 0108 	add.w	r1, r7, #8
 8010800:	4610      	mov	r0, r2
 8010802:	4798      	blx	r3
 8010804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010806:	e091      	b.n	801092c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 facb 	bl	8010da6 <USBD_CtlError>
            err++;
 8010810:	7afb      	ldrb	r3, [r7, #11]
 8010812:	3301      	adds	r3, #1
 8010814:	72fb      	strb	r3, [r7, #11]
          break;
 8010816:	e089      	b.n	801092c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801081e:	689b      	ldr	r3, [r3, #8]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d00b      	beq.n	801083c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	7c12      	ldrb	r2, [r2, #16]
 8010830:	f107 0108 	add.w	r1, r7, #8
 8010834:	4610      	mov	r0, r2
 8010836:	4798      	blx	r3
 8010838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801083a:	e077      	b.n	801092c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801083c:	6839      	ldr	r1, [r7, #0]
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f000 fab1 	bl	8010da6 <USBD_CtlError>
            err++;
 8010844:	7afb      	ldrb	r3, [r7, #11]
 8010846:	3301      	adds	r3, #1
 8010848:	72fb      	strb	r3, [r7, #11]
          break;
 801084a:	e06f      	b.n	801092c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00b      	beq.n	8010870 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	7c12      	ldrb	r2, [r2, #16]
 8010864:	f107 0108 	add.w	r1, r7, #8
 8010868:	4610      	mov	r0, r2
 801086a:	4798      	blx	r3
 801086c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801086e:	e05d      	b.n	801092c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010870:	6839      	ldr	r1, [r7, #0]
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 fa97 	bl	8010da6 <USBD_CtlError>
            err++;
 8010878:	7afb      	ldrb	r3, [r7, #11]
 801087a:	3301      	adds	r3, #1
 801087c:	72fb      	strb	r3, [r7, #11]
          break;
 801087e:	e055      	b.n	801092c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010886:	691b      	ldr	r3, [r3, #16]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00b      	beq.n	80108a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010892:	691b      	ldr	r3, [r3, #16]
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	7c12      	ldrb	r2, [r2, #16]
 8010898:	f107 0108 	add.w	r1, r7, #8
 801089c:	4610      	mov	r0, r2
 801089e:	4798      	blx	r3
 80108a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108a2:	e043      	b.n	801092c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108a4:	6839      	ldr	r1, [r7, #0]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 fa7d 	bl	8010da6 <USBD_CtlError>
            err++;
 80108ac:	7afb      	ldrb	r3, [r7, #11]
 80108ae:	3301      	adds	r3, #1
 80108b0:	72fb      	strb	r3, [r7, #11]
          break;
 80108b2:	e03b      	b.n	801092c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108ba:	695b      	ldr	r3, [r3, #20]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00b      	beq.n	80108d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108c6:	695b      	ldr	r3, [r3, #20]
 80108c8:	687a      	ldr	r2, [r7, #4]
 80108ca:	7c12      	ldrb	r2, [r2, #16]
 80108cc:	f107 0108 	add.w	r1, r7, #8
 80108d0:	4610      	mov	r0, r2
 80108d2:	4798      	blx	r3
 80108d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108d6:	e029      	b.n	801092c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108d8:	6839      	ldr	r1, [r7, #0]
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 fa63 	bl	8010da6 <USBD_CtlError>
            err++;
 80108e0:	7afb      	ldrb	r3, [r7, #11]
 80108e2:	3301      	adds	r3, #1
 80108e4:	72fb      	strb	r3, [r7, #11]
          break;
 80108e6:	e021      	b.n	801092c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108ee:	699b      	ldr	r3, [r3, #24]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00b      	beq.n	801090c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	7c12      	ldrb	r2, [r2, #16]
 8010900:	f107 0108 	add.w	r1, r7, #8
 8010904:	4610      	mov	r0, r2
 8010906:	4798      	blx	r3
 8010908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801090a:	e00f      	b.n	801092c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 fa49 	bl	8010da6 <USBD_CtlError>
            err++;
 8010914:	7afb      	ldrb	r3, [r7, #11]
 8010916:	3301      	adds	r3, #1
 8010918:	72fb      	strb	r3, [r7, #11]
          break;
 801091a:	e007      	b.n	801092c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801091c:	6839      	ldr	r1, [r7, #0]
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 fa41 	bl	8010da6 <USBD_CtlError>
          err++;
 8010924:	7afb      	ldrb	r3, [r7, #11]
 8010926:	3301      	adds	r3, #1
 8010928:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801092a:	bf00      	nop
      }
      break;
 801092c:	e037      	b.n	801099e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	7c1b      	ldrb	r3, [r3, #16]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d109      	bne.n	801094a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801093c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801093e:	f107 0208 	add.w	r2, r7, #8
 8010942:	4610      	mov	r0, r2
 8010944:	4798      	blx	r3
 8010946:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010948:	e029      	b.n	801099e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801094a:	6839      	ldr	r1, [r7, #0]
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 fa2a 	bl	8010da6 <USBD_CtlError>
        err++;
 8010952:	7afb      	ldrb	r3, [r7, #11]
 8010954:	3301      	adds	r3, #1
 8010956:	72fb      	strb	r3, [r7, #11]
      break;
 8010958:	e021      	b.n	801099e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	7c1b      	ldrb	r3, [r3, #16]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d10d      	bne.n	801097e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801096a:	f107 0208 	add.w	r2, r7, #8
 801096e:	4610      	mov	r0, r2
 8010970:	4798      	blx	r3
 8010972:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	3301      	adds	r3, #1
 8010978:	2207      	movs	r2, #7
 801097a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801097c:	e00f      	b.n	801099e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801097e:	6839      	ldr	r1, [r7, #0]
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 fa10 	bl	8010da6 <USBD_CtlError>
        err++;
 8010986:	7afb      	ldrb	r3, [r7, #11]
 8010988:	3301      	adds	r3, #1
 801098a:	72fb      	strb	r3, [r7, #11]
      break;
 801098c:	e007      	b.n	801099e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801098e:	6839      	ldr	r1, [r7, #0]
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 fa08 	bl	8010da6 <USBD_CtlError>
      err++;
 8010996:	7afb      	ldrb	r3, [r7, #11]
 8010998:	3301      	adds	r3, #1
 801099a:	72fb      	strb	r3, [r7, #11]
      break;
 801099c:	bf00      	nop
  }

  if (err != 0U)
 801099e:	7afb      	ldrb	r3, [r7, #11]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d11e      	bne.n	80109e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	88db      	ldrh	r3, [r3, #6]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d016      	beq.n	80109da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80109ac:	893b      	ldrh	r3, [r7, #8]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00e      	beq.n	80109d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	88da      	ldrh	r2, [r3, #6]
 80109b6:	893b      	ldrh	r3, [r7, #8]
 80109b8:	4293      	cmp	r3, r2
 80109ba:	bf28      	it	cs
 80109bc:	4613      	movcs	r3, r2
 80109be:	b29b      	uxth	r3, r3
 80109c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80109c2:	893b      	ldrh	r3, [r7, #8]
 80109c4:	461a      	mov	r2, r3
 80109c6:	68f9      	ldr	r1, [r7, #12]
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 fa69 	bl	8010ea0 <USBD_CtlSendData>
 80109ce:	e009      	b.n	80109e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80109d0:	6839      	ldr	r1, [r7, #0]
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 f9e7 	bl	8010da6 <USBD_CtlError>
 80109d8:	e004      	b.n	80109e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 faba 	bl	8010f54 <USBD_CtlSendStatus>
 80109e0:	e000      	b.n	80109e4 <USBD_GetDescriptor+0x320>
    return;
 80109e2:	bf00      	nop
  }
}
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop

080109ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	889b      	ldrh	r3, [r3, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d131      	bne.n	8010a62 <USBD_SetAddress+0x76>
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	88db      	ldrh	r3, [r3, #6]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d12d      	bne.n	8010a62 <USBD_SetAddress+0x76>
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	885b      	ldrh	r3, [r3, #2]
 8010a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a0c:	d829      	bhi.n	8010a62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	885b      	ldrh	r3, [r3, #2]
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b03      	cmp	r3, #3
 8010a24:	d104      	bne.n	8010a30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010a26:	6839      	ldr	r1, [r7, #0]
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 f9bc 	bl	8010da6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a2e:	e01d      	b.n	8010a6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	7bfa      	ldrb	r2, [r7, #15]
 8010a34:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010a38:	7bfb      	ldrb	r3, [r7, #15]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f003 fccf 	bl	80143e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 fa86 	bl	8010f54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010a48:	7bfb      	ldrb	r3, [r7, #15]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d004      	beq.n	8010a58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2202      	movs	r2, #2
 8010a52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a56:	e009      	b.n	8010a6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a60:	e004      	b.n	8010a6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010a62:	6839      	ldr	r1, [r7, #0]
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f000 f99e 	bl	8010da6 <USBD_CtlError>
  }
}
 8010a6a:	bf00      	nop
 8010a6c:	bf00      	nop
 8010a6e:	3710      	adds	r7, #16
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	885b      	ldrh	r3, [r3, #2]
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	4b4e      	ldr	r3, [pc, #312]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010a8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d905      	bls.n	8010aa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010a94:	6839      	ldr	r1, [r7, #0]
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f000 f985 	bl	8010da6 <USBD_CtlError>
    return USBD_FAIL;
 8010a9c:	2303      	movs	r3, #3
 8010a9e:	e08c      	b.n	8010bba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	2b02      	cmp	r3, #2
 8010aaa:	d002      	beq.n	8010ab2 <USBD_SetConfig+0x3e>
 8010aac:	2b03      	cmp	r3, #3
 8010aae:	d029      	beq.n	8010b04 <USBD_SetConfig+0x90>
 8010ab0:	e075      	b.n	8010b9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010ab2:	4b44      	ldr	r3, [pc, #272]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d020      	beq.n	8010afc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010aba:	4b42      	ldr	r3, [pc, #264]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	461a      	mov	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ac4:	4b3f      	ldr	r3, [pc, #252]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	4619      	mov	r1, r3
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7fe fff1 	bl	800fab2 <USBD_SetClassConfig>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010ad4:	7bfb      	ldrb	r3, [r7, #15]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d008      	beq.n	8010aec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010ada:	6839      	ldr	r1, [r7, #0]
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f962 	bl	8010da6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2202      	movs	r2, #2
 8010ae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010aea:	e065      	b.n	8010bb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 fa31 	bl	8010f54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2203      	movs	r2, #3
 8010af6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010afa:	e05d      	b.n	8010bb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f000 fa29 	bl	8010f54 <USBD_CtlSendStatus>
      break;
 8010b02:	e059      	b.n	8010bb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010b04:	4b2f      	ldr	r3, [pc, #188]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d112      	bne.n	8010b32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2202      	movs	r2, #2
 8010b10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010b14:	4b2b      	ldr	r3, [pc, #172]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	461a      	mov	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010b1e:	4b29      	ldr	r3, [pc, #164]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	4619      	mov	r1, r3
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f7fe ffe0 	bl	800faea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 fa12 	bl	8010f54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010b30:	e042      	b.n	8010bb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010b32:	4b24      	ldr	r3, [pc, #144]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	461a      	mov	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d02a      	beq.n	8010b96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	4619      	mov	r1, r3
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7fe ffce 	bl	800faea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	461a      	mov	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010b58:	4b1a      	ldr	r3, [pc, #104]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7fe ffa7 	bl	800fab2 <USBD_SetClassConfig>
 8010b64:	4603      	mov	r3, r0
 8010b66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010b68:	7bfb      	ldrb	r3, [r7, #15]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00f      	beq.n	8010b8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 f918 	bl	8010da6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7fe ffb3 	bl	800faea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2202      	movs	r2, #2
 8010b88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010b8c:	e014      	b.n	8010bb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f9e0 	bl	8010f54 <USBD_CtlSendStatus>
      break;
 8010b94:	e010      	b.n	8010bb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 f9dc 	bl	8010f54 <USBD_CtlSendStatus>
      break;
 8010b9c:	e00c      	b.n	8010bb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010b9e:	6839      	ldr	r1, [r7, #0]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f000 f900 	bl	8010da6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010ba6:	4b07      	ldr	r3, [pc, #28]	@ (8010bc4 <USBD_SetConfig+0x150>)
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	4619      	mov	r1, r3
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f7fe ff9c 	bl	800faea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8010bb6:	bf00      	nop
  }

  return ret;
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	24000990 	.word	0x24000990

08010bc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	88db      	ldrh	r3, [r3, #6]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d004      	beq.n	8010be4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 f8e2 	bl	8010da6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010be2:	e023      	b.n	8010c2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	2b02      	cmp	r3, #2
 8010bee:	dc02      	bgt.n	8010bf6 <USBD_GetConfig+0x2e>
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	dc03      	bgt.n	8010bfc <USBD_GetConfig+0x34>
 8010bf4:	e015      	b.n	8010c22 <USBD_GetConfig+0x5a>
 8010bf6:	2b03      	cmp	r3, #3
 8010bf8:	d00b      	beq.n	8010c12 <USBD_GetConfig+0x4a>
 8010bfa:	e012      	b.n	8010c22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	3308      	adds	r3, #8
 8010c06:	2201      	movs	r2, #1
 8010c08:	4619      	mov	r1, r3
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 f948 	bl	8010ea0 <USBD_CtlSendData>
        break;
 8010c10:	e00c      	b.n	8010c2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	3304      	adds	r3, #4
 8010c16:	2201      	movs	r2, #1
 8010c18:	4619      	mov	r1, r3
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 f940 	bl	8010ea0 <USBD_CtlSendData>
        break;
 8010c20:	e004      	b.n	8010c2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010c22:	6839      	ldr	r1, [r7, #0]
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 f8be 	bl	8010da6 <USBD_CtlError>
        break;
 8010c2a:	bf00      	nop
}
 8010c2c:	bf00      	nop
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	3b01      	subs	r3, #1
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d81e      	bhi.n	8010c8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	88db      	ldrh	r3, [r3, #6]
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d004      	beq.n	8010c5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f8a5 	bl	8010da6 <USBD_CtlError>
        break;
 8010c5c:	e01a      	b.n	8010c94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2201      	movs	r2, #1
 8010c62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d005      	beq.n	8010c7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	f043 0202 	orr.w	r2, r3, #2
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	330c      	adds	r3, #12
 8010c7e:	2202      	movs	r2, #2
 8010c80:	4619      	mov	r1, r3
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 f90c 	bl	8010ea0 <USBD_CtlSendData>
      break;
 8010c88:	e004      	b.n	8010c94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010c8a:	6839      	ldr	r1, [r7, #0]
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f000 f88a 	bl	8010da6 <USBD_CtlError>
      break;
 8010c92:	bf00      	nop
  }
}
 8010c94:	bf00      	nop
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	885b      	ldrh	r3, [r3, #2]
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d107      	bne.n	8010cbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 f94c 	bl	8010f54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010cbc:	e013      	b.n	8010ce6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	885b      	ldrh	r3, [r3, #2]
 8010cc2:	2b02      	cmp	r3, #2
 8010cc4:	d10b      	bne.n	8010cde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	889b      	ldrh	r3, [r3, #4]
 8010cca:	0a1b      	lsrs	r3, r3, #8
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	b2da      	uxtb	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f000 f93c 	bl	8010f54 <USBD_CtlSendStatus>
}
 8010cdc:	e003      	b.n	8010ce6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010cde:	6839      	ldr	r1, [r7, #0]
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 f860 	bl	8010da6 <USBD_CtlError>
}
 8010ce6:	bf00      	nop
 8010ce8:	3708      	adds	r7, #8
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}

08010cee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cee:	b580      	push	{r7, lr}
 8010cf0:	b082      	sub	sp, #8
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
 8010cf6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	3b01      	subs	r3, #1
 8010d02:	2b02      	cmp	r3, #2
 8010d04:	d80b      	bhi.n	8010d1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	885b      	ldrh	r3, [r3, #2]
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d10c      	bne.n	8010d28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 f91c 	bl	8010f54 <USBD_CtlSendStatus>
      }
      break;
 8010d1c:	e004      	b.n	8010d28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010d1e:	6839      	ldr	r1, [r7, #0]
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 f840 	bl	8010da6 <USBD_CtlError>
      break;
 8010d26:	e000      	b.n	8010d2a <USBD_ClrFeature+0x3c>
      break;
 8010d28:	bf00      	nop
  }
}
 8010d2a:	bf00      	nop
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}

08010d32 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b084      	sub	sp, #16
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	6078      	str	r0, [r7, #4]
 8010d3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	781a      	ldrb	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	781a      	ldrb	r2, [r3, #0]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010d5c:	68f8      	ldr	r0, [r7, #12]
 8010d5e:	f7ff fa16 	bl	801018e <SWAPBYTE>
 8010d62:	4603      	mov	r3, r0
 8010d64:	461a      	mov	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	3301      	adds	r3, #1
 8010d74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	f7ff fa09 	bl	801018e <SWAPBYTE>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	461a      	mov	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	3301      	adds	r3, #1
 8010d88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f7ff f9fc 	bl	801018e <SWAPBYTE>
 8010d96:	4603      	mov	r3, r0
 8010d98:	461a      	mov	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	80da      	strh	r2, [r3, #6]
}
 8010d9e:	bf00      	nop
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b082      	sub	sp, #8
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010db0:	2180      	movs	r1, #128	@ 0x80
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f003 faaa 	bl	801430c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010db8:	2100      	movs	r1, #0
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f003 faa6 	bl	801430c <USBD_LL_StallEP>
}
 8010dc0:	bf00      	nop
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d042      	beq.n	8010e64 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8010de2:	6938      	ldr	r0, [r7, #16]
 8010de4:	f000 f842 	bl	8010e6c <USBD_GetLen>
 8010de8:	4603      	mov	r3, r0
 8010dea:	3301      	adds	r3, #1
 8010dec:	005b      	lsls	r3, r3, #1
 8010dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010df2:	d808      	bhi.n	8010e06 <USBD_GetString+0x3e>
 8010df4:	6938      	ldr	r0, [r7, #16]
 8010df6:	f000 f839 	bl	8010e6c <USBD_GetLen>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	e001      	b.n	8010e0a <USBD_GetString+0x42>
 8010e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010e0e:	7dfb      	ldrb	r3, [r7, #23]
 8010e10:	68ba      	ldr	r2, [r7, #8]
 8010e12:	4413      	add	r3, r2
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	7812      	ldrb	r2, [r2, #0]
 8010e18:	701a      	strb	r2, [r3, #0]
  idx++;
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010e20:	7dfb      	ldrb	r3, [r7, #23]
 8010e22:	68ba      	ldr	r2, [r7, #8]
 8010e24:	4413      	add	r3, r2
 8010e26:	2203      	movs	r2, #3
 8010e28:	701a      	strb	r2, [r3, #0]
  idx++;
 8010e2a:	7dfb      	ldrb	r3, [r7, #23]
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010e30:	e013      	b.n	8010e5a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	68ba      	ldr	r2, [r7, #8]
 8010e36:	4413      	add	r3, r2
 8010e38:	693a      	ldr	r2, [r7, #16]
 8010e3a:	7812      	ldrb	r2, [r2, #0]
 8010e3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	3301      	adds	r3, #1
 8010e42:	613b      	str	r3, [r7, #16]
    idx++;
 8010e44:	7dfb      	ldrb	r3, [r7, #23]
 8010e46:	3301      	adds	r3, #1
 8010e48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010e4a:	7dfb      	ldrb	r3, [r7, #23]
 8010e4c:	68ba      	ldr	r2, [r7, #8]
 8010e4e:	4413      	add	r3, r2
 8010e50:	2200      	movs	r2, #0
 8010e52:	701a      	strb	r2, [r3, #0]
    idx++;
 8010e54:	7dfb      	ldrb	r3, [r7, #23]
 8010e56:	3301      	adds	r3, #1
 8010e58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d1e7      	bne.n	8010e32 <USBD_GetString+0x6a>
 8010e62:	e000      	b.n	8010e66 <USBD_GetString+0x9e>
    return;
 8010e64:	bf00      	nop
  }
}
 8010e66:	3718      	adds	r7, #24
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010e74:	2300      	movs	r3, #0
 8010e76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010e7c:	e005      	b.n	8010e8a <USBD_GetLen+0x1e>
  {
    len++;
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
 8010e80:	3301      	adds	r3, #1
 8010e82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	3301      	adds	r3, #1
 8010e88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1f5      	bne.n	8010e7e <USBD_GetLen+0x12>
  }

  return len;
 8010e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2202      	movs	r2, #2
 8010eb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	687a      	ldr	r2, [r7, #4]
 8010eb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	68ba      	ldr	r2, [r7, #8]
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f003 faa9 	bl	801441e <USBD_LL_Transmit>

  return USBD_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b084      	sub	sp, #16
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	60f8      	str	r0, [r7, #12]
 8010ede:	60b9      	str	r1, [r7, #8]
 8010ee0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	68ba      	ldr	r2, [r7, #8]
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f003 fa98 	bl	801441e <USBD_LL_Transmit>

  return USBD_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3710      	adds	r7, #16
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2203      	movs	r2, #3
 8010f08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	2100      	movs	r1, #0
 8010f22:	68f8      	ldr	r0, [r7, #12]
 8010f24:	f003 fa9c 	bl	8014460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f28:	2300      	movs	r3, #0
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b084      	sub	sp, #16
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	60f8      	str	r0, [r7, #12]
 8010f3a:	60b9      	str	r1, [r7, #8]
 8010f3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	2100      	movs	r1, #0
 8010f44:	68f8      	ldr	r0, [r7, #12]
 8010f46:	f003 fa8b 	bl	8014460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3710      	adds	r7, #16
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2204      	movs	r2, #4
 8010f60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010f64:	2300      	movs	r3, #0
 8010f66:	2200      	movs	r2, #0
 8010f68:	2100      	movs	r1, #0
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f003 fa57 	bl	801441e <USBD_LL_Transmit>

  return USBD_OK;
 8010f70:	2300      	movs	r3, #0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3708      	adds	r7, #8
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b082      	sub	sp, #8
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2205      	movs	r2, #5
 8010f86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	2100      	movs	r1, #0
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f003 fa65 	bl	8014460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <__NVIC_SetPriority>:
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	6039      	str	r1, [r7, #0]
 8010faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	db0a      	blt.n	8010fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	b2da      	uxtb	r2, r3
 8010fb8:	490c      	ldr	r1, [pc, #48]	@ (8010fec <__NVIC_SetPriority+0x4c>)
 8010fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010fbe:	0112      	lsls	r2, r2, #4
 8010fc0:	b2d2      	uxtb	r2, r2
 8010fc2:	440b      	add	r3, r1
 8010fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010fc8:	e00a      	b.n	8010fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	4908      	ldr	r1, [pc, #32]	@ (8010ff0 <__NVIC_SetPriority+0x50>)
 8010fd0:	88fb      	ldrh	r3, [r7, #6]
 8010fd2:	f003 030f 	and.w	r3, r3, #15
 8010fd6:	3b04      	subs	r3, #4
 8010fd8:	0112      	lsls	r2, r2, #4
 8010fda:	b2d2      	uxtb	r2, r2
 8010fdc:	440b      	add	r3, r1
 8010fde:	761a      	strb	r2, [r3, #24]
}
 8010fe0:	bf00      	nop
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr
 8010fec:	e000e100 	.word	0xe000e100
 8010ff0:	e000ed00 	.word	0xe000ed00

08010ff4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010ff8:	4b05      	ldr	r3, [pc, #20]	@ (8011010 <SysTick_Handler+0x1c>)
 8010ffa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010ffc:	f001 fd46 	bl	8012a8c <xTaskGetSchedulerState>
 8011000:	4603      	mov	r3, r0
 8011002:	2b01      	cmp	r3, #1
 8011004:	d001      	beq.n	801100a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011006:	f002 fb3f 	bl	8013688 <xPortSysTickHandler>
  }
}
 801100a:	bf00      	nop
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	e000e010 	.word	0xe000e010

08011014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011014:	b580      	push	{r7, lr}
 8011016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011018:	2100      	movs	r1, #0
 801101a:	f06f 0004 	mvn.w	r0, #4
 801101e:	f7ff ffbf 	bl	8010fa0 <__NVIC_SetPriority>
#endif
}
 8011022:	bf00      	nop
 8011024:	bd80      	pop	{r7, pc}
	...

08011028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801102e:	f3ef 8305 	mrs	r3, IPSR
 8011032:	603b      	str	r3, [r7, #0]
  return(result);
 8011034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011036:	2b00      	cmp	r3, #0
 8011038:	d003      	beq.n	8011042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801103a:	f06f 0305 	mvn.w	r3, #5
 801103e:	607b      	str	r3, [r7, #4]
 8011040:	e00c      	b.n	801105c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011042:	4b0a      	ldr	r3, [pc, #40]	@ (801106c <osKernelInitialize+0x44>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d105      	bne.n	8011056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801104a:	4b08      	ldr	r3, [pc, #32]	@ (801106c <osKernelInitialize+0x44>)
 801104c:	2201      	movs	r2, #1
 801104e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011050:	2300      	movs	r3, #0
 8011052:	607b      	str	r3, [r7, #4]
 8011054:	e002      	b.n	801105c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801105a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801105c:	687b      	ldr	r3, [r7, #4]
}
 801105e:	4618      	mov	r0, r3
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	24000994 	.word	0x24000994

08011070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011076:	f3ef 8305 	mrs	r3, IPSR
 801107a:	603b      	str	r3, [r7, #0]
  return(result);
 801107c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <osKernelStart+0x1a>
    stat = osErrorISR;
 8011082:	f06f 0305 	mvn.w	r3, #5
 8011086:	607b      	str	r3, [r7, #4]
 8011088:	e010      	b.n	80110ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801108a:	4b0b      	ldr	r3, [pc, #44]	@ (80110b8 <osKernelStart+0x48>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b01      	cmp	r3, #1
 8011090:	d109      	bne.n	80110a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011092:	f7ff ffbf 	bl	8011014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011096:	4b08      	ldr	r3, [pc, #32]	@ (80110b8 <osKernelStart+0x48>)
 8011098:	2202      	movs	r2, #2
 801109a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801109c:	f001 f892 	bl	80121c4 <vTaskStartScheduler>
      stat = osOK;
 80110a0:	2300      	movs	r3, #0
 80110a2:	607b      	str	r3, [r7, #4]
 80110a4:	e002      	b.n	80110ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80110a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80110ac:	687b      	ldr	r3, [r7, #4]
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3708      	adds	r7, #8
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	24000994 	.word	0x24000994

080110bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80110bc:	b580      	push	{r7, lr}
 80110be:	b08e      	sub	sp, #56	@ 0x38
 80110c0:	af04      	add	r7, sp, #16
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80110c8:	2300      	movs	r3, #0
 80110ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110cc:	f3ef 8305 	mrs	r3, IPSR
 80110d0:	617b      	str	r3, [r7, #20]
  return(result);
 80110d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d17e      	bne.n	80111d6 <osThreadNew+0x11a>
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d07b      	beq.n	80111d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80110de:	2380      	movs	r3, #128	@ 0x80
 80110e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80110e2:	2318      	movs	r3, #24
 80110e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80110e6:	2300      	movs	r3, #0
 80110e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80110ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d045      	beq.n	8011182 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d002      	beq.n	8011104 <osThreadNew+0x48>
        name = attr->name;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	699b      	ldr	r3, [r3, #24]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d002      	beq.n	8011112 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	699b      	ldr	r3, [r3, #24]
 8011110:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d008      	beq.n	801112a <osThreadNew+0x6e>
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	2b38      	cmp	r3, #56	@ 0x38
 801111c:	d805      	bhi.n	801112a <osThreadNew+0x6e>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	f003 0301 	and.w	r3, r3, #1
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <osThreadNew+0x72>
        return (NULL);
 801112a:	2300      	movs	r3, #0
 801112c:	e054      	b.n	80111d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	695b      	ldr	r3, [r3, #20]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d003      	beq.n	801113e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	695b      	ldr	r3, [r3, #20]
 801113a:	089b      	lsrs	r3, r3, #2
 801113c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	689b      	ldr	r3, [r3, #8]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d00e      	beq.n	8011164 <osThreadNew+0xa8>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	2ba7      	cmp	r3, #167	@ 0xa7
 801114c:	d90a      	bls.n	8011164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011152:	2b00      	cmp	r3, #0
 8011154:	d006      	beq.n	8011164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	695b      	ldr	r3, [r3, #20]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d002      	beq.n	8011164 <osThreadNew+0xa8>
        mem = 1;
 801115e:	2301      	movs	r3, #1
 8011160:	61bb      	str	r3, [r7, #24]
 8011162:	e010      	b.n	8011186 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	689b      	ldr	r3, [r3, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d10c      	bne.n	8011186 <osThreadNew+0xca>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d108      	bne.n	8011186 <osThreadNew+0xca>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	691b      	ldr	r3, [r3, #16]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d104      	bne.n	8011186 <osThreadNew+0xca>
          mem = 0;
 801117c:	2300      	movs	r3, #0
 801117e:	61bb      	str	r3, [r7, #24]
 8011180:	e001      	b.n	8011186 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011182:	2300      	movs	r3, #0
 8011184:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d110      	bne.n	80111ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011194:	9202      	str	r2, [sp, #8]
 8011196:	9301      	str	r3, [sp, #4]
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	6a3a      	ldr	r2, [r7, #32]
 80111a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80111a2:	68f8      	ldr	r0, [r7, #12]
 80111a4:	f000 fe1a 	bl	8011ddc <xTaskCreateStatic>
 80111a8:	4603      	mov	r3, r0
 80111aa:	613b      	str	r3, [r7, #16]
 80111ac:	e013      	b.n	80111d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d110      	bne.n	80111d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	f107 0310 	add.w	r3, r7, #16
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	f000 fe68 	bl	8011e9c <xTaskCreate>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d001      	beq.n	80111d6 <osThreadNew+0x11a>
            hTask = NULL;
 80111d2:	2300      	movs	r3, #0
 80111d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80111d6:	693b      	ldr	r3, [r7, #16]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3728      	adds	r7, #40	@ 0x28
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111e8:	f3ef 8305 	mrs	r3, IPSR
 80111ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80111ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d003      	beq.n	80111fc <osDelay+0x1c>
    stat = osErrorISR;
 80111f4:	f06f 0305 	mvn.w	r3, #5
 80111f8:	60fb      	str	r3, [r7, #12]
 80111fa:	e007      	b.n	801120c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80111fc:	2300      	movs	r3, #0
 80111fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d002      	beq.n	801120c <osDelay+0x2c>
      vTaskDelay(ticks);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 ffa6 	bl	8012158 <vTaskDelay>
    }
  }

  return (stat);
 801120c:	68fb      	ldr	r3, [r7, #12]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
	...

08011218 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	4a07      	ldr	r2, [pc, #28]	@ (8011244 <vApplicationGetIdleTaskMemory+0x2c>)
 8011228:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	4a06      	ldr	r2, [pc, #24]	@ (8011248 <vApplicationGetIdleTaskMemory+0x30>)
 801122e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2280      	movs	r2, #128	@ 0x80
 8011234:	601a      	str	r2, [r3, #0]
}
 8011236:	bf00      	nop
 8011238:	3714      	adds	r7, #20
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop
 8011244:	24000998 	.word	0x24000998
 8011248:	24000a40 	.word	0x24000a40

0801124c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	4a07      	ldr	r2, [pc, #28]	@ (8011278 <vApplicationGetTimerTaskMemory+0x2c>)
 801125c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	4a06      	ldr	r2, [pc, #24]	@ (801127c <vApplicationGetTimerTaskMemory+0x30>)
 8011262:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801126a:	601a      	str	r2, [r3, #0]
}
 801126c:	bf00      	nop
 801126e:	3714      	adds	r7, #20
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	24000c40 	.word	0x24000c40
 801127c:	24000ce8 	.word	0x24000ce8

08011280 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f103 0208 	add.w	r2, r3, #8
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011298:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f103 0208 	add.w	r2, r3, #8
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f103 0208 	add.w	r2, r3, #8
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2200      	movs	r2, #0
 80112b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80112b4:	bf00      	nop
 80112b6:	370c      	adds	r7, #12
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr

080112c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2200      	movs	r2, #0
 80112cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80112ce:	bf00      	nop
 80112d0:	370c      	adds	r7, #12
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr

080112da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80112da:	b480      	push	{r7}
 80112dc:	b085      	sub	sp, #20
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
 80112e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	689a      	ldr	r2, [r3, #8]
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	689b      	ldr	r3, [r3, #8]
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	683a      	ldr	r2, [r7, #0]
 8011304:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	1c5a      	adds	r2, r3, #1
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	601a      	str	r2, [r3, #0]
}
 8011316:	bf00      	nop
 8011318:	3714      	adds	r7, #20
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr

08011322 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011322:	b480      	push	{r7}
 8011324:	b085      	sub	sp, #20
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
 801132a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011338:	d103      	bne.n	8011342 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	691b      	ldr	r3, [r3, #16]
 801133e:	60fb      	str	r3, [r7, #12]
 8011340:	e00c      	b.n	801135c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	3308      	adds	r3, #8
 8011346:	60fb      	str	r3, [r7, #12]
 8011348:	e002      	b.n	8011350 <vListInsert+0x2e>
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	60fb      	str	r3, [r7, #12]
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	68ba      	ldr	r2, [r7, #8]
 8011358:	429a      	cmp	r2, r3
 801135a:	d2f6      	bcs.n	801134a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	685a      	ldr	r2, [r3, #4]
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	683a      	ldr	r2, [r7, #0]
 801136a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	68fa      	ldr	r2, [r7, #12]
 8011370:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	683a      	ldr	r2, [r7, #0]
 8011376:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	1c5a      	adds	r2, r3, #1
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	601a      	str	r2, [r3, #0]
}
 8011388:	bf00      	nop
 801138a:	3714      	adds	r7, #20
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr

08011394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	6892      	ldr	r2, [r2, #8]
 80113aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	689b      	ldr	r3, [r3, #8]
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	6852      	ldr	r2, [r2, #4]
 80113b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d103      	bne.n	80113c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	689a      	ldr	r2, [r3, #8]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2200      	movs	r2, #0
 80113cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	1e5a      	subs	r2, r3, #1
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10b      	bne.n	8011414 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80113fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011400:	f383 8811 	msr	BASEPRI, r3
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801140e:	bf00      	nop
 8011410:	bf00      	nop
 8011412:	e7fd      	b.n	8011410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011414:	f002 f8a8 	bl	8013568 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011420:	68f9      	ldr	r1, [r7, #12]
 8011422:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011424:	fb01 f303 	mul.w	r3, r1, r3
 8011428:	441a      	add	r2, r3
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2200      	movs	r2, #0
 8011432:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011444:	3b01      	subs	r3, #1
 8011446:	68f9      	ldr	r1, [r7, #12]
 8011448:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801144a:	fb01 f303 	mul.w	r3, r1, r3
 801144e:	441a      	add	r2, r3
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	22ff      	movs	r2, #255	@ 0xff
 8011458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	22ff      	movs	r2, #255	@ 0xff
 8011460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d114      	bne.n	8011494 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	691b      	ldr	r3, [r3, #16]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d01a      	beq.n	80114a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	3310      	adds	r3, #16
 8011476:	4618      	mov	r0, r3
 8011478:	f001 f942 	bl	8012700 <xTaskRemoveFromEventList>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d012      	beq.n	80114a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011482:	4b0d      	ldr	r3, [pc, #52]	@ (80114b8 <xQueueGenericReset+0xd0>)
 8011484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011488:	601a      	str	r2, [r3, #0]
 801148a:	f3bf 8f4f 	dsb	sy
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	e009      	b.n	80114a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	3310      	adds	r3, #16
 8011498:	4618      	mov	r0, r3
 801149a:	f7ff fef1 	bl	8011280 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	3324      	adds	r3, #36	@ 0x24
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff feec 	bl	8011280 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80114a8:	f002 f890 	bl	80135cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80114ac:	2301      	movs	r3, #1
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	e000ed04 	.word	0xe000ed04

080114bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b08e      	sub	sp, #56	@ 0x38
 80114c0:	af02      	add	r7, sp, #8
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
 80114c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d10b      	bne.n	80114e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80114d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80114e2:	bf00      	nop
 80114e4:	bf00      	nop
 80114e6:	e7fd      	b.n	80114e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d10b      	bne.n	8011506 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80114ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f2:	f383 8811 	msr	BASEPRI, r3
 80114f6:	f3bf 8f6f 	isb	sy
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011500:	bf00      	nop
 8011502:	bf00      	nop
 8011504:	e7fd      	b.n	8011502 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d002      	beq.n	8011512 <xQueueGenericCreateStatic+0x56>
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <xQueueGenericCreateStatic+0x5a>
 8011512:	2301      	movs	r3, #1
 8011514:	e000      	b.n	8011518 <xQueueGenericCreateStatic+0x5c>
 8011516:	2300      	movs	r3, #0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d10b      	bne.n	8011534 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801151c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011520:	f383 8811 	msr	BASEPRI, r3
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	f3bf 8f4f 	dsb	sy
 801152c:	623b      	str	r3, [r7, #32]
}
 801152e:	bf00      	nop
 8011530:	bf00      	nop
 8011532:	e7fd      	b.n	8011530 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d102      	bne.n	8011540 <xQueueGenericCreateStatic+0x84>
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d101      	bne.n	8011544 <xQueueGenericCreateStatic+0x88>
 8011540:	2301      	movs	r3, #1
 8011542:	e000      	b.n	8011546 <xQueueGenericCreateStatic+0x8a>
 8011544:	2300      	movs	r3, #0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d10b      	bne.n	8011562 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801154a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801154e:	f383 8811 	msr	BASEPRI, r3
 8011552:	f3bf 8f6f 	isb	sy
 8011556:	f3bf 8f4f 	dsb	sy
 801155a:	61fb      	str	r3, [r7, #28]
}
 801155c:	bf00      	nop
 801155e:	bf00      	nop
 8011560:	e7fd      	b.n	801155e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011562:	2350      	movs	r3, #80	@ 0x50
 8011564:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	2b50      	cmp	r3, #80	@ 0x50
 801156a:	d00b      	beq.n	8011584 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801156c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011570:	f383 8811 	msr	BASEPRI, r3
 8011574:	f3bf 8f6f 	isb	sy
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	61bb      	str	r3, [r7, #24]
}
 801157e:	bf00      	nop
 8011580:	bf00      	nop
 8011582:	e7fd      	b.n	8011580 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011584:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801158a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00d      	beq.n	80115ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011592:	2201      	movs	r2, #1
 8011594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011598:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	4613      	mov	r3, r2
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	68b9      	ldr	r1, [r7, #8]
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f000 f805 	bl	80115b6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80115ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3730      	adds	r7, #48	@ 0x30
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b084      	sub	sp, #16
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	60f8      	str	r0, [r7, #12]
 80115be:	60b9      	str	r1, [r7, #8]
 80115c0:	607a      	str	r2, [r7, #4]
 80115c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d103      	bne.n	80115d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	69ba      	ldr	r2, [r7, #24]
 80115ce:	601a      	str	r2, [r3, #0]
 80115d0:	e002      	b.n	80115d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	687a      	ldr	r2, [r7, #4]
 80115d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	68ba      	ldr	r2, [r7, #8]
 80115e2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80115e4:	2101      	movs	r1, #1
 80115e6:	69b8      	ldr	r0, [r7, #24]
 80115e8:	f7ff fefe 	bl	80113e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	78fa      	ldrb	r2, [r7, #3]
 80115f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80115f4:	bf00      	nop
 80115f6:	3710      	adds	r7, #16
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b08e      	sub	sp, #56	@ 0x38
 8011600:	af00      	add	r7, sp, #0
 8011602:	60f8      	str	r0, [r7, #12]
 8011604:	60b9      	str	r1, [r7, #8]
 8011606:	607a      	str	r2, [r7, #4]
 8011608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801160a:	2300      	movs	r3, #0
 801160c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011614:	2b00      	cmp	r3, #0
 8011616:	d10b      	bne.n	8011630 <xQueueGenericSend+0x34>
	__asm volatile
 8011618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161c:	f383 8811 	msr	BASEPRI, r3
 8011620:	f3bf 8f6f 	isb	sy
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801162a:	bf00      	nop
 801162c:	bf00      	nop
 801162e:	e7fd      	b.n	801162c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d103      	bne.n	801163e <xQueueGenericSend+0x42>
 8011636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801163a:	2b00      	cmp	r3, #0
 801163c:	d101      	bne.n	8011642 <xQueueGenericSend+0x46>
 801163e:	2301      	movs	r3, #1
 8011640:	e000      	b.n	8011644 <xQueueGenericSend+0x48>
 8011642:	2300      	movs	r3, #0
 8011644:	2b00      	cmp	r3, #0
 8011646:	d10b      	bne.n	8011660 <xQueueGenericSend+0x64>
	__asm volatile
 8011648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801165a:	bf00      	nop
 801165c:	bf00      	nop
 801165e:	e7fd      	b.n	801165c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	2b02      	cmp	r3, #2
 8011664:	d103      	bne.n	801166e <xQueueGenericSend+0x72>
 8011666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801166a:	2b01      	cmp	r3, #1
 801166c:	d101      	bne.n	8011672 <xQueueGenericSend+0x76>
 801166e:	2301      	movs	r3, #1
 8011670:	e000      	b.n	8011674 <xQueueGenericSend+0x78>
 8011672:	2300      	movs	r3, #0
 8011674:	2b00      	cmp	r3, #0
 8011676:	d10b      	bne.n	8011690 <xQueueGenericSend+0x94>
	__asm volatile
 8011678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801167c:	f383 8811 	msr	BASEPRI, r3
 8011680:	f3bf 8f6f 	isb	sy
 8011684:	f3bf 8f4f 	dsb	sy
 8011688:	623b      	str	r3, [r7, #32]
}
 801168a:	bf00      	nop
 801168c:	bf00      	nop
 801168e:	e7fd      	b.n	801168c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011690:	f001 f9fc 	bl	8012a8c <xTaskGetSchedulerState>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d102      	bne.n	80116a0 <xQueueGenericSend+0xa4>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d101      	bne.n	80116a4 <xQueueGenericSend+0xa8>
 80116a0:	2301      	movs	r3, #1
 80116a2:	e000      	b.n	80116a6 <xQueueGenericSend+0xaa>
 80116a4:	2300      	movs	r3, #0
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d10b      	bne.n	80116c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80116aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ae:	f383 8811 	msr	BASEPRI, r3
 80116b2:	f3bf 8f6f 	isb	sy
 80116b6:	f3bf 8f4f 	dsb	sy
 80116ba:	61fb      	str	r3, [r7, #28]
}
 80116bc:	bf00      	nop
 80116be:	bf00      	nop
 80116c0:	e7fd      	b.n	80116be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80116c2:	f001 ff51 	bl	8013568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d302      	bcc.n	80116d8 <xQueueGenericSend+0xdc>
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	2b02      	cmp	r3, #2
 80116d6:	d129      	bne.n	801172c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	68b9      	ldr	r1, [r7, #8]
 80116dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80116de:	f000 fa0f 	bl	8011b00 <prvCopyDataToQueue>
 80116e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d010      	beq.n	801170e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116ee:	3324      	adds	r3, #36	@ 0x24
 80116f0:	4618      	mov	r0, r3
 80116f2:	f001 f805 	bl	8012700 <xTaskRemoveFromEventList>
 80116f6:	4603      	mov	r3, r0
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d013      	beq.n	8011724 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80116fc:	4b3f      	ldr	r3, [pc, #252]	@ (80117fc <xQueueGenericSend+0x200>)
 80116fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011702:	601a      	str	r2, [r3, #0]
 8011704:	f3bf 8f4f 	dsb	sy
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	e00a      	b.n	8011724 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011710:	2b00      	cmp	r3, #0
 8011712:	d007      	beq.n	8011724 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011714:	4b39      	ldr	r3, [pc, #228]	@ (80117fc <xQueueGenericSend+0x200>)
 8011716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801171a:	601a      	str	r2, [r3, #0]
 801171c:	f3bf 8f4f 	dsb	sy
 8011720:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011724:	f001 ff52 	bl	80135cc <vPortExitCritical>
				return pdPASS;
 8011728:	2301      	movs	r3, #1
 801172a:	e063      	b.n	80117f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d103      	bne.n	801173a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011732:	f001 ff4b 	bl	80135cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011736:	2300      	movs	r3, #0
 8011738:	e05c      	b.n	80117f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801173a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801173c:	2b00      	cmp	r3, #0
 801173e:	d106      	bne.n	801174e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011740:	f107 0314 	add.w	r3, r7, #20
 8011744:	4618      	mov	r0, r3
 8011746:	f001 f83f 	bl	80127c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801174a:	2301      	movs	r3, #1
 801174c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801174e:	f001 ff3d 	bl	80135cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011752:	f000 fda7 	bl	80122a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011756:	f001 ff07 	bl	8013568 <vPortEnterCritical>
 801175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801175c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011760:	b25b      	sxtb	r3, r3
 8011762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011766:	d103      	bne.n	8011770 <xQueueGenericSend+0x174>
 8011768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176a:	2200      	movs	r2, #0
 801176c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011772:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011776:	b25b      	sxtb	r3, r3
 8011778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801177c:	d103      	bne.n	8011786 <xQueueGenericSend+0x18a>
 801177e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011780:	2200      	movs	r2, #0
 8011782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011786:	f001 ff21 	bl	80135cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801178a:	1d3a      	adds	r2, r7, #4
 801178c:	f107 0314 	add.w	r3, r7, #20
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f001 f82e 	bl	80127f4 <xTaskCheckForTimeOut>
 8011798:	4603      	mov	r3, r0
 801179a:	2b00      	cmp	r3, #0
 801179c:	d124      	bne.n	80117e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801179e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80117a0:	f000 faa6 	bl	8011cf0 <prvIsQueueFull>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d018      	beq.n	80117dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80117aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ac:	3310      	adds	r3, #16
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	4611      	mov	r1, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 ff52 	bl	801265c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80117b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80117ba:	f000 fa31 	bl	8011c20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80117be:	f000 fd7f 	bl	80122c0 <xTaskResumeAll>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f47f af7c 	bne.w	80116c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80117ca:	4b0c      	ldr	r3, [pc, #48]	@ (80117fc <xQueueGenericSend+0x200>)
 80117cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117d0:	601a      	str	r2, [r3, #0]
 80117d2:	f3bf 8f4f 	dsb	sy
 80117d6:	f3bf 8f6f 	isb	sy
 80117da:	e772      	b.n	80116c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80117dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80117de:	f000 fa1f 	bl	8011c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80117e2:	f000 fd6d 	bl	80122c0 <xTaskResumeAll>
 80117e6:	e76c      	b.n	80116c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80117e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80117ea:	f000 fa19 	bl	8011c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80117ee:	f000 fd67 	bl	80122c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80117f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3738      	adds	r7, #56	@ 0x38
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	e000ed04 	.word	0xe000ed04

08011800 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b090      	sub	sp, #64	@ 0x40
 8011804:	af00      	add	r7, sp, #0
 8011806:	60f8      	str	r0, [r7, #12]
 8011808:	60b9      	str	r1, [r7, #8]
 801180a:	607a      	str	r2, [r7, #4]
 801180c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8011812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011814:	2b00      	cmp	r3, #0
 8011816:	d10b      	bne.n	8011830 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8011818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801181c:	f383 8811 	msr	BASEPRI, r3
 8011820:	f3bf 8f6f 	isb	sy
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801182a:	bf00      	nop
 801182c:	bf00      	nop
 801182e:	e7fd      	b.n	801182c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d103      	bne.n	801183e <xQueueGenericSendFromISR+0x3e>
 8011836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801183a:	2b00      	cmp	r3, #0
 801183c:	d101      	bne.n	8011842 <xQueueGenericSendFromISR+0x42>
 801183e:	2301      	movs	r3, #1
 8011840:	e000      	b.n	8011844 <xQueueGenericSendFromISR+0x44>
 8011842:	2300      	movs	r3, #0
 8011844:	2b00      	cmp	r3, #0
 8011846:	d10b      	bne.n	8011860 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8011848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801184c:	f383 8811 	msr	BASEPRI, r3
 8011850:	f3bf 8f6f 	isb	sy
 8011854:	f3bf 8f4f 	dsb	sy
 8011858:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801185a:	bf00      	nop
 801185c:	bf00      	nop
 801185e:	e7fd      	b.n	801185c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	2b02      	cmp	r3, #2
 8011864:	d103      	bne.n	801186e <xQueueGenericSendFromISR+0x6e>
 8011866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801186a:	2b01      	cmp	r3, #1
 801186c:	d101      	bne.n	8011872 <xQueueGenericSendFromISR+0x72>
 801186e:	2301      	movs	r3, #1
 8011870:	e000      	b.n	8011874 <xQueueGenericSendFromISR+0x74>
 8011872:	2300      	movs	r3, #0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d10b      	bne.n	8011890 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801187c:	f383 8811 	msr	BASEPRI, r3
 8011880:	f3bf 8f6f 	isb	sy
 8011884:	f3bf 8f4f 	dsb	sy
 8011888:	623b      	str	r3, [r7, #32]
}
 801188a:	bf00      	nop
 801188c:	bf00      	nop
 801188e:	e7fd      	b.n	801188c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011890:	f001 ff4a 	bl	8013728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011894:	f3ef 8211 	mrs	r2, BASEPRI
 8011898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801189c:	f383 8811 	msr	BASEPRI, r3
 80118a0:	f3bf 8f6f 	isb	sy
 80118a4:	f3bf 8f4f 	dsb	sy
 80118a8:	61fa      	str	r2, [r7, #28]
 80118aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80118ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80118b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d302      	bcc.n	80118c2 <xQueueGenericSendFromISR+0xc2>
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2b02      	cmp	r3, #2
 80118c0:	d12f      	bne.n	8011922 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80118c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80118d2:	683a      	ldr	r2, [r7, #0]
 80118d4:	68b9      	ldr	r1, [r7, #8]
 80118d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80118d8:	f000 f912 	bl	8011b00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80118dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80118e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80118e4:	d112      	bne.n	801190c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d016      	beq.n	801191c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f0:	3324      	adds	r3, #36	@ 0x24
 80118f2:	4618      	mov	r0, r3
 80118f4:	f000 ff04 	bl	8012700 <xTaskRemoveFromEventList>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d00e      	beq.n	801191c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00b      	beq.n	801191c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2201      	movs	r2, #1
 8011908:	601a      	str	r2, [r3, #0]
 801190a:	e007      	b.n	801191c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801190c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011910:	3301      	adds	r3, #1
 8011912:	b2db      	uxtb	r3, r3
 8011914:	b25a      	sxtb	r2, r3
 8011916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801191c:	2301      	movs	r3, #1
 801191e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8011920:	e001      	b.n	8011926 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011922:	2300      	movs	r3, #0
 8011924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011928:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011930:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011934:	4618      	mov	r0, r3
 8011936:	3740      	adds	r7, #64	@ 0x40
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}

0801193c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b08c      	sub	sp, #48	@ 0x30
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011948:	2300      	movs	r3, #0
 801194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011952:	2b00      	cmp	r3, #0
 8011954:	d10b      	bne.n	801196e <xQueueReceive+0x32>
	__asm volatile
 8011956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801195a:	f383 8811 	msr	BASEPRI, r3
 801195e:	f3bf 8f6f 	isb	sy
 8011962:	f3bf 8f4f 	dsb	sy
 8011966:	623b      	str	r3, [r7, #32]
}
 8011968:	bf00      	nop
 801196a:	bf00      	nop
 801196c:	e7fd      	b.n	801196a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d103      	bne.n	801197c <xQueueReceive+0x40>
 8011974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <xQueueReceive+0x44>
 801197c:	2301      	movs	r3, #1
 801197e:	e000      	b.n	8011982 <xQueueReceive+0x46>
 8011980:	2300      	movs	r3, #0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10b      	bne.n	801199e <xQueueReceive+0x62>
	__asm volatile
 8011986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801198a:	f383 8811 	msr	BASEPRI, r3
 801198e:	f3bf 8f6f 	isb	sy
 8011992:	f3bf 8f4f 	dsb	sy
 8011996:	61fb      	str	r3, [r7, #28]
}
 8011998:	bf00      	nop
 801199a:	bf00      	nop
 801199c:	e7fd      	b.n	801199a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801199e:	f001 f875 	bl	8012a8c <xTaskGetSchedulerState>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d102      	bne.n	80119ae <xQueueReceive+0x72>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d101      	bne.n	80119b2 <xQueueReceive+0x76>
 80119ae:	2301      	movs	r3, #1
 80119b0:	e000      	b.n	80119b4 <xQueueReceive+0x78>
 80119b2:	2300      	movs	r3, #0
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d10b      	bne.n	80119d0 <xQueueReceive+0x94>
	__asm volatile
 80119b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119bc:	f383 8811 	msr	BASEPRI, r3
 80119c0:	f3bf 8f6f 	isb	sy
 80119c4:	f3bf 8f4f 	dsb	sy
 80119c8:	61bb      	str	r3, [r7, #24]
}
 80119ca:	bf00      	nop
 80119cc:	bf00      	nop
 80119ce:	e7fd      	b.n	80119cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119d0:	f001 fdca 	bl	8013568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d01f      	beq.n	8011a20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80119e0:	68b9      	ldr	r1, [r7, #8]
 80119e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80119e4:	f000 f8f6 	bl	8011bd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80119e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ea:	1e5a      	subs	r2, r3, #1
 80119ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f2:	691b      	ldr	r3, [r3, #16]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d00f      	beq.n	8011a18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119fa:	3310      	adds	r3, #16
 80119fc:	4618      	mov	r0, r3
 80119fe:	f000 fe7f 	bl	8012700 <xTaskRemoveFromEventList>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d007      	beq.n	8011a18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a08:	4b3c      	ldr	r3, [pc, #240]	@ (8011afc <xQueueReceive+0x1c0>)
 8011a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a0e:	601a      	str	r2, [r3, #0]
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a18:	f001 fdd8 	bl	80135cc <vPortExitCritical>
				return pdPASS;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	e069      	b.n	8011af4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d103      	bne.n	8011a2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a26:	f001 fdd1 	bl	80135cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e062      	b.n	8011af4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d106      	bne.n	8011a42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a34:	f107 0310 	add.w	r3, r7, #16
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f000 fec5 	bl	80127c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a3e:	2301      	movs	r3, #1
 8011a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a42:	f001 fdc3 	bl	80135cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a46:	f000 fc2d 	bl	80122a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a4a:	f001 fd8d 	bl	8013568 <vPortEnterCritical>
 8011a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011a54:	b25b      	sxtb	r3, r3
 8011a56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011a5a:	d103      	bne.n	8011a64 <xQueueReceive+0x128>
 8011a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011a6a:	b25b      	sxtb	r3, r3
 8011a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011a70:	d103      	bne.n	8011a7a <xQueueReceive+0x13e>
 8011a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a74:	2200      	movs	r2, #0
 8011a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011a7a:	f001 fda7 	bl	80135cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a7e:	1d3a      	adds	r2, r7, #4
 8011a80:	f107 0310 	add.w	r3, r7, #16
 8011a84:	4611      	mov	r1, r2
 8011a86:	4618      	mov	r0, r3
 8011a88:	f000 feb4 	bl	80127f4 <xTaskCheckForTimeOut>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d123      	bne.n	8011ada <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a94:	f000 f916 	bl	8011cc4 <prvIsQueueEmpty>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d017      	beq.n	8011ace <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa0:	3324      	adds	r3, #36	@ 0x24
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	4611      	mov	r1, r2
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f000 fdd8 	bl	801265c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011aac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011aae:	f000 f8b7 	bl	8011c20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ab2:	f000 fc05 	bl	80122c0 <xTaskResumeAll>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d189      	bne.n	80119d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011abc:	4b0f      	ldr	r3, [pc, #60]	@ (8011afc <xQueueReceive+0x1c0>)
 8011abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ac2:	601a      	str	r2, [r3, #0]
 8011ac4:	f3bf 8f4f 	dsb	sy
 8011ac8:	f3bf 8f6f 	isb	sy
 8011acc:	e780      	b.n	80119d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ad0:	f000 f8a6 	bl	8011c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ad4:	f000 fbf4 	bl	80122c0 <xTaskResumeAll>
 8011ad8:	e77a      	b.n	80119d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011adc:	f000 f8a0 	bl	8011c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ae0:	f000 fbee 	bl	80122c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ae6:	f000 f8ed 	bl	8011cc4 <prvIsQueueEmpty>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	f43f af6f 	beq.w	80119d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011af2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3730      	adds	r7, #48	@ 0x30
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	e000ed04 	.word	0xe000ed04

08011b00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b086      	sub	sp, #24
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d10d      	bne.n	8011b3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d14d      	bne.n	8011bc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f000 ffcc 	bl	8012ac8 <xTaskPriorityDisinherit>
 8011b30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2200      	movs	r2, #0
 8011b36:	609a      	str	r2, [r3, #8]
 8011b38:	e043      	b.n	8011bc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d119      	bne.n	8011b74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	6858      	ldr	r0, [r3, #4]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b48:	461a      	mov	r2, r3
 8011b4a:	68b9      	ldr	r1, [r7, #8]
 8011b4c:	f002 ffeb 	bl	8014b26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	685a      	ldr	r2, [r3, #4]
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b58:	441a      	add	r2, r3
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	685a      	ldr	r2, [r3, #4]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	689b      	ldr	r3, [r3, #8]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d32b      	bcc.n	8011bc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681a      	ldr	r2, [r3, #0]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	605a      	str	r2, [r3, #4]
 8011b72:	e026      	b.n	8011bc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	68d8      	ldr	r0, [r3, #12]
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	68b9      	ldr	r1, [r7, #8]
 8011b80:	f002 ffd1 	bl	8014b26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	68da      	ldr	r2, [r3, #12]
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b8c:	425b      	negs	r3, r3
 8011b8e:	441a      	add	r2, r3
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	68da      	ldr	r2, [r3, #12]
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d207      	bcs.n	8011bb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	689a      	ldr	r2, [r3, #8]
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ba8:	425b      	negs	r3, r3
 8011baa:	441a      	add	r2, r3
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2b02      	cmp	r3, #2
 8011bb4:	d105      	bne.n	8011bc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d002      	beq.n	8011bc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	1c5a      	adds	r2, r3, #1
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011bca:	697b      	ldr	r3, [r7, #20]
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3718      	adds	r7, #24
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d018      	beq.n	8011c18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	68da      	ldr	r2, [r3, #12]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bee:	441a      	add	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	68da      	ldr	r2, [r3, #12]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	689b      	ldr	r3, [r3, #8]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d303      	bcc.n	8011c08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	68d9      	ldr	r1, [r3, #12]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c10:	461a      	mov	r2, r3
 8011c12:	6838      	ldr	r0, [r7, #0]
 8011c14:	f002 ff87 	bl	8014b26 <memcpy>
	}
}
 8011c18:	bf00      	nop
 8011c1a:	3708      	adds	r7, #8
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011c28:	f001 fc9e 	bl	8013568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011c32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c34:	e011      	b.n	8011c5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d012      	beq.n	8011c64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	3324      	adds	r3, #36	@ 0x24
 8011c42:	4618      	mov	r0, r3
 8011c44:	f000 fd5c 	bl	8012700 <xTaskRemoveFromEventList>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d001      	beq.n	8011c52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011c4e:	f000 fe35 	bl	80128bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011c52:	7bfb      	ldrb	r3, [r7, #15]
 8011c54:	3b01      	subs	r3, #1
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	dce9      	bgt.n	8011c36 <prvUnlockQueue+0x16>
 8011c62:	e000      	b.n	8011c66 <prvUnlockQueue+0x46>
					break;
 8011c64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	22ff      	movs	r2, #255	@ 0xff
 8011c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011c6e:	f001 fcad 	bl	80135cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011c72:	f001 fc79 	bl	8013568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011c7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c7e:	e011      	b.n	8011ca4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	691b      	ldr	r3, [r3, #16]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d012      	beq.n	8011cae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3310      	adds	r3, #16
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f000 fd37 	bl	8012700 <xTaskRemoveFromEventList>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d001      	beq.n	8011c9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011c98:	f000 fe10 	bl	80128bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011c9c:	7bbb      	ldrb	r3, [r7, #14]
 8011c9e:	3b01      	subs	r3, #1
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	dce9      	bgt.n	8011c80 <prvUnlockQueue+0x60>
 8011cac:	e000      	b.n	8011cb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011cae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	22ff      	movs	r2, #255	@ 0xff
 8011cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011cb8:	f001 fc88 	bl	80135cc <vPortExitCritical>
}
 8011cbc:	bf00      	nop
 8011cbe:	3710      	adds	r7, #16
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ccc:	f001 fc4c 	bl	8013568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d102      	bne.n	8011cde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	60fb      	str	r3, [r7, #12]
 8011cdc:	e001      	b.n	8011ce2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ce2:	f001 fc73 	bl	80135cc <vPortExitCritical>

	return xReturn;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011cf8:	f001 fc36 	bl	8013568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d102      	bne.n	8011d0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	60fb      	str	r3, [r7, #12]
 8011d0c:	e001      	b.n	8011d12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d12:	f001 fc5b 	bl	80135cc <vPortExitCritical>

	return xReturn;
 8011d16:	68fb      	ldr	r3, [r7, #12]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3710      	adds	r7, #16
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011d20:	b480      	push	{r7}
 8011d22:	b085      	sub	sp, #20
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	e014      	b.n	8011d5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011d30:	4a0f      	ldr	r2, [pc, #60]	@ (8011d70 <vQueueAddToRegistry+0x50>)
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d10b      	bne.n	8011d54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011d3c:	490c      	ldr	r1, [pc, #48]	@ (8011d70 <vQueueAddToRegistry+0x50>)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	683a      	ldr	r2, [r7, #0]
 8011d42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011d46:	4a0a      	ldr	r2, [pc, #40]	@ (8011d70 <vQueueAddToRegistry+0x50>)
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	00db      	lsls	r3, r3, #3
 8011d4c:	4413      	add	r3, r2
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011d52:	e006      	b.n	8011d62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	3301      	adds	r3, #1
 8011d58:	60fb      	str	r3, [r7, #12]
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	2b07      	cmp	r3, #7
 8011d5e:	d9e7      	bls.n	8011d30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011d60:	bf00      	nop
 8011d62:	bf00      	nop
 8011d64:	3714      	adds	r7, #20
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	240010e8 	.word	0x240010e8

08011d74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b086      	sub	sp, #24
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011d84:	f001 fbf0 	bl	8013568 <vPortEnterCritical>
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011d8e:	b25b      	sxtb	r3, r3
 8011d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d94:	d103      	bne.n	8011d9e <vQueueWaitForMessageRestricted+0x2a>
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011da4:	b25b      	sxtb	r3, r3
 8011da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011daa:	d103      	bne.n	8011db4 <vQueueWaitForMessageRestricted+0x40>
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011db4:	f001 fc0a 	bl	80135cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d106      	bne.n	8011dce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	3324      	adds	r3, #36	@ 0x24
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	68b9      	ldr	r1, [r7, #8]
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f000 fc6d 	bl	80126a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011dce:	6978      	ldr	r0, [r7, #20]
 8011dd0:	f7ff ff26 	bl	8011c20 <prvUnlockQueue>
	}
 8011dd4:	bf00      	nop
 8011dd6:	3718      	adds	r7, #24
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b08e      	sub	sp, #56	@ 0x38
 8011de0:	af04      	add	r7, sp, #16
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	607a      	str	r2, [r7, #4]
 8011de8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d10b      	bne.n	8011e08 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011df4:	f383 8811 	msr	BASEPRI, r3
 8011df8:	f3bf 8f6f 	isb	sy
 8011dfc:	f3bf 8f4f 	dsb	sy
 8011e00:	623b      	str	r3, [r7, #32]
}
 8011e02:	bf00      	nop
 8011e04:	bf00      	nop
 8011e06:	e7fd      	b.n	8011e04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d10b      	bne.n	8011e26 <xTaskCreateStatic+0x4a>
	__asm volatile
 8011e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e12:	f383 8811 	msr	BASEPRI, r3
 8011e16:	f3bf 8f6f 	isb	sy
 8011e1a:	f3bf 8f4f 	dsb	sy
 8011e1e:	61fb      	str	r3, [r7, #28]
}
 8011e20:	bf00      	nop
 8011e22:	bf00      	nop
 8011e24:	e7fd      	b.n	8011e22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011e26:	23a8      	movs	r3, #168	@ 0xa8
 8011e28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	2ba8      	cmp	r3, #168	@ 0xa8
 8011e2e:	d00b      	beq.n	8011e48 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e34:	f383 8811 	msr	BASEPRI, r3
 8011e38:	f3bf 8f6f 	isb	sy
 8011e3c:	f3bf 8f4f 	dsb	sy
 8011e40:	61bb      	str	r3, [r7, #24]
}
 8011e42:	bf00      	nop
 8011e44:	bf00      	nop
 8011e46:	e7fd      	b.n	8011e44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011e48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d01e      	beq.n	8011e8e <xTaskCreateStatic+0xb2>
 8011e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d01b      	beq.n	8011e8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e62:	2202      	movs	r2, #2
 8011e64:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011e68:	2300      	movs	r3, #0
 8011e6a:	9303      	str	r3, [sp, #12]
 8011e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6e:	9302      	str	r3, [sp, #8]
 8011e70:	f107 0314 	add.w	r3, r7, #20
 8011e74:	9301      	str	r3, [sp, #4]
 8011e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	68b9      	ldr	r1, [r7, #8]
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	f000 f851 	bl	8011f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e88:	f000 f8f6 	bl	8012078 <prvAddNewTaskToReadyList>
 8011e8c:	e001      	b.n	8011e92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011e92:	697b      	ldr	r3, [r7, #20]
	}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3728      	adds	r7, #40	@ 0x28
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b08c      	sub	sp, #48	@ 0x30
 8011ea0:	af04      	add	r7, sp, #16
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	603b      	str	r3, [r7, #0]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011eac:	88fb      	ldrh	r3, [r7, #6]
 8011eae:	009b      	lsls	r3, r3, #2
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f001 fc7b 	bl	80137ac <pvPortMalloc>
 8011eb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00e      	beq.n	8011edc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011ebe:	20a8      	movs	r0, #168	@ 0xa8
 8011ec0:	f001 fc74 	bl	80137ac <pvPortMalloc>
 8011ec4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011ec6:	69fb      	ldr	r3, [r7, #28]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d003      	beq.n	8011ed4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	697a      	ldr	r2, [r7, #20]
 8011ed0:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ed2:	e005      	b.n	8011ee0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011ed4:	6978      	ldr	r0, [r7, #20]
 8011ed6:	f001 fd37 	bl	8013948 <vPortFree>
 8011eda:	e001      	b.n	8011ee0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011edc:	2300      	movs	r3, #0
 8011ede:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d017      	beq.n	8011f16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011eee:	88fa      	ldrh	r2, [r7, #6]
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	9303      	str	r3, [sp, #12]
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	9302      	str	r3, [sp, #8]
 8011ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011efa:	9301      	str	r3, [sp, #4]
 8011efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	68b9      	ldr	r1, [r7, #8]
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f000 f80f 	bl	8011f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f0a:	69f8      	ldr	r0, [r7, #28]
 8011f0c:	f000 f8b4 	bl	8012078 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f10:	2301      	movs	r3, #1
 8011f12:	61bb      	str	r3, [r7, #24]
 8011f14:	e002      	b.n	8011f1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011f16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011f1c:	69bb      	ldr	r3, [r7, #24]
	}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3720      	adds	r7, #32
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
	...

08011f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b088      	sub	sp, #32
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
 8011f34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	009b      	lsls	r3, r3, #2
 8011f3e:	461a      	mov	r2, r3
 8011f40:	21a5      	movs	r1, #165	@ 0xa5
 8011f42:	f002 fd17 	bl	8014974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f4a:	6879      	ldr	r1, [r7, #4]
 8011f4c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011f50:	440b      	add	r3, r1
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	4413      	add	r3, r2
 8011f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	f023 0307 	bic.w	r3, r3, #7
 8011f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011f60:	69bb      	ldr	r3, [r7, #24]
 8011f62:	f003 0307 	and.w	r3, r3, #7
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00b      	beq.n	8011f82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8011f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	617b      	str	r3, [r7, #20]
}
 8011f7c:	bf00      	nop
 8011f7e:	bf00      	nop
 8011f80:	e7fd      	b.n	8011f7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d01f      	beq.n	8011fc8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011f88:	2300      	movs	r3, #0
 8011f8a:	61fb      	str	r3, [r7, #28]
 8011f8c:	e012      	b.n	8011fb4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	4413      	add	r3, r2
 8011f94:	7819      	ldrb	r1, [r3, #0]
 8011f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	3334      	adds	r3, #52	@ 0x34
 8011f9e:	460a      	mov	r2, r1
 8011fa0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d006      	beq.n	8011fbc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	61fb      	str	r3, [r7, #28]
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	2b0f      	cmp	r3, #15
 8011fb8:	d9e9      	bls.n	8011f8e <prvInitialiseNewTask+0x66>
 8011fba:	e000      	b.n	8011fbe <prvInitialiseNewTask+0x96>
			{
				break;
 8011fbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011fc6:	e003      	b.n	8011fd0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd2:	2b37      	cmp	r3, #55	@ 0x37
 8011fd4:	d901      	bls.n	8011fda <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011fd6:	2337      	movs	r3, #55	@ 0x37
 8011fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fe8:	2200      	movs	r2, #0
 8011fea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fee:	3304      	adds	r3, #4
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7ff f965 	bl	80112c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ff8:	3318      	adds	r3, #24
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff f960 	bl	80112c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012004:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012008:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801200c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801200e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012014:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012018:	2200      	movs	r2, #0
 801201a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801201e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012020:	2200      	movs	r2, #0
 8012022:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012028:	3354      	adds	r3, #84	@ 0x54
 801202a:	224c      	movs	r2, #76	@ 0x4c
 801202c:	2100      	movs	r1, #0
 801202e:	4618      	mov	r0, r3
 8012030:	f002 fca0 	bl	8014974 <memset>
 8012034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012036:	4a0d      	ldr	r2, [pc, #52]	@ (801206c <prvInitialiseNewTask+0x144>)
 8012038:	659a      	str	r2, [r3, #88]	@ 0x58
 801203a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801203c:	4a0c      	ldr	r2, [pc, #48]	@ (8012070 <prvInitialiseNewTask+0x148>)
 801203e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012042:	4a0c      	ldr	r2, [pc, #48]	@ (8012074 <prvInitialiseNewTask+0x14c>)
 8012044:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012046:	683a      	ldr	r2, [r7, #0]
 8012048:	68f9      	ldr	r1, [r7, #12]
 801204a:	69b8      	ldr	r0, [r7, #24]
 801204c:	f001 f95a 	bl	8013304 <pxPortInitialiseStack>
 8012050:	4602      	mov	r2, r0
 8012052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012054:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012058:	2b00      	cmp	r3, #0
 801205a:	d002      	beq.n	8012062 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801205e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012062:	bf00      	nop
 8012064:	3720      	adds	r7, #32
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	bf00      	nop
 801206c:	24009990 	.word	0x24009990
 8012070:	240099f8 	.word	0x240099f8
 8012074:	24009a60 	.word	0x24009a60

08012078 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012080:	f001 fa72 	bl	8013568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012084:	4b2d      	ldr	r3, [pc, #180]	@ (801213c <prvAddNewTaskToReadyList+0xc4>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	3301      	adds	r3, #1
 801208a:	4a2c      	ldr	r2, [pc, #176]	@ (801213c <prvAddNewTaskToReadyList+0xc4>)
 801208c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801208e:	4b2c      	ldr	r3, [pc, #176]	@ (8012140 <prvAddNewTaskToReadyList+0xc8>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d109      	bne.n	80120aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012096:	4a2a      	ldr	r2, [pc, #168]	@ (8012140 <prvAddNewTaskToReadyList+0xc8>)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801209c:	4b27      	ldr	r3, [pc, #156]	@ (801213c <prvAddNewTaskToReadyList+0xc4>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d110      	bne.n	80120c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80120a4:	f000 fc2e 	bl	8012904 <prvInitialiseTaskLists>
 80120a8:	e00d      	b.n	80120c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80120aa:	4b26      	ldr	r3, [pc, #152]	@ (8012144 <prvAddNewTaskToReadyList+0xcc>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d109      	bne.n	80120c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80120b2:	4b23      	ldr	r3, [pc, #140]	@ (8012140 <prvAddNewTaskToReadyList+0xc8>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120bc:	429a      	cmp	r2, r3
 80120be:	d802      	bhi.n	80120c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80120c0:	4a1f      	ldr	r2, [pc, #124]	@ (8012140 <prvAddNewTaskToReadyList+0xc8>)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80120c6:	4b20      	ldr	r3, [pc, #128]	@ (8012148 <prvAddNewTaskToReadyList+0xd0>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	3301      	adds	r3, #1
 80120cc:	4a1e      	ldr	r2, [pc, #120]	@ (8012148 <prvAddNewTaskToReadyList+0xd0>)
 80120ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80120d0:	4b1d      	ldr	r3, [pc, #116]	@ (8012148 <prvAddNewTaskToReadyList+0xd0>)
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120dc:	4b1b      	ldr	r3, [pc, #108]	@ (801214c <prvAddNewTaskToReadyList+0xd4>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d903      	bls.n	80120ec <prvAddNewTaskToReadyList+0x74>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e8:	4a18      	ldr	r2, [pc, #96]	@ (801214c <prvAddNewTaskToReadyList+0xd4>)
 80120ea:	6013      	str	r3, [r2, #0]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120f0:	4613      	mov	r3, r2
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	4413      	add	r3, r2
 80120f6:	009b      	lsls	r3, r3, #2
 80120f8:	4a15      	ldr	r2, [pc, #84]	@ (8012150 <prvAddNewTaskToReadyList+0xd8>)
 80120fa:	441a      	add	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	3304      	adds	r3, #4
 8012100:	4619      	mov	r1, r3
 8012102:	4610      	mov	r0, r2
 8012104:	f7ff f8e9 	bl	80112da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012108:	f001 fa60 	bl	80135cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801210c:	4b0d      	ldr	r3, [pc, #52]	@ (8012144 <prvAddNewTaskToReadyList+0xcc>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d00e      	beq.n	8012132 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012114:	4b0a      	ldr	r3, [pc, #40]	@ (8012140 <prvAddNewTaskToReadyList+0xc8>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801211e:	429a      	cmp	r2, r3
 8012120:	d207      	bcs.n	8012132 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012122:	4b0c      	ldr	r3, [pc, #48]	@ (8012154 <prvAddNewTaskToReadyList+0xdc>)
 8012124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012128:	601a      	str	r2, [r3, #0]
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012132:	bf00      	nop
 8012134:	3708      	adds	r7, #8
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	240015fc 	.word	0x240015fc
 8012140:	24001128 	.word	0x24001128
 8012144:	24001608 	.word	0x24001608
 8012148:	24001618 	.word	0x24001618
 801214c:	24001604 	.word	0x24001604
 8012150:	2400112c 	.word	0x2400112c
 8012154:	e000ed04 	.word	0xe000ed04

08012158 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012160:	2300      	movs	r3, #0
 8012162:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d018      	beq.n	801219c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801216a:	4b14      	ldr	r3, [pc, #80]	@ (80121bc <vTaskDelay+0x64>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00b      	beq.n	801218a <vTaskDelay+0x32>
	__asm volatile
 8012172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	60bb      	str	r3, [r7, #8]
}
 8012184:	bf00      	nop
 8012186:	bf00      	nop
 8012188:	e7fd      	b.n	8012186 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801218a:	f000 f88b 	bl	80122a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801218e:	2100      	movs	r1, #0
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 fd09 	bl	8012ba8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012196:	f000 f893 	bl	80122c0 <xTaskResumeAll>
 801219a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d107      	bne.n	80121b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80121a2:	4b07      	ldr	r3, [pc, #28]	@ (80121c0 <vTaskDelay+0x68>)
 80121a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121a8:	601a      	str	r2, [r3, #0]
 80121aa:	f3bf 8f4f 	dsb	sy
 80121ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80121b2:	bf00      	nop
 80121b4:	3710      	adds	r7, #16
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	24001624 	.word	0x24001624
 80121c0:	e000ed04 	.word	0xe000ed04

080121c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b08a      	sub	sp, #40	@ 0x28
 80121c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80121ca:	2300      	movs	r3, #0
 80121cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80121ce:	2300      	movs	r3, #0
 80121d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80121d2:	463a      	mov	r2, r7
 80121d4:	1d39      	adds	r1, r7, #4
 80121d6:	f107 0308 	add.w	r3, r7, #8
 80121da:	4618      	mov	r0, r3
 80121dc:	f7ff f81c 	bl	8011218 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80121e0:	6839      	ldr	r1, [r7, #0]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	9202      	str	r2, [sp, #8]
 80121e8:	9301      	str	r3, [sp, #4]
 80121ea:	2300      	movs	r3, #0
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	2300      	movs	r3, #0
 80121f0:	460a      	mov	r2, r1
 80121f2:	4924      	ldr	r1, [pc, #144]	@ (8012284 <vTaskStartScheduler+0xc0>)
 80121f4:	4824      	ldr	r0, [pc, #144]	@ (8012288 <vTaskStartScheduler+0xc4>)
 80121f6:	f7ff fdf1 	bl	8011ddc <xTaskCreateStatic>
 80121fa:	4603      	mov	r3, r0
 80121fc:	4a23      	ldr	r2, [pc, #140]	@ (801228c <vTaskStartScheduler+0xc8>)
 80121fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012200:	4b22      	ldr	r3, [pc, #136]	@ (801228c <vTaskStartScheduler+0xc8>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012208:	2301      	movs	r3, #1
 801220a:	617b      	str	r3, [r7, #20]
 801220c:	e001      	b.n	8012212 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801220e:	2300      	movs	r3, #0
 8012210:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	2b01      	cmp	r3, #1
 8012216:	d102      	bne.n	801221e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012218:	f000 fd1a 	bl	8012c50 <xTimerCreateTimerTask>
 801221c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	2b01      	cmp	r3, #1
 8012222:	d11b      	bne.n	801225c <vTaskStartScheduler+0x98>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	613b      	str	r3, [r7, #16]
}
 8012236:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012238:	4b15      	ldr	r3, [pc, #84]	@ (8012290 <vTaskStartScheduler+0xcc>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	3354      	adds	r3, #84	@ 0x54
 801223e:	4a15      	ldr	r2, [pc, #84]	@ (8012294 <vTaskStartScheduler+0xd0>)
 8012240:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012242:	4b15      	ldr	r3, [pc, #84]	@ (8012298 <vTaskStartScheduler+0xd4>)
 8012244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012248:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801224a:	4b14      	ldr	r3, [pc, #80]	@ (801229c <vTaskStartScheduler+0xd8>)
 801224c:	2201      	movs	r2, #1
 801224e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012250:	4b13      	ldr	r3, [pc, #76]	@ (80122a0 <vTaskStartScheduler+0xdc>)
 8012252:	2200      	movs	r2, #0
 8012254:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012256:	f001 f8e3 	bl	8013420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801225a:	e00f      	b.n	801227c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012262:	d10b      	bne.n	801227c <vTaskStartScheduler+0xb8>
	__asm volatile
 8012264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012268:	f383 8811 	msr	BASEPRI, r3
 801226c:	f3bf 8f6f 	isb	sy
 8012270:	f3bf 8f4f 	dsb	sy
 8012274:	60fb      	str	r3, [r7, #12]
}
 8012276:	bf00      	nop
 8012278:	bf00      	nop
 801227a:	e7fd      	b.n	8012278 <vTaskStartScheduler+0xb4>
}
 801227c:	bf00      	nop
 801227e:	3718      	adds	r7, #24
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	08015638 	.word	0x08015638
 8012288:	080128d5 	.word	0x080128d5
 801228c:	24001620 	.word	0x24001620
 8012290:	24001128 	.word	0x24001128
 8012294:	24000144 	.word	0x24000144
 8012298:	2400161c 	.word	0x2400161c
 801229c:	24001608 	.word	0x24001608
 80122a0:	24001600 	.word	0x24001600

080122a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80122a4:	b480      	push	{r7}
 80122a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80122a8:	4b04      	ldr	r3, [pc, #16]	@ (80122bc <vTaskSuspendAll+0x18>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	3301      	adds	r3, #1
 80122ae:	4a03      	ldr	r2, [pc, #12]	@ (80122bc <vTaskSuspendAll+0x18>)
 80122b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80122b2:	bf00      	nop
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr
 80122bc:	24001624 	.word	0x24001624

080122c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80122c6:	2300      	movs	r3, #0
 80122c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80122ca:	2300      	movs	r3, #0
 80122cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80122ce:	4b42      	ldr	r3, [pc, #264]	@ (80123d8 <xTaskResumeAll+0x118>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d10b      	bne.n	80122ee <xTaskResumeAll+0x2e>
	__asm volatile
 80122d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122da:	f383 8811 	msr	BASEPRI, r3
 80122de:	f3bf 8f6f 	isb	sy
 80122e2:	f3bf 8f4f 	dsb	sy
 80122e6:	603b      	str	r3, [r7, #0]
}
 80122e8:	bf00      	nop
 80122ea:	bf00      	nop
 80122ec:	e7fd      	b.n	80122ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80122ee:	f001 f93b 	bl	8013568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80122f2:	4b39      	ldr	r3, [pc, #228]	@ (80123d8 <xTaskResumeAll+0x118>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3b01      	subs	r3, #1
 80122f8:	4a37      	ldr	r2, [pc, #220]	@ (80123d8 <xTaskResumeAll+0x118>)
 80122fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122fc:	4b36      	ldr	r3, [pc, #216]	@ (80123d8 <xTaskResumeAll+0x118>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d162      	bne.n	80123ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012304:	4b35      	ldr	r3, [pc, #212]	@ (80123dc <xTaskResumeAll+0x11c>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d05e      	beq.n	80123ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801230c:	e02f      	b.n	801236e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801230e:	4b34      	ldr	r3, [pc, #208]	@ (80123e0 <xTaskResumeAll+0x120>)
 8012310:	68db      	ldr	r3, [r3, #12]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	3318      	adds	r3, #24
 801231a:	4618      	mov	r0, r3
 801231c:	f7ff f83a 	bl	8011394 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	3304      	adds	r3, #4
 8012324:	4618      	mov	r0, r3
 8012326:	f7ff f835 	bl	8011394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801232e:	4b2d      	ldr	r3, [pc, #180]	@ (80123e4 <xTaskResumeAll+0x124>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	429a      	cmp	r2, r3
 8012334:	d903      	bls.n	801233e <xTaskResumeAll+0x7e>
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801233a:	4a2a      	ldr	r2, [pc, #168]	@ (80123e4 <xTaskResumeAll+0x124>)
 801233c:	6013      	str	r3, [r2, #0]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012342:	4613      	mov	r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	4413      	add	r3, r2
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	4a27      	ldr	r2, [pc, #156]	@ (80123e8 <xTaskResumeAll+0x128>)
 801234c:	441a      	add	r2, r3
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3304      	adds	r3, #4
 8012352:	4619      	mov	r1, r3
 8012354:	4610      	mov	r0, r2
 8012356:	f7fe ffc0 	bl	80112da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801235e:	4b23      	ldr	r3, [pc, #140]	@ (80123ec <xTaskResumeAll+0x12c>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012364:	429a      	cmp	r2, r3
 8012366:	d302      	bcc.n	801236e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012368:	4b21      	ldr	r3, [pc, #132]	@ (80123f0 <xTaskResumeAll+0x130>)
 801236a:	2201      	movs	r2, #1
 801236c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801236e:	4b1c      	ldr	r3, [pc, #112]	@ (80123e0 <xTaskResumeAll+0x120>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1cb      	bne.n	801230e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d001      	beq.n	8012380 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801237c:	f000 fb66 	bl	8012a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012380:	4b1c      	ldr	r3, [pc, #112]	@ (80123f4 <xTaskResumeAll+0x134>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d010      	beq.n	80123ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801238c:	f000 f846 	bl	801241c <xTaskIncrementTick>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d002      	beq.n	801239c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012396:	4b16      	ldr	r3, [pc, #88]	@ (80123f0 <xTaskResumeAll+0x130>)
 8012398:	2201      	movs	r2, #1
 801239a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	3b01      	subs	r3, #1
 80123a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1f1      	bne.n	801238c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80123a8:	4b12      	ldr	r3, [pc, #72]	@ (80123f4 <xTaskResumeAll+0x134>)
 80123aa:	2200      	movs	r2, #0
 80123ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80123ae:	4b10      	ldr	r3, [pc, #64]	@ (80123f0 <xTaskResumeAll+0x130>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d009      	beq.n	80123ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80123b6:	2301      	movs	r3, #1
 80123b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80123ba:	4b0f      	ldr	r3, [pc, #60]	@ (80123f8 <xTaskResumeAll+0x138>)
 80123bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123c0:	601a      	str	r2, [r3, #0]
 80123c2:	f3bf 8f4f 	dsb	sy
 80123c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80123ca:	f001 f8ff 	bl	80135cc <vPortExitCritical>

	return xAlreadyYielded;
 80123ce:	68bb      	ldr	r3, [r7, #8]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	24001624 	.word	0x24001624
 80123dc:	240015fc 	.word	0x240015fc
 80123e0:	240015bc 	.word	0x240015bc
 80123e4:	24001604 	.word	0x24001604
 80123e8:	2400112c 	.word	0x2400112c
 80123ec:	24001128 	.word	0x24001128
 80123f0:	24001610 	.word	0x24001610
 80123f4:	2400160c 	.word	0x2400160c
 80123f8:	e000ed04 	.word	0xe000ed04

080123fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012402:	4b05      	ldr	r3, [pc, #20]	@ (8012418 <xTaskGetTickCount+0x1c>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012408:	687b      	ldr	r3, [r7, #4]
}
 801240a:	4618      	mov	r0, r3
 801240c:	370c      	adds	r7, #12
 801240e:	46bd      	mov	sp, r7
 8012410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012414:	4770      	bx	lr
 8012416:	bf00      	nop
 8012418:	24001600 	.word	0x24001600

0801241c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b086      	sub	sp, #24
 8012420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012422:	2300      	movs	r3, #0
 8012424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012426:	4b4f      	ldr	r3, [pc, #316]	@ (8012564 <xTaskIncrementTick+0x148>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	f040 8090 	bne.w	8012550 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012430:	4b4d      	ldr	r3, [pc, #308]	@ (8012568 <xTaskIncrementTick+0x14c>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	3301      	adds	r3, #1
 8012436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012438:	4a4b      	ldr	r2, [pc, #300]	@ (8012568 <xTaskIncrementTick+0x14c>)
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d121      	bne.n	8012488 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012444:	4b49      	ldr	r3, [pc, #292]	@ (801256c <xTaskIncrementTick+0x150>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00b      	beq.n	8012466 <xTaskIncrementTick+0x4a>
	__asm volatile
 801244e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012452:	f383 8811 	msr	BASEPRI, r3
 8012456:	f3bf 8f6f 	isb	sy
 801245a:	f3bf 8f4f 	dsb	sy
 801245e:	603b      	str	r3, [r7, #0]
}
 8012460:	bf00      	nop
 8012462:	bf00      	nop
 8012464:	e7fd      	b.n	8012462 <xTaskIncrementTick+0x46>
 8012466:	4b41      	ldr	r3, [pc, #260]	@ (801256c <xTaskIncrementTick+0x150>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	60fb      	str	r3, [r7, #12]
 801246c:	4b40      	ldr	r3, [pc, #256]	@ (8012570 <xTaskIncrementTick+0x154>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4a3e      	ldr	r2, [pc, #248]	@ (801256c <xTaskIncrementTick+0x150>)
 8012472:	6013      	str	r3, [r2, #0]
 8012474:	4a3e      	ldr	r2, [pc, #248]	@ (8012570 <xTaskIncrementTick+0x154>)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	6013      	str	r3, [r2, #0]
 801247a:	4b3e      	ldr	r3, [pc, #248]	@ (8012574 <xTaskIncrementTick+0x158>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	3301      	adds	r3, #1
 8012480:	4a3c      	ldr	r2, [pc, #240]	@ (8012574 <xTaskIncrementTick+0x158>)
 8012482:	6013      	str	r3, [r2, #0]
 8012484:	f000 fae2 	bl	8012a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012488:	4b3b      	ldr	r3, [pc, #236]	@ (8012578 <xTaskIncrementTick+0x15c>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	693a      	ldr	r2, [r7, #16]
 801248e:	429a      	cmp	r2, r3
 8012490:	d349      	bcc.n	8012526 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012492:	4b36      	ldr	r3, [pc, #216]	@ (801256c <xTaskIncrementTick+0x150>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d104      	bne.n	80124a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801249c:	4b36      	ldr	r3, [pc, #216]	@ (8012578 <xTaskIncrementTick+0x15c>)
 801249e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80124a2:	601a      	str	r2, [r3, #0]
					break;
 80124a4:	e03f      	b.n	8012526 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124a6:	4b31      	ldr	r3, [pc, #196]	@ (801256c <xTaskIncrementTick+0x150>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80124b6:	693a      	ldr	r2, [r7, #16]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d203      	bcs.n	80124c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80124be:	4a2e      	ldr	r2, [pc, #184]	@ (8012578 <xTaskIncrementTick+0x15c>)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80124c4:	e02f      	b.n	8012526 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	3304      	adds	r3, #4
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fe ff62 	bl	8011394 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d004      	beq.n	80124e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	3318      	adds	r3, #24
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fe ff59 	bl	8011394 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124e6:	4b25      	ldr	r3, [pc, #148]	@ (801257c <xTaskIncrementTick+0x160>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d903      	bls.n	80124f6 <xTaskIncrementTick+0xda>
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124f2:	4a22      	ldr	r2, [pc, #136]	@ (801257c <xTaskIncrementTick+0x160>)
 80124f4:	6013      	str	r3, [r2, #0]
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124fa:	4613      	mov	r3, r2
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	4413      	add	r3, r2
 8012500:	009b      	lsls	r3, r3, #2
 8012502:	4a1f      	ldr	r2, [pc, #124]	@ (8012580 <xTaskIncrementTick+0x164>)
 8012504:	441a      	add	r2, r3
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	3304      	adds	r3, #4
 801250a:	4619      	mov	r1, r3
 801250c:	4610      	mov	r0, r2
 801250e:	f7fe fee4 	bl	80112da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012516:	4b1b      	ldr	r3, [pc, #108]	@ (8012584 <xTaskIncrementTick+0x168>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801251c:	429a      	cmp	r2, r3
 801251e:	d3b8      	bcc.n	8012492 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012520:	2301      	movs	r3, #1
 8012522:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012524:	e7b5      	b.n	8012492 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012526:	4b17      	ldr	r3, [pc, #92]	@ (8012584 <xTaskIncrementTick+0x168>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801252c:	4914      	ldr	r1, [pc, #80]	@ (8012580 <xTaskIncrementTick+0x164>)
 801252e:	4613      	mov	r3, r2
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	440b      	add	r3, r1
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2b01      	cmp	r3, #1
 801253c:	d901      	bls.n	8012542 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801253e:	2301      	movs	r3, #1
 8012540:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012542:	4b11      	ldr	r3, [pc, #68]	@ (8012588 <xTaskIncrementTick+0x16c>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d007      	beq.n	801255a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801254a:	2301      	movs	r3, #1
 801254c:	617b      	str	r3, [r7, #20]
 801254e:	e004      	b.n	801255a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012550:	4b0e      	ldr	r3, [pc, #56]	@ (801258c <xTaskIncrementTick+0x170>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	3301      	adds	r3, #1
 8012556:	4a0d      	ldr	r2, [pc, #52]	@ (801258c <xTaskIncrementTick+0x170>)
 8012558:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801255a:	697b      	ldr	r3, [r7, #20]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3718      	adds	r7, #24
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	24001624 	.word	0x24001624
 8012568:	24001600 	.word	0x24001600
 801256c:	240015b4 	.word	0x240015b4
 8012570:	240015b8 	.word	0x240015b8
 8012574:	24001614 	.word	0x24001614
 8012578:	2400161c 	.word	0x2400161c
 801257c:	24001604 	.word	0x24001604
 8012580:	2400112c 	.word	0x2400112c
 8012584:	24001128 	.word	0x24001128
 8012588:	24001610 	.word	0x24001610
 801258c:	2400160c 	.word	0x2400160c

08012590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012590:	b480      	push	{r7}
 8012592:	b085      	sub	sp, #20
 8012594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012596:	4b2b      	ldr	r3, [pc, #172]	@ (8012644 <vTaskSwitchContext+0xb4>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d003      	beq.n	80125a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801259e:	4b2a      	ldr	r3, [pc, #168]	@ (8012648 <vTaskSwitchContext+0xb8>)
 80125a0:	2201      	movs	r2, #1
 80125a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80125a4:	e047      	b.n	8012636 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80125a6:	4b28      	ldr	r3, [pc, #160]	@ (8012648 <vTaskSwitchContext+0xb8>)
 80125a8:	2200      	movs	r2, #0
 80125aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125ac:	4b27      	ldr	r3, [pc, #156]	@ (801264c <vTaskSwitchContext+0xbc>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	60fb      	str	r3, [r7, #12]
 80125b2:	e011      	b.n	80125d8 <vTaskSwitchContext+0x48>
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10b      	bne.n	80125d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80125ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	607b      	str	r3, [r7, #4]
}
 80125cc:	bf00      	nop
 80125ce:	bf00      	nop
 80125d0:	e7fd      	b.n	80125ce <vTaskSwitchContext+0x3e>
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	3b01      	subs	r3, #1
 80125d6:	60fb      	str	r3, [r7, #12]
 80125d8:	491d      	ldr	r1, [pc, #116]	@ (8012650 <vTaskSwitchContext+0xc0>)
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	4613      	mov	r3, r2
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	4413      	add	r3, r2
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	440b      	add	r3, r1
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d0e3      	beq.n	80125b4 <vTaskSwitchContext+0x24>
 80125ec:	68fa      	ldr	r2, [r7, #12]
 80125ee:	4613      	mov	r3, r2
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	4413      	add	r3, r2
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	4a16      	ldr	r2, [pc, #88]	@ (8012650 <vTaskSwitchContext+0xc0>)
 80125f8:	4413      	add	r3, r2
 80125fa:	60bb      	str	r3, [r7, #8]
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	685a      	ldr	r2, [r3, #4]
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	605a      	str	r2, [r3, #4]
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	685a      	ldr	r2, [r3, #4]
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	3308      	adds	r3, #8
 801260e:	429a      	cmp	r2, r3
 8012610:	d104      	bne.n	801261c <vTaskSwitchContext+0x8c>
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	685a      	ldr	r2, [r3, #4]
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	605a      	str	r2, [r3, #4]
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	68db      	ldr	r3, [r3, #12]
 8012622:	4a0c      	ldr	r2, [pc, #48]	@ (8012654 <vTaskSwitchContext+0xc4>)
 8012624:	6013      	str	r3, [r2, #0]
 8012626:	4a09      	ldr	r2, [pc, #36]	@ (801264c <vTaskSwitchContext+0xbc>)
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801262c:	4b09      	ldr	r3, [pc, #36]	@ (8012654 <vTaskSwitchContext+0xc4>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	3354      	adds	r3, #84	@ 0x54
 8012632:	4a09      	ldr	r2, [pc, #36]	@ (8012658 <vTaskSwitchContext+0xc8>)
 8012634:	6013      	str	r3, [r2, #0]
}
 8012636:	bf00      	nop
 8012638:	3714      	adds	r7, #20
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	24001624 	.word	0x24001624
 8012648:	24001610 	.word	0x24001610
 801264c:	24001604 	.word	0x24001604
 8012650:	2400112c 	.word	0x2400112c
 8012654:	24001128 	.word	0x24001128
 8012658:	24000144 	.word	0x24000144

0801265c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d10b      	bne.n	8012684 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801266c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012670:	f383 8811 	msr	BASEPRI, r3
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	60fb      	str	r3, [r7, #12]
}
 801267e:	bf00      	nop
 8012680:	bf00      	nop
 8012682:	e7fd      	b.n	8012680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012684:	4b07      	ldr	r3, [pc, #28]	@ (80126a4 <vTaskPlaceOnEventList+0x48>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	3318      	adds	r3, #24
 801268a:	4619      	mov	r1, r3
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7fe fe48 	bl	8011322 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012692:	2101      	movs	r1, #1
 8012694:	6838      	ldr	r0, [r7, #0]
 8012696:	f000 fa87 	bl	8012ba8 <prvAddCurrentTaskToDelayedList>
}
 801269a:	bf00      	nop
 801269c:	3710      	adds	r7, #16
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	24001128 	.word	0x24001128

080126a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b086      	sub	sp, #24
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10b      	bne.n	80126d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80126ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	617b      	str	r3, [r7, #20]
}
 80126cc:	bf00      	nop
 80126ce:	bf00      	nop
 80126d0:	e7fd      	b.n	80126ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126d2:	4b0a      	ldr	r3, [pc, #40]	@ (80126fc <vTaskPlaceOnEventListRestricted+0x54>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	3318      	adds	r3, #24
 80126d8:	4619      	mov	r1, r3
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f7fe fdfd 	bl	80112da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d002      	beq.n	80126ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80126e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80126ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80126ec:	6879      	ldr	r1, [r7, #4]
 80126ee:	68b8      	ldr	r0, [r7, #8]
 80126f0:	f000 fa5a 	bl	8012ba8 <prvAddCurrentTaskToDelayedList>
	}
 80126f4:	bf00      	nop
 80126f6:	3718      	adds	r7, #24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	24001128 	.word	0x24001128

08012700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b086      	sub	sp, #24
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d10b      	bne.n	801272e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801271a:	f383 8811 	msr	BASEPRI, r3
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	60fb      	str	r3, [r7, #12]
}
 8012728:	bf00      	nop
 801272a:	bf00      	nop
 801272c:	e7fd      	b.n	801272a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	3318      	adds	r3, #24
 8012732:	4618      	mov	r0, r3
 8012734:	f7fe fe2e 	bl	8011394 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012738:	4b1d      	ldr	r3, [pc, #116]	@ (80127b0 <xTaskRemoveFromEventList+0xb0>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d11d      	bne.n	801277c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	3304      	adds	r3, #4
 8012744:	4618      	mov	r0, r3
 8012746:	f7fe fe25 	bl	8011394 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801274e:	4b19      	ldr	r3, [pc, #100]	@ (80127b4 <xTaskRemoveFromEventList+0xb4>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	429a      	cmp	r2, r3
 8012754:	d903      	bls.n	801275e <xTaskRemoveFromEventList+0x5e>
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801275a:	4a16      	ldr	r2, [pc, #88]	@ (80127b4 <xTaskRemoveFromEventList+0xb4>)
 801275c:	6013      	str	r3, [r2, #0]
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012762:	4613      	mov	r3, r2
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	4a13      	ldr	r2, [pc, #76]	@ (80127b8 <xTaskRemoveFromEventList+0xb8>)
 801276c:	441a      	add	r2, r3
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	3304      	adds	r3, #4
 8012772:	4619      	mov	r1, r3
 8012774:	4610      	mov	r0, r2
 8012776:	f7fe fdb0 	bl	80112da <vListInsertEnd>
 801277a:	e005      	b.n	8012788 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	3318      	adds	r3, #24
 8012780:	4619      	mov	r1, r3
 8012782:	480e      	ldr	r0, [pc, #56]	@ (80127bc <xTaskRemoveFromEventList+0xbc>)
 8012784:	f7fe fda9 	bl	80112da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801278c:	4b0c      	ldr	r3, [pc, #48]	@ (80127c0 <xTaskRemoveFromEventList+0xc0>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012792:	429a      	cmp	r2, r3
 8012794:	d905      	bls.n	80127a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012796:	2301      	movs	r3, #1
 8012798:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801279a:	4b0a      	ldr	r3, [pc, #40]	@ (80127c4 <xTaskRemoveFromEventList+0xc4>)
 801279c:	2201      	movs	r2, #1
 801279e:	601a      	str	r2, [r3, #0]
 80127a0:	e001      	b.n	80127a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80127a2:	2300      	movs	r3, #0
 80127a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80127a6:	697b      	ldr	r3, [r7, #20]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3718      	adds	r7, #24
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	24001624 	.word	0x24001624
 80127b4:	24001604 	.word	0x24001604
 80127b8:	2400112c 	.word	0x2400112c
 80127bc:	240015bc 	.word	0x240015bc
 80127c0:	24001128 	.word	0x24001128
 80127c4:	24001610 	.word	0x24001610

080127c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80127c8:	b480      	push	{r7}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80127d0:	4b06      	ldr	r3, [pc, #24]	@ (80127ec <vTaskInternalSetTimeOutState+0x24>)
 80127d2:	681a      	ldr	r2, [r3, #0]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80127d8:	4b05      	ldr	r3, [pc, #20]	@ (80127f0 <vTaskInternalSetTimeOutState+0x28>)
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	605a      	str	r2, [r3, #4]
}
 80127e0:	bf00      	nop
 80127e2:	370c      	adds	r7, #12
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr
 80127ec:	24001614 	.word	0x24001614
 80127f0:	24001600 	.word	0x24001600

080127f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b088      	sub	sp, #32
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d10b      	bne.n	801281c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012808:	f383 8811 	msr	BASEPRI, r3
 801280c:	f3bf 8f6f 	isb	sy
 8012810:	f3bf 8f4f 	dsb	sy
 8012814:	613b      	str	r3, [r7, #16]
}
 8012816:	bf00      	nop
 8012818:	bf00      	nop
 801281a:	e7fd      	b.n	8012818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d10b      	bne.n	801283a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012826:	f383 8811 	msr	BASEPRI, r3
 801282a:	f3bf 8f6f 	isb	sy
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	60fb      	str	r3, [r7, #12]
}
 8012834:	bf00      	nop
 8012836:	bf00      	nop
 8012838:	e7fd      	b.n	8012836 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801283a:	f000 fe95 	bl	8013568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801283e:	4b1d      	ldr	r3, [pc, #116]	@ (80128b4 <xTaskCheckForTimeOut+0xc0>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	69ba      	ldr	r2, [r7, #24]
 801284a:	1ad3      	subs	r3, r2, r3
 801284c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012856:	d102      	bne.n	801285e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012858:	2300      	movs	r3, #0
 801285a:	61fb      	str	r3, [r7, #28]
 801285c:	e023      	b.n	80128a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	4b15      	ldr	r3, [pc, #84]	@ (80128b8 <xTaskCheckForTimeOut+0xc4>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	429a      	cmp	r2, r3
 8012868:	d007      	beq.n	801287a <xTaskCheckForTimeOut+0x86>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	69ba      	ldr	r2, [r7, #24]
 8012870:	429a      	cmp	r2, r3
 8012872:	d302      	bcc.n	801287a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012874:	2301      	movs	r3, #1
 8012876:	61fb      	str	r3, [r7, #28]
 8012878:	e015      	b.n	80128a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	697a      	ldr	r2, [r7, #20]
 8012880:	429a      	cmp	r2, r3
 8012882:	d20b      	bcs.n	801289c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	1ad2      	subs	r2, r2, r3
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f7ff ff99 	bl	80127c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012896:	2300      	movs	r3, #0
 8012898:	61fb      	str	r3, [r7, #28]
 801289a:	e004      	b.n	80128a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	2200      	movs	r2, #0
 80128a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80128a2:	2301      	movs	r3, #1
 80128a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80128a6:	f000 fe91 	bl	80135cc <vPortExitCritical>

	return xReturn;
 80128aa:	69fb      	ldr	r3, [r7, #28]
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3720      	adds	r7, #32
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	24001600 	.word	0x24001600
 80128b8:	24001614 	.word	0x24001614

080128bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80128bc:	b480      	push	{r7}
 80128be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80128c0:	4b03      	ldr	r3, [pc, #12]	@ (80128d0 <vTaskMissedYield+0x14>)
 80128c2:	2201      	movs	r2, #1
 80128c4:	601a      	str	r2, [r3, #0]
}
 80128c6:	bf00      	nop
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	24001610 	.word	0x24001610

080128d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80128dc:	f000 f852 	bl	8012984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80128e0:	4b06      	ldr	r3, [pc, #24]	@ (80128fc <prvIdleTask+0x28>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d9f9      	bls.n	80128dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80128e8:	4b05      	ldr	r3, [pc, #20]	@ (8012900 <prvIdleTask+0x2c>)
 80128ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128ee:	601a      	str	r2, [r3, #0]
 80128f0:	f3bf 8f4f 	dsb	sy
 80128f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80128f8:	e7f0      	b.n	80128dc <prvIdleTask+0x8>
 80128fa:	bf00      	nop
 80128fc:	2400112c 	.word	0x2400112c
 8012900:	e000ed04 	.word	0xe000ed04

08012904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801290a:	2300      	movs	r3, #0
 801290c:	607b      	str	r3, [r7, #4]
 801290e:	e00c      	b.n	801292a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	4613      	mov	r3, r2
 8012914:	009b      	lsls	r3, r3, #2
 8012916:	4413      	add	r3, r2
 8012918:	009b      	lsls	r3, r3, #2
 801291a:	4a12      	ldr	r2, [pc, #72]	@ (8012964 <prvInitialiseTaskLists+0x60>)
 801291c:	4413      	add	r3, r2
 801291e:	4618      	mov	r0, r3
 8012920:	f7fe fcae 	bl	8011280 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	3301      	adds	r3, #1
 8012928:	607b      	str	r3, [r7, #4]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2b37      	cmp	r3, #55	@ 0x37
 801292e:	d9ef      	bls.n	8012910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012930:	480d      	ldr	r0, [pc, #52]	@ (8012968 <prvInitialiseTaskLists+0x64>)
 8012932:	f7fe fca5 	bl	8011280 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012936:	480d      	ldr	r0, [pc, #52]	@ (801296c <prvInitialiseTaskLists+0x68>)
 8012938:	f7fe fca2 	bl	8011280 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801293c:	480c      	ldr	r0, [pc, #48]	@ (8012970 <prvInitialiseTaskLists+0x6c>)
 801293e:	f7fe fc9f 	bl	8011280 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012942:	480c      	ldr	r0, [pc, #48]	@ (8012974 <prvInitialiseTaskLists+0x70>)
 8012944:	f7fe fc9c 	bl	8011280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012948:	480b      	ldr	r0, [pc, #44]	@ (8012978 <prvInitialiseTaskLists+0x74>)
 801294a:	f7fe fc99 	bl	8011280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801294e:	4b0b      	ldr	r3, [pc, #44]	@ (801297c <prvInitialiseTaskLists+0x78>)
 8012950:	4a05      	ldr	r2, [pc, #20]	@ (8012968 <prvInitialiseTaskLists+0x64>)
 8012952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012954:	4b0a      	ldr	r3, [pc, #40]	@ (8012980 <prvInitialiseTaskLists+0x7c>)
 8012956:	4a05      	ldr	r2, [pc, #20]	@ (801296c <prvInitialiseTaskLists+0x68>)
 8012958:	601a      	str	r2, [r3, #0]
}
 801295a:	bf00      	nop
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	2400112c 	.word	0x2400112c
 8012968:	2400158c 	.word	0x2400158c
 801296c:	240015a0 	.word	0x240015a0
 8012970:	240015bc 	.word	0x240015bc
 8012974:	240015d0 	.word	0x240015d0
 8012978:	240015e8 	.word	0x240015e8
 801297c:	240015b4 	.word	0x240015b4
 8012980:	240015b8 	.word	0x240015b8

08012984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801298a:	e019      	b.n	80129c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801298c:	f000 fdec 	bl	8013568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012990:	4b10      	ldr	r3, [pc, #64]	@ (80129d4 <prvCheckTasksWaitingTermination+0x50>)
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	3304      	adds	r3, #4
 801299c:	4618      	mov	r0, r3
 801299e:	f7fe fcf9 	bl	8011394 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80129a2:	4b0d      	ldr	r3, [pc, #52]	@ (80129d8 <prvCheckTasksWaitingTermination+0x54>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	3b01      	subs	r3, #1
 80129a8:	4a0b      	ldr	r2, [pc, #44]	@ (80129d8 <prvCheckTasksWaitingTermination+0x54>)
 80129aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80129ac:	4b0b      	ldr	r3, [pc, #44]	@ (80129dc <prvCheckTasksWaitingTermination+0x58>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	3b01      	subs	r3, #1
 80129b2:	4a0a      	ldr	r2, [pc, #40]	@ (80129dc <prvCheckTasksWaitingTermination+0x58>)
 80129b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80129b6:	f000 fe09 	bl	80135cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 f810 	bl	80129e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80129c0:	4b06      	ldr	r3, [pc, #24]	@ (80129dc <prvCheckTasksWaitingTermination+0x58>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d1e1      	bne.n	801298c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80129c8:	bf00      	nop
 80129ca:	bf00      	nop
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	240015d0 	.word	0x240015d0
 80129d8:	240015fc 	.word	0x240015fc
 80129dc:	240015e4 	.word	0x240015e4

080129e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b084      	sub	sp, #16
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	3354      	adds	r3, #84	@ 0x54
 80129ec:	4618      	mov	r0, r3
 80129ee:	f001 ffd9 	bl	80149a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d108      	bne.n	8012a0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a00:	4618      	mov	r0, r3
 8012a02:	f000 ffa1 	bl	8013948 <vPortFree>
				vPortFree( pxTCB );
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 ff9e 	bl	8013948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012a0c:	e019      	b.n	8012a42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d103      	bne.n	8012a20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 ff95 	bl	8013948 <vPortFree>
	}
 8012a1e:	e010      	b.n	8012a42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012a26:	2b02      	cmp	r3, #2
 8012a28:	d00b      	beq.n	8012a42 <prvDeleteTCB+0x62>
	__asm volatile
 8012a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a2e:	f383 8811 	msr	BASEPRI, r3
 8012a32:	f3bf 8f6f 	isb	sy
 8012a36:	f3bf 8f4f 	dsb	sy
 8012a3a:	60fb      	str	r3, [r7, #12]
}
 8012a3c:	bf00      	nop
 8012a3e:	bf00      	nop
 8012a40:	e7fd      	b.n	8012a3e <prvDeleteTCB+0x5e>
	}
 8012a42:	bf00      	nop
 8012a44:	3710      	adds	r7, #16
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
	...

08012a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a52:	4b0c      	ldr	r3, [pc, #48]	@ (8012a84 <prvResetNextTaskUnblockTime+0x38>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d104      	bne.n	8012a66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8012a88 <prvResetNextTaskUnblockTime+0x3c>)
 8012a5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012a64:	e008      	b.n	8012a78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a66:	4b07      	ldr	r3, [pc, #28]	@ (8012a84 <prvResetNextTaskUnblockTime+0x38>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	4a04      	ldr	r2, [pc, #16]	@ (8012a88 <prvResetNextTaskUnblockTime+0x3c>)
 8012a76:	6013      	str	r3, [r2, #0]
}
 8012a78:	bf00      	nop
 8012a7a:	370c      	adds	r7, #12
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr
 8012a84:	240015b4 	.word	0x240015b4
 8012a88:	2400161c 	.word	0x2400161c

08012a8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012a92:	4b0b      	ldr	r3, [pc, #44]	@ (8012ac0 <xTaskGetSchedulerState+0x34>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d102      	bne.n	8012aa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	607b      	str	r3, [r7, #4]
 8012a9e:	e008      	b.n	8012ab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012aa0:	4b08      	ldr	r3, [pc, #32]	@ (8012ac4 <xTaskGetSchedulerState+0x38>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d102      	bne.n	8012aae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012aa8:	2302      	movs	r3, #2
 8012aaa:	607b      	str	r3, [r7, #4]
 8012aac:	e001      	b.n	8012ab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012ab2:	687b      	ldr	r3, [r7, #4]
	}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	370c      	adds	r7, #12
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr
 8012ac0:	24001608 	.word	0x24001608
 8012ac4:	24001624 	.word	0x24001624

08012ac8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b086      	sub	sp, #24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d058      	beq.n	8012b90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012ade:	4b2f      	ldr	r3, [pc, #188]	@ (8012b9c <xTaskPriorityDisinherit+0xd4>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	693a      	ldr	r2, [r7, #16]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d00b      	beq.n	8012b00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	f3bf 8f4f 	dsb	sy
 8012af8:	60fb      	str	r3, [r7, #12]
}
 8012afa:	bf00      	nop
 8012afc:	bf00      	nop
 8012afe:	e7fd      	b.n	8012afc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10b      	bne.n	8012b20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b0c:	f383 8811 	msr	BASEPRI, r3
 8012b10:	f3bf 8f6f 	isb	sy
 8012b14:	f3bf 8f4f 	dsb	sy
 8012b18:	60bb      	str	r3, [r7, #8]
}
 8012b1a:	bf00      	nop
 8012b1c:	bf00      	nop
 8012b1e:	e7fd      	b.n	8012b1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b24:	1e5a      	subs	r2, r3, #1
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d02c      	beq.n	8012b90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d128      	bne.n	8012b90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	3304      	adds	r3, #4
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fe fc26 	bl	8011394 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b60:	4b0f      	ldr	r3, [pc, #60]	@ (8012ba0 <xTaskPriorityDisinherit+0xd8>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d903      	bls.n	8012b70 <xTaskPriorityDisinherit+0xa8>
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ba0 <xTaskPriorityDisinherit+0xd8>)
 8012b6e:	6013      	str	r3, [r2, #0]
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b74:	4613      	mov	r3, r2
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	4413      	add	r3, r2
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	4a09      	ldr	r2, [pc, #36]	@ (8012ba4 <xTaskPriorityDisinherit+0xdc>)
 8012b7e:	441a      	add	r2, r3
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	3304      	adds	r3, #4
 8012b84:	4619      	mov	r1, r3
 8012b86:	4610      	mov	r0, r2
 8012b88:	f7fe fba7 	bl	80112da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b90:	697b      	ldr	r3, [r7, #20]
	}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3718      	adds	r7, #24
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	24001128 	.word	0x24001128
 8012ba0:	24001604 	.word	0x24001604
 8012ba4:	2400112c 	.word	0x2400112c

08012ba8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012bb2:	4b21      	ldr	r3, [pc, #132]	@ (8012c38 <prvAddCurrentTaskToDelayedList+0x90>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bb8:	4b20      	ldr	r3, [pc, #128]	@ (8012c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	3304      	adds	r3, #4
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fe fbe8 	bl	8011394 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012bca:	d10a      	bne.n	8012be2 <prvAddCurrentTaskToDelayedList+0x3a>
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d007      	beq.n	8012be2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8012c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4619      	mov	r1, r3
 8012bda:	4819      	ldr	r0, [pc, #100]	@ (8012c40 <prvAddCurrentTaskToDelayedList+0x98>)
 8012bdc:	f7fe fb7d 	bl	80112da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012be0:	e026      	b.n	8012c30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012be2:	68fa      	ldr	r2, [r7, #12]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	4413      	add	r3, r2
 8012be8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012bea:	4b14      	ldr	r3, [pc, #80]	@ (8012c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	68ba      	ldr	r2, [r7, #8]
 8012bf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012bf2:	68ba      	ldr	r2, [r7, #8]
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d209      	bcs.n	8012c0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012bfa:	4b12      	ldr	r3, [pc, #72]	@ (8012c44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8012c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	3304      	adds	r3, #4
 8012c04:	4619      	mov	r1, r3
 8012c06:	4610      	mov	r0, r2
 8012c08:	f7fe fb8b 	bl	8011322 <vListInsert>
}
 8012c0c:	e010      	b.n	8012c30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8012c48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	4b0a      	ldr	r3, [pc, #40]	@ (8012c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	3304      	adds	r3, #4
 8012c18:	4619      	mov	r1, r3
 8012c1a:	4610      	mov	r0, r2
 8012c1c:	f7fe fb81 	bl	8011322 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c20:	4b0a      	ldr	r3, [pc, #40]	@ (8012c4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	68ba      	ldr	r2, [r7, #8]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d202      	bcs.n	8012c30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012c2a:	4a08      	ldr	r2, [pc, #32]	@ (8012c4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	6013      	str	r3, [r2, #0]
}
 8012c30:	bf00      	nop
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	24001600 	.word	0x24001600
 8012c3c:	24001128 	.word	0x24001128
 8012c40:	240015e8 	.word	0x240015e8
 8012c44:	240015b8 	.word	0x240015b8
 8012c48:	240015b4 	.word	0x240015b4
 8012c4c:	2400161c 	.word	0x2400161c

08012c50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b08a      	sub	sp, #40	@ 0x28
 8012c54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012c56:	2300      	movs	r3, #0
 8012c58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012c5a:	f000 fb13 	bl	8013284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8012cd4 <xTimerCreateTimerTask+0x84>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d021      	beq.n	8012caa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012c66:	2300      	movs	r3, #0
 8012c68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012c6e:	1d3a      	adds	r2, r7, #4
 8012c70:	f107 0108 	add.w	r1, r7, #8
 8012c74:	f107 030c 	add.w	r3, r7, #12
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fe fae7 	bl	801124c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012c7e:	6879      	ldr	r1, [r7, #4]
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	9202      	str	r2, [sp, #8]
 8012c86:	9301      	str	r3, [sp, #4]
 8012c88:	2302      	movs	r3, #2
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	460a      	mov	r2, r1
 8012c90:	4911      	ldr	r1, [pc, #68]	@ (8012cd8 <xTimerCreateTimerTask+0x88>)
 8012c92:	4812      	ldr	r0, [pc, #72]	@ (8012cdc <xTimerCreateTimerTask+0x8c>)
 8012c94:	f7ff f8a2 	bl	8011ddc <xTaskCreateStatic>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	4a11      	ldr	r2, [pc, #68]	@ (8012ce0 <xTimerCreateTimerTask+0x90>)
 8012c9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012c9e:	4b10      	ldr	r3, [pc, #64]	@ (8012ce0 <xTimerCreateTimerTask+0x90>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d001      	beq.n	8012caa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d10b      	bne.n	8012cc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8012cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cb4:	f383 8811 	msr	BASEPRI, r3
 8012cb8:	f3bf 8f6f 	isb	sy
 8012cbc:	f3bf 8f4f 	dsb	sy
 8012cc0:	613b      	str	r3, [r7, #16]
}
 8012cc2:	bf00      	nop
 8012cc4:	bf00      	nop
 8012cc6:	e7fd      	b.n	8012cc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012cc8:	697b      	ldr	r3, [r7, #20]
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3718      	adds	r7, #24
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	24001658 	.word	0x24001658
 8012cd8:	08015640 	.word	0x08015640
 8012cdc:	08012e1d 	.word	0x08012e1d
 8012ce0:	2400165c 	.word	0x2400165c

08012ce4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b08a      	sub	sp, #40	@ 0x28
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	607a      	str	r2, [r7, #4]
 8012cf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d10b      	bne.n	8012d14 <xTimerGenericCommand+0x30>
	__asm volatile
 8012cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d00:	f383 8811 	msr	BASEPRI, r3
 8012d04:	f3bf 8f6f 	isb	sy
 8012d08:	f3bf 8f4f 	dsb	sy
 8012d0c:	623b      	str	r3, [r7, #32]
}
 8012d0e:	bf00      	nop
 8012d10:	bf00      	nop
 8012d12:	e7fd      	b.n	8012d10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d14:	4b19      	ldr	r3, [pc, #100]	@ (8012d7c <xTimerGenericCommand+0x98>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d02a      	beq.n	8012d72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	2b05      	cmp	r3, #5
 8012d2c:	dc18      	bgt.n	8012d60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012d2e:	f7ff fead 	bl	8012a8c <xTaskGetSchedulerState>
 8012d32:	4603      	mov	r3, r0
 8012d34:	2b02      	cmp	r3, #2
 8012d36:	d109      	bne.n	8012d4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012d38:	4b10      	ldr	r3, [pc, #64]	@ (8012d7c <xTimerGenericCommand+0x98>)
 8012d3a:	6818      	ldr	r0, [r3, #0]
 8012d3c:	f107 0110 	add.w	r1, r7, #16
 8012d40:	2300      	movs	r3, #0
 8012d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d44:	f7fe fc5a 	bl	80115fc <xQueueGenericSend>
 8012d48:	6278      	str	r0, [r7, #36]	@ 0x24
 8012d4a:	e012      	b.n	8012d72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8012d7c <xTimerGenericCommand+0x98>)
 8012d4e:	6818      	ldr	r0, [r3, #0]
 8012d50:	f107 0110 	add.w	r1, r7, #16
 8012d54:	2300      	movs	r3, #0
 8012d56:	2200      	movs	r2, #0
 8012d58:	f7fe fc50 	bl	80115fc <xQueueGenericSend>
 8012d5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8012d5e:	e008      	b.n	8012d72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012d60:	4b06      	ldr	r3, [pc, #24]	@ (8012d7c <xTimerGenericCommand+0x98>)
 8012d62:	6818      	ldr	r0, [r3, #0]
 8012d64:	f107 0110 	add.w	r1, r7, #16
 8012d68:	2300      	movs	r3, #0
 8012d6a:	683a      	ldr	r2, [r7, #0]
 8012d6c:	f7fe fd48 	bl	8011800 <xQueueGenericSendFromISR>
 8012d70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3728      	adds	r7, #40	@ 0x28
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	24001658 	.word	0x24001658

08012d80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b088      	sub	sp, #32
 8012d84:	af02      	add	r7, sp, #8
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d8a:	4b23      	ldr	r3, [pc, #140]	@ (8012e18 <prvProcessExpiredTimer+0x98>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	3304      	adds	r3, #4
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fe fafb 	bl	8011394 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012da4:	f003 0304 	and.w	r3, r3, #4
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d023      	beq.n	8012df4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	699a      	ldr	r2, [r3, #24]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	18d1      	adds	r1, r2, r3
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	683a      	ldr	r2, [r7, #0]
 8012db8:	6978      	ldr	r0, [r7, #20]
 8012dba:	f000 f8d5 	bl	8012f68 <prvInsertTimerInActiveList>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d020      	beq.n	8012e06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	2300      	movs	r3, #0
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	2100      	movs	r1, #0
 8012dce:	6978      	ldr	r0, [r7, #20]
 8012dd0:	f7ff ff88 	bl	8012ce4 <xTimerGenericCommand>
 8012dd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d114      	bne.n	8012e06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8012ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012de0:	f383 8811 	msr	BASEPRI, r3
 8012de4:	f3bf 8f6f 	isb	sy
 8012de8:	f3bf 8f4f 	dsb	sy
 8012dec:	60fb      	str	r3, [r7, #12]
}
 8012dee:	bf00      	nop
 8012df0:	bf00      	nop
 8012df2:	e7fd      	b.n	8012df0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012dfa:	f023 0301 	bic.w	r3, r3, #1
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	6a1b      	ldr	r3, [r3, #32]
 8012e0a:	6978      	ldr	r0, [r7, #20]
 8012e0c:	4798      	blx	r3
}
 8012e0e:	bf00      	nop
 8012e10:	3718      	adds	r7, #24
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	24001650 	.word	0x24001650

08012e1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e24:	f107 0308 	add.w	r3, r7, #8
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f000 f859 	bl	8012ee0 <prvGetNextExpireTime>
 8012e2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	4619      	mov	r1, r3
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f000 f805 	bl	8012e44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012e3a:	f000 f8d7 	bl	8012fec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e3e:	bf00      	nop
 8012e40:	e7f0      	b.n	8012e24 <prvTimerTask+0x8>
	...

08012e44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012e4e:	f7ff fa29 	bl	80122a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e52:	f107 0308 	add.w	r3, r7, #8
 8012e56:	4618      	mov	r0, r3
 8012e58:	f000 f866 	bl	8012f28 <prvSampleTimeNow>
 8012e5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d130      	bne.n	8012ec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d10a      	bne.n	8012e80 <prvProcessTimerOrBlockTask+0x3c>
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d806      	bhi.n	8012e80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012e72:	f7ff fa25 	bl	80122c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012e76:	68f9      	ldr	r1, [r7, #12]
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff ff81 	bl	8012d80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012e7e:	e024      	b.n	8012eca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d008      	beq.n	8012e98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012e86:	4b13      	ldr	r3, [pc, #76]	@ (8012ed4 <prvProcessTimerOrBlockTask+0x90>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d101      	bne.n	8012e94 <prvProcessTimerOrBlockTask+0x50>
 8012e90:	2301      	movs	r3, #1
 8012e92:	e000      	b.n	8012e96 <prvProcessTimerOrBlockTask+0x52>
 8012e94:	2300      	movs	r3, #0
 8012e96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012e98:	4b0f      	ldr	r3, [pc, #60]	@ (8012ed8 <prvProcessTimerOrBlockTask+0x94>)
 8012e9a:	6818      	ldr	r0, [r3, #0]
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	683a      	ldr	r2, [r7, #0]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	f7fe ff65 	bl	8011d74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012eaa:	f7ff fa09 	bl	80122c0 <xTaskResumeAll>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d10a      	bne.n	8012eca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012eb4:	4b09      	ldr	r3, [pc, #36]	@ (8012edc <prvProcessTimerOrBlockTask+0x98>)
 8012eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012eba:	601a      	str	r2, [r3, #0]
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	f3bf 8f6f 	isb	sy
}
 8012ec4:	e001      	b.n	8012eca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012ec6:	f7ff f9fb 	bl	80122c0 <xTaskResumeAll>
}
 8012eca:	bf00      	nop
 8012ecc:	3710      	adds	r7, #16
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}
 8012ed2:	bf00      	nop
 8012ed4:	24001654 	.word	0x24001654
 8012ed8:	24001658 	.word	0x24001658
 8012edc:	e000ed04 	.word	0xe000ed04

08012ee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b085      	sub	sp, #20
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8012f24 <prvGetNextExpireTime+0x44>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d101      	bne.n	8012ef6 <prvGetNextExpireTime+0x16>
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	e000      	b.n	8012ef8 <prvGetNextExpireTime+0x18>
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d105      	bne.n	8012f10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f04:	4b07      	ldr	r3, [pc, #28]	@ (8012f24 <prvGetNextExpireTime+0x44>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	60fb      	str	r3, [r7, #12]
 8012f0e:	e001      	b.n	8012f14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f10:	2300      	movs	r3, #0
 8012f12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f14:	68fb      	ldr	r3, [r7, #12]
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3714      	adds	r7, #20
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr
 8012f22:	bf00      	nop
 8012f24:	24001650 	.word	0x24001650

08012f28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f30:	f7ff fa64 	bl	80123fc <xTaskGetTickCount>
 8012f34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012f36:	4b0b      	ldr	r3, [pc, #44]	@ (8012f64 <prvSampleTimeNow+0x3c>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	68fa      	ldr	r2, [r7, #12]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d205      	bcs.n	8012f4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012f40:	f000 f93a 	bl	80131b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2201      	movs	r2, #1
 8012f48:	601a      	str	r2, [r3, #0]
 8012f4a:	e002      	b.n	8012f52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012f52:	4a04      	ldr	r2, [pc, #16]	@ (8012f64 <prvSampleTimeNow+0x3c>)
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012f58:	68fb      	ldr	r3, [r7, #12]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
 8012f62:	bf00      	nop
 8012f64:	24001660 	.word	0x24001660

08012f68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b086      	sub	sp, #24
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
 8012f74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012f76:	2300      	movs	r3, #0
 8012f78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	68ba      	ldr	r2, [r7, #8]
 8012f7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	68fa      	ldr	r2, [r7, #12]
 8012f84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012f86:	68ba      	ldr	r2, [r7, #8]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d812      	bhi.n	8012fb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	1ad2      	subs	r2, r2, r3
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	699b      	ldr	r3, [r3, #24]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d302      	bcc.n	8012fa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	617b      	str	r3, [r7, #20]
 8012fa0:	e01b      	b.n	8012fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012fa2:	4b10      	ldr	r3, [pc, #64]	@ (8012fe4 <prvInsertTimerInActiveList+0x7c>)
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	3304      	adds	r3, #4
 8012faa:	4619      	mov	r1, r3
 8012fac:	4610      	mov	r0, r2
 8012fae:	f7fe f9b8 	bl	8011322 <vListInsert>
 8012fb2:	e012      	b.n	8012fda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d206      	bcs.n	8012fca <prvInsertTimerInActiveList+0x62>
 8012fbc:	68ba      	ldr	r2, [r7, #8]
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d302      	bcc.n	8012fca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	617b      	str	r3, [r7, #20]
 8012fc8:	e007      	b.n	8012fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012fca:	4b07      	ldr	r3, [pc, #28]	@ (8012fe8 <prvInsertTimerInActiveList+0x80>)
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	3304      	adds	r3, #4
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	f7fe f9a4 	bl	8011322 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012fda:	697b      	ldr	r3, [r7, #20]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3718      	adds	r7, #24
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	24001654 	.word	0x24001654
 8012fe8:	24001650 	.word	0x24001650

08012fec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b08e      	sub	sp, #56	@ 0x38
 8012ff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012ff2:	e0ce      	b.n	8013192 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	da19      	bge.n	801302e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012ffa:	1d3b      	adds	r3, r7, #4
 8012ffc:	3304      	adds	r3, #4
 8012ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013002:	2b00      	cmp	r3, #0
 8013004:	d10b      	bne.n	801301e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8013006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801300a:	f383 8811 	msr	BASEPRI, r3
 801300e:	f3bf 8f6f 	isb	sy
 8013012:	f3bf 8f4f 	dsb	sy
 8013016:	61fb      	str	r3, [r7, #28]
}
 8013018:	bf00      	nop
 801301a:	bf00      	nop
 801301c:	e7fd      	b.n	801301a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013024:	6850      	ldr	r0, [r2, #4]
 8013026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013028:	6892      	ldr	r2, [r2, #8]
 801302a:	4611      	mov	r1, r2
 801302c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	f2c0 80ae 	blt.w	8013192 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801303c:	695b      	ldr	r3, [r3, #20]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d004      	beq.n	801304c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013044:	3304      	adds	r3, #4
 8013046:	4618      	mov	r0, r3
 8013048:	f7fe f9a4 	bl	8011394 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801304c:	463b      	mov	r3, r7
 801304e:	4618      	mov	r0, r3
 8013050:	f7ff ff6a 	bl	8012f28 <prvSampleTimeNow>
 8013054:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2b09      	cmp	r3, #9
 801305a:	f200 8097 	bhi.w	801318c <prvProcessReceivedCommands+0x1a0>
 801305e:	a201      	add	r2, pc, #4	@ (adr r2, 8013064 <prvProcessReceivedCommands+0x78>)
 8013060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013064:	0801308d 	.word	0x0801308d
 8013068:	0801308d 	.word	0x0801308d
 801306c:	0801308d 	.word	0x0801308d
 8013070:	08013103 	.word	0x08013103
 8013074:	08013117 	.word	0x08013117
 8013078:	08013163 	.word	0x08013163
 801307c:	0801308d 	.word	0x0801308d
 8013080:	0801308d 	.word	0x0801308d
 8013084:	08013103 	.word	0x08013103
 8013088:	08013117 	.word	0x08013117
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801308e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013092:	f043 0301 	orr.w	r3, r3, #1
 8013096:	b2da      	uxtb	r2, r3
 8013098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801309a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801309e:	68ba      	ldr	r2, [r7, #8]
 80130a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130a2:	699b      	ldr	r3, [r3, #24]
 80130a4:	18d1      	adds	r1, r2, r3
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130ac:	f7ff ff5c 	bl	8012f68 <prvInsertTimerInActiveList>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d06c      	beq.n	8013190 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130b8:	6a1b      	ldr	r3, [r3, #32]
 80130ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80130be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80130c4:	f003 0304 	and.w	r3, r3, #4
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d061      	beq.n	8013190 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80130cc:	68ba      	ldr	r2, [r7, #8]
 80130ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	441a      	add	r2, r3
 80130d4:	2300      	movs	r3, #0
 80130d6:	9300      	str	r3, [sp, #0]
 80130d8:	2300      	movs	r3, #0
 80130da:	2100      	movs	r1, #0
 80130dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130de:	f7ff fe01 	bl	8012ce4 <xTimerGenericCommand>
 80130e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80130e4:	6a3b      	ldr	r3, [r7, #32]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d152      	bne.n	8013190 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80130ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130ee:	f383 8811 	msr	BASEPRI, r3
 80130f2:	f3bf 8f6f 	isb	sy
 80130f6:	f3bf 8f4f 	dsb	sy
 80130fa:	61bb      	str	r3, [r7, #24]
}
 80130fc:	bf00      	nop
 80130fe:	bf00      	nop
 8013100:	e7fd      	b.n	80130fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013108:	f023 0301 	bic.w	r3, r3, #1
 801310c:	b2da      	uxtb	r2, r3
 801310e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013110:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013114:	e03d      	b.n	8013192 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801311c:	f043 0301 	orr.w	r3, r3, #1
 8013120:	b2da      	uxtb	r2, r3
 8013122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013124:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013128:	68ba      	ldr	r2, [r7, #8]
 801312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801312c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801312e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013130:	699b      	ldr	r3, [r3, #24]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d10b      	bne.n	801314e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8013136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801313a:	f383 8811 	msr	BASEPRI, r3
 801313e:	f3bf 8f6f 	isb	sy
 8013142:	f3bf 8f4f 	dsb	sy
 8013146:	617b      	str	r3, [r7, #20]
}
 8013148:	bf00      	nop
 801314a:	bf00      	nop
 801314c:	e7fd      	b.n	801314a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013150:	699a      	ldr	r2, [r3, #24]
 8013152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013154:	18d1      	adds	r1, r2, r3
 8013156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801315a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801315c:	f7ff ff04 	bl	8012f68 <prvInsertTimerInActiveList>
					break;
 8013160:	e017      	b.n	8013192 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013168:	f003 0302 	and.w	r3, r3, #2
 801316c:	2b00      	cmp	r3, #0
 801316e:	d103      	bne.n	8013178 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013172:	f000 fbe9 	bl	8013948 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013176:	e00c      	b.n	8013192 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801317a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801317e:	f023 0301 	bic.w	r3, r3, #1
 8013182:	b2da      	uxtb	r2, r3
 8013184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801318a:	e002      	b.n	8013192 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801318c:	bf00      	nop
 801318e:	e000      	b.n	8013192 <prvProcessReceivedCommands+0x1a6>
					break;
 8013190:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013192:	4b08      	ldr	r3, [pc, #32]	@ (80131b4 <prvProcessReceivedCommands+0x1c8>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	1d39      	adds	r1, r7, #4
 8013198:	2200      	movs	r2, #0
 801319a:	4618      	mov	r0, r3
 801319c:	f7fe fbce 	bl	801193c <xQueueReceive>
 80131a0:	4603      	mov	r3, r0
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f47f af26 	bne.w	8012ff4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80131a8:	bf00      	nop
 80131aa:	bf00      	nop
 80131ac:	3730      	adds	r7, #48	@ 0x30
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	24001658 	.word	0x24001658

080131b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b088      	sub	sp, #32
 80131bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80131be:	e049      	b.n	8013254 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80131c0:	4b2e      	ldr	r3, [pc, #184]	@ (801327c <prvSwitchTimerLists+0xc4>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131ca:	4b2c      	ldr	r3, [pc, #176]	@ (801327c <prvSwitchTimerLists+0xc4>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	68db      	ldr	r3, [r3, #12]
 80131d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	3304      	adds	r3, #4
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fe f8db 	bl	8011394 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	6a1b      	ldr	r3, [r3, #32]
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80131ec:	f003 0304 	and.w	r3, r3, #4
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d02f      	beq.n	8013254 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	699b      	ldr	r3, [r3, #24]
 80131f8:	693a      	ldr	r2, [r7, #16]
 80131fa:	4413      	add	r3, r2
 80131fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80131fe:	68ba      	ldr	r2, [r7, #8]
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	429a      	cmp	r2, r3
 8013204:	d90e      	bls.n	8013224 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	68ba      	ldr	r2, [r7, #8]
 801320a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013212:	4b1a      	ldr	r3, [pc, #104]	@ (801327c <prvSwitchTimerLists+0xc4>)
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	3304      	adds	r3, #4
 801321a:	4619      	mov	r1, r3
 801321c:	4610      	mov	r0, r2
 801321e:	f7fe f880 	bl	8011322 <vListInsert>
 8013222:	e017      	b.n	8013254 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013224:	2300      	movs	r3, #0
 8013226:	9300      	str	r3, [sp, #0]
 8013228:	2300      	movs	r3, #0
 801322a:	693a      	ldr	r2, [r7, #16]
 801322c:	2100      	movs	r1, #0
 801322e:	68f8      	ldr	r0, [r7, #12]
 8013230:	f7ff fd58 	bl	8012ce4 <xTimerGenericCommand>
 8013234:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d10b      	bne.n	8013254 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801323c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013240:	f383 8811 	msr	BASEPRI, r3
 8013244:	f3bf 8f6f 	isb	sy
 8013248:	f3bf 8f4f 	dsb	sy
 801324c:	603b      	str	r3, [r7, #0]
}
 801324e:	bf00      	nop
 8013250:	bf00      	nop
 8013252:	e7fd      	b.n	8013250 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013254:	4b09      	ldr	r3, [pc, #36]	@ (801327c <prvSwitchTimerLists+0xc4>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d1b0      	bne.n	80131c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801325e:	4b07      	ldr	r3, [pc, #28]	@ (801327c <prvSwitchTimerLists+0xc4>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013264:	4b06      	ldr	r3, [pc, #24]	@ (8013280 <prvSwitchTimerLists+0xc8>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4a04      	ldr	r2, [pc, #16]	@ (801327c <prvSwitchTimerLists+0xc4>)
 801326a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801326c:	4a04      	ldr	r2, [pc, #16]	@ (8013280 <prvSwitchTimerLists+0xc8>)
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	6013      	str	r3, [r2, #0]
}
 8013272:	bf00      	nop
 8013274:	3718      	adds	r7, #24
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	24001650 	.word	0x24001650
 8013280:	24001654 	.word	0x24001654

08013284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801328a:	f000 f96d 	bl	8013568 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801328e:	4b15      	ldr	r3, [pc, #84]	@ (80132e4 <prvCheckForValidListAndQueue+0x60>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d120      	bne.n	80132d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013296:	4814      	ldr	r0, [pc, #80]	@ (80132e8 <prvCheckForValidListAndQueue+0x64>)
 8013298:	f7fd fff2 	bl	8011280 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801329c:	4813      	ldr	r0, [pc, #76]	@ (80132ec <prvCheckForValidListAndQueue+0x68>)
 801329e:	f7fd ffef 	bl	8011280 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80132a2:	4b13      	ldr	r3, [pc, #76]	@ (80132f0 <prvCheckForValidListAndQueue+0x6c>)
 80132a4:	4a10      	ldr	r2, [pc, #64]	@ (80132e8 <prvCheckForValidListAndQueue+0x64>)
 80132a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80132a8:	4b12      	ldr	r3, [pc, #72]	@ (80132f4 <prvCheckForValidListAndQueue+0x70>)
 80132aa:	4a10      	ldr	r2, [pc, #64]	@ (80132ec <prvCheckForValidListAndQueue+0x68>)
 80132ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80132ae:	2300      	movs	r3, #0
 80132b0:	9300      	str	r3, [sp, #0]
 80132b2:	4b11      	ldr	r3, [pc, #68]	@ (80132f8 <prvCheckForValidListAndQueue+0x74>)
 80132b4:	4a11      	ldr	r2, [pc, #68]	@ (80132fc <prvCheckForValidListAndQueue+0x78>)
 80132b6:	2110      	movs	r1, #16
 80132b8:	200a      	movs	r0, #10
 80132ba:	f7fe f8ff 	bl	80114bc <xQueueGenericCreateStatic>
 80132be:	4603      	mov	r3, r0
 80132c0:	4a08      	ldr	r2, [pc, #32]	@ (80132e4 <prvCheckForValidListAndQueue+0x60>)
 80132c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80132c4:	4b07      	ldr	r3, [pc, #28]	@ (80132e4 <prvCheckForValidListAndQueue+0x60>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d005      	beq.n	80132d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80132cc:	4b05      	ldr	r3, [pc, #20]	@ (80132e4 <prvCheckForValidListAndQueue+0x60>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	490b      	ldr	r1, [pc, #44]	@ (8013300 <prvCheckForValidListAndQueue+0x7c>)
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fe fd24 	bl	8011d20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80132d8:	f000 f978 	bl	80135cc <vPortExitCritical>
}
 80132dc:	bf00      	nop
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	24001658 	.word	0x24001658
 80132e8:	24001628 	.word	0x24001628
 80132ec:	2400163c 	.word	0x2400163c
 80132f0:	24001650 	.word	0x24001650
 80132f4:	24001654 	.word	0x24001654
 80132f8:	24001704 	.word	0x24001704
 80132fc:	24001664 	.word	0x24001664
 8013300:	08015648 	.word	0x08015648

08013304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013304:	b480      	push	{r7}
 8013306:	b085      	sub	sp, #20
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	3b04      	subs	r3, #4
 8013314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801331c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	3b04      	subs	r3, #4
 8013322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	f023 0201 	bic.w	r2, r3, #1
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	3b04      	subs	r3, #4
 8013332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013334:	4a0c      	ldr	r2, [pc, #48]	@ (8013368 <pxPortInitialiseStack+0x64>)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	3b14      	subs	r3, #20
 801333e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	3b04      	subs	r3, #4
 801334a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	f06f 0202 	mvn.w	r2, #2
 8013352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	3b20      	subs	r3, #32
 8013358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801335a:	68fb      	ldr	r3, [r7, #12]
}
 801335c:	4618      	mov	r0, r3
 801335e:	3714      	adds	r7, #20
 8013360:	46bd      	mov	sp, r7
 8013362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013366:	4770      	bx	lr
 8013368:	0801336d 	.word	0x0801336d

0801336c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013372:	2300      	movs	r3, #0
 8013374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013376:	4b13      	ldr	r3, [pc, #76]	@ (80133c4 <prvTaskExitError+0x58>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801337e:	d00b      	beq.n	8013398 <prvTaskExitError+0x2c>
	__asm volatile
 8013380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	60fb      	str	r3, [r7, #12]
}
 8013392:	bf00      	nop
 8013394:	bf00      	nop
 8013396:	e7fd      	b.n	8013394 <prvTaskExitError+0x28>
	__asm volatile
 8013398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801339c:	f383 8811 	msr	BASEPRI, r3
 80133a0:	f3bf 8f6f 	isb	sy
 80133a4:	f3bf 8f4f 	dsb	sy
 80133a8:	60bb      	str	r3, [r7, #8]
}
 80133aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80133ac:	bf00      	nop
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d0fc      	beq.n	80133ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80133b4:	bf00      	nop
 80133b6:	bf00      	nop
 80133b8:	3714      	adds	r7, #20
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	240000c4 	.word	0x240000c4
	...

080133d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80133d0:	4b07      	ldr	r3, [pc, #28]	@ (80133f0 <pxCurrentTCBConst2>)
 80133d2:	6819      	ldr	r1, [r3, #0]
 80133d4:	6808      	ldr	r0, [r1, #0]
 80133d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133da:	f380 8809 	msr	PSP, r0
 80133de:	f3bf 8f6f 	isb	sy
 80133e2:	f04f 0000 	mov.w	r0, #0
 80133e6:	f380 8811 	msr	BASEPRI, r0
 80133ea:	4770      	bx	lr
 80133ec:	f3af 8000 	nop.w

080133f0 <pxCurrentTCBConst2>:
 80133f0:	24001128 	.word	0x24001128
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80133f4:	bf00      	nop
 80133f6:	bf00      	nop

080133f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80133f8:	4808      	ldr	r0, [pc, #32]	@ (801341c <prvPortStartFirstTask+0x24>)
 80133fa:	6800      	ldr	r0, [r0, #0]
 80133fc:	6800      	ldr	r0, [r0, #0]
 80133fe:	f380 8808 	msr	MSP, r0
 8013402:	f04f 0000 	mov.w	r0, #0
 8013406:	f380 8814 	msr	CONTROL, r0
 801340a:	b662      	cpsie	i
 801340c:	b661      	cpsie	f
 801340e:	f3bf 8f4f 	dsb	sy
 8013412:	f3bf 8f6f 	isb	sy
 8013416:	df00      	svc	0
 8013418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801341a:	bf00      	nop
 801341c:	e000ed08 	.word	0xe000ed08

08013420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b086      	sub	sp, #24
 8013424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013426:	4b47      	ldr	r3, [pc, #284]	@ (8013544 <xPortStartScheduler+0x124>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	4a47      	ldr	r2, [pc, #284]	@ (8013548 <xPortStartScheduler+0x128>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d10b      	bne.n	8013448 <xPortStartScheduler+0x28>
	__asm volatile
 8013430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013434:	f383 8811 	msr	BASEPRI, r3
 8013438:	f3bf 8f6f 	isb	sy
 801343c:	f3bf 8f4f 	dsb	sy
 8013440:	60fb      	str	r3, [r7, #12]
}
 8013442:	bf00      	nop
 8013444:	bf00      	nop
 8013446:	e7fd      	b.n	8013444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013448:	4b3e      	ldr	r3, [pc, #248]	@ (8013544 <xPortStartScheduler+0x124>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4a3f      	ldr	r2, [pc, #252]	@ (801354c <xPortStartScheduler+0x12c>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d10b      	bne.n	801346a <xPortStartScheduler+0x4a>
	__asm volatile
 8013452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013456:	f383 8811 	msr	BASEPRI, r3
 801345a:	f3bf 8f6f 	isb	sy
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	613b      	str	r3, [r7, #16]
}
 8013464:	bf00      	nop
 8013466:	bf00      	nop
 8013468:	e7fd      	b.n	8013466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801346a:	4b39      	ldr	r3, [pc, #228]	@ (8013550 <xPortStartScheduler+0x130>)
 801346c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	b2db      	uxtb	r3, r3
 8013474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	22ff      	movs	r2, #255	@ 0xff
 801347a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	b2db      	uxtb	r3, r3
 8013482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013484:	78fb      	ldrb	r3, [r7, #3]
 8013486:	b2db      	uxtb	r3, r3
 8013488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801348c:	b2da      	uxtb	r2, r3
 801348e:	4b31      	ldr	r3, [pc, #196]	@ (8013554 <xPortStartScheduler+0x134>)
 8013490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013492:	4b31      	ldr	r3, [pc, #196]	@ (8013558 <xPortStartScheduler+0x138>)
 8013494:	2207      	movs	r2, #7
 8013496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013498:	e009      	b.n	80134ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801349a:	4b2f      	ldr	r3, [pc, #188]	@ (8013558 <xPortStartScheduler+0x138>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	3b01      	subs	r3, #1
 80134a0:	4a2d      	ldr	r2, [pc, #180]	@ (8013558 <xPortStartScheduler+0x138>)
 80134a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80134a4:	78fb      	ldrb	r3, [r7, #3]
 80134a6:	b2db      	uxtb	r3, r3
 80134a8:	005b      	lsls	r3, r3, #1
 80134aa:	b2db      	uxtb	r3, r3
 80134ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134ae:	78fb      	ldrb	r3, [r7, #3]
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80134b6:	2b80      	cmp	r3, #128	@ 0x80
 80134b8:	d0ef      	beq.n	801349a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80134ba:	4b27      	ldr	r3, [pc, #156]	@ (8013558 <xPortStartScheduler+0x138>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f1c3 0307 	rsb	r3, r3, #7
 80134c2:	2b04      	cmp	r3, #4
 80134c4:	d00b      	beq.n	80134de <xPortStartScheduler+0xbe>
	__asm volatile
 80134c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134ca:	f383 8811 	msr	BASEPRI, r3
 80134ce:	f3bf 8f6f 	isb	sy
 80134d2:	f3bf 8f4f 	dsb	sy
 80134d6:	60bb      	str	r3, [r7, #8]
}
 80134d8:	bf00      	nop
 80134da:	bf00      	nop
 80134dc:	e7fd      	b.n	80134da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80134de:	4b1e      	ldr	r3, [pc, #120]	@ (8013558 <xPortStartScheduler+0x138>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	021b      	lsls	r3, r3, #8
 80134e4:	4a1c      	ldr	r2, [pc, #112]	@ (8013558 <xPortStartScheduler+0x138>)
 80134e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80134e8:	4b1b      	ldr	r3, [pc, #108]	@ (8013558 <xPortStartScheduler+0x138>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80134f0:	4a19      	ldr	r2, [pc, #100]	@ (8013558 <xPortStartScheduler+0x138>)
 80134f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	b2da      	uxtb	r2, r3
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80134fc:	4b17      	ldr	r3, [pc, #92]	@ (801355c <xPortStartScheduler+0x13c>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4a16      	ldr	r2, [pc, #88]	@ (801355c <xPortStartScheduler+0x13c>)
 8013502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013508:	4b14      	ldr	r3, [pc, #80]	@ (801355c <xPortStartScheduler+0x13c>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	4a13      	ldr	r2, [pc, #76]	@ (801355c <xPortStartScheduler+0x13c>)
 801350e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013514:	f000 f8da 	bl	80136cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013518:	4b11      	ldr	r3, [pc, #68]	@ (8013560 <xPortStartScheduler+0x140>)
 801351a:	2200      	movs	r2, #0
 801351c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801351e:	f000 f8f9 	bl	8013714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013522:	4b10      	ldr	r3, [pc, #64]	@ (8013564 <xPortStartScheduler+0x144>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	4a0f      	ldr	r2, [pc, #60]	@ (8013564 <xPortStartScheduler+0x144>)
 8013528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801352c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801352e:	f7ff ff63 	bl	80133f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013532:	f7ff f82d 	bl	8012590 <vTaskSwitchContext>
	prvTaskExitError();
 8013536:	f7ff ff19 	bl	801336c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801353a:	2300      	movs	r3, #0
}
 801353c:	4618      	mov	r0, r3
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	e000ed00 	.word	0xe000ed00
 8013548:	410fc271 	.word	0x410fc271
 801354c:	410fc270 	.word	0x410fc270
 8013550:	e000e400 	.word	0xe000e400
 8013554:	24001754 	.word	0x24001754
 8013558:	24001758 	.word	0x24001758
 801355c:	e000ed20 	.word	0xe000ed20
 8013560:	240000c4 	.word	0x240000c4
 8013564:	e000ef34 	.word	0xe000ef34

08013568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013568:	b480      	push	{r7}
 801356a:	b083      	sub	sp, #12
 801356c:	af00      	add	r7, sp, #0
	__asm volatile
 801356e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013572:	f383 8811 	msr	BASEPRI, r3
 8013576:	f3bf 8f6f 	isb	sy
 801357a:	f3bf 8f4f 	dsb	sy
 801357e:	607b      	str	r3, [r7, #4]
}
 8013580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013582:	4b10      	ldr	r3, [pc, #64]	@ (80135c4 <vPortEnterCritical+0x5c>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	3301      	adds	r3, #1
 8013588:	4a0e      	ldr	r2, [pc, #56]	@ (80135c4 <vPortEnterCritical+0x5c>)
 801358a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801358c:	4b0d      	ldr	r3, [pc, #52]	@ (80135c4 <vPortEnterCritical+0x5c>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	2b01      	cmp	r3, #1
 8013592:	d110      	bne.n	80135b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013594:	4b0c      	ldr	r3, [pc, #48]	@ (80135c8 <vPortEnterCritical+0x60>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	b2db      	uxtb	r3, r3
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00b      	beq.n	80135b6 <vPortEnterCritical+0x4e>
	__asm volatile
 801359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135a2:	f383 8811 	msr	BASEPRI, r3
 80135a6:	f3bf 8f6f 	isb	sy
 80135aa:	f3bf 8f4f 	dsb	sy
 80135ae:	603b      	str	r3, [r7, #0]
}
 80135b0:	bf00      	nop
 80135b2:	bf00      	nop
 80135b4:	e7fd      	b.n	80135b2 <vPortEnterCritical+0x4a>
	}
}
 80135b6:	bf00      	nop
 80135b8:	370c      	adds	r7, #12
 80135ba:	46bd      	mov	sp, r7
 80135bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c0:	4770      	bx	lr
 80135c2:	bf00      	nop
 80135c4:	240000c4 	.word	0x240000c4
 80135c8:	e000ed04 	.word	0xe000ed04

080135cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80135cc:	b480      	push	{r7}
 80135ce:	b083      	sub	sp, #12
 80135d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80135d2:	4b12      	ldr	r3, [pc, #72]	@ (801361c <vPortExitCritical+0x50>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d10b      	bne.n	80135f2 <vPortExitCritical+0x26>
	__asm volatile
 80135da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135de:	f383 8811 	msr	BASEPRI, r3
 80135e2:	f3bf 8f6f 	isb	sy
 80135e6:	f3bf 8f4f 	dsb	sy
 80135ea:	607b      	str	r3, [r7, #4]
}
 80135ec:	bf00      	nop
 80135ee:	bf00      	nop
 80135f0:	e7fd      	b.n	80135ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80135f2:	4b0a      	ldr	r3, [pc, #40]	@ (801361c <vPortExitCritical+0x50>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	3b01      	subs	r3, #1
 80135f8:	4a08      	ldr	r2, [pc, #32]	@ (801361c <vPortExitCritical+0x50>)
 80135fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80135fc:	4b07      	ldr	r3, [pc, #28]	@ (801361c <vPortExitCritical+0x50>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d105      	bne.n	8013610 <vPortExitCritical+0x44>
 8013604:	2300      	movs	r3, #0
 8013606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	f383 8811 	msr	BASEPRI, r3
}
 801360e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013610:	bf00      	nop
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr
 801361c:	240000c4 	.word	0x240000c4

08013620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013620:	f3ef 8009 	mrs	r0, PSP
 8013624:	f3bf 8f6f 	isb	sy
 8013628:	4b15      	ldr	r3, [pc, #84]	@ (8013680 <pxCurrentTCBConst>)
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	f01e 0f10 	tst.w	lr, #16
 8013630:	bf08      	it	eq
 8013632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801363a:	6010      	str	r0, [r2, #0]
 801363c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013644:	f380 8811 	msr	BASEPRI, r0
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	f3bf 8f6f 	isb	sy
 8013650:	f7fe ff9e 	bl	8012590 <vTaskSwitchContext>
 8013654:	f04f 0000 	mov.w	r0, #0
 8013658:	f380 8811 	msr	BASEPRI, r0
 801365c:	bc09      	pop	{r0, r3}
 801365e:	6819      	ldr	r1, [r3, #0]
 8013660:	6808      	ldr	r0, [r1, #0]
 8013662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013666:	f01e 0f10 	tst.w	lr, #16
 801366a:	bf08      	it	eq
 801366c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013670:	f380 8809 	msr	PSP, r0
 8013674:	f3bf 8f6f 	isb	sy
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop
 801367c:	f3af 8000 	nop.w

08013680 <pxCurrentTCBConst>:
 8013680:	24001128 	.word	0x24001128
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013684:	bf00      	nop
 8013686:	bf00      	nop

08013688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
	__asm volatile
 801368e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	607b      	str	r3, [r7, #4]
}
 80136a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80136a2:	f7fe febb 	bl	801241c <xTaskIncrementTick>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d003      	beq.n	80136b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80136ac:	4b06      	ldr	r3, [pc, #24]	@ (80136c8 <xPortSysTickHandler+0x40>)
 80136ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136b2:	601a      	str	r2, [r3, #0]
 80136b4:	2300      	movs	r3, #0
 80136b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	f383 8811 	msr	BASEPRI, r3
}
 80136be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80136c0:	bf00      	nop
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	e000ed04 	.word	0xe000ed04

080136cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80136cc:	b480      	push	{r7}
 80136ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80136d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013700 <vPortSetupTimerInterrupt+0x34>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80136d6:	4b0b      	ldr	r3, [pc, #44]	@ (8013704 <vPortSetupTimerInterrupt+0x38>)
 80136d8:	2200      	movs	r2, #0
 80136da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80136dc:	4b0a      	ldr	r3, [pc, #40]	@ (8013708 <vPortSetupTimerInterrupt+0x3c>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4a0a      	ldr	r2, [pc, #40]	@ (801370c <vPortSetupTimerInterrupt+0x40>)
 80136e2:	fba2 2303 	umull	r2, r3, r2, r3
 80136e6:	099b      	lsrs	r3, r3, #6
 80136e8:	4a09      	ldr	r2, [pc, #36]	@ (8013710 <vPortSetupTimerInterrupt+0x44>)
 80136ea:	3b01      	subs	r3, #1
 80136ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80136ee:	4b04      	ldr	r3, [pc, #16]	@ (8013700 <vPortSetupTimerInterrupt+0x34>)
 80136f0:	2207      	movs	r2, #7
 80136f2:	601a      	str	r2, [r3, #0]
}
 80136f4:	bf00      	nop
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr
 80136fe:	bf00      	nop
 8013700:	e000e010 	.word	0xe000e010
 8013704:	e000e018 	.word	0xe000e018
 8013708:	24000000 	.word	0x24000000
 801370c:	10624dd3 	.word	0x10624dd3
 8013710:	e000e014 	.word	0xe000e014

08013714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013724 <vPortEnableVFP+0x10>
 8013718:	6801      	ldr	r1, [r0, #0]
 801371a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801371e:	6001      	str	r1, [r0, #0]
 8013720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013722:	bf00      	nop
 8013724:	e000ed88 	.word	0xe000ed88

08013728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013728:	b480      	push	{r7}
 801372a:	b085      	sub	sp, #20
 801372c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801372e:	f3ef 8305 	mrs	r3, IPSR
 8013732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2b0f      	cmp	r3, #15
 8013738:	d915      	bls.n	8013766 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801373a:	4a18      	ldr	r2, [pc, #96]	@ (801379c <vPortValidateInterruptPriority+0x74>)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	4413      	add	r3, r2
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013744:	4b16      	ldr	r3, [pc, #88]	@ (80137a0 <vPortValidateInterruptPriority+0x78>)
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	7afa      	ldrb	r2, [r7, #11]
 801374a:	429a      	cmp	r2, r3
 801374c:	d20b      	bcs.n	8013766 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013752:	f383 8811 	msr	BASEPRI, r3
 8013756:	f3bf 8f6f 	isb	sy
 801375a:	f3bf 8f4f 	dsb	sy
 801375e:	607b      	str	r3, [r7, #4]
}
 8013760:	bf00      	nop
 8013762:	bf00      	nop
 8013764:	e7fd      	b.n	8013762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013766:	4b0f      	ldr	r3, [pc, #60]	@ (80137a4 <vPortValidateInterruptPriority+0x7c>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801376e:	4b0e      	ldr	r3, [pc, #56]	@ (80137a8 <vPortValidateInterruptPriority+0x80>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d90b      	bls.n	801378e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801377a:	f383 8811 	msr	BASEPRI, r3
 801377e:	f3bf 8f6f 	isb	sy
 8013782:	f3bf 8f4f 	dsb	sy
 8013786:	603b      	str	r3, [r7, #0]
}
 8013788:	bf00      	nop
 801378a:	bf00      	nop
 801378c:	e7fd      	b.n	801378a <vPortValidateInterruptPriority+0x62>
	}
 801378e:	bf00      	nop
 8013790:	3714      	adds	r7, #20
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr
 801379a:	bf00      	nop
 801379c:	e000e3f0 	.word	0xe000e3f0
 80137a0:	24001754 	.word	0x24001754
 80137a4:	e000ed0c 	.word	0xe000ed0c
 80137a8:	24001758 	.word	0x24001758

080137ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b08a      	sub	sp, #40	@ 0x28
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80137b4:	2300      	movs	r3, #0
 80137b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80137b8:	f7fe fd74 	bl	80122a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80137bc:	4b5c      	ldr	r3, [pc, #368]	@ (8013930 <pvPortMalloc+0x184>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d101      	bne.n	80137c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80137c4:	f000 f924 	bl	8013a10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80137c8:	4b5a      	ldr	r3, [pc, #360]	@ (8013934 <pvPortMalloc+0x188>)
 80137ca:	681a      	ldr	r2, [r3, #0]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	4013      	ands	r3, r2
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f040 8095 	bne.w	8013900 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d01e      	beq.n	801381a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80137dc:	2208      	movs	r2, #8
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	4413      	add	r3, r2
 80137e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f003 0307 	and.w	r3, r3, #7
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d015      	beq.n	801381a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f023 0307 	bic.w	r3, r3, #7
 80137f4:	3308      	adds	r3, #8
 80137f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f003 0307 	and.w	r3, r3, #7
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d00b      	beq.n	801381a <pvPortMalloc+0x6e>
	__asm volatile
 8013802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013806:	f383 8811 	msr	BASEPRI, r3
 801380a:	f3bf 8f6f 	isb	sy
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	617b      	str	r3, [r7, #20]
}
 8013814:	bf00      	nop
 8013816:	bf00      	nop
 8013818:	e7fd      	b.n	8013816 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d06f      	beq.n	8013900 <pvPortMalloc+0x154>
 8013820:	4b45      	ldr	r3, [pc, #276]	@ (8013938 <pvPortMalloc+0x18c>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	687a      	ldr	r2, [r7, #4]
 8013826:	429a      	cmp	r2, r3
 8013828:	d86a      	bhi.n	8013900 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801382a:	4b44      	ldr	r3, [pc, #272]	@ (801393c <pvPortMalloc+0x190>)
 801382c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801382e:	4b43      	ldr	r3, [pc, #268]	@ (801393c <pvPortMalloc+0x190>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013834:	e004      	b.n	8013840 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	687a      	ldr	r2, [r7, #4]
 8013846:	429a      	cmp	r2, r3
 8013848:	d903      	bls.n	8013852 <pvPortMalloc+0xa6>
 801384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d1f1      	bne.n	8013836 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013852:	4b37      	ldr	r3, [pc, #220]	@ (8013930 <pvPortMalloc+0x184>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013858:	429a      	cmp	r2, r3
 801385a:	d051      	beq.n	8013900 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801385c:	6a3b      	ldr	r3, [r7, #32]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2208      	movs	r2, #8
 8013862:	4413      	add	r3, r2
 8013864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	6a3b      	ldr	r3, [r7, #32]
 801386c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013870:	685a      	ldr	r2, [r3, #4]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	1ad2      	subs	r2, r2, r3
 8013876:	2308      	movs	r3, #8
 8013878:	005b      	lsls	r3, r3, #1
 801387a:	429a      	cmp	r2, r3
 801387c:	d920      	bls.n	80138c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801387e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	4413      	add	r3, r2
 8013884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	f003 0307 	and.w	r3, r3, #7
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00b      	beq.n	80138a8 <pvPortMalloc+0xfc>
	__asm volatile
 8013890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013894:	f383 8811 	msr	BASEPRI, r3
 8013898:	f3bf 8f6f 	isb	sy
 801389c:	f3bf 8f4f 	dsb	sy
 80138a0:	613b      	str	r3, [r7, #16]
}
 80138a2:	bf00      	nop
 80138a4:	bf00      	nop
 80138a6:	e7fd      	b.n	80138a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80138a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138aa:	685a      	ldr	r2, [r3, #4]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	1ad2      	subs	r2, r2, r3
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80138b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80138ba:	69b8      	ldr	r0, [r7, #24]
 80138bc:	f000 f90a 	bl	8013ad4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80138c0:	4b1d      	ldr	r3, [pc, #116]	@ (8013938 <pvPortMalloc+0x18c>)
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	1ad3      	subs	r3, r2, r3
 80138ca:	4a1b      	ldr	r2, [pc, #108]	@ (8013938 <pvPortMalloc+0x18c>)
 80138cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80138ce:	4b1a      	ldr	r3, [pc, #104]	@ (8013938 <pvPortMalloc+0x18c>)
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	4b1b      	ldr	r3, [pc, #108]	@ (8013940 <pvPortMalloc+0x194>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d203      	bcs.n	80138e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80138da:	4b17      	ldr	r3, [pc, #92]	@ (8013938 <pvPortMalloc+0x18c>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	4a18      	ldr	r2, [pc, #96]	@ (8013940 <pvPortMalloc+0x194>)
 80138e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80138e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	4b13      	ldr	r3, [pc, #76]	@ (8013934 <pvPortMalloc+0x188>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	431a      	orrs	r2, r3
 80138ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80138f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f2:	2200      	movs	r2, #0
 80138f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80138f6:	4b13      	ldr	r3, [pc, #76]	@ (8013944 <pvPortMalloc+0x198>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	3301      	adds	r3, #1
 80138fc:	4a11      	ldr	r2, [pc, #68]	@ (8013944 <pvPortMalloc+0x198>)
 80138fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013900:	f7fe fcde 	bl	80122c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	f003 0307 	and.w	r3, r3, #7
 801390a:	2b00      	cmp	r3, #0
 801390c:	d00b      	beq.n	8013926 <pvPortMalloc+0x17a>
	__asm volatile
 801390e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013912:	f383 8811 	msr	BASEPRI, r3
 8013916:	f3bf 8f6f 	isb	sy
 801391a:	f3bf 8f4f 	dsb	sy
 801391e:	60fb      	str	r3, [r7, #12]
}
 8013920:	bf00      	nop
 8013922:	bf00      	nop
 8013924:	e7fd      	b.n	8013922 <pvPortMalloc+0x176>
	return pvReturn;
 8013926:	69fb      	ldr	r3, [r7, #28]
}
 8013928:	4618      	mov	r0, r3
 801392a:	3728      	adds	r7, #40	@ 0x28
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	24005364 	.word	0x24005364
 8013934:	24005378 	.word	0x24005378
 8013938:	24005368 	.word	0x24005368
 801393c:	2400535c 	.word	0x2400535c
 8013940:	2400536c 	.word	0x2400536c
 8013944:	24005370 	.word	0x24005370

08013948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b086      	sub	sp, #24
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d04f      	beq.n	80139fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801395a:	2308      	movs	r3, #8
 801395c:	425b      	negs	r3, r3
 801395e:	697a      	ldr	r2, [r7, #20]
 8013960:	4413      	add	r3, r2
 8013962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	685a      	ldr	r2, [r3, #4]
 801396c:	4b25      	ldr	r3, [pc, #148]	@ (8013a04 <vPortFree+0xbc>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	4013      	ands	r3, r2
 8013972:	2b00      	cmp	r3, #0
 8013974:	d10b      	bne.n	801398e <vPortFree+0x46>
	__asm volatile
 8013976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
 8013986:	60fb      	str	r3, [r7, #12]
}
 8013988:	bf00      	nop
 801398a:	bf00      	nop
 801398c:	e7fd      	b.n	801398a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d00b      	beq.n	80139ae <vPortFree+0x66>
	__asm volatile
 8013996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801399a:	f383 8811 	msr	BASEPRI, r3
 801399e:	f3bf 8f6f 	isb	sy
 80139a2:	f3bf 8f4f 	dsb	sy
 80139a6:	60bb      	str	r3, [r7, #8]
}
 80139a8:	bf00      	nop
 80139aa:	bf00      	nop
 80139ac:	e7fd      	b.n	80139aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	685a      	ldr	r2, [r3, #4]
 80139b2:	4b14      	ldr	r3, [pc, #80]	@ (8013a04 <vPortFree+0xbc>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	4013      	ands	r3, r2
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d01e      	beq.n	80139fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d11a      	bne.n	80139fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	685a      	ldr	r2, [r3, #4]
 80139c8:	4b0e      	ldr	r3, [pc, #56]	@ (8013a04 <vPortFree+0xbc>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	43db      	mvns	r3, r3
 80139ce:	401a      	ands	r2, r3
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80139d4:	f7fe fc66 	bl	80122a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	685a      	ldr	r2, [r3, #4]
 80139dc:	4b0a      	ldr	r3, [pc, #40]	@ (8013a08 <vPortFree+0xc0>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	4413      	add	r3, r2
 80139e2:	4a09      	ldr	r2, [pc, #36]	@ (8013a08 <vPortFree+0xc0>)
 80139e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80139e6:	6938      	ldr	r0, [r7, #16]
 80139e8:	f000 f874 	bl	8013ad4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80139ec:	4b07      	ldr	r3, [pc, #28]	@ (8013a0c <vPortFree+0xc4>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	3301      	adds	r3, #1
 80139f2:	4a06      	ldr	r2, [pc, #24]	@ (8013a0c <vPortFree+0xc4>)
 80139f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80139f6:	f7fe fc63 	bl	80122c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80139fa:	bf00      	nop
 80139fc:	3718      	adds	r7, #24
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	bf00      	nop
 8013a04:	24005378 	.word	0x24005378
 8013a08:	24005368 	.word	0x24005368
 8013a0c:	24005374 	.word	0x24005374

08013a10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013a10:	b480      	push	{r7}
 8013a12:	b085      	sub	sp, #20
 8013a14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013a16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8013a1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013a1c:	4b27      	ldr	r3, [pc, #156]	@ (8013abc <prvHeapInit+0xac>)
 8013a1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f003 0307 	and.w	r3, r3, #7
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00c      	beq.n	8013a44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	3307      	adds	r3, #7
 8013a2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f023 0307 	bic.w	r3, r3, #7
 8013a36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013a38:	68ba      	ldr	r2, [r7, #8]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	1ad3      	subs	r3, r2, r3
 8013a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8013abc <prvHeapInit+0xac>)
 8013a40:	4413      	add	r3, r2
 8013a42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013a48:	4a1d      	ldr	r2, [pc, #116]	@ (8013ac0 <prvHeapInit+0xb0>)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8013ac0 <prvHeapInit+0xb0>)
 8013a50:	2200      	movs	r2, #0
 8013a52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	68ba      	ldr	r2, [r7, #8]
 8013a58:	4413      	add	r3, r2
 8013a5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013a5c:	2208      	movs	r2, #8
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	1a9b      	subs	r3, r3, r2
 8013a62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	f023 0307 	bic.w	r3, r3, #7
 8013a6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	4a15      	ldr	r2, [pc, #84]	@ (8013ac4 <prvHeapInit+0xb4>)
 8013a70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013a72:	4b14      	ldr	r3, [pc, #80]	@ (8013ac4 <prvHeapInit+0xb4>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	2200      	movs	r2, #0
 8013a78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013a7a:	4b12      	ldr	r3, [pc, #72]	@ (8013ac4 <prvHeapInit+0xb4>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	68fa      	ldr	r2, [r7, #12]
 8013a8a:	1ad2      	subs	r2, r2, r3
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013a90:	4b0c      	ldr	r3, [pc, #48]	@ (8013ac4 <prvHeapInit+0xb4>)
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	685b      	ldr	r3, [r3, #4]
 8013a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8013ac8 <prvHeapInit+0xb8>)
 8013a9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	4a09      	ldr	r2, [pc, #36]	@ (8013acc <prvHeapInit+0xbc>)
 8013aa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013aa8:	4b09      	ldr	r3, [pc, #36]	@ (8013ad0 <prvHeapInit+0xc0>)
 8013aaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013aae:	601a      	str	r2, [r3, #0]
}
 8013ab0:	bf00      	nop
 8013ab2:	3714      	adds	r7, #20
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr
 8013abc:	2400175c 	.word	0x2400175c
 8013ac0:	2400535c 	.word	0x2400535c
 8013ac4:	24005364 	.word	0x24005364
 8013ac8:	2400536c 	.word	0x2400536c
 8013acc:	24005368 	.word	0x24005368
 8013ad0:	24005378 	.word	0x24005378

08013ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b085      	sub	sp, #20
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013adc:	4b28      	ldr	r3, [pc, #160]	@ (8013b80 <prvInsertBlockIntoFreeList+0xac>)
 8013ade:	60fb      	str	r3, [r7, #12]
 8013ae0:	e002      	b.n	8013ae8 <prvInsertBlockIntoFreeList+0x14>
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	60fb      	str	r3, [r7, #12]
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d8f7      	bhi.n	8013ae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	68ba      	ldr	r2, [r7, #8]
 8013afc:	4413      	add	r3, r2
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d108      	bne.n	8013b16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	685a      	ldr	r2, [r3, #4]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	441a      	add	r2, r3
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	685b      	ldr	r3, [r3, #4]
 8013b1e:	68ba      	ldr	r2, [r7, #8]
 8013b20:	441a      	add	r2, r3
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d118      	bne.n	8013b5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	4b15      	ldr	r3, [pc, #84]	@ (8013b84 <prvInsertBlockIntoFreeList+0xb0>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d00d      	beq.n	8013b52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	685a      	ldr	r2, [r3, #4]
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	685b      	ldr	r3, [r3, #4]
 8013b40:	441a      	add	r2, r3
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	601a      	str	r2, [r3, #0]
 8013b50:	e008      	b.n	8013b64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013b52:	4b0c      	ldr	r3, [pc, #48]	@ (8013b84 <prvInsertBlockIntoFreeList+0xb0>)
 8013b54:	681a      	ldr	r2, [r3, #0]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	601a      	str	r2, [r3, #0]
 8013b5a:	e003      	b.n	8013b64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013b64:	68fa      	ldr	r2, [r7, #12]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d002      	beq.n	8013b72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b72:	bf00      	nop
 8013b74:	3714      	adds	r7, #20
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr
 8013b7e:	bf00      	nop
 8013b80:	2400535c 	.word	0x2400535c
 8013b84:	24005364 	.word	0x24005364

08013b88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	4913      	ldr	r1, [pc, #76]	@ (8013bdc <MX_USB_DEVICE_Init+0x54>)
 8013b90:	4813      	ldr	r0, [pc, #76]	@ (8013be0 <MX_USB_DEVICE_Init+0x58>)
 8013b92:	f7fb fef5 	bl	800f980 <USBD_Init>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d001      	beq.n	8013ba0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013b9c:	f7ed fb38 	bl	8001210 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8013ba0:	4910      	ldr	r1, [pc, #64]	@ (8013be4 <MX_USB_DEVICE_Init+0x5c>)
 8013ba2:	480f      	ldr	r0, [pc, #60]	@ (8013be0 <MX_USB_DEVICE_Init+0x58>)
 8013ba4:	f7fb ff2a 	bl	800f9fc <USBD_RegisterClass>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d001      	beq.n	8013bb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013bae:	f7ed fb2f 	bl	8001210 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8013bb2:	490d      	ldr	r1, [pc, #52]	@ (8013be8 <MX_USB_DEVICE_Init+0x60>)
 8013bb4:	480a      	ldr	r0, [pc, #40]	@ (8013be0 <MX_USB_DEVICE_Init+0x58>)
 8013bb6:	f7fb fe97 	bl	800f8e8 <USBD_AUDIO_RegisterInterface>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d001      	beq.n	8013bc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013bc0:	f7ed fb26 	bl	8001210 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013bc4:	4806      	ldr	r0, [pc, #24]	@ (8013be0 <MX_USB_DEVICE_Init+0x58>)
 8013bc6:	f7fb ff5d 	bl	800fa84 <USBD_Start>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d001      	beq.n	8013bd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013bd0:	f7ed fb1e 	bl	8001210 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013bd4:	f7f3 fd22 	bl	800761c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013bd8:	bf00      	nop
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	240000e4 	.word	0x240000e4
 8013be0:	2400537c 	.word	0x2400537c
 8013be4:	24000010 	.word	0x24000010
 8013be8:	240000c8 	.word	0x240000c8

08013bec <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b085      	sub	sp, #20
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8013bf8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3714      	adds	r7, #20
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr

08013c06 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8013c06:	b480      	push	{r7}
 8013c08:	b083      	sub	sp, #12
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 8013c0e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	370c      	adds	r7, #12
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b085      	sub	sp, #20
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	4613      	mov	r3, r2
 8013c28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8013c2a:	79fb      	ldrb	r3, [r7, #7]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d001      	beq.n	8013c34 <AUDIO_AudioCmd_FS+0x18>
 8013c30:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8013c32:	e000      	b.n	8013c36 <AUDIO_AudioCmd_FS+0x1a>
    break;
 8013c34:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8013c36:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3714      	adds	r7, #20
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8013c4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b083      	sub	sp, #12
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	4603      	mov	r3, r0
 8013c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8013c66:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	370c      	adds	r7, #12
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b085      	sub	sp, #20
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	4613      	mov	r3, r2
 8013c80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8013c82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3714      	adds	r7, #20
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8e:	4770      	bx	lr

08013c90 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8013c90:	b480      	push	{r7}
 8013c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8013c94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr

08013ca0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b083      	sub	sp, #12
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	6039      	str	r1, [r7, #0]
 8013caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	2212      	movs	r2, #18
 8013cb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013cb2:	4b03      	ldr	r3, [pc, #12]	@ (8013cc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	370c      	adds	r7, #12
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr
 8013cc0:	24000104 	.word	0x24000104

08013cc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	4603      	mov	r3, r0
 8013ccc:	6039      	str	r1, [r7, #0]
 8013cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	2204      	movs	r2, #4
 8013cd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013cd6:	4b03      	ldr	r3, [pc, #12]	@ (8013ce4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	370c      	adds	r7, #12
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce2:	4770      	bx	lr
 8013ce4:	24000118 	.word	0x24000118

08013ce8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	4603      	mov	r3, r0
 8013cf0:	6039      	str	r1, [r7, #0]
 8013cf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013cf4:	79fb      	ldrb	r3, [r7, #7]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d105      	bne.n	8013d06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013cfa:	683a      	ldr	r2, [r7, #0]
 8013cfc:	4907      	ldr	r1, [pc, #28]	@ (8013d1c <USBD_FS_ProductStrDescriptor+0x34>)
 8013cfe:	4808      	ldr	r0, [pc, #32]	@ (8013d20 <USBD_FS_ProductStrDescriptor+0x38>)
 8013d00:	f7fd f862 	bl	8010dc8 <USBD_GetString>
 8013d04:	e004      	b.n	8013d10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	4904      	ldr	r1, [pc, #16]	@ (8013d1c <USBD_FS_ProductStrDescriptor+0x34>)
 8013d0a:	4805      	ldr	r0, [pc, #20]	@ (8013d20 <USBD_FS_ProductStrDescriptor+0x38>)
 8013d0c:	f7fd f85c 	bl	8010dc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d10:	4b02      	ldr	r3, [pc, #8]	@ (8013d1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	24005658 	.word	0x24005658
 8013d20:	08015650 	.word	0x08015650

08013d24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	6039      	str	r1, [r7, #0]
 8013d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013d30:	683a      	ldr	r2, [r7, #0]
 8013d32:	4904      	ldr	r1, [pc, #16]	@ (8013d44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013d34:	4804      	ldr	r0, [pc, #16]	@ (8013d48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013d36:	f7fd f847 	bl	8010dc8 <USBD_GetString>
  return USBD_StrDesc;
 8013d3a:	4b02      	ldr	r3, [pc, #8]	@ (8013d44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	24005658 	.word	0x24005658
 8013d48:	0801566c 	.word	0x0801566c

08013d4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	4603      	mov	r3, r0
 8013d54:	6039      	str	r1, [r7, #0]
 8013d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	221a      	movs	r2, #26
 8013d5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013d5e:	f000 f843 	bl	8013de8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013d62:	4b02      	ldr	r3, [pc, #8]	@ (8013d6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	2400011c 	.word	0x2400011c

08013d70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	4603      	mov	r3, r0
 8013d78:	6039      	str	r1, [r7, #0]
 8013d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013d7c:	79fb      	ldrb	r3, [r7, #7]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d105      	bne.n	8013d8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013d82:	683a      	ldr	r2, [r7, #0]
 8013d84:	4907      	ldr	r1, [pc, #28]	@ (8013da4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013d86:	4808      	ldr	r0, [pc, #32]	@ (8013da8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013d88:	f7fd f81e 	bl	8010dc8 <USBD_GetString>
 8013d8c:	e004      	b.n	8013d98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013d8e:	683a      	ldr	r2, [r7, #0]
 8013d90:	4904      	ldr	r1, [pc, #16]	@ (8013da4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013d92:	4805      	ldr	r0, [pc, #20]	@ (8013da8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013d94:	f7fd f818 	bl	8010dc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d98:	4b02      	ldr	r3, [pc, #8]	@ (8013da4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	3708      	adds	r7, #8
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bd80      	pop	{r7, pc}
 8013da2:	bf00      	nop
 8013da4:	24005658 	.word	0x24005658
 8013da8:	08015674 	.word	0x08015674

08013dac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	4603      	mov	r3, r0
 8013db4:	6039      	str	r1, [r7, #0]
 8013db6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013db8:	79fb      	ldrb	r3, [r7, #7]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d105      	bne.n	8013dca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013dbe:	683a      	ldr	r2, [r7, #0]
 8013dc0:	4907      	ldr	r1, [pc, #28]	@ (8013de0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013dc2:	4808      	ldr	r0, [pc, #32]	@ (8013de4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013dc4:	f7fd f800 	bl	8010dc8 <USBD_GetString>
 8013dc8:	e004      	b.n	8013dd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013dca:	683a      	ldr	r2, [r7, #0]
 8013dcc:	4904      	ldr	r1, [pc, #16]	@ (8013de0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013dce:	4805      	ldr	r0, [pc, #20]	@ (8013de4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013dd0:	f7fc fffa 	bl	8010dc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013dd4:	4b02      	ldr	r3, [pc, #8]	@ (8013de0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	24005658 	.word	0x24005658
 8013de4:	08015684 	.word	0x08015684

08013de8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013dee:	4b0f      	ldr	r3, [pc, #60]	@ (8013e2c <Get_SerialNum+0x44>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013df4:	4b0e      	ldr	r3, [pc, #56]	@ (8013e30 <Get_SerialNum+0x48>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8013e34 <Get_SerialNum+0x4c>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	4413      	add	r3, r2
 8013e06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d009      	beq.n	8013e22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013e0e:	2208      	movs	r2, #8
 8013e10:	4909      	ldr	r1, [pc, #36]	@ (8013e38 <Get_SerialNum+0x50>)
 8013e12:	68f8      	ldr	r0, [r7, #12]
 8013e14:	f000 f814 	bl	8013e40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013e18:	2204      	movs	r2, #4
 8013e1a:	4908      	ldr	r1, [pc, #32]	@ (8013e3c <Get_SerialNum+0x54>)
 8013e1c:	68b8      	ldr	r0, [r7, #8]
 8013e1e:	f000 f80f 	bl	8013e40 <IntToUnicode>
  }
}
 8013e22:	bf00      	nop
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	1ff1e800 	.word	0x1ff1e800
 8013e30:	1ff1e804 	.word	0x1ff1e804
 8013e34:	1ff1e808 	.word	0x1ff1e808
 8013e38:	2400011e 	.word	0x2400011e
 8013e3c:	2400012e 	.word	0x2400012e

08013e40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013e40:	b480      	push	{r7}
 8013e42:	b087      	sub	sp, #28
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	60f8      	str	r0, [r7, #12]
 8013e48:	60b9      	str	r1, [r7, #8]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013e52:	2300      	movs	r3, #0
 8013e54:	75fb      	strb	r3, [r7, #23]
 8013e56:	e027      	b.n	8013ea8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	0f1b      	lsrs	r3, r3, #28
 8013e5c:	2b09      	cmp	r3, #9
 8013e5e:	d80b      	bhi.n	8013e78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	0f1b      	lsrs	r3, r3, #28
 8013e64:	b2da      	uxtb	r2, r3
 8013e66:	7dfb      	ldrb	r3, [r7, #23]
 8013e68:	005b      	lsls	r3, r3, #1
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	440b      	add	r3, r1
 8013e70:	3230      	adds	r2, #48	@ 0x30
 8013e72:	b2d2      	uxtb	r2, r2
 8013e74:	701a      	strb	r2, [r3, #0]
 8013e76:	e00a      	b.n	8013e8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	0f1b      	lsrs	r3, r3, #28
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	7dfb      	ldrb	r3, [r7, #23]
 8013e80:	005b      	lsls	r3, r3, #1
 8013e82:	4619      	mov	r1, r3
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	440b      	add	r3, r1
 8013e88:	3237      	adds	r2, #55	@ 0x37
 8013e8a:	b2d2      	uxtb	r2, r2
 8013e8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	011b      	lsls	r3, r3, #4
 8013e92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013e94:	7dfb      	ldrb	r3, [r7, #23]
 8013e96:	005b      	lsls	r3, r3, #1
 8013e98:	3301      	adds	r3, #1
 8013e9a:	68ba      	ldr	r2, [r7, #8]
 8013e9c:	4413      	add	r3, r2
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013ea2:	7dfb      	ldrb	r3, [r7, #23]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	75fb      	strb	r3, [r7, #23]
 8013ea8:	7dfa      	ldrb	r2, [r7, #23]
 8013eaa:	79fb      	ldrb	r3, [r7, #7]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d3d3      	bcc.n	8013e58 <IntToUnicode+0x18>
  }
}
 8013eb0:	bf00      	nop
 8013eb2:	bf00      	nop
 8013eb4:	371c      	adds	r7, #28
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr
	...

08013ec0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b0ba      	sub	sp, #232	@ 0xe8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ec8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8013ecc:	2200      	movs	r2, #0
 8013ece:	601a      	str	r2, [r3, #0]
 8013ed0:	605a      	str	r2, [r3, #4]
 8013ed2:	609a      	str	r2, [r3, #8]
 8013ed4:	60da      	str	r2, [r3, #12]
 8013ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013ed8:	f107 0310 	add.w	r3, r7, #16
 8013edc:	22c0      	movs	r2, #192	@ 0xc0
 8013ede:	2100      	movs	r1, #0
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f000 fd47 	bl	8014974 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	4a34      	ldr	r2, [pc, #208]	@ (8013fbc <HAL_PCD_MspInit+0xfc>)
 8013eec:	4293      	cmp	r3, r2
 8013eee:	d161      	bne.n	8013fb4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013ef0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8013ef4:	f04f 0300 	mov.w	r3, #0
 8013ef8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013efc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8013f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013f04:	f107 0310 	add.w	r3, r7, #16
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7f4 fbbf 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d001      	beq.n	8013f18 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8013f14:	f7ed f97c 	bl	8001210 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013f18:	f7f3 fb80 	bl	800761c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f1c:	4b28      	ldr	r3, [pc, #160]	@ (8013fc0 <HAL_PCD_MspInit+0x100>)
 8013f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013f22:	4a27      	ldr	r2, [pc, #156]	@ (8013fc0 <HAL_PCD_MspInit+0x100>)
 8013f24:	f043 0301 	orr.w	r3, r3, #1
 8013f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8013f2c:	4b24      	ldr	r3, [pc, #144]	@ (8013fc0 <HAL_PCD_MspInit+0x100>)
 8013f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013f32:	f003 0301 	and.w	r3, r3, #1
 8013f36:	60fb      	str	r3, [r7, #12]
 8013f38:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8013f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013f42:	2300      	movs	r3, #0
 8013f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8013f52:	4619      	mov	r1, r3
 8013f54:	481b      	ldr	r0, [pc, #108]	@ (8013fc4 <HAL_PCD_MspInit+0x104>)
 8013f56:	f7f1 fd89 	bl	8005a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013f5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f62:	2302      	movs	r3, #2
 8013f64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8013f74:	230a      	movs	r3, #10
 8013f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f7a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8013f7e:	4619      	mov	r1, r3
 8013f80:	4810      	ldr	r0, [pc, #64]	@ (8013fc4 <HAL_PCD_MspInit+0x104>)
 8013f82:	f7f1 fd73 	bl	8005a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013f86:	4b0e      	ldr	r3, [pc, #56]	@ (8013fc0 <HAL_PCD_MspInit+0x100>)
 8013f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8013fc0 <HAL_PCD_MspInit+0x100>)
 8013f8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013f92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013f96:	4b0a      	ldr	r3, [pc, #40]	@ (8013fc0 <HAL_PCD_MspInit+0x100>)
 8013f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013fa0:	60bb      	str	r3, [r7, #8]
 8013fa2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	2105      	movs	r1, #5
 8013fa8:	2065      	movs	r0, #101	@ 0x65
 8013faa:	f7ef fb11 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013fae:	2065      	movs	r0, #101	@ 0x65
 8013fb0:	f7ef fb28 	bl	8003604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013fb4:	bf00      	nop
 8013fb6:	37e8      	adds	r7, #232	@ 0xe8
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	40080000 	.word	0x40080000
 8013fc0:	58024400 	.word	0x58024400
 8013fc4:	58020000 	.word	0x58020000

08013fc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013fdc:	4619      	mov	r1, r3
 8013fde:	4610      	mov	r0, r2
 8013fe0:	f7fb fd9d 	bl	800fb1e <USBD_LL_SetupStage>
}
 8013fe4:	bf00      	nop
 8013fe6:	3708      	adds	r7, #8
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}

08013fec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b082      	sub	sp, #8
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013ffe:	78fa      	ldrb	r2, [r7, #3]
 8014000:	6879      	ldr	r1, [r7, #4]
 8014002:	4613      	mov	r3, r2
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	4413      	add	r3, r2
 8014008:	009b      	lsls	r3, r3, #2
 801400a:	440b      	add	r3, r1
 801400c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014010:	681a      	ldr	r2, [r3, #0]
 8014012:	78fb      	ldrb	r3, [r7, #3]
 8014014:	4619      	mov	r1, r3
 8014016:	f7fb fdd7 	bl	800fbc8 <USBD_LL_DataOutStage>
}
 801401a:	bf00      	nop
 801401c:	3708      	adds	r7, #8
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014022:	b580      	push	{r7, lr}
 8014024:	b082      	sub	sp, #8
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
 801402a:	460b      	mov	r3, r1
 801402c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014034:	78fa      	ldrb	r2, [r7, #3]
 8014036:	6879      	ldr	r1, [r7, #4]
 8014038:	4613      	mov	r3, r2
 801403a:	00db      	lsls	r3, r3, #3
 801403c:	4413      	add	r3, r2
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	440b      	add	r3, r1
 8014042:	3320      	adds	r3, #32
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	78fb      	ldrb	r3, [r7, #3]
 8014048:	4619      	mov	r1, r3
 801404a:	f7fb fe70 	bl	800fd2e <USBD_LL_DataInStage>
}
 801404e:	bf00      	nop
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014056:	b580      	push	{r7, lr}
 8014058:	b082      	sub	sp, #8
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014064:	4618      	mov	r0, r3
 8014066:	f7fb ffaa 	bl	800ffbe <USBD_LL_SOF>
}
 801406a:	bf00      	nop
 801406c:	3708      	adds	r7, #8
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}

08014072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014072:	b580      	push	{r7, lr}
 8014074:	b084      	sub	sp, #16
 8014076:	af00      	add	r7, sp, #0
 8014078:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801407a:	2301      	movs	r3, #1
 801407c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	79db      	ldrb	r3, [r3, #7]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d102      	bne.n	801408c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014086:	2300      	movs	r3, #0
 8014088:	73fb      	strb	r3, [r7, #15]
 801408a:	e008      	b.n	801409e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	79db      	ldrb	r3, [r3, #7]
 8014090:	2b02      	cmp	r3, #2
 8014092:	d102      	bne.n	801409a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014094:	2301      	movs	r3, #1
 8014096:	73fb      	strb	r3, [r7, #15]
 8014098:	e001      	b.n	801409e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801409a:	f7ed f8b9 	bl	8001210 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80140a4:	7bfa      	ldrb	r2, [r7, #15]
 80140a6:	4611      	mov	r1, r2
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7fb ff44 	bl	800ff36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7fb feec 	bl	800fe92 <USBD_LL_Reset>
}
 80140ba:	bf00      	nop
 80140bc:	3710      	adds	r7, #16
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
	...

080140c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fb ff3f 	bl	800ff56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	687a      	ldr	r2, [r7, #4]
 80140e4:	6812      	ldr	r2, [r2, #0]
 80140e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80140ea:	f043 0301 	orr.w	r3, r3, #1
 80140ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	7adb      	ldrb	r3, [r3, #11]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d005      	beq.n	8014104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80140f8:	4b04      	ldr	r3, [pc, #16]	@ (801410c <HAL_PCD_SuspendCallback+0x48>)
 80140fa:	691b      	ldr	r3, [r3, #16]
 80140fc:	4a03      	ldr	r2, [pc, #12]	@ (801410c <HAL_PCD_SuspendCallback+0x48>)
 80140fe:	f043 0306 	orr.w	r3, r3, #6
 8014102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014104:	bf00      	nop
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	e000ed00 	.word	0xe000ed00

08014110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801411e:	4618      	mov	r0, r3
 8014120:	f7fb ff35 	bl	800ff8e <USBD_LL_Resume>
}
 8014124:	bf00      	nop
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	460b      	mov	r3, r1
 8014136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801413e:	78fa      	ldrb	r2, [r7, #3]
 8014140:	4611      	mov	r1, r2
 8014142:	4618      	mov	r0, r3
 8014144:	f7fb ff8d 	bl	8010062 <USBD_LL_IsoOUTIncomplete>
}
 8014148:	bf00      	nop
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	460b      	mov	r3, r1
 801415a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014162:	78fa      	ldrb	r2, [r7, #3]
 8014164:	4611      	mov	r1, r2
 8014166:	4618      	mov	r0, r3
 8014168:	f7fb ff49 	bl	800fffe <USBD_LL_IsoINIncomplete>
}
 801416c:	bf00      	nop
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014182:	4618      	mov	r0, r3
 8014184:	f7fb ff9f 	bl	80100c6 <USBD_LL_DevConnected>
}
 8014188:	bf00      	nop
 801418a:	3708      	adds	r7, #8
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fb ff9c 	bl	80100dc <USBD_LL_DevDisconnected>
}
 80141a4:	bf00      	nop
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d13e      	bne.n	801423a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80141bc:	4a21      	ldr	r2, [pc, #132]	@ (8014244 <USBD_LL_Init+0x98>)
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	4a1f      	ldr	r2, [pc, #124]	@ (8014244 <USBD_LL_Init+0x98>)
 80141c8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80141cc:	4b1d      	ldr	r3, [pc, #116]	@ (8014244 <USBD_LL_Init+0x98>)
 80141ce:	4a1e      	ldr	r2, [pc, #120]	@ (8014248 <USBD_LL_Init+0x9c>)
 80141d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80141d2:	4b1c      	ldr	r3, [pc, #112]	@ (8014244 <USBD_LL_Init+0x98>)
 80141d4:	2209      	movs	r2, #9
 80141d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80141d8:	4b1a      	ldr	r3, [pc, #104]	@ (8014244 <USBD_LL_Init+0x98>)
 80141da:	2202      	movs	r2, #2
 80141dc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80141de:	4b19      	ldr	r3, [pc, #100]	@ (8014244 <USBD_LL_Init+0x98>)
 80141e0:	2200      	movs	r2, #0
 80141e2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80141e4:	4b17      	ldr	r3, [pc, #92]	@ (8014244 <USBD_LL_Init+0x98>)
 80141e6:	2202      	movs	r2, #2
 80141e8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80141ea:	4b16      	ldr	r3, [pc, #88]	@ (8014244 <USBD_LL_Init+0x98>)
 80141ec:	2200      	movs	r2, #0
 80141ee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80141f0:	4b14      	ldr	r3, [pc, #80]	@ (8014244 <USBD_LL_Init+0x98>)
 80141f2:	2200      	movs	r2, #0
 80141f4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80141f6:	4b13      	ldr	r3, [pc, #76]	@ (8014244 <USBD_LL_Init+0x98>)
 80141f8:	2200      	movs	r2, #0
 80141fa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80141fc:	4b11      	ldr	r3, [pc, #68]	@ (8014244 <USBD_LL_Init+0x98>)
 80141fe:	2201      	movs	r2, #1
 8014200:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8014202:	4b10      	ldr	r3, [pc, #64]	@ (8014244 <USBD_LL_Init+0x98>)
 8014204:	2201      	movs	r2, #1
 8014206:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014208:	4b0e      	ldr	r3, [pc, #56]	@ (8014244 <USBD_LL_Init+0x98>)
 801420a:	2200      	movs	r2, #0
 801420c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801420e:	480d      	ldr	r0, [pc, #52]	@ (8014244 <USBD_LL_Init+0x98>)
 8014210:	f7f1 ff29 	bl	8006066 <HAL_PCD_Init>
 8014214:	4603      	mov	r3, r0
 8014216:	2b00      	cmp	r3, #0
 8014218:	d001      	beq.n	801421e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801421a:	f7ec fff9 	bl	8001210 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801421e:	2180      	movs	r1, #128	@ 0x80
 8014220:	4808      	ldr	r0, [pc, #32]	@ (8014244 <USBD_LL_Init+0x98>)
 8014222:	f7f3 f980 	bl	8007526 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014226:	2240      	movs	r2, #64	@ 0x40
 8014228:	2100      	movs	r1, #0
 801422a:	4806      	ldr	r0, [pc, #24]	@ (8014244 <USBD_LL_Init+0x98>)
 801422c:	f7f3 f934 	bl	8007498 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014230:	2280      	movs	r2, #128	@ 0x80
 8014232:	2101      	movs	r1, #1
 8014234:	4803      	ldr	r0, [pc, #12]	@ (8014244 <USBD_LL_Init+0x98>)
 8014236:	f7f3 f92f 	bl	8007498 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	24005858 	.word	0x24005858
 8014248:	40080000 	.word	0x40080000

0801424c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b084      	sub	sp, #16
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014254:	2300      	movs	r3, #0
 8014256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014258:	2300      	movs	r3, #0
 801425a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014262:	4618      	mov	r0, r3
 8014264:	f7f2 f80b 	bl	800627e <HAL_PCD_Start>
 8014268:	4603      	mov	r3, r0
 801426a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801426c:	7bfb      	ldrb	r3, [r7, #15]
 801426e:	4618      	mov	r0, r3
 8014270:	f000 f942 	bl	80144f8 <USBD_Get_USB_Status>
 8014274:	4603      	mov	r3, r0
 8014276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014278:	7bbb      	ldrb	r3, [r7, #14]
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014282:	b580      	push	{r7, lr}
 8014284:	b084      	sub	sp, #16
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
 801428a:	4608      	mov	r0, r1
 801428c:	4611      	mov	r1, r2
 801428e:	461a      	mov	r2, r3
 8014290:	4603      	mov	r3, r0
 8014292:	70fb      	strb	r3, [r7, #3]
 8014294:	460b      	mov	r3, r1
 8014296:	70bb      	strb	r3, [r7, #2]
 8014298:	4613      	mov	r3, r2
 801429a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801429c:	2300      	movs	r3, #0
 801429e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142a0:	2300      	movs	r3, #0
 80142a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80142aa:	78bb      	ldrb	r3, [r7, #2]
 80142ac:	883a      	ldrh	r2, [r7, #0]
 80142ae:	78f9      	ldrb	r1, [r7, #3]
 80142b0:	f7f2 fd0c 	bl	8006ccc <HAL_PCD_EP_Open>
 80142b4:	4603      	mov	r3, r0
 80142b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142b8:	7bfb      	ldrb	r3, [r7, #15]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f000 f91c 	bl	80144f8 <USBD_Get_USB_Status>
 80142c0:	4603      	mov	r3, r0
 80142c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3710      	adds	r7, #16
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b084      	sub	sp, #16
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
 80142d6:	460b      	mov	r3, r1
 80142d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142da:	2300      	movs	r3, #0
 80142dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142de:	2300      	movs	r3, #0
 80142e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80142e8:	78fa      	ldrb	r2, [r7, #3]
 80142ea:	4611      	mov	r1, r2
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7f2 fd57 	bl	8006da0 <HAL_PCD_EP_Close>
 80142f2:	4603      	mov	r3, r0
 80142f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142f6:	7bfb      	ldrb	r3, [r7, #15]
 80142f8:	4618      	mov	r0, r3
 80142fa:	f000 f8fd 	bl	80144f8 <USBD_Get_USB_Status>
 80142fe:	4603      	mov	r3, r0
 8014300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014302:	7bbb      	ldrb	r3, [r7, #14]
}
 8014304:	4618      	mov	r0, r3
 8014306:	3710      	adds	r7, #16
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	460b      	mov	r3, r1
 8014316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014318:	2300      	movs	r3, #0
 801431a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801431c:	2300      	movs	r3, #0
 801431e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014326:	78fa      	ldrb	r2, [r7, #3]
 8014328:	4611      	mov	r1, r2
 801432a:	4618      	mov	r0, r3
 801432c:	f7f2 fe0f 	bl	8006f4e <HAL_PCD_EP_SetStall>
 8014330:	4603      	mov	r3, r0
 8014332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014334:	7bfb      	ldrb	r3, [r7, #15]
 8014336:	4618      	mov	r0, r3
 8014338:	f000 f8de 	bl	80144f8 <USBD_Get_USB_Status>
 801433c:	4603      	mov	r3, r0
 801433e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014340:	7bbb      	ldrb	r3, [r7, #14]
}
 8014342:	4618      	mov	r0, r3
 8014344:	3710      	adds	r7, #16
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b084      	sub	sp, #16
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	460b      	mov	r3, r1
 8014354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014356:	2300      	movs	r3, #0
 8014358:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801435a:	2300      	movs	r3, #0
 801435c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014364:	78fa      	ldrb	r2, [r7, #3]
 8014366:	4611      	mov	r1, r2
 8014368:	4618      	mov	r0, r3
 801436a:	f7f2 fe53 	bl	8007014 <HAL_PCD_EP_ClrStall>
 801436e:	4603      	mov	r3, r0
 8014370:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014372:	7bfb      	ldrb	r3, [r7, #15]
 8014374:	4618      	mov	r0, r3
 8014376:	f000 f8bf 	bl	80144f8 <USBD_Get_USB_Status>
 801437a:	4603      	mov	r3, r0
 801437c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801437e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014380:	4618      	mov	r0, r3
 8014382:	3710      	adds	r7, #16
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014388:	b480      	push	{r7}
 801438a:	b085      	sub	sp, #20
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	460b      	mov	r3, r1
 8014392:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801439a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801439c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	da0b      	bge.n	80143bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80143a4:	78fb      	ldrb	r3, [r7, #3]
 80143a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80143aa:	68f9      	ldr	r1, [r7, #12]
 80143ac:	4613      	mov	r3, r2
 80143ae:	00db      	lsls	r3, r3, #3
 80143b0:	4413      	add	r3, r2
 80143b2:	009b      	lsls	r3, r3, #2
 80143b4:	440b      	add	r3, r1
 80143b6:	3316      	adds	r3, #22
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	e00b      	b.n	80143d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80143bc:	78fb      	ldrb	r3, [r7, #3]
 80143be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80143c2:	68f9      	ldr	r1, [r7, #12]
 80143c4:	4613      	mov	r3, r2
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	4413      	add	r3, r2
 80143ca:	009b      	lsls	r3, r3, #2
 80143cc:	440b      	add	r3, r1
 80143ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80143d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3714      	adds	r7, #20
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr

080143e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	460b      	mov	r3, r1
 80143ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143ec:	2300      	movs	r3, #0
 80143ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143f0:	2300      	movs	r3, #0
 80143f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80143fa:	78fa      	ldrb	r2, [r7, #3]
 80143fc:	4611      	mov	r1, r2
 80143fe:	4618      	mov	r0, r3
 8014400:	f7f2 fc40 	bl	8006c84 <HAL_PCD_SetAddress>
 8014404:	4603      	mov	r3, r0
 8014406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014408:	7bfb      	ldrb	r3, [r7, #15]
 801440a:	4618      	mov	r0, r3
 801440c:	f000 f874 	bl	80144f8 <USBD_Get_USB_Status>
 8014410:	4603      	mov	r3, r0
 8014412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014414:	7bbb      	ldrb	r3, [r7, #14]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3710      	adds	r7, #16
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801441e:	b580      	push	{r7, lr}
 8014420:	b086      	sub	sp, #24
 8014422:	af00      	add	r7, sp, #0
 8014424:	60f8      	str	r0, [r7, #12]
 8014426:	607a      	str	r2, [r7, #4]
 8014428:	603b      	str	r3, [r7, #0]
 801442a:	460b      	mov	r3, r1
 801442c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801442e:	2300      	movs	r3, #0
 8014430:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014432:	2300      	movs	r3, #0
 8014434:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801443c:	7af9      	ldrb	r1, [r7, #11]
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	f7f2 fd4a 	bl	8006eda <HAL_PCD_EP_Transmit>
 8014446:	4603      	mov	r3, r0
 8014448:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801444a:	7dfb      	ldrb	r3, [r7, #23]
 801444c:	4618      	mov	r0, r3
 801444e:	f000 f853 	bl	80144f8 <USBD_Get_USB_Status>
 8014452:	4603      	mov	r3, r0
 8014454:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014456:	7dbb      	ldrb	r3, [r7, #22]
}
 8014458:	4618      	mov	r0, r3
 801445a:	3718      	adds	r7, #24
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b086      	sub	sp, #24
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	607a      	str	r2, [r7, #4]
 801446a:	603b      	str	r3, [r7, #0]
 801446c:	460b      	mov	r3, r1
 801446e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014470:	2300      	movs	r3, #0
 8014472:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014474:	2300      	movs	r3, #0
 8014476:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801447e:	7af9      	ldrb	r1, [r7, #11]
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	f7f2 fcd6 	bl	8006e34 <HAL_PCD_EP_Receive>
 8014488:	4603      	mov	r3, r0
 801448a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801448c:	7dfb      	ldrb	r3, [r7, #23]
 801448e:	4618      	mov	r0, r3
 8014490:	f000 f832 	bl	80144f8 <USBD_Get_USB_Status>
 8014494:	4603      	mov	r3, r0
 8014496:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014498:	7dbb      	ldrb	r3, [r7, #22]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3718      	adds	r7, #24
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b082      	sub	sp, #8
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
 80144aa:	460b      	mov	r3, r1
 80144ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80144b4:	78fa      	ldrb	r2, [r7, #3]
 80144b6:	4611      	mov	r1, r2
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7f2 fcf6 	bl	8006eaa <HAL_PCD_EP_GetRxCount>
 80144be:	4603      	mov	r3, r0
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80144d0:	4b03      	ldr	r3, [pc, #12]	@ (80144e0 <USBD_static_malloc+0x18>)
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	370c      	adds	r7, #12
 80144d6:	46bd      	mov	sp, r7
 80144d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144dc:	4770      	bx	lr
 80144de:	bf00      	nop
 80144e0:	24005d3c 	.word	0x24005d3c

080144e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80144ec:	bf00      	nop
 80144ee:	370c      	adds	r7, #12
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr

080144f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80144f8:	b480      	push	{r7}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	4603      	mov	r3, r0
 8014500:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014502:	2300      	movs	r3, #0
 8014504:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014506:	79fb      	ldrb	r3, [r7, #7]
 8014508:	2b03      	cmp	r3, #3
 801450a:	d817      	bhi.n	801453c <USBD_Get_USB_Status+0x44>
 801450c:	a201      	add	r2, pc, #4	@ (adr r2, 8014514 <USBD_Get_USB_Status+0x1c>)
 801450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014512:	bf00      	nop
 8014514:	08014525 	.word	0x08014525
 8014518:	0801452b 	.word	0x0801452b
 801451c:	08014531 	.word	0x08014531
 8014520:	08014537 	.word	0x08014537
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014524:	2300      	movs	r3, #0
 8014526:	73fb      	strb	r3, [r7, #15]
    break;
 8014528:	e00b      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801452a:	2303      	movs	r3, #3
 801452c:	73fb      	strb	r3, [r7, #15]
    break;
 801452e:	e008      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014530:	2301      	movs	r3, #1
 8014532:	73fb      	strb	r3, [r7, #15]
    break;
 8014534:	e005      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014536:	2303      	movs	r3, #3
 8014538:	73fb      	strb	r3, [r7, #15]
    break;
 801453a:	e002      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801453c:	2303      	movs	r3, #3
 801453e:	73fb      	strb	r3, [r7, #15]
    break;
 8014540:	bf00      	nop
  }
  return usb_status;
 8014542:	7bfb      	ldrb	r3, [r7, #15]
}
 8014544:	4618      	mov	r0, r3
 8014546:	3714      	adds	r7, #20
 8014548:	46bd      	mov	sp, r7
 801454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454e:	4770      	bx	lr

08014550 <std>:
 8014550:	2300      	movs	r3, #0
 8014552:	b510      	push	{r4, lr}
 8014554:	4604      	mov	r4, r0
 8014556:	e9c0 3300 	strd	r3, r3, [r0]
 801455a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801455e:	6083      	str	r3, [r0, #8]
 8014560:	8181      	strh	r1, [r0, #12]
 8014562:	6643      	str	r3, [r0, #100]	@ 0x64
 8014564:	81c2      	strh	r2, [r0, #14]
 8014566:	6183      	str	r3, [r0, #24]
 8014568:	4619      	mov	r1, r3
 801456a:	2208      	movs	r2, #8
 801456c:	305c      	adds	r0, #92	@ 0x5c
 801456e:	f000 fa01 	bl	8014974 <memset>
 8014572:	4b0d      	ldr	r3, [pc, #52]	@ (80145a8 <std+0x58>)
 8014574:	6263      	str	r3, [r4, #36]	@ 0x24
 8014576:	4b0d      	ldr	r3, [pc, #52]	@ (80145ac <std+0x5c>)
 8014578:	62a3      	str	r3, [r4, #40]	@ 0x28
 801457a:	4b0d      	ldr	r3, [pc, #52]	@ (80145b0 <std+0x60>)
 801457c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801457e:	4b0d      	ldr	r3, [pc, #52]	@ (80145b4 <std+0x64>)
 8014580:	6323      	str	r3, [r4, #48]	@ 0x30
 8014582:	4b0d      	ldr	r3, [pc, #52]	@ (80145b8 <std+0x68>)
 8014584:	6224      	str	r4, [r4, #32]
 8014586:	429c      	cmp	r4, r3
 8014588:	d006      	beq.n	8014598 <std+0x48>
 801458a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801458e:	4294      	cmp	r4, r2
 8014590:	d002      	beq.n	8014598 <std+0x48>
 8014592:	33d0      	adds	r3, #208	@ 0xd0
 8014594:	429c      	cmp	r4, r3
 8014596:	d105      	bne.n	80145a4 <std+0x54>
 8014598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801459c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145a0:	f000 babe 	b.w	8014b20 <__retarget_lock_init_recursive>
 80145a4:	bd10      	pop	{r4, pc}
 80145a6:	bf00      	nop
 80145a8:	080147c5 	.word	0x080147c5
 80145ac:	080147e7 	.word	0x080147e7
 80145b0:	0801481f 	.word	0x0801481f
 80145b4:	08014843 	.word	0x08014843
 80145b8:	24009990 	.word	0x24009990

080145bc <stdio_exit_handler>:
 80145bc:	4a02      	ldr	r2, [pc, #8]	@ (80145c8 <stdio_exit_handler+0xc>)
 80145be:	4903      	ldr	r1, [pc, #12]	@ (80145cc <stdio_exit_handler+0x10>)
 80145c0:	4803      	ldr	r0, [pc, #12]	@ (80145d0 <stdio_exit_handler+0x14>)
 80145c2:	f000 b869 	b.w	8014698 <_fwalk_sglue>
 80145c6:	bf00      	nop
 80145c8:	24000138 	.word	0x24000138
 80145cc:	080153d9 	.word	0x080153d9
 80145d0:	24000148 	.word	0x24000148

080145d4 <cleanup_stdio>:
 80145d4:	6841      	ldr	r1, [r0, #4]
 80145d6:	4b0c      	ldr	r3, [pc, #48]	@ (8014608 <cleanup_stdio+0x34>)
 80145d8:	4299      	cmp	r1, r3
 80145da:	b510      	push	{r4, lr}
 80145dc:	4604      	mov	r4, r0
 80145de:	d001      	beq.n	80145e4 <cleanup_stdio+0x10>
 80145e0:	f000 fefa 	bl	80153d8 <_fflush_r>
 80145e4:	68a1      	ldr	r1, [r4, #8]
 80145e6:	4b09      	ldr	r3, [pc, #36]	@ (801460c <cleanup_stdio+0x38>)
 80145e8:	4299      	cmp	r1, r3
 80145ea:	d002      	beq.n	80145f2 <cleanup_stdio+0x1e>
 80145ec:	4620      	mov	r0, r4
 80145ee:	f000 fef3 	bl	80153d8 <_fflush_r>
 80145f2:	68e1      	ldr	r1, [r4, #12]
 80145f4:	4b06      	ldr	r3, [pc, #24]	@ (8014610 <cleanup_stdio+0x3c>)
 80145f6:	4299      	cmp	r1, r3
 80145f8:	d004      	beq.n	8014604 <cleanup_stdio+0x30>
 80145fa:	4620      	mov	r0, r4
 80145fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014600:	f000 beea 	b.w	80153d8 <_fflush_r>
 8014604:	bd10      	pop	{r4, pc}
 8014606:	bf00      	nop
 8014608:	24009990 	.word	0x24009990
 801460c:	240099f8 	.word	0x240099f8
 8014610:	24009a60 	.word	0x24009a60

08014614 <global_stdio_init.part.0>:
 8014614:	b510      	push	{r4, lr}
 8014616:	4b0b      	ldr	r3, [pc, #44]	@ (8014644 <global_stdio_init.part.0+0x30>)
 8014618:	4c0b      	ldr	r4, [pc, #44]	@ (8014648 <global_stdio_init.part.0+0x34>)
 801461a:	4a0c      	ldr	r2, [pc, #48]	@ (801464c <global_stdio_init.part.0+0x38>)
 801461c:	601a      	str	r2, [r3, #0]
 801461e:	4620      	mov	r0, r4
 8014620:	2200      	movs	r2, #0
 8014622:	2104      	movs	r1, #4
 8014624:	f7ff ff94 	bl	8014550 <std>
 8014628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801462c:	2201      	movs	r2, #1
 801462e:	2109      	movs	r1, #9
 8014630:	f7ff ff8e 	bl	8014550 <std>
 8014634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014638:	2202      	movs	r2, #2
 801463a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801463e:	2112      	movs	r1, #18
 8014640:	f7ff bf86 	b.w	8014550 <std>
 8014644:	24009ac8 	.word	0x24009ac8
 8014648:	24009990 	.word	0x24009990
 801464c:	080145bd 	.word	0x080145bd

08014650 <__sfp_lock_acquire>:
 8014650:	4801      	ldr	r0, [pc, #4]	@ (8014658 <__sfp_lock_acquire+0x8>)
 8014652:	f000 ba66 	b.w	8014b22 <__retarget_lock_acquire_recursive>
 8014656:	bf00      	nop
 8014658:	24009ad1 	.word	0x24009ad1

0801465c <__sfp_lock_release>:
 801465c:	4801      	ldr	r0, [pc, #4]	@ (8014664 <__sfp_lock_release+0x8>)
 801465e:	f000 ba61 	b.w	8014b24 <__retarget_lock_release_recursive>
 8014662:	bf00      	nop
 8014664:	24009ad1 	.word	0x24009ad1

08014668 <__sinit>:
 8014668:	b510      	push	{r4, lr}
 801466a:	4604      	mov	r4, r0
 801466c:	f7ff fff0 	bl	8014650 <__sfp_lock_acquire>
 8014670:	6a23      	ldr	r3, [r4, #32]
 8014672:	b11b      	cbz	r3, 801467c <__sinit+0x14>
 8014674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014678:	f7ff bff0 	b.w	801465c <__sfp_lock_release>
 801467c:	4b04      	ldr	r3, [pc, #16]	@ (8014690 <__sinit+0x28>)
 801467e:	6223      	str	r3, [r4, #32]
 8014680:	4b04      	ldr	r3, [pc, #16]	@ (8014694 <__sinit+0x2c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d1f5      	bne.n	8014674 <__sinit+0xc>
 8014688:	f7ff ffc4 	bl	8014614 <global_stdio_init.part.0>
 801468c:	e7f2      	b.n	8014674 <__sinit+0xc>
 801468e:	bf00      	nop
 8014690:	080145d5 	.word	0x080145d5
 8014694:	24009ac8 	.word	0x24009ac8

08014698 <_fwalk_sglue>:
 8014698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801469c:	4607      	mov	r7, r0
 801469e:	4688      	mov	r8, r1
 80146a0:	4614      	mov	r4, r2
 80146a2:	2600      	movs	r6, #0
 80146a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80146a8:	f1b9 0901 	subs.w	r9, r9, #1
 80146ac:	d505      	bpl.n	80146ba <_fwalk_sglue+0x22>
 80146ae:	6824      	ldr	r4, [r4, #0]
 80146b0:	2c00      	cmp	r4, #0
 80146b2:	d1f7      	bne.n	80146a4 <_fwalk_sglue+0xc>
 80146b4:	4630      	mov	r0, r6
 80146b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ba:	89ab      	ldrh	r3, [r5, #12]
 80146bc:	2b01      	cmp	r3, #1
 80146be:	d907      	bls.n	80146d0 <_fwalk_sglue+0x38>
 80146c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80146c4:	3301      	adds	r3, #1
 80146c6:	d003      	beq.n	80146d0 <_fwalk_sglue+0x38>
 80146c8:	4629      	mov	r1, r5
 80146ca:	4638      	mov	r0, r7
 80146cc:	47c0      	blx	r8
 80146ce:	4306      	orrs	r6, r0
 80146d0:	3568      	adds	r5, #104	@ 0x68
 80146d2:	e7e9      	b.n	80146a8 <_fwalk_sglue+0x10>

080146d4 <iprintf>:
 80146d4:	b40f      	push	{r0, r1, r2, r3}
 80146d6:	b507      	push	{r0, r1, r2, lr}
 80146d8:	4906      	ldr	r1, [pc, #24]	@ (80146f4 <iprintf+0x20>)
 80146da:	ab04      	add	r3, sp, #16
 80146dc:	6808      	ldr	r0, [r1, #0]
 80146de:	f853 2b04 	ldr.w	r2, [r3], #4
 80146e2:	6881      	ldr	r1, [r0, #8]
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	f000 fb4f 	bl	8014d88 <_vfiprintf_r>
 80146ea:	b003      	add	sp, #12
 80146ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80146f0:	b004      	add	sp, #16
 80146f2:	4770      	bx	lr
 80146f4:	24000144 	.word	0x24000144

080146f8 <putchar>:
 80146f8:	4b02      	ldr	r3, [pc, #8]	@ (8014704 <putchar+0xc>)
 80146fa:	4601      	mov	r1, r0
 80146fc:	6818      	ldr	r0, [r3, #0]
 80146fe:	6882      	ldr	r2, [r0, #8]
 8014700:	f000 bef4 	b.w	80154ec <_putc_r>
 8014704:	24000144 	.word	0x24000144

08014708 <_puts_r>:
 8014708:	6a03      	ldr	r3, [r0, #32]
 801470a:	b570      	push	{r4, r5, r6, lr}
 801470c:	6884      	ldr	r4, [r0, #8]
 801470e:	4605      	mov	r5, r0
 8014710:	460e      	mov	r6, r1
 8014712:	b90b      	cbnz	r3, 8014718 <_puts_r+0x10>
 8014714:	f7ff ffa8 	bl	8014668 <__sinit>
 8014718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801471a:	07db      	lsls	r3, r3, #31
 801471c:	d405      	bmi.n	801472a <_puts_r+0x22>
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	0598      	lsls	r0, r3, #22
 8014722:	d402      	bmi.n	801472a <_puts_r+0x22>
 8014724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014726:	f000 f9fc 	bl	8014b22 <__retarget_lock_acquire_recursive>
 801472a:	89a3      	ldrh	r3, [r4, #12]
 801472c:	0719      	lsls	r1, r3, #28
 801472e:	d502      	bpl.n	8014736 <_puts_r+0x2e>
 8014730:	6923      	ldr	r3, [r4, #16]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d135      	bne.n	80147a2 <_puts_r+0x9a>
 8014736:	4621      	mov	r1, r4
 8014738:	4628      	mov	r0, r5
 801473a:	f000 f8c5 	bl	80148c8 <__swsetup_r>
 801473e:	b380      	cbz	r0, 80147a2 <_puts_r+0x9a>
 8014740:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8014744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014746:	07da      	lsls	r2, r3, #31
 8014748:	d405      	bmi.n	8014756 <_puts_r+0x4e>
 801474a:	89a3      	ldrh	r3, [r4, #12]
 801474c:	059b      	lsls	r3, r3, #22
 801474e:	d402      	bmi.n	8014756 <_puts_r+0x4e>
 8014750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014752:	f000 f9e7 	bl	8014b24 <__retarget_lock_release_recursive>
 8014756:	4628      	mov	r0, r5
 8014758:	bd70      	pop	{r4, r5, r6, pc}
 801475a:	2b00      	cmp	r3, #0
 801475c:	da04      	bge.n	8014768 <_puts_r+0x60>
 801475e:	69a2      	ldr	r2, [r4, #24]
 8014760:	429a      	cmp	r2, r3
 8014762:	dc17      	bgt.n	8014794 <_puts_r+0x8c>
 8014764:	290a      	cmp	r1, #10
 8014766:	d015      	beq.n	8014794 <_puts_r+0x8c>
 8014768:	6823      	ldr	r3, [r4, #0]
 801476a:	1c5a      	adds	r2, r3, #1
 801476c:	6022      	str	r2, [r4, #0]
 801476e:	7019      	strb	r1, [r3, #0]
 8014770:	68a3      	ldr	r3, [r4, #8]
 8014772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014776:	3b01      	subs	r3, #1
 8014778:	60a3      	str	r3, [r4, #8]
 801477a:	2900      	cmp	r1, #0
 801477c:	d1ed      	bne.n	801475a <_puts_r+0x52>
 801477e:	2b00      	cmp	r3, #0
 8014780:	da11      	bge.n	80147a6 <_puts_r+0x9e>
 8014782:	4622      	mov	r2, r4
 8014784:	210a      	movs	r1, #10
 8014786:	4628      	mov	r0, r5
 8014788:	f000 f85f 	bl	801484a <__swbuf_r>
 801478c:	3001      	adds	r0, #1
 801478e:	d0d7      	beq.n	8014740 <_puts_r+0x38>
 8014790:	250a      	movs	r5, #10
 8014792:	e7d7      	b.n	8014744 <_puts_r+0x3c>
 8014794:	4622      	mov	r2, r4
 8014796:	4628      	mov	r0, r5
 8014798:	f000 f857 	bl	801484a <__swbuf_r>
 801479c:	3001      	adds	r0, #1
 801479e:	d1e7      	bne.n	8014770 <_puts_r+0x68>
 80147a0:	e7ce      	b.n	8014740 <_puts_r+0x38>
 80147a2:	3e01      	subs	r6, #1
 80147a4:	e7e4      	b.n	8014770 <_puts_r+0x68>
 80147a6:	6823      	ldr	r3, [r4, #0]
 80147a8:	1c5a      	adds	r2, r3, #1
 80147aa:	6022      	str	r2, [r4, #0]
 80147ac:	220a      	movs	r2, #10
 80147ae:	701a      	strb	r2, [r3, #0]
 80147b0:	e7ee      	b.n	8014790 <_puts_r+0x88>
	...

080147b4 <puts>:
 80147b4:	4b02      	ldr	r3, [pc, #8]	@ (80147c0 <puts+0xc>)
 80147b6:	4601      	mov	r1, r0
 80147b8:	6818      	ldr	r0, [r3, #0]
 80147ba:	f7ff bfa5 	b.w	8014708 <_puts_r>
 80147be:	bf00      	nop
 80147c0:	24000144 	.word	0x24000144

080147c4 <__sread>:
 80147c4:	b510      	push	{r4, lr}
 80147c6:	460c      	mov	r4, r1
 80147c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147cc:	f000 f95a 	bl	8014a84 <_read_r>
 80147d0:	2800      	cmp	r0, #0
 80147d2:	bfab      	itete	ge
 80147d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80147d6:	89a3      	ldrhlt	r3, [r4, #12]
 80147d8:	181b      	addge	r3, r3, r0
 80147da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80147de:	bfac      	ite	ge
 80147e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80147e2:	81a3      	strhlt	r3, [r4, #12]
 80147e4:	bd10      	pop	{r4, pc}

080147e6 <__swrite>:
 80147e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ea:	461f      	mov	r7, r3
 80147ec:	898b      	ldrh	r3, [r1, #12]
 80147ee:	05db      	lsls	r3, r3, #23
 80147f0:	4605      	mov	r5, r0
 80147f2:	460c      	mov	r4, r1
 80147f4:	4616      	mov	r6, r2
 80147f6:	d505      	bpl.n	8014804 <__swrite+0x1e>
 80147f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147fc:	2302      	movs	r3, #2
 80147fe:	2200      	movs	r2, #0
 8014800:	f000 f92e 	bl	8014a60 <_lseek_r>
 8014804:	89a3      	ldrh	r3, [r4, #12]
 8014806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801480a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801480e:	81a3      	strh	r3, [r4, #12]
 8014810:	4632      	mov	r2, r6
 8014812:	463b      	mov	r3, r7
 8014814:	4628      	mov	r0, r5
 8014816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801481a:	f000 b945 	b.w	8014aa8 <_write_r>

0801481e <__sseek>:
 801481e:	b510      	push	{r4, lr}
 8014820:	460c      	mov	r4, r1
 8014822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014826:	f000 f91b 	bl	8014a60 <_lseek_r>
 801482a:	1c43      	adds	r3, r0, #1
 801482c:	89a3      	ldrh	r3, [r4, #12]
 801482e:	bf15      	itete	ne
 8014830:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014832:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014836:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801483a:	81a3      	strheq	r3, [r4, #12]
 801483c:	bf18      	it	ne
 801483e:	81a3      	strhne	r3, [r4, #12]
 8014840:	bd10      	pop	{r4, pc}

08014842 <__sclose>:
 8014842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014846:	f000 b89d 	b.w	8014984 <_close_r>

0801484a <__swbuf_r>:
 801484a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801484c:	460e      	mov	r6, r1
 801484e:	4614      	mov	r4, r2
 8014850:	4605      	mov	r5, r0
 8014852:	b118      	cbz	r0, 801485c <__swbuf_r+0x12>
 8014854:	6a03      	ldr	r3, [r0, #32]
 8014856:	b90b      	cbnz	r3, 801485c <__swbuf_r+0x12>
 8014858:	f7ff ff06 	bl	8014668 <__sinit>
 801485c:	69a3      	ldr	r3, [r4, #24]
 801485e:	60a3      	str	r3, [r4, #8]
 8014860:	89a3      	ldrh	r3, [r4, #12]
 8014862:	071a      	lsls	r2, r3, #28
 8014864:	d501      	bpl.n	801486a <__swbuf_r+0x20>
 8014866:	6923      	ldr	r3, [r4, #16]
 8014868:	b943      	cbnz	r3, 801487c <__swbuf_r+0x32>
 801486a:	4621      	mov	r1, r4
 801486c:	4628      	mov	r0, r5
 801486e:	f000 f82b 	bl	80148c8 <__swsetup_r>
 8014872:	b118      	cbz	r0, 801487c <__swbuf_r+0x32>
 8014874:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014878:	4638      	mov	r0, r7
 801487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801487c:	6823      	ldr	r3, [r4, #0]
 801487e:	6922      	ldr	r2, [r4, #16]
 8014880:	1a98      	subs	r0, r3, r2
 8014882:	6963      	ldr	r3, [r4, #20]
 8014884:	b2f6      	uxtb	r6, r6
 8014886:	4283      	cmp	r3, r0
 8014888:	4637      	mov	r7, r6
 801488a:	dc05      	bgt.n	8014898 <__swbuf_r+0x4e>
 801488c:	4621      	mov	r1, r4
 801488e:	4628      	mov	r0, r5
 8014890:	f000 fda2 	bl	80153d8 <_fflush_r>
 8014894:	2800      	cmp	r0, #0
 8014896:	d1ed      	bne.n	8014874 <__swbuf_r+0x2a>
 8014898:	68a3      	ldr	r3, [r4, #8]
 801489a:	3b01      	subs	r3, #1
 801489c:	60a3      	str	r3, [r4, #8]
 801489e:	6823      	ldr	r3, [r4, #0]
 80148a0:	1c5a      	adds	r2, r3, #1
 80148a2:	6022      	str	r2, [r4, #0]
 80148a4:	701e      	strb	r6, [r3, #0]
 80148a6:	6962      	ldr	r2, [r4, #20]
 80148a8:	1c43      	adds	r3, r0, #1
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d004      	beq.n	80148b8 <__swbuf_r+0x6e>
 80148ae:	89a3      	ldrh	r3, [r4, #12]
 80148b0:	07db      	lsls	r3, r3, #31
 80148b2:	d5e1      	bpl.n	8014878 <__swbuf_r+0x2e>
 80148b4:	2e0a      	cmp	r6, #10
 80148b6:	d1df      	bne.n	8014878 <__swbuf_r+0x2e>
 80148b8:	4621      	mov	r1, r4
 80148ba:	4628      	mov	r0, r5
 80148bc:	f000 fd8c 	bl	80153d8 <_fflush_r>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d0d9      	beq.n	8014878 <__swbuf_r+0x2e>
 80148c4:	e7d6      	b.n	8014874 <__swbuf_r+0x2a>
	...

080148c8 <__swsetup_r>:
 80148c8:	b538      	push	{r3, r4, r5, lr}
 80148ca:	4b29      	ldr	r3, [pc, #164]	@ (8014970 <__swsetup_r+0xa8>)
 80148cc:	4605      	mov	r5, r0
 80148ce:	6818      	ldr	r0, [r3, #0]
 80148d0:	460c      	mov	r4, r1
 80148d2:	b118      	cbz	r0, 80148dc <__swsetup_r+0x14>
 80148d4:	6a03      	ldr	r3, [r0, #32]
 80148d6:	b90b      	cbnz	r3, 80148dc <__swsetup_r+0x14>
 80148d8:	f7ff fec6 	bl	8014668 <__sinit>
 80148dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148e0:	0719      	lsls	r1, r3, #28
 80148e2:	d422      	bmi.n	801492a <__swsetup_r+0x62>
 80148e4:	06da      	lsls	r2, r3, #27
 80148e6:	d407      	bmi.n	80148f8 <__swsetup_r+0x30>
 80148e8:	2209      	movs	r2, #9
 80148ea:	602a      	str	r2, [r5, #0]
 80148ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148f0:	81a3      	strh	r3, [r4, #12]
 80148f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80148f6:	e033      	b.n	8014960 <__swsetup_r+0x98>
 80148f8:	0758      	lsls	r0, r3, #29
 80148fa:	d512      	bpl.n	8014922 <__swsetup_r+0x5a>
 80148fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148fe:	b141      	cbz	r1, 8014912 <__swsetup_r+0x4a>
 8014900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014904:	4299      	cmp	r1, r3
 8014906:	d002      	beq.n	801490e <__swsetup_r+0x46>
 8014908:	4628      	mov	r0, r5
 801490a:	f000 f91b 	bl	8014b44 <_free_r>
 801490e:	2300      	movs	r3, #0
 8014910:	6363      	str	r3, [r4, #52]	@ 0x34
 8014912:	89a3      	ldrh	r3, [r4, #12]
 8014914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014918:	81a3      	strh	r3, [r4, #12]
 801491a:	2300      	movs	r3, #0
 801491c:	6063      	str	r3, [r4, #4]
 801491e:	6923      	ldr	r3, [r4, #16]
 8014920:	6023      	str	r3, [r4, #0]
 8014922:	89a3      	ldrh	r3, [r4, #12]
 8014924:	f043 0308 	orr.w	r3, r3, #8
 8014928:	81a3      	strh	r3, [r4, #12]
 801492a:	6923      	ldr	r3, [r4, #16]
 801492c:	b94b      	cbnz	r3, 8014942 <__swsetup_r+0x7a>
 801492e:	89a3      	ldrh	r3, [r4, #12]
 8014930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014938:	d003      	beq.n	8014942 <__swsetup_r+0x7a>
 801493a:	4621      	mov	r1, r4
 801493c:	4628      	mov	r0, r5
 801493e:	f000 fd99 	bl	8015474 <__smakebuf_r>
 8014942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014946:	f013 0201 	ands.w	r2, r3, #1
 801494a:	d00a      	beq.n	8014962 <__swsetup_r+0x9a>
 801494c:	2200      	movs	r2, #0
 801494e:	60a2      	str	r2, [r4, #8]
 8014950:	6962      	ldr	r2, [r4, #20]
 8014952:	4252      	negs	r2, r2
 8014954:	61a2      	str	r2, [r4, #24]
 8014956:	6922      	ldr	r2, [r4, #16]
 8014958:	b942      	cbnz	r2, 801496c <__swsetup_r+0xa4>
 801495a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801495e:	d1c5      	bne.n	80148ec <__swsetup_r+0x24>
 8014960:	bd38      	pop	{r3, r4, r5, pc}
 8014962:	0799      	lsls	r1, r3, #30
 8014964:	bf58      	it	pl
 8014966:	6962      	ldrpl	r2, [r4, #20]
 8014968:	60a2      	str	r2, [r4, #8]
 801496a:	e7f4      	b.n	8014956 <__swsetup_r+0x8e>
 801496c:	2000      	movs	r0, #0
 801496e:	e7f7      	b.n	8014960 <__swsetup_r+0x98>
 8014970:	24000144 	.word	0x24000144

08014974 <memset>:
 8014974:	4402      	add	r2, r0
 8014976:	4603      	mov	r3, r0
 8014978:	4293      	cmp	r3, r2
 801497a:	d100      	bne.n	801497e <memset+0xa>
 801497c:	4770      	bx	lr
 801497e:	f803 1b01 	strb.w	r1, [r3], #1
 8014982:	e7f9      	b.n	8014978 <memset+0x4>

08014984 <_close_r>:
 8014984:	b538      	push	{r3, r4, r5, lr}
 8014986:	4d06      	ldr	r5, [pc, #24]	@ (80149a0 <_close_r+0x1c>)
 8014988:	2300      	movs	r3, #0
 801498a:	4604      	mov	r4, r0
 801498c:	4608      	mov	r0, r1
 801498e:	602b      	str	r3, [r5, #0]
 8014990:	f7ed fb2b 	bl	8001fea <_close>
 8014994:	1c43      	adds	r3, r0, #1
 8014996:	d102      	bne.n	801499e <_close_r+0x1a>
 8014998:	682b      	ldr	r3, [r5, #0]
 801499a:	b103      	cbz	r3, 801499e <_close_r+0x1a>
 801499c:	6023      	str	r3, [r4, #0]
 801499e:	bd38      	pop	{r3, r4, r5, pc}
 80149a0:	24009acc 	.word	0x24009acc

080149a4 <_reclaim_reent>:
 80149a4:	4b2d      	ldr	r3, [pc, #180]	@ (8014a5c <_reclaim_reent+0xb8>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	4283      	cmp	r3, r0
 80149aa:	b570      	push	{r4, r5, r6, lr}
 80149ac:	4604      	mov	r4, r0
 80149ae:	d053      	beq.n	8014a58 <_reclaim_reent+0xb4>
 80149b0:	69c3      	ldr	r3, [r0, #28]
 80149b2:	b31b      	cbz	r3, 80149fc <_reclaim_reent+0x58>
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	b163      	cbz	r3, 80149d2 <_reclaim_reent+0x2e>
 80149b8:	2500      	movs	r5, #0
 80149ba:	69e3      	ldr	r3, [r4, #28]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	5959      	ldr	r1, [r3, r5]
 80149c0:	b9b1      	cbnz	r1, 80149f0 <_reclaim_reent+0x4c>
 80149c2:	3504      	adds	r5, #4
 80149c4:	2d80      	cmp	r5, #128	@ 0x80
 80149c6:	d1f8      	bne.n	80149ba <_reclaim_reent+0x16>
 80149c8:	69e3      	ldr	r3, [r4, #28]
 80149ca:	4620      	mov	r0, r4
 80149cc:	68d9      	ldr	r1, [r3, #12]
 80149ce:	f000 f8b9 	bl	8014b44 <_free_r>
 80149d2:	69e3      	ldr	r3, [r4, #28]
 80149d4:	6819      	ldr	r1, [r3, #0]
 80149d6:	b111      	cbz	r1, 80149de <_reclaim_reent+0x3a>
 80149d8:	4620      	mov	r0, r4
 80149da:	f000 f8b3 	bl	8014b44 <_free_r>
 80149de:	69e3      	ldr	r3, [r4, #28]
 80149e0:	689d      	ldr	r5, [r3, #8]
 80149e2:	b15d      	cbz	r5, 80149fc <_reclaim_reent+0x58>
 80149e4:	4629      	mov	r1, r5
 80149e6:	4620      	mov	r0, r4
 80149e8:	682d      	ldr	r5, [r5, #0]
 80149ea:	f000 f8ab 	bl	8014b44 <_free_r>
 80149ee:	e7f8      	b.n	80149e2 <_reclaim_reent+0x3e>
 80149f0:	680e      	ldr	r6, [r1, #0]
 80149f2:	4620      	mov	r0, r4
 80149f4:	f000 f8a6 	bl	8014b44 <_free_r>
 80149f8:	4631      	mov	r1, r6
 80149fa:	e7e1      	b.n	80149c0 <_reclaim_reent+0x1c>
 80149fc:	6961      	ldr	r1, [r4, #20]
 80149fe:	b111      	cbz	r1, 8014a06 <_reclaim_reent+0x62>
 8014a00:	4620      	mov	r0, r4
 8014a02:	f000 f89f 	bl	8014b44 <_free_r>
 8014a06:	69e1      	ldr	r1, [r4, #28]
 8014a08:	b111      	cbz	r1, 8014a10 <_reclaim_reent+0x6c>
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f000 f89a 	bl	8014b44 <_free_r>
 8014a10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014a12:	b111      	cbz	r1, 8014a1a <_reclaim_reent+0x76>
 8014a14:	4620      	mov	r0, r4
 8014a16:	f000 f895 	bl	8014b44 <_free_r>
 8014a1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a1c:	b111      	cbz	r1, 8014a24 <_reclaim_reent+0x80>
 8014a1e:	4620      	mov	r0, r4
 8014a20:	f000 f890 	bl	8014b44 <_free_r>
 8014a24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014a26:	b111      	cbz	r1, 8014a2e <_reclaim_reent+0x8a>
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f000 f88b 	bl	8014b44 <_free_r>
 8014a2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014a30:	b111      	cbz	r1, 8014a38 <_reclaim_reent+0x94>
 8014a32:	4620      	mov	r0, r4
 8014a34:	f000 f886 	bl	8014b44 <_free_r>
 8014a38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014a3a:	b111      	cbz	r1, 8014a42 <_reclaim_reent+0x9e>
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	f000 f881 	bl	8014b44 <_free_r>
 8014a42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014a44:	b111      	cbz	r1, 8014a4c <_reclaim_reent+0xa8>
 8014a46:	4620      	mov	r0, r4
 8014a48:	f000 f87c 	bl	8014b44 <_free_r>
 8014a4c:	6a23      	ldr	r3, [r4, #32]
 8014a4e:	b11b      	cbz	r3, 8014a58 <_reclaim_reent+0xb4>
 8014a50:	4620      	mov	r0, r4
 8014a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a56:	4718      	bx	r3
 8014a58:	bd70      	pop	{r4, r5, r6, pc}
 8014a5a:	bf00      	nop
 8014a5c:	24000144 	.word	0x24000144

08014a60 <_lseek_r>:
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4d07      	ldr	r5, [pc, #28]	@ (8014a80 <_lseek_r+0x20>)
 8014a64:	4604      	mov	r4, r0
 8014a66:	4608      	mov	r0, r1
 8014a68:	4611      	mov	r1, r2
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	602a      	str	r2, [r5, #0]
 8014a6e:	461a      	mov	r2, r3
 8014a70:	f7ed fae2 	bl	8002038 <_lseek>
 8014a74:	1c43      	adds	r3, r0, #1
 8014a76:	d102      	bne.n	8014a7e <_lseek_r+0x1e>
 8014a78:	682b      	ldr	r3, [r5, #0]
 8014a7a:	b103      	cbz	r3, 8014a7e <_lseek_r+0x1e>
 8014a7c:	6023      	str	r3, [r4, #0]
 8014a7e:	bd38      	pop	{r3, r4, r5, pc}
 8014a80:	24009acc 	.word	0x24009acc

08014a84 <_read_r>:
 8014a84:	b538      	push	{r3, r4, r5, lr}
 8014a86:	4d07      	ldr	r5, [pc, #28]	@ (8014aa4 <_read_r+0x20>)
 8014a88:	4604      	mov	r4, r0
 8014a8a:	4608      	mov	r0, r1
 8014a8c:	4611      	mov	r1, r2
 8014a8e:	2200      	movs	r2, #0
 8014a90:	602a      	str	r2, [r5, #0]
 8014a92:	461a      	mov	r2, r3
 8014a94:	f7ed fa70 	bl	8001f78 <_read>
 8014a98:	1c43      	adds	r3, r0, #1
 8014a9a:	d102      	bne.n	8014aa2 <_read_r+0x1e>
 8014a9c:	682b      	ldr	r3, [r5, #0]
 8014a9e:	b103      	cbz	r3, 8014aa2 <_read_r+0x1e>
 8014aa0:	6023      	str	r3, [r4, #0]
 8014aa2:	bd38      	pop	{r3, r4, r5, pc}
 8014aa4:	24009acc 	.word	0x24009acc

08014aa8 <_write_r>:
 8014aa8:	b538      	push	{r3, r4, r5, lr}
 8014aaa:	4d07      	ldr	r5, [pc, #28]	@ (8014ac8 <_write_r+0x20>)
 8014aac:	4604      	mov	r4, r0
 8014aae:	4608      	mov	r0, r1
 8014ab0:	4611      	mov	r1, r2
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	602a      	str	r2, [r5, #0]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	f7ed fa7b 	bl	8001fb2 <_write>
 8014abc:	1c43      	adds	r3, r0, #1
 8014abe:	d102      	bne.n	8014ac6 <_write_r+0x1e>
 8014ac0:	682b      	ldr	r3, [r5, #0]
 8014ac2:	b103      	cbz	r3, 8014ac6 <_write_r+0x1e>
 8014ac4:	6023      	str	r3, [r4, #0]
 8014ac6:	bd38      	pop	{r3, r4, r5, pc}
 8014ac8:	24009acc 	.word	0x24009acc

08014acc <__errno>:
 8014acc:	4b01      	ldr	r3, [pc, #4]	@ (8014ad4 <__errno+0x8>)
 8014ace:	6818      	ldr	r0, [r3, #0]
 8014ad0:	4770      	bx	lr
 8014ad2:	bf00      	nop
 8014ad4:	24000144 	.word	0x24000144

08014ad8 <__libc_init_array>:
 8014ad8:	b570      	push	{r4, r5, r6, lr}
 8014ada:	4d0d      	ldr	r5, [pc, #52]	@ (8014b10 <__libc_init_array+0x38>)
 8014adc:	4c0d      	ldr	r4, [pc, #52]	@ (8014b14 <__libc_init_array+0x3c>)
 8014ade:	1b64      	subs	r4, r4, r5
 8014ae0:	10a4      	asrs	r4, r4, #2
 8014ae2:	2600      	movs	r6, #0
 8014ae4:	42a6      	cmp	r6, r4
 8014ae6:	d109      	bne.n	8014afc <__libc_init_array+0x24>
 8014ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8014b18 <__libc_init_array+0x40>)
 8014aea:	4c0c      	ldr	r4, [pc, #48]	@ (8014b1c <__libc_init_array+0x44>)
 8014aec:	f000 fd64 	bl	80155b8 <_init>
 8014af0:	1b64      	subs	r4, r4, r5
 8014af2:	10a4      	asrs	r4, r4, #2
 8014af4:	2600      	movs	r6, #0
 8014af6:	42a6      	cmp	r6, r4
 8014af8:	d105      	bne.n	8014b06 <__libc_init_array+0x2e>
 8014afa:	bd70      	pop	{r4, r5, r6, pc}
 8014afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b00:	4798      	blx	r3
 8014b02:	3601      	adds	r6, #1
 8014b04:	e7ee      	b.n	8014ae4 <__libc_init_array+0xc>
 8014b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b0a:	4798      	blx	r3
 8014b0c:	3601      	adds	r6, #1
 8014b0e:	e7f2      	b.n	8014af6 <__libc_init_array+0x1e>
 8014b10:	08015734 	.word	0x08015734
 8014b14:	08015734 	.word	0x08015734
 8014b18:	08015734 	.word	0x08015734
 8014b1c:	08015738 	.word	0x08015738

08014b20 <__retarget_lock_init_recursive>:
 8014b20:	4770      	bx	lr

08014b22 <__retarget_lock_acquire_recursive>:
 8014b22:	4770      	bx	lr

08014b24 <__retarget_lock_release_recursive>:
 8014b24:	4770      	bx	lr

08014b26 <memcpy>:
 8014b26:	440a      	add	r2, r1
 8014b28:	4291      	cmp	r1, r2
 8014b2a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014b2e:	d100      	bne.n	8014b32 <memcpy+0xc>
 8014b30:	4770      	bx	lr
 8014b32:	b510      	push	{r4, lr}
 8014b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b3c:	4291      	cmp	r1, r2
 8014b3e:	d1f9      	bne.n	8014b34 <memcpy+0xe>
 8014b40:	bd10      	pop	{r4, pc}
	...

08014b44 <_free_r>:
 8014b44:	b538      	push	{r3, r4, r5, lr}
 8014b46:	4605      	mov	r5, r0
 8014b48:	2900      	cmp	r1, #0
 8014b4a:	d041      	beq.n	8014bd0 <_free_r+0x8c>
 8014b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b50:	1f0c      	subs	r4, r1, #4
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	bfb8      	it	lt
 8014b56:	18e4      	addlt	r4, r4, r3
 8014b58:	f000 f8e0 	bl	8014d1c <__malloc_lock>
 8014b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8014bd4 <_free_r+0x90>)
 8014b5e:	6813      	ldr	r3, [r2, #0]
 8014b60:	b933      	cbnz	r3, 8014b70 <_free_r+0x2c>
 8014b62:	6063      	str	r3, [r4, #4]
 8014b64:	6014      	str	r4, [r2, #0]
 8014b66:	4628      	mov	r0, r5
 8014b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b6c:	f000 b8dc 	b.w	8014d28 <__malloc_unlock>
 8014b70:	42a3      	cmp	r3, r4
 8014b72:	d908      	bls.n	8014b86 <_free_r+0x42>
 8014b74:	6820      	ldr	r0, [r4, #0]
 8014b76:	1821      	adds	r1, r4, r0
 8014b78:	428b      	cmp	r3, r1
 8014b7a:	bf01      	itttt	eq
 8014b7c:	6819      	ldreq	r1, [r3, #0]
 8014b7e:	685b      	ldreq	r3, [r3, #4]
 8014b80:	1809      	addeq	r1, r1, r0
 8014b82:	6021      	streq	r1, [r4, #0]
 8014b84:	e7ed      	b.n	8014b62 <_free_r+0x1e>
 8014b86:	461a      	mov	r2, r3
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	b10b      	cbz	r3, 8014b90 <_free_r+0x4c>
 8014b8c:	42a3      	cmp	r3, r4
 8014b8e:	d9fa      	bls.n	8014b86 <_free_r+0x42>
 8014b90:	6811      	ldr	r1, [r2, #0]
 8014b92:	1850      	adds	r0, r2, r1
 8014b94:	42a0      	cmp	r0, r4
 8014b96:	d10b      	bne.n	8014bb0 <_free_r+0x6c>
 8014b98:	6820      	ldr	r0, [r4, #0]
 8014b9a:	4401      	add	r1, r0
 8014b9c:	1850      	adds	r0, r2, r1
 8014b9e:	4283      	cmp	r3, r0
 8014ba0:	6011      	str	r1, [r2, #0]
 8014ba2:	d1e0      	bne.n	8014b66 <_free_r+0x22>
 8014ba4:	6818      	ldr	r0, [r3, #0]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	6053      	str	r3, [r2, #4]
 8014baa:	4408      	add	r0, r1
 8014bac:	6010      	str	r0, [r2, #0]
 8014bae:	e7da      	b.n	8014b66 <_free_r+0x22>
 8014bb0:	d902      	bls.n	8014bb8 <_free_r+0x74>
 8014bb2:	230c      	movs	r3, #12
 8014bb4:	602b      	str	r3, [r5, #0]
 8014bb6:	e7d6      	b.n	8014b66 <_free_r+0x22>
 8014bb8:	6820      	ldr	r0, [r4, #0]
 8014bba:	1821      	adds	r1, r4, r0
 8014bbc:	428b      	cmp	r3, r1
 8014bbe:	bf04      	itt	eq
 8014bc0:	6819      	ldreq	r1, [r3, #0]
 8014bc2:	685b      	ldreq	r3, [r3, #4]
 8014bc4:	6063      	str	r3, [r4, #4]
 8014bc6:	bf04      	itt	eq
 8014bc8:	1809      	addeq	r1, r1, r0
 8014bca:	6021      	streq	r1, [r4, #0]
 8014bcc:	6054      	str	r4, [r2, #4]
 8014bce:	e7ca      	b.n	8014b66 <_free_r+0x22>
 8014bd0:	bd38      	pop	{r3, r4, r5, pc}
 8014bd2:	bf00      	nop
 8014bd4:	24009ad8 	.word	0x24009ad8

08014bd8 <sbrk_aligned>:
 8014bd8:	b570      	push	{r4, r5, r6, lr}
 8014bda:	4e0f      	ldr	r6, [pc, #60]	@ (8014c18 <sbrk_aligned+0x40>)
 8014bdc:	460c      	mov	r4, r1
 8014bde:	6831      	ldr	r1, [r6, #0]
 8014be0:	4605      	mov	r5, r0
 8014be2:	b911      	cbnz	r1, 8014bea <sbrk_aligned+0x12>
 8014be4:	f000 fcd8 	bl	8015598 <_sbrk_r>
 8014be8:	6030      	str	r0, [r6, #0]
 8014bea:	4621      	mov	r1, r4
 8014bec:	4628      	mov	r0, r5
 8014bee:	f000 fcd3 	bl	8015598 <_sbrk_r>
 8014bf2:	1c43      	adds	r3, r0, #1
 8014bf4:	d103      	bne.n	8014bfe <sbrk_aligned+0x26>
 8014bf6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	bd70      	pop	{r4, r5, r6, pc}
 8014bfe:	1cc4      	adds	r4, r0, #3
 8014c00:	f024 0403 	bic.w	r4, r4, #3
 8014c04:	42a0      	cmp	r0, r4
 8014c06:	d0f8      	beq.n	8014bfa <sbrk_aligned+0x22>
 8014c08:	1a21      	subs	r1, r4, r0
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	f000 fcc4 	bl	8015598 <_sbrk_r>
 8014c10:	3001      	adds	r0, #1
 8014c12:	d1f2      	bne.n	8014bfa <sbrk_aligned+0x22>
 8014c14:	e7ef      	b.n	8014bf6 <sbrk_aligned+0x1e>
 8014c16:	bf00      	nop
 8014c18:	24009ad4 	.word	0x24009ad4

08014c1c <_malloc_r>:
 8014c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c20:	1ccd      	adds	r5, r1, #3
 8014c22:	f025 0503 	bic.w	r5, r5, #3
 8014c26:	3508      	adds	r5, #8
 8014c28:	2d0c      	cmp	r5, #12
 8014c2a:	bf38      	it	cc
 8014c2c:	250c      	movcc	r5, #12
 8014c2e:	2d00      	cmp	r5, #0
 8014c30:	4606      	mov	r6, r0
 8014c32:	db01      	blt.n	8014c38 <_malloc_r+0x1c>
 8014c34:	42a9      	cmp	r1, r5
 8014c36:	d904      	bls.n	8014c42 <_malloc_r+0x26>
 8014c38:	230c      	movs	r3, #12
 8014c3a:	6033      	str	r3, [r6, #0]
 8014c3c:	2000      	movs	r0, #0
 8014c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014d18 <_malloc_r+0xfc>
 8014c46:	f000 f869 	bl	8014d1c <__malloc_lock>
 8014c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8014c4e:	461c      	mov	r4, r3
 8014c50:	bb44      	cbnz	r4, 8014ca4 <_malloc_r+0x88>
 8014c52:	4629      	mov	r1, r5
 8014c54:	4630      	mov	r0, r6
 8014c56:	f7ff ffbf 	bl	8014bd8 <sbrk_aligned>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	d158      	bne.n	8014d12 <_malloc_r+0xf6>
 8014c60:	f8d8 4000 	ldr.w	r4, [r8]
 8014c64:	4627      	mov	r7, r4
 8014c66:	2f00      	cmp	r7, #0
 8014c68:	d143      	bne.n	8014cf2 <_malloc_r+0xd6>
 8014c6a:	2c00      	cmp	r4, #0
 8014c6c:	d04b      	beq.n	8014d06 <_malloc_r+0xea>
 8014c6e:	6823      	ldr	r3, [r4, #0]
 8014c70:	4639      	mov	r1, r7
 8014c72:	4630      	mov	r0, r6
 8014c74:	eb04 0903 	add.w	r9, r4, r3
 8014c78:	f000 fc8e 	bl	8015598 <_sbrk_r>
 8014c7c:	4581      	cmp	r9, r0
 8014c7e:	d142      	bne.n	8014d06 <_malloc_r+0xea>
 8014c80:	6821      	ldr	r1, [r4, #0]
 8014c82:	1a6d      	subs	r5, r5, r1
 8014c84:	4629      	mov	r1, r5
 8014c86:	4630      	mov	r0, r6
 8014c88:	f7ff ffa6 	bl	8014bd8 <sbrk_aligned>
 8014c8c:	3001      	adds	r0, #1
 8014c8e:	d03a      	beq.n	8014d06 <_malloc_r+0xea>
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	442b      	add	r3, r5
 8014c94:	6023      	str	r3, [r4, #0]
 8014c96:	f8d8 3000 	ldr.w	r3, [r8]
 8014c9a:	685a      	ldr	r2, [r3, #4]
 8014c9c:	bb62      	cbnz	r2, 8014cf8 <_malloc_r+0xdc>
 8014c9e:	f8c8 7000 	str.w	r7, [r8]
 8014ca2:	e00f      	b.n	8014cc4 <_malloc_r+0xa8>
 8014ca4:	6822      	ldr	r2, [r4, #0]
 8014ca6:	1b52      	subs	r2, r2, r5
 8014ca8:	d420      	bmi.n	8014cec <_malloc_r+0xd0>
 8014caa:	2a0b      	cmp	r2, #11
 8014cac:	d917      	bls.n	8014cde <_malloc_r+0xc2>
 8014cae:	1961      	adds	r1, r4, r5
 8014cb0:	42a3      	cmp	r3, r4
 8014cb2:	6025      	str	r5, [r4, #0]
 8014cb4:	bf18      	it	ne
 8014cb6:	6059      	strne	r1, [r3, #4]
 8014cb8:	6863      	ldr	r3, [r4, #4]
 8014cba:	bf08      	it	eq
 8014cbc:	f8c8 1000 	streq.w	r1, [r8]
 8014cc0:	5162      	str	r2, [r4, r5]
 8014cc2:	604b      	str	r3, [r1, #4]
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	f000 f82f 	bl	8014d28 <__malloc_unlock>
 8014cca:	f104 000b 	add.w	r0, r4, #11
 8014cce:	1d23      	adds	r3, r4, #4
 8014cd0:	f020 0007 	bic.w	r0, r0, #7
 8014cd4:	1ac2      	subs	r2, r0, r3
 8014cd6:	bf1c      	itt	ne
 8014cd8:	1a1b      	subne	r3, r3, r0
 8014cda:	50a3      	strne	r3, [r4, r2]
 8014cdc:	e7af      	b.n	8014c3e <_malloc_r+0x22>
 8014cde:	6862      	ldr	r2, [r4, #4]
 8014ce0:	42a3      	cmp	r3, r4
 8014ce2:	bf0c      	ite	eq
 8014ce4:	f8c8 2000 	streq.w	r2, [r8]
 8014ce8:	605a      	strne	r2, [r3, #4]
 8014cea:	e7eb      	b.n	8014cc4 <_malloc_r+0xa8>
 8014cec:	4623      	mov	r3, r4
 8014cee:	6864      	ldr	r4, [r4, #4]
 8014cf0:	e7ae      	b.n	8014c50 <_malloc_r+0x34>
 8014cf2:	463c      	mov	r4, r7
 8014cf4:	687f      	ldr	r7, [r7, #4]
 8014cf6:	e7b6      	b.n	8014c66 <_malloc_r+0x4a>
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	42a3      	cmp	r3, r4
 8014cfe:	d1fb      	bne.n	8014cf8 <_malloc_r+0xdc>
 8014d00:	2300      	movs	r3, #0
 8014d02:	6053      	str	r3, [r2, #4]
 8014d04:	e7de      	b.n	8014cc4 <_malloc_r+0xa8>
 8014d06:	230c      	movs	r3, #12
 8014d08:	6033      	str	r3, [r6, #0]
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	f000 f80c 	bl	8014d28 <__malloc_unlock>
 8014d10:	e794      	b.n	8014c3c <_malloc_r+0x20>
 8014d12:	6005      	str	r5, [r0, #0]
 8014d14:	e7d6      	b.n	8014cc4 <_malloc_r+0xa8>
 8014d16:	bf00      	nop
 8014d18:	24009ad8 	.word	0x24009ad8

08014d1c <__malloc_lock>:
 8014d1c:	4801      	ldr	r0, [pc, #4]	@ (8014d24 <__malloc_lock+0x8>)
 8014d1e:	f7ff bf00 	b.w	8014b22 <__retarget_lock_acquire_recursive>
 8014d22:	bf00      	nop
 8014d24:	24009ad0 	.word	0x24009ad0

08014d28 <__malloc_unlock>:
 8014d28:	4801      	ldr	r0, [pc, #4]	@ (8014d30 <__malloc_unlock+0x8>)
 8014d2a:	f7ff befb 	b.w	8014b24 <__retarget_lock_release_recursive>
 8014d2e:	bf00      	nop
 8014d30:	24009ad0 	.word	0x24009ad0

08014d34 <__sfputc_r>:
 8014d34:	6893      	ldr	r3, [r2, #8]
 8014d36:	3b01      	subs	r3, #1
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	b410      	push	{r4}
 8014d3c:	6093      	str	r3, [r2, #8]
 8014d3e:	da08      	bge.n	8014d52 <__sfputc_r+0x1e>
 8014d40:	6994      	ldr	r4, [r2, #24]
 8014d42:	42a3      	cmp	r3, r4
 8014d44:	db01      	blt.n	8014d4a <__sfputc_r+0x16>
 8014d46:	290a      	cmp	r1, #10
 8014d48:	d103      	bne.n	8014d52 <__sfputc_r+0x1e>
 8014d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d4e:	f7ff bd7c 	b.w	801484a <__swbuf_r>
 8014d52:	6813      	ldr	r3, [r2, #0]
 8014d54:	1c58      	adds	r0, r3, #1
 8014d56:	6010      	str	r0, [r2, #0]
 8014d58:	7019      	strb	r1, [r3, #0]
 8014d5a:	4608      	mov	r0, r1
 8014d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <__sfputs_r>:
 8014d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d64:	4606      	mov	r6, r0
 8014d66:	460f      	mov	r7, r1
 8014d68:	4614      	mov	r4, r2
 8014d6a:	18d5      	adds	r5, r2, r3
 8014d6c:	42ac      	cmp	r4, r5
 8014d6e:	d101      	bne.n	8014d74 <__sfputs_r+0x12>
 8014d70:	2000      	movs	r0, #0
 8014d72:	e007      	b.n	8014d84 <__sfputs_r+0x22>
 8014d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d78:	463a      	mov	r2, r7
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f7ff ffda 	bl	8014d34 <__sfputc_r>
 8014d80:	1c43      	adds	r3, r0, #1
 8014d82:	d1f3      	bne.n	8014d6c <__sfputs_r+0xa>
 8014d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d88 <_vfiprintf_r>:
 8014d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d8c:	460d      	mov	r5, r1
 8014d8e:	b09d      	sub	sp, #116	@ 0x74
 8014d90:	4614      	mov	r4, r2
 8014d92:	4698      	mov	r8, r3
 8014d94:	4606      	mov	r6, r0
 8014d96:	b118      	cbz	r0, 8014da0 <_vfiprintf_r+0x18>
 8014d98:	6a03      	ldr	r3, [r0, #32]
 8014d9a:	b90b      	cbnz	r3, 8014da0 <_vfiprintf_r+0x18>
 8014d9c:	f7ff fc64 	bl	8014668 <__sinit>
 8014da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014da2:	07d9      	lsls	r1, r3, #31
 8014da4:	d405      	bmi.n	8014db2 <_vfiprintf_r+0x2a>
 8014da6:	89ab      	ldrh	r3, [r5, #12]
 8014da8:	059a      	lsls	r2, r3, #22
 8014daa:	d402      	bmi.n	8014db2 <_vfiprintf_r+0x2a>
 8014dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dae:	f7ff feb8 	bl	8014b22 <__retarget_lock_acquire_recursive>
 8014db2:	89ab      	ldrh	r3, [r5, #12]
 8014db4:	071b      	lsls	r3, r3, #28
 8014db6:	d501      	bpl.n	8014dbc <_vfiprintf_r+0x34>
 8014db8:	692b      	ldr	r3, [r5, #16]
 8014dba:	b99b      	cbnz	r3, 8014de4 <_vfiprintf_r+0x5c>
 8014dbc:	4629      	mov	r1, r5
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	f7ff fd82 	bl	80148c8 <__swsetup_r>
 8014dc4:	b170      	cbz	r0, 8014de4 <_vfiprintf_r+0x5c>
 8014dc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014dc8:	07dc      	lsls	r4, r3, #31
 8014dca:	d504      	bpl.n	8014dd6 <_vfiprintf_r+0x4e>
 8014dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014dd0:	b01d      	add	sp, #116	@ 0x74
 8014dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd6:	89ab      	ldrh	r3, [r5, #12]
 8014dd8:	0598      	lsls	r0, r3, #22
 8014dda:	d4f7      	bmi.n	8014dcc <_vfiprintf_r+0x44>
 8014ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dde:	f7ff fea1 	bl	8014b24 <__retarget_lock_release_recursive>
 8014de2:	e7f3      	b.n	8014dcc <_vfiprintf_r+0x44>
 8014de4:	2300      	movs	r3, #0
 8014de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014de8:	2320      	movs	r3, #32
 8014dea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8014df2:	2330      	movs	r3, #48	@ 0x30
 8014df4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014fa4 <_vfiprintf_r+0x21c>
 8014df8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014dfc:	f04f 0901 	mov.w	r9, #1
 8014e00:	4623      	mov	r3, r4
 8014e02:	469a      	mov	sl, r3
 8014e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e08:	b10a      	cbz	r2, 8014e0e <_vfiprintf_r+0x86>
 8014e0a:	2a25      	cmp	r2, #37	@ 0x25
 8014e0c:	d1f9      	bne.n	8014e02 <_vfiprintf_r+0x7a>
 8014e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8014e12:	d00b      	beq.n	8014e2c <_vfiprintf_r+0xa4>
 8014e14:	465b      	mov	r3, fp
 8014e16:	4622      	mov	r2, r4
 8014e18:	4629      	mov	r1, r5
 8014e1a:	4630      	mov	r0, r6
 8014e1c:	f7ff ffa1 	bl	8014d62 <__sfputs_r>
 8014e20:	3001      	adds	r0, #1
 8014e22:	f000 80a7 	beq.w	8014f74 <_vfiprintf_r+0x1ec>
 8014e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e28:	445a      	add	r2, fp
 8014e2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	f000 809f 	beq.w	8014f74 <_vfiprintf_r+0x1ec>
 8014e36:	2300      	movs	r3, #0
 8014e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e40:	f10a 0a01 	add.w	sl, sl, #1
 8014e44:	9304      	str	r3, [sp, #16]
 8014e46:	9307      	str	r3, [sp, #28]
 8014e48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e4e:	4654      	mov	r4, sl
 8014e50:	2205      	movs	r2, #5
 8014e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e56:	4853      	ldr	r0, [pc, #332]	@ (8014fa4 <_vfiprintf_r+0x21c>)
 8014e58:	f7eb fa42 	bl	80002e0 <memchr>
 8014e5c:	9a04      	ldr	r2, [sp, #16]
 8014e5e:	b9d8      	cbnz	r0, 8014e98 <_vfiprintf_r+0x110>
 8014e60:	06d1      	lsls	r1, r2, #27
 8014e62:	bf44      	itt	mi
 8014e64:	2320      	movmi	r3, #32
 8014e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e6a:	0713      	lsls	r3, r2, #28
 8014e6c:	bf44      	itt	mi
 8014e6e:	232b      	movmi	r3, #43	@ 0x2b
 8014e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e74:	f89a 3000 	ldrb.w	r3, [sl]
 8014e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e7a:	d015      	beq.n	8014ea8 <_vfiprintf_r+0x120>
 8014e7c:	9a07      	ldr	r2, [sp, #28]
 8014e7e:	4654      	mov	r4, sl
 8014e80:	2000      	movs	r0, #0
 8014e82:	f04f 0c0a 	mov.w	ip, #10
 8014e86:	4621      	mov	r1, r4
 8014e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e8c:	3b30      	subs	r3, #48	@ 0x30
 8014e8e:	2b09      	cmp	r3, #9
 8014e90:	d94b      	bls.n	8014f2a <_vfiprintf_r+0x1a2>
 8014e92:	b1b0      	cbz	r0, 8014ec2 <_vfiprintf_r+0x13a>
 8014e94:	9207      	str	r2, [sp, #28]
 8014e96:	e014      	b.n	8014ec2 <_vfiprintf_r+0x13a>
 8014e98:	eba0 0308 	sub.w	r3, r0, r8
 8014e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8014ea0:	4313      	orrs	r3, r2
 8014ea2:	9304      	str	r3, [sp, #16]
 8014ea4:	46a2      	mov	sl, r4
 8014ea6:	e7d2      	b.n	8014e4e <_vfiprintf_r+0xc6>
 8014ea8:	9b03      	ldr	r3, [sp, #12]
 8014eaa:	1d19      	adds	r1, r3, #4
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	9103      	str	r1, [sp, #12]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	bfbb      	ittet	lt
 8014eb4:	425b      	neglt	r3, r3
 8014eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8014eba:	9307      	strge	r3, [sp, #28]
 8014ebc:	9307      	strlt	r3, [sp, #28]
 8014ebe:	bfb8      	it	lt
 8014ec0:	9204      	strlt	r2, [sp, #16]
 8014ec2:	7823      	ldrb	r3, [r4, #0]
 8014ec4:	2b2e      	cmp	r3, #46	@ 0x2e
 8014ec6:	d10a      	bne.n	8014ede <_vfiprintf_r+0x156>
 8014ec8:	7863      	ldrb	r3, [r4, #1]
 8014eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ecc:	d132      	bne.n	8014f34 <_vfiprintf_r+0x1ac>
 8014ece:	9b03      	ldr	r3, [sp, #12]
 8014ed0:	1d1a      	adds	r2, r3, #4
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	9203      	str	r2, [sp, #12]
 8014ed6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014eda:	3402      	adds	r4, #2
 8014edc:	9305      	str	r3, [sp, #20]
 8014ede:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014fb4 <_vfiprintf_r+0x22c>
 8014ee2:	7821      	ldrb	r1, [r4, #0]
 8014ee4:	2203      	movs	r2, #3
 8014ee6:	4650      	mov	r0, sl
 8014ee8:	f7eb f9fa 	bl	80002e0 <memchr>
 8014eec:	b138      	cbz	r0, 8014efe <_vfiprintf_r+0x176>
 8014eee:	9b04      	ldr	r3, [sp, #16]
 8014ef0:	eba0 000a 	sub.w	r0, r0, sl
 8014ef4:	2240      	movs	r2, #64	@ 0x40
 8014ef6:	4082      	lsls	r2, r0
 8014ef8:	4313      	orrs	r3, r2
 8014efa:	3401      	adds	r4, #1
 8014efc:	9304      	str	r3, [sp, #16]
 8014efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f02:	4829      	ldr	r0, [pc, #164]	@ (8014fa8 <_vfiprintf_r+0x220>)
 8014f04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014f08:	2206      	movs	r2, #6
 8014f0a:	f7eb f9e9 	bl	80002e0 <memchr>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d03f      	beq.n	8014f92 <_vfiprintf_r+0x20a>
 8014f12:	4b26      	ldr	r3, [pc, #152]	@ (8014fac <_vfiprintf_r+0x224>)
 8014f14:	bb1b      	cbnz	r3, 8014f5e <_vfiprintf_r+0x1d6>
 8014f16:	9b03      	ldr	r3, [sp, #12]
 8014f18:	3307      	adds	r3, #7
 8014f1a:	f023 0307 	bic.w	r3, r3, #7
 8014f1e:	3308      	adds	r3, #8
 8014f20:	9303      	str	r3, [sp, #12]
 8014f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f24:	443b      	add	r3, r7
 8014f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f28:	e76a      	b.n	8014e00 <_vfiprintf_r+0x78>
 8014f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f2e:	460c      	mov	r4, r1
 8014f30:	2001      	movs	r0, #1
 8014f32:	e7a8      	b.n	8014e86 <_vfiprintf_r+0xfe>
 8014f34:	2300      	movs	r3, #0
 8014f36:	3401      	adds	r4, #1
 8014f38:	9305      	str	r3, [sp, #20]
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	f04f 0c0a 	mov.w	ip, #10
 8014f40:	4620      	mov	r0, r4
 8014f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f46:	3a30      	subs	r2, #48	@ 0x30
 8014f48:	2a09      	cmp	r2, #9
 8014f4a:	d903      	bls.n	8014f54 <_vfiprintf_r+0x1cc>
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d0c6      	beq.n	8014ede <_vfiprintf_r+0x156>
 8014f50:	9105      	str	r1, [sp, #20]
 8014f52:	e7c4      	b.n	8014ede <_vfiprintf_r+0x156>
 8014f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f58:	4604      	mov	r4, r0
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	e7f0      	b.n	8014f40 <_vfiprintf_r+0x1b8>
 8014f5e:	ab03      	add	r3, sp, #12
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	462a      	mov	r2, r5
 8014f64:	4b12      	ldr	r3, [pc, #72]	@ (8014fb0 <_vfiprintf_r+0x228>)
 8014f66:	a904      	add	r1, sp, #16
 8014f68:	4630      	mov	r0, r6
 8014f6a:	f3af 8000 	nop.w
 8014f6e:	4607      	mov	r7, r0
 8014f70:	1c78      	adds	r0, r7, #1
 8014f72:	d1d6      	bne.n	8014f22 <_vfiprintf_r+0x19a>
 8014f74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f76:	07d9      	lsls	r1, r3, #31
 8014f78:	d405      	bmi.n	8014f86 <_vfiprintf_r+0x1fe>
 8014f7a:	89ab      	ldrh	r3, [r5, #12]
 8014f7c:	059a      	lsls	r2, r3, #22
 8014f7e:	d402      	bmi.n	8014f86 <_vfiprintf_r+0x1fe>
 8014f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f82:	f7ff fdcf 	bl	8014b24 <__retarget_lock_release_recursive>
 8014f86:	89ab      	ldrh	r3, [r5, #12]
 8014f88:	065b      	lsls	r3, r3, #25
 8014f8a:	f53f af1f 	bmi.w	8014dcc <_vfiprintf_r+0x44>
 8014f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f90:	e71e      	b.n	8014dd0 <_vfiprintf_r+0x48>
 8014f92:	ab03      	add	r3, sp, #12
 8014f94:	9300      	str	r3, [sp, #0]
 8014f96:	462a      	mov	r2, r5
 8014f98:	4b05      	ldr	r3, [pc, #20]	@ (8014fb0 <_vfiprintf_r+0x228>)
 8014f9a:	a904      	add	r1, sp, #16
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	f000 f879 	bl	8015094 <_printf_i>
 8014fa2:	e7e4      	b.n	8014f6e <_vfiprintf_r+0x1e6>
 8014fa4:	080156f8 	.word	0x080156f8
 8014fa8:	08015702 	.word	0x08015702
 8014fac:	00000000 	.word	0x00000000
 8014fb0:	08014d63 	.word	0x08014d63
 8014fb4:	080156fe 	.word	0x080156fe

08014fb8 <_printf_common>:
 8014fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fbc:	4616      	mov	r6, r2
 8014fbe:	4698      	mov	r8, r3
 8014fc0:	688a      	ldr	r2, [r1, #8]
 8014fc2:	690b      	ldr	r3, [r1, #16]
 8014fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014fc8:	4293      	cmp	r3, r2
 8014fca:	bfb8      	it	lt
 8014fcc:	4613      	movlt	r3, r2
 8014fce:	6033      	str	r3, [r6, #0]
 8014fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014fd4:	4607      	mov	r7, r0
 8014fd6:	460c      	mov	r4, r1
 8014fd8:	b10a      	cbz	r2, 8014fde <_printf_common+0x26>
 8014fda:	3301      	adds	r3, #1
 8014fdc:	6033      	str	r3, [r6, #0]
 8014fde:	6823      	ldr	r3, [r4, #0]
 8014fe0:	0699      	lsls	r1, r3, #26
 8014fe2:	bf42      	ittt	mi
 8014fe4:	6833      	ldrmi	r3, [r6, #0]
 8014fe6:	3302      	addmi	r3, #2
 8014fe8:	6033      	strmi	r3, [r6, #0]
 8014fea:	6825      	ldr	r5, [r4, #0]
 8014fec:	f015 0506 	ands.w	r5, r5, #6
 8014ff0:	d106      	bne.n	8015000 <_printf_common+0x48>
 8014ff2:	f104 0a19 	add.w	sl, r4, #25
 8014ff6:	68e3      	ldr	r3, [r4, #12]
 8014ff8:	6832      	ldr	r2, [r6, #0]
 8014ffa:	1a9b      	subs	r3, r3, r2
 8014ffc:	42ab      	cmp	r3, r5
 8014ffe:	dc26      	bgt.n	801504e <_printf_common+0x96>
 8015000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015004:	6822      	ldr	r2, [r4, #0]
 8015006:	3b00      	subs	r3, #0
 8015008:	bf18      	it	ne
 801500a:	2301      	movne	r3, #1
 801500c:	0692      	lsls	r2, r2, #26
 801500e:	d42b      	bmi.n	8015068 <_printf_common+0xb0>
 8015010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015014:	4641      	mov	r1, r8
 8015016:	4638      	mov	r0, r7
 8015018:	47c8      	blx	r9
 801501a:	3001      	adds	r0, #1
 801501c:	d01e      	beq.n	801505c <_printf_common+0xa4>
 801501e:	6823      	ldr	r3, [r4, #0]
 8015020:	6922      	ldr	r2, [r4, #16]
 8015022:	f003 0306 	and.w	r3, r3, #6
 8015026:	2b04      	cmp	r3, #4
 8015028:	bf02      	ittt	eq
 801502a:	68e5      	ldreq	r5, [r4, #12]
 801502c:	6833      	ldreq	r3, [r6, #0]
 801502e:	1aed      	subeq	r5, r5, r3
 8015030:	68a3      	ldr	r3, [r4, #8]
 8015032:	bf0c      	ite	eq
 8015034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015038:	2500      	movne	r5, #0
 801503a:	4293      	cmp	r3, r2
 801503c:	bfc4      	itt	gt
 801503e:	1a9b      	subgt	r3, r3, r2
 8015040:	18ed      	addgt	r5, r5, r3
 8015042:	2600      	movs	r6, #0
 8015044:	341a      	adds	r4, #26
 8015046:	42b5      	cmp	r5, r6
 8015048:	d11a      	bne.n	8015080 <_printf_common+0xc8>
 801504a:	2000      	movs	r0, #0
 801504c:	e008      	b.n	8015060 <_printf_common+0xa8>
 801504e:	2301      	movs	r3, #1
 8015050:	4652      	mov	r2, sl
 8015052:	4641      	mov	r1, r8
 8015054:	4638      	mov	r0, r7
 8015056:	47c8      	blx	r9
 8015058:	3001      	adds	r0, #1
 801505a:	d103      	bne.n	8015064 <_printf_common+0xac>
 801505c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015064:	3501      	adds	r5, #1
 8015066:	e7c6      	b.n	8014ff6 <_printf_common+0x3e>
 8015068:	18e1      	adds	r1, r4, r3
 801506a:	1c5a      	adds	r2, r3, #1
 801506c:	2030      	movs	r0, #48	@ 0x30
 801506e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015072:	4422      	add	r2, r4
 8015074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801507c:	3302      	adds	r3, #2
 801507e:	e7c7      	b.n	8015010 <_printf_common+0x58>
 8015080:	2301      	movs	r3, #1
 8015082:	4622      	mov	r2, r4
 8015084:	4641      	mov	r1, r8
 8015086:	4638      	mov	r0, r7
 8015088:	47c8      	blx	r9
 801508a:	3001      	adds	r0, #1
 801508c:	d0e6      	beq.n	801505c <_printf_common+0xa4>
 801508e:	3601      	adds	r6, #1
 8015090:	e7d9      	b.n	8015046 <_printf_common+0x8e>
	...

08015094 <_printf_i>:
 8015094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015098:	7e0f      	ldrb	r7, [r1, #24]
 801509a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801509c:	2f78      	cmp	r7, #120	@ 0x78
 801509e:	4691      	mov	r9, r2
 80150a0:	4680      	mov	r8, r0
 80150a2:	460c      	mov	r4, r1
 80150a4:	469a      	mov	sl, r3
 80150a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80150aa:	d807      	bhi.n	80150bc <_printf_i+0x28>
 80150ac:	2f62      	cmp	r7, #98	@ 0x62
 80150ae:	d80a      	bhi.n	80150c6 <_printf_i+0x32>
 80150b0:	2f00      	cmp	r7, #0
 80150b2:	f000 80d1 	beq.w	8015258 <_printf_i+0x1c4>
 80150b6:	2f58      	cmp	r7, #88	@ 0x58
 80150b8:	f000 80b8 	beq.w	801522c <_printf_i+0x198>
 80150bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80150c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80150c4:	e03a      	b.n	801513c <_printf_i+0xa8>
 80150c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80150ca:	2b15      	cmp	r3, #21
 80150cc:	d8f6      	bhi.n	80150bc <_printf_i+0x28>
 80150ce:	a101      	add	r1, pc, #4	@ (adr r1, 80150d4 <_printf_i+0x40>)
 80150d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80150d4:	0801512d 	.word	0x0801512d
 80150d8:	08015141 	.word	0x08015141
 80150dc:	080150bd 	.word	0x080150bd
 80150e0:	080150bd 	.word	0x080150bd
 80150e4:	080150bd 	.word	0x080150bd
 80150e8:	080150bd 	.word	0x080150bd
 80150ec:	08015141 	.word	0x08015141
 80150f0:	080150bd 	.word	0x080150bd
 80150f4:	080150bd 	.word	0x080150bd
 80150f8:	080150bd 	.word	0x080150bd
 80150fc:	080150bd 	.word	0x080150bd
 8015100:	0801523f 	.word	0x0801523f
 8015104:	0801516b 	.word	0x0801516b
 8015108:	080151f9 	.word	0x080151f9
 801510c:	080150bd 	.word	0x080150bd
 8015110:	080150bd 	.word	0x080150bd
 8015114:	08015261 	.word	0x08015261
 8015118:	080150bd 	.word	0x080150bd
 801511c:	0801516b 	.word	0x0801516b
 8015120:	080150bd 	.word	0x080150bd
 8015124:	080150bd 	.word	0x080150bd
 8015128:	08015201 	.word	0x08015201
 801512c:	6833      	ldr	r3, [r6, #0]
 801512e:	1d1a      	adds	r2, r3, #4
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	6032      	str	r2, [r6, #0]
 8015134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801513c:	2301      	movs	r3, #1
 801513e:	e09c      	b.n	801527a <_printf_i+0x1e6>
 8015140:	6833      	ldr	r3, [r6, #0]
 8015142:	6820      	ldr	r0, [r4, #0]
 8015144:	1d19      	adds	r1, r3, #4
 8015146:	6031      	str	r1, [r6, #0]
 8015148:	0606      	lsls	r6, r0, #24
 801514a:	d501      	bpl.n	8015150 <_printf_i+0xbc>
 801514c:	681d      	ldr	r5, [r3, #0]
 801514e:	e003      	b.n	8015158 <_printf_i+0xc4>
 8015150:	0645      	lsls	r5, r0, #25
 8015152:	d5fb      	bpl.n	801514c <_printf_i+0xb8>
 8015154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015158:	2d00      	cmp	r5, #0
 801515a:	da03      	bge.n	8015164 <_printf_i+0xd0>
 801515c:	232d      	movs	r3, #45	@ 0x2d
 801515e:	426d      	negs	r5, r5
 8015160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015164:	4858      	ldr	r0, [pc, #352]	@ (80152c8 <_printf_i+0x234>)
 8015166:	230a      	movs	r3, #10
 8015168:	e011      	b.n	801518e <_printf_i+0xfa>
 801516a:	6821      	ldr	r1, [r4, #0]
 801516c:	6833      	ldr	r3, [r6, #0]
 801516e:	0608      	lsls	r0, r1, #24
 8015170:	f853 5b04 	ldr.w	r5, [r3], #4
 8015174:	d402      	bmi.n	801517c <_printf_i+0xe8>
 8015176:	0649      	lsls	r1, r1, #25
 8015178:	bf48      	it	mi
 801517a:	b2ad      	uxthmi	r5, r5
 801517c:	2f6f      	cmp	r7, #111	@ 0x6f
 801517e:	4852      	ldr	r0, [pc, #328]	@ (80152c8 <_printf_i+0x234>)
 8015180:	6033      	str	r3, [r6, #0]
 8015182:	bf14      	ite	ne
 8015184:	230a      	movne	r3, #10
 8015186:	2308      	moveq	r3, #8
 8015188:	2100      	movs	r1, #0
 801518a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801518e:	6866      	ldr	r6, [r4, #4]
 8015190:	60a6      	str	r6, [r4, #8]
 8015192:	2e00      	cmp	r6, #0
 8015194:	db05      	blt.n	80151a2 <_printf_i+0x10e>
 8015196:	6821      	ldr	r1, [r4, #0]
 8015198:	432e      	orrs	r6, r5
 801519a:	f021 0104 	bic.w	r1, r1, #4
 801519e:	6021      	str	r1, [r4, #0]
 80151a0:	d04b      	beq.n	801523a <_printf_i+0x1a6>
 80151a2:	4616      	mov	r6, r2
 80151a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80151a8:	fb03 5711 	mls	r7, r3, r1, r5
 80151ac:	5dc7      	ldrb	r7, [r0, r7]
 80151ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80151b2:	462f      	mov	r7, r5
 80151b4:	42bb      	cmp	r3, r7
 80151b6:	460d      	mov	r5, r1
 80151b8:	d9f4      	bls.n	80151a4 <_printf_i+0x110>
 80151ba:	2b08      	cmp	r3, #8
 80151bc:	d10b      	bne.n	80151d6 <_printf_i+0x142>
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	07df      	lsls	r7, r3, #31
 80151c2:	d508      	bpl.n	80151d6 <_printf_i+0x142>
 80151c4:	6923      	ldr	r3, [r4, #16]
 80151c6:	6861      	ldr	r1, [r4, #4]
 80151c8:	4299      	cmp	r1, r3
 80151ca:	bfde      	ittt	le
 80151cc:	2330      	movle	r3, #48	@ 0x30
 80151ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80151d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80151d6:	1b92      	subs	r2, r2, r6
 80151d8:	6122      	str	r2, [r4, #16]
 80151da:	f8cd a000 	str.w	sl, [sp]
 80151de:	464b      	mov	r3, r9
 80151e0:	aa03      	add	r2, sp, #12
 80151e2:	4621      	mov	r1, r4
 80151e4:	4640      	mov	r0, r8
 80151e6:	f7ff fee7 	bl	8014fb8 <_printf_common>
 80151ea:	3001      	adds	r0, #1
 80151ec:	d14a      	bne.n	8015284 <_printf_i+0x1f0>
 80151ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151f2:	b004      	add	sp, #16
 80151f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151f8:	6823      	ldr	r3, [r4, #0]
 80151fa:	f043 0320 	orr.w	r3, r3, #32
 80151fe:	6023      	str	r3, [r4, #0]
 8015200:	4832      	ldr	r0, [pc, #200]	@ (80152cc <_printf_i+0x238>)
 8015202:	2778      	movs	r7, #120	@ 0x78
 8015204:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015208:	6823      	ldr	r3, [r4, #0]
 801520a:	6831      	ldr	r1, [r6, #0]
 801520c:	061f      	lsls	r7, r3, #24
 801520e:	f851 5b04 	ldr.w	r5, [r1], #4
 8015212:	d402      	bmi.n	801521a <_printf_i+0x186>
 8015214:	065f      	lsls	r7, r3, #25
 8015216:	bf48      	it	mi
 8015218:	b2ad      	uxthmi	r5, r5
 801521a:	6031      	str	r1, [r6, #0]
 801521c:	07d9      	lsls	r1, r3, #31
 801521e:	bf44      	itt	mi
 8015220:	f043 0320 	orrmi.w	r3, r3, #32
 8015224:	6023      	strmi	r3, [r4, #0]
 8015226:	b11d      	cbz	r5, 8015230 <_printf_i+0x19c>
 8015228:	2310      	movs	r3, #16
 801522a:	e7ad      	b.n	8015188 <_printf_i+0xf4>
 801522c:	4826      	ldr	r0, [pc, #152]	@ (80152c8 <_printf_i+0x234>)
 801522e:	e7e9      	b.n	8015204 <_printf_i+0x170>
 8015230:	6823      	ldr	r3, [r4, #0]
 8015232:	f023 0320 	bic.w	r3, r3, #32
 8015236:	6023      	str	r3, [r4, #0]
 8015238:	e7f6      	b.n	8015228 <_printf_i+0x194>
 801523a:	4616      	mov	r6, r2
 801523c:	e7bd      	b.n	80151ba <_printf_i+0x126>
 801523e:	6833      	ldr	r3, [r6, #0]
 8015240:	6825      	ldr	r5, [r4, #0]
 8015242:	6961      	ldr	r1, [r4, #20]
 8015244:	1d18      	adds	r0, r3, #4
 8015246:	6030      	str	r0, [r6, #0]
 8015248:	062e      	lsls	r6, r5, #24
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	d501      	bpl.n	8015252 <_printf_i+0x1be>
 801524e:	6019      	str	r1, [r3, #0]
 8015250:	e002      	b.n	8015258 <_printf_i+0x1c4>
 8015252:	0668      	lsls	r0, r5, #25
 8015254:	d5fb      	bpl.n	801524e <_printf_i+0x1ba>
 8015256:	8019      	strh	r1, [r3, #0]
 8015258:	2300      	movs	r3, #0
 801525a:	6123      	str	r3, [r4, #16]
 801525c:	4616      	mov	r6, r2
 801525e:	e7bc      	b.n	80151da <_printf_i+0x146>
 8015260:	6833      	ldr	r3, [r6, #0]
 8015262:	1d1a      	adds	r2, r3, #4
 8015264:	6032      	str	r2, [r6, #0]
 8015266:	681e      	ldr	r6, [r3, #0]
 8015268:	6862      	ldr	r2, [r4, #4]
 801526a:	2100      	movs	r1, #0
 801526c:	4630      	mov	r0, r6
 801526e:	f7eb f837 	bl	80002e0 <memchr>
 8015272:	b108      	cbz	r0, 8015278 <_printf_i+0x1e4>
 8015274:	1b80      	subs	r0, r0, r6
 8015276:	6060      	str	r0, [r4, #4]
 8015278:	6863      	ldr	r3, [r4, #4]
 801527a:	6123      	str	r3, [r4, #16]
 801527c:	2300      	movs	r3, #0
 801527e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015282:	e7aa      	b.n	80151da <_printf_i+0x146>
 8015284:	6923      	ldr	r3, [r4, #16]
 8015286:	4632      	mov	r2, r6
 8015288:	4649      	mov	r1, r9
 801528a:	4640      	mov	r0, r8
 801528c:	47d0      	blx	sl
 801528e:	3001      	adds	r0, #1
 8015290:	d0ad      	beq.n	80151ee <_printf_i+0x15a>
 8015292:	6823      	ldr	r3, [r4, #0]
 8015294:	079b      	lsls	r3, r3, #30
 8015296:	d413      	bmi.n	80152c0 <_printf_i+0x22c>
 8015298:	68e0      	ldr	r0, [r4, #12]
 801529a:	9b03      	ldr	r3, [sp, #12]
 801529c:	4298      	cmp	r0, r3
 801529e:	bfb8      	it	lt
 80152a0:	4618      	movlt	r0, r3
 80152a2:	e7a6      	b.n	80151f2 <_printf_i+0x15e>
 80152a4:	2301      	movs	r3, #1
 80152a6:	4632      	mov	r2, r6
 80152a8:	4649      	mov	r1, r9
 80152aa:	4640      	mov	r0, r8
 80152ac:	47d0      	blx	sl
 80152ae:	3001      	adds	r0, #1
 80152b0:	d09d      	beq.n	80151ee <_printf_i+0x15a>
 80152b2:	3501      	adds	r5, #1
 80152b4:	68e3      	ldr	r3, [r4, #12]
 80152b6:	9903      	ldr	r1, [sp, #12]
 80152b8:	1a5b      	subs	r3, r3, r1
 80152ba:	42ab      	cmp	r3, r5
 80152bc:	dcf2      	bgt.n	80152a4 <_printf_i+0x210>
 80152be:	e7eb      	b.n	8015298 <_printf_i+0x204>
 80152c0:	2500      	movs	r5, #0
 80152c2:	f104 0619 	add.w	r6, r4, #25
 80152c6:	e7f5      	b.n	80152b4 <_printf_i+0x220>
 80152c8:	08015709 	.word	0x08015709
 80152cc:	0801571a 	.word	0x0801571a

080152d0 <__sflush_r>:
 80152d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80152d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152d8:	0716      	lsls	r6, r2, #28
 80152da:	4605      	mov	r5, r0
 80152dc:	460c      	mov	r4, r1
 80152de:	d454      	bmi.n	801538a <__sflush_r+0xba>
 80152e0:	684b      	ldr	r3, [r1, #4]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	dc02      	bgt.n	80152ec <__sflush_r+0x1c>
 80152e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	dd48      	ble.n	801537e <__sflush_r+0xae>
 80152ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80152ee:	2e00      	cmp	r6, #0
 80152f0:	d045      	beq.n	801537e <__sflush_r+0xae>
 80152f2:	2300      	movs	r3, #0
 80152f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80152f8:	682f      	ldr	r7, [r5, #0]
 80152fa:	6a21      	ldr	r1, [r4, #32]
 80152fc:	602b      	str	r3, [r5, #0]
 80152fe:	d030      	beq.n	8015362 <__sflush_r+0x92>
 8015300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015302:	89a3      	ldrh	r3, [r4, #12]
 8015304:	0759      	lsls	r1, r3, #29
 8015306:	d505      	bpl.n	8015314 <__sflush_r+0x44>
 8015308:	6863      	ldr	r3, [r4, #4]
 801530a:	1ad2      	subs	r2, r2, r3
 801530c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801530e:	b10b      	cbz	r3, 8015314 <__sflush_r+0x44>
 8015310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015312:	1ad2      	subs	r2, r2, r3
 8015314:	2300      	movs	r3, #0
 8015316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015318:	6a21      	ldr	r1, [r4, #32]
 801531a:	4628      	mov	r0, r5
 801531c:	47b0      	blx	r6
 801531e:	1c43      	adds	r3, r0, #1
 8015320:	89a3      	ldrh	r3, [r4, #12]
 8015322:	d106      	bne.n	8015332 <__sflush_r+0x62>
 8015324:	6829      	ldr	r1, [r5, #0]
 8015326:	291d      	cmp	r1, #29
 8015328:	d82b      	bhi.n	8015382 <__sflush_r+0xb2>
 801532a:	4a2a      	ldr	r2, [pc, #168]	@ (80153d4 <__sflush_r+0x104>)
 801532c:	40ca      	lsrs	r2, r1
 801532e:	07d6      	lsls	r6, r2, #31
 8015330:	d527      	bpl.n	8015382 <__sflush_r+0xb2>
 8015332:	2200      	movs	r2, #0
 8015334:	6062      	str	r2, [r4, #4]
 8015336:	04d9      	lsls	r1, r3, #19
 8015338:	6922      	ldr	r2, [r4, #16]
 801533a:	6022      	str	r2, [r4, #0]
 801533c:	d504      	bpl.n	8015348 <__sflush_r+0x78>
 801533e:	1c42      	adds	r2, r0, #1
 8015340:	d101      	bne.n	8015346 <__sflush_r+0x76>
 8015342:	682b      	ldr	r3, [r5, #0]
 8015344:	b903      	cbnz	r3, 8015348 <__sflush_r+0x78>
 8015346:	6560      	str	r0, [r4, #84]	@ 0x54
 8015348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801534a:	602f      	str	r7, [r5, #0]
 801534c:	b1b9      	cbz	r1, 801537e <__sflush_r+0xae>
 801534e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015352:	4299      	cmp	r1, r3
 8015354:	d002      	beq.n	801535c <__sflush_r+0x8c>
 8015356:	4628      	mov	r0, r5
 8015358:	f7ff fbf4 	bl	8014b44 <_free_r>
 801535c:	2300      	movs	r3, #0
 801535e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015360:	e00d      	b.n	801537e <__sflush_r+0xae>
 8015362:	2301      	movs	r3, #1
 8015364:	4628      	mov	r0, r5
 8015366:	47b0      	blx	r6
 8015368:	4602      	mov	r2, r0
 801536a:	1c50      	adds	r0, r2, #1
 801536c:	d1c9      	bne.n	8015302 <__sflush_r+0x32>
 801536e:	682b      	ldr	r3, [r5, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d0c6      	beq.n	8015302 <__sflush_r+0x32>
 8015374:	2b1d      	cmp	r3, #29
 8015376:	d001      	beq.n	801537c <__sflush_r+0xac>
 8015378:	2b16      	cmp	r3, #22
 801537a:	d11e      	bne.n	80153ba <__sflush_r+0xea>
 801537c:	602f      	str	r7, [r5, #0]
 801537e:	2000      	movs	r0, #0
 8015380:	e022      	b.n	80153c8 <__sflush_r+0xf8>
 8015382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015386:	b21b      	sxth	r3, r3
 8015388:	e01b      	b.n	80153c2 <__sflush_r+0xf2>
 801538a:	690f      	ldr	r7, [r1, #16]
 801538c:	2f00      	cmp	r7, #0
 801538e:	d0f6      	beq.n	801537e <__sflush_r+0xae>
 8015390:	0793      	lsls	r3, r2, #30
 8015392:	680e      	ldr	r6, [r1, #0]
 8015394:	bf08      	it	eq
 8015396:	694b      	ldreq	r3, [r1, #20]
 8015398:	600f      	str	r7, [r1, #0]
 801539a:	bf18      	it	ne
 801539c:	2300      	movne	r3, #0
 801539e:	eba6 0807 	sub.w	r8, r6, r7
 80153a2:	608b      	str	r3, [r1, #8]
 80153a4:	f1b8 0f00 	cmp.w	r8, #0
 80153a8:	dde9      	ble.n	801537e <__sflush_r+0xae>
 80153aa:	6a21      	ldr	r1, [r4, #32]
 80153ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80153ae:	4643      	mov	r3, r8
 80153b0:	463a      	mov	r2, r7
 80153b2:	4628      	mov	r0, r5
 80153b4:	47b0      	blx	r6
 80153b6:	2800      	cmp	r0, #0
 80153b8:	dc08      	bgt.n	80153cc <__sflush_r+0xfc>
 80153ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153c2:	81a3      	strh	r3, [r4, #12]
 80153c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153cc:	4407      	add	r7, r0
 80153ce:	eba8 0800 	sub.w	r8, r8, r0
 80153d2:	e7e7      	b.n	80153a4 <__sflush_r+0xd4>
 80153d4:	20400001 	.word	0x20400001

080153d8 <_fflush_r>:
 80153d8:	b538      	push	{r3, r4, r5, lr}
 80153da:	690b      	ldr	r3, [r1, #16]
 80153dc:	4605      	mov	r5, r0
 80153de:	460c      	mov	r4, r1
 80153e0:	b913      	cbnz	r3, 80153e8 <_fflush_r+0x10>
 80153e2:	2500      	movs	r5, #0
 80153e4:	4628      	mov	r0, r5
 80153e6:	bd38      	pop	{r3, r4, r5, pc}
 80153e8:	b118      	cbz	r0, 80153f2 <_fflush_r+0x1a>
 80153ea:	6a03      	ldr	r3, [r0, #32]
 80153ec:	b90b      	cbnz	r3, 80153f2 <_fflush_r+0x1a>
 80153ee:	f7ff f93b 	bl	8014668 <__sinit>
 80153f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d0f3      	beq.n	80153e2 <_fflush_r+0xa>
 80153fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80153fc:	07d0      	lsls	r0, r2, #31
 80153fe:	d404      	bmi.n	801540a <_fflush_r+0x32>
 8015400:	0599      	lsls	r1, r3, #22
 8015402:	d402      	bmi.n	801540a <_fflush_r+0x32>
 8015404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015406:	f7ff fb8c 	bl	8014b22 <__retarget_lock_acquire_recursive>
 801540a:	4628      	mov	r0, r5
 801540c:	4621      	mov	r1, r4
 801540e:	f7ff ff5f 	bl	80152d0 <__sflush_r>
 8015412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015414:	07da      	lsls	r2, r3, #31
 8015416:	4605      	mov	r5, r0
 8015418:	d4e4      	bmi.n	80153e4 <_fflush_r+0xc>
 801541a:	89a3      	ldrh	r3, [r4, #12]
 801541c:	059b      	lsls	r3, r3, #22
 801541e:	d4e1      	bmi.n	80153e4 <_fflush_r+0xc>
 8015420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015422:	f7ff fb7f 	bl	8014b24 <__retarget_lock_release_recursive>
 8015426:	e7dd      	b.n	80153e4 <_fflush_r+0xc>

08015428 <__swhatbuf_r>:
 8015428:	b570      	push	{r4, r5, r6, lr}
 801542a:	460c      	mov	r4, r1
 801542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015430:	2900      	cmp	r1, #0
 8015432:	b096      	sub	sp, #88	@ 0x58
 8015434:	4615      	mov	r5, r2
 8015436:	461e      	mov	r6, r3
 8015438:	da0d      	bge.n	8015456 <__swhatbuf_r+0x2e>
 801543a:	89a3      	ldrh	r3, [r4, #12]
 801543c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015440:	f04f 0100 	mov.w	r1, #0
 8015444:	bf14      	ite	ne
 8015446:	2340      	movne	r3, #64	@ 0x40
 8015448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801544c:	2000      	movs	r0, #0
 801544e:	6031      	str	r1, [r6, #0]
 8015450:	602b      	str	r3, [r5, #0]
 8015452:	b016      	add	sp, #88	@ 0x58
 8015454:	bd70      	pop	{r4, r5, r6, pc}
 8015456:	466a      	mov	r2, sp
 8015458:	f000 f87c 	bl	8015554 <_fstat_r>
 801545c:	2800      	cmp	r0, #0
 801545e:	dbec      	blt.n	801543a <__swhatbuf_r+0x12>
 8015460:	9901      	ldr	r1, [sp, #4]
 8015462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801546a:	4259      	negs	r1, r3
 801546c:	4159      	adcs	r1, r3
 801546e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015472:	e7eb      	b.n	801544c <__swhatbuf_r+0x24>

08015474 <__smakebuf_r>:
 8015474:	898b      	ldrh	r3, [r1, #12]
 8015476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015478:	079d      	lsls	r5, r3, #30
 801547a:	4606      	mov	r6, r0
 801547c:	460c      	mov	r4, r1
 801547e:	d507      	bpl.n	8015490 <__smakebuf_r+0x1c>
 8015480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015484:	6023      	str	r3, [r4, #0]
 8015486:	6123      	str	r3, [r4, #16]
 8015488:	2301      	movs	r3, #1
 801548a:	6163      	str	r3, [r4, #20]
 801548c:	b003      	add	sp, #12
 801548e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015490:	ab01      	add	r3, sp, #4
 8015492:	466a      	mov	r2, sp
 8015494:	f7ff ffc8 	bl	8015428 <__swhatbuf_r>
 8015498:	9f00      	ldr	r7, [sp, #0]
 801549a:	4605      	mov	r5, r0
 801549c:	4639      	mov	r1, r7
 801549e:	4630      	mov	r0, r6
 80154a0:	f7ff fbbc 	bl	8014c1c <_malloc_r>
 80154a4:	b948      	cbnz	r0, 80154ba <__smakebuf_r+0x46>
 80154a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154aa:	059a      	lsls	r2, r3, #22
 80154ac:	d4ee      	bmi.n	801548c <__smakebuf_r+0x18>
 80154ae:	f023 0303 	bic.w	r3, r3, #3
 80154b2:	f043 0302 	orr.w	r3, r3, #2
 80154b6:	81a3      	strh	r3, [r4, #12]
 80154b8:	e7e2      	b.n	8015480 <__smakebuf_r+0xc>
 80154ba:	89a3      	ldrh	r3, [r4, #12]
 80154bc:	6020      	str	r0, [r4, #0]
 80154be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80154c2:	81a3      	strh	r3, [r4, #12]
 80154c4:	9b01      	ldr	r3, [sp, #4]
 80154c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80154ca:	b15b      	cbz	r3, 80154e4 <__smakebuf_r+0x70>
 80154cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154d0:	4630      	mov	r0, r6
 80154d2:	f000 f851 	bl	8015578 <_isatty_r>
 80154d6:	b128      	cbz	r0, 80154e4 <__smakebuf_r+0x70>
 80154d8:	89a3      	ldrh	r3, [r4, #12]
 80154da:	f023 0303 	bic.w	r3, r3, #3
 80154de:	f043 0301 	orr.w	r3, r3, #1
 80154e2:	81a3      	strh	r3, [r4, #12]
 80154e4:	89a3      	ldrh	r3, [r4, #12]
 80154e6:	431d      	orrs	r5, r3
 80154e8:	81a5      	strh	r5, [r4, #12]
 80154ea:	e7cf      	b.n	801548c <__smakebuf_r+0x18>

080154ec <_putc_r>:
 80154ec:	b570      	push	{r4, r5, r6, lr}
 80154ee:	460d      	mov	r5, r1
 80154f0:	4614      	mov	r4, r2
 80154f2:	4606      	mov	r6, r0
 80154f4:	b118      	cbz	r0, 80154fe <_putc_r+0x12>
 80154f6:	6a03      	ldr	r3, [r0, #32]
 80154f8:	b90b      	cbnz	r3, 80154fe <_putc_r+0x12>
 80154fa:	f7ff f8b5 	bl	8014668 <__sinit>
 80154fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015500:	07d8      	lsls	r0, r3, #31
 8015502:	d405      	bmi.n	8015510 <_putc_r+0x24>
 8015504:	89a3      	ldrh	r3, [r4, #12]
 8015506:	0599      	lsls	r1, r3, #22
 8015508:	d402      	bmi.n	8015510 <_putc_r+0x24>
 801550a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801550c:	f7ff fb09 	bl	8014b22 <__retarget_lock_acquire_recursive>
 8015510:	68a3      	ldr	r3, [r4, #8]
 8015512:	3b01      	subs	r3, #1
 8015514:	2b00      	cmp	r3, #0
 8015516:	60a3      	str	r3, [r4, #8]
 8015518:	da05      	bge.n	8015526 <_putc_r+0x3a>
 801551a:	69a2      	ldr	r2, [r4, #24]
 801551c:	4293      	cmp	r3, r2
 801551e:	db12      	blt.n	8015546 <_putc_r+0x5a>
 8015520:	b2eb      	uxtb	r3, r5
 8015522:	2b0a      	cmp	r3, #10
 8015524:	d00f      	beq.n	8015546 <_putc_r+0x5a>
 8015526:	6823      	ldr	r3, [r4, #0]
 8015528:	1c5a      	adds	r2, r3, #1
 801552a:	6022      	str	r2, [r4, #0]
 801552c:	701d      	strb	r5, [r3, #0]
 801552e:	b2ed      	uxtb	r5, r5
 8015530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015532:	07da      	lsls	r2, r3, #31
 8015534:	d405      	bmi.n	8015542 <_putc_r+0x56>
 8015536:	89a3      	ldrh	r3, [r4, #12]
 8015538:	059b      	lsls	r3, r3, #22
 801553a:	d402      	bmi.n	8015542 <_putc_r+0x56>
 801553c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801553e:	f7ff faf1 	bl	8014b24 <__retarget_lock_release_recursive>
 8015542:	4628      	mov	r0, r5
 8015544:	bd70      	pop	{r4, r5, r6, pc}
 8015546:	4629      	mov	r1, r5
 8015548:	4622      	mov	r2, r4
 801554a:	4630      	mov	r0, r6
 801554c:	f7ff f97d 	bl	801484a <__swbuf_r>
 8015550:	4605      	mov	r5, r0
 8015552:	e7ed      	b.n	8015530 <_putc_r+0x44>

08015554 <_fstat_r>:
 8015554:	b538      	push	{r3, r4, r5, lr}
 8015556:	4d07      	ldr	r5, [pc, #28]	@ (8015574 <_fstat_r+0x20>)
 8015558:	2300      	movs	r3, #0
 801555a:	4604      	mov	r4, r0
 801555c:	4608      	mov	r0, r1
 801555e:	4611      	mov	r1, r2
 8015560:	602b      	str	r3, [r5, #0]
 8015562:	f7ec fd4e 	bl	8002002 <_fstat>
 8015566:	1c43      	adds	r3, r0, #1
 8015568:	d102      	bne.n	8015570 <_fstat_r+0x1c>
 801556a:	682b      	ldr	r3, [r5, #0]
 801556c:	b103      	cbz	r3, 8015570 <_fstat_r+0x1c>
 801556e:	6023      	str	r3, [r4, #0]
 8015570:	bd38      	pop	{r3, r4, r5, pc}
 8015572:	bf00      	nop
 8015574:	24009acc 	.word	0x24009acc

08015578 <_isatty_r>:
 8015578:	b538      	push	{r3, r4, r5, lr}
 801557a:	4d06      	ldr	r5, [pc, #24]	@ (8015594 <_isatty_r+0x1c>)
 801557c:	2300      	movs	r3, #0
 801557e:	4604      	mov	r4, r0
 8015580:	4608      	mov	r0, r1
 8015582:	602b      	str	r3, [r5, #0]
 8015584:	f7ec fd4d 	bl	8002022 <_isatty>
 8015588:	1c43      	adds	r3, r0, #1
 801558a:	d102      	bne.n	8015592 <_isatty_r+0x1a>
 801558c:	682b      	ldr	r3, [r5, #0]
 801558e:	b103      	cbz	r3, 8015592 <_isatty_r+0x1a>
 8015590:	6023      	str	r3, [r4, #0]
 8015592:	bd38      	pop	{r3, r4, r5, pc}
 8015594:	24009acc 	.word	0x24009acc

08015598 <_sbrk_r>:
 8015598:	b538      	push	{r3, r4, r5, lr}
 801559a:	4d06      	ldr	r5, [pc, #24]	@ (80155b4 <_sbrk_r+0x1c>)
 801559c:	2300      	movs	r3, #0
 801559e:	4604      	mov	r4, r0
 80155a0:	4608      	mov	r0, r1
 80155a2:	602b      	str	r3, [r5, #0]
 80155a4:	f7ec fd56 	bl	8002054 <_sbrk>
 80155a8:	1c43      	adds	r3, r0, #1
 80155aa:	d102      	bne.n	80155b2 <_sbrk_r+0x1a>
 80155ac:	682b      	ldr	r3, [r5, #0]
 80155ae:	b103      	cbz	r3, 80155b2 <_sbrk_r+0x1a>
 80155b0:	6023      	str	r3, [r4, #0]
 80155b2:	bd38      	pop	{r3, r4, r5, pc}
 80155b4:	24009acc 	.word	0x24009acc

080155b8 <_init>:
 80155b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ba:	bf00      	nop
 80155bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155be:	bc08      	pop	{r3}
 80155c0:	469e      	mov	lr, r3
 80155c2:	4770      	bx	lr

080155c4 <_fini>:
 80155c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c6:	bf00      	nop
 80155c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ca:	bc08      	pop	{r3}
 80155cc:	469e      	mov	lr, r3
 80155ce:	4770      	bx	lr
