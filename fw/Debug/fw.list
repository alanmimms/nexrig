
fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015564  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08015804  08015804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015940  08015940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015948  08015948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801594c  0801594c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001b0  24000000  08015950  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007978  240001b0  08015b00  000171b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24007b28  08015b00  00017b28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000171b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039b61  00000000  00000000  000171de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006dd1  00000000  00000000  00050d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b50  00000000  00000000  00057b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002187  00000000  00000000  0005a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a556  00000000  00000000  0005c7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037685  00000000  00000000  00066d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00192148  00000000  00000000  0009e3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023050a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c194  00000000  00000000  00230550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  0023c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001b0 	.word	0x240001b0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080157ec 	.word	0x080157ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001b4 	.word	0x240001b4
 80002dc:	080157ec 	.word	0x080157ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006b2:	4b68      	ldr	r3, [pc, #416]	@ (8000854 <main+0x1a8>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d11b      	bne.n	80006f6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
}
 80006c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c4:	f3bf 8f6f 	isb	sy
}
 80006c8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006ca:	4b62      	ldr	r3, [pc, #392]	@ (8000854 <main+0x1a8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006d2:	f3bf 8f4f 	dsb	sy
}
 80006d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d8:	f3bf 8f6f 	isb	sy
}
 80006dc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006de:	4b5d      	ldr	r3, [pc, #372]	@ (8000854 <main+0x1a8>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000854 <main+0x1a8>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ea:	f3bf 8f4f 	dsb	sy
}
 80006ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f0:	f3bf 8f6f 	isb	sy
}
 80006f4:	e000      	b.n	80006f8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006f6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f8:	4b56      	ldr	r3, [pc, #344]	@ (8000854 <main+0x1a8>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d138      	bne.n	8000776 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000704:	4b53      	ldr	r3, [pc, #332]	@ (8000854 <main+0x1a8>)
 8000706:	2200      	movs	r2, #0
 8000708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000712:	4b50      	ldr	r3, [pc, #320]	@ (8000854 <main+0x1a8>)
 8000714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000718:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000722:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	08db      	lsrs	r3, r3, #3
 8000728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800072c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	015a      	lsls	r2, r3, #5
 8000732:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000736:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800073c:	4945      	ldr	r1, [pc, #276]	@ (8000854 <main+0x1a8>)
 800073e:	4313      	orrs	r3, r2
 8000740:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1ef      	bne.n	800072e <main+0x82>
    } while(sets-- != 0U);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	60ba      	str	r2, [r7, #8]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1e5      	bne.n	8000724 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800075e:	4b3d      	ldr	r3, [pc, #244]	@ (8000854 <main+0x1a8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a3c      	ldr	r2, [pc, #240]	@ (8000854 <main+0x1a8>)
 8000764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000768:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000770:	f3bf 8f6f 	isb	sy
}
 8000774:	e000      	b.n	8000778 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000776:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f001 ff6a 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f87e 	bl	800087c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000780:	f000 f8f0 	bl	8000964 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 fc04 	bl	8000f90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 fb92 	bl	8000eb0 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 f91c 	bl	80009c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000790:	f000 f996 	bl	8000ac0 <MX_ADC2_Init>
  MX_I2C3_Init();
 8000794:	f000 f9fe 	bl	8000b94 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000798:	f000 fa88 	bl	8000cac <MX_SPI1_Init>
  MX_SPI3_Init();
 800079c:	f000 fadc 	bl	8000d58 <MX_SPI3_Init>
  MX_SPI4_Init();
 80007a0:	f000 fb30 	bl	8000e04 <MX_SPI4_Init>
  MX_LPUART1_UART_Init();
 80007a4:	f000 fa36 	bl	8000c14 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007a8:	f010 fd8c 	bl	80112c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000858 <main+0x1ac>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	482a      	ldr	r0, [pc, #168]	@ (800085c <main+0x1b0>)
 80007b2:	f010 fdd1 	bl	8011358 <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a29      	ldr	r2, [pc, #164]	@ (8000860 <main+0x1b4>)
 80007ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007bc:	2000      	movs	r0, #0
 80007be:	f001 fd21 	bl	8002204 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f001 fd1e 	bl	8002204 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f001 fd1b 	bl	8002204 <BSP_LED_Init>

  /* Initialize User push-button without interrupt mode. */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 fde1 	bl	8002398 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007d6:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <main+0x1b8>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007dc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007de:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <main+0x1b8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <main+0x1b8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <main+0x1b8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <main+0x1b8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007f6:	491b      	ldr	r1, [pc, #108]	@ (8000864 <main+0x1b8>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 fe4b 	bl	8002494 <BSP_COM_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <main+0x15c>
  {
    Error_Handler();
 8000804:	f000 fcd6 	bl	80011b4 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 hello world !\n\r");
 8000808:	4817      	ldr	r0, [pc, #92]	@ (8000868 <main+0x1bc>)
 800080a:	f014 f917 	bl	8014a3c <iprintf>
  {
    static const uint8_t msg[] = "\r\nHello world!\r\n";
    HAL_UART_Transmit(&hlpuart1, msg, sizeof(msg), 99999);
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <main+0x1c0>)
 8000810:	2211      	movs	r2, #17
 8000812:	4917      	ldr	r1, [pc, #92]	@ (8000870 <main+0x1c4>)
 8000814:	4817      	ldr	r0, [pc, #92]	@ (8000874 <main+0x1c8>)
 8000816:	f00b fd79 	bl	800c30c <HAL_UART_Transmit>
  }

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 800081a:	2000      	movs	r0, #0
 800081c:	f001 fd68 	bl	80022f0 <BSP_LED_On>
  BSP_LED_On(LED_BLUE);
 8000820:	2001      	movs	r0, #1
 8000822:	f001 fd65 	bl	80022f0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000826:	2002      	movs	r0, #2
 8000828:	f001 fd62 	bl	80022f0 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 800082c:	f010 fd6e 	bl	801130c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED) {
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <main+0x1cc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d1fb      	bne.n	8000830 <main+0x184>
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <main+0x1cc>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 800083e:	2000      	movs	r0, #0
 8000840:	f001 fd80 	bl	8002344 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_BLUE);
 8000844:	2001      	movs	r0, #1
 8000846:	f001 fd7d 	bl	8002344 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 800084a:	2002      	movs	r0, #2
 800084c:	f001 fd7a 	bl	8002344 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED) {
 8000850:	e7ee      	b.n	8000830 <main+0x184>
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	08015888 	.word	0x08015888
 800085c:	0800117d 	.word	0x0800117d
 8000860:	24000960 	.word	0x24000960
 8000864:	240001cc 	.word	0x240001cc
 8000868:	08015810 	.word	0x08015810
 800086c:	0001869f 	.word	0x0001869f
 8000870:	080158ac 	.word	0x080158ac
 8000874:	24000464 	.word	0x24000464
 8000878:	240001dc 	.word	0x240001dc

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09c      	sub	sp, #112	@ 0x70
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000886:	224c      	movs	r2, #76	@ 0x4c
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f014 f92b 	bl	8014ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2220      	movs	r2, #32
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f014 f925 	bl	8014ae6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800089c:	2002      	movs	r0, #2
 800089e:	f007 f8b5 	bl	8007a0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <SystemClock_Config+0xdc>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000958 <SystemClock_Config+0xdc>)
 80008ac:	f023 0301 	bic.w	r3, r3, #1
 80008b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <SystemClock_Config+0xdc>)
 80008b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	4b27      	ldr	r3, [pc, #156]	@ (800095c <SystemClock_Config+0xe0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008c4:	4a25      	ldr	r2, [pc, #148]	@ (800095c <SystemClock_Config+0xe0>)
 80008c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b23      	ldr	r3, [pc, #140]	@ (800095c <SystemClock_Config+0xe0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d8:	bf00      	nop
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <SystemClock_Config+0xe0>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008e6:	d1f8      	bne.n	80008da <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <SystemClock_Config+0xe4>)
 80008ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <SystemClock_Config+0xe4>)
 80008ee:	f023 0303 	bic.w	r3, r3, #3
 80008f2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008f4:	2322      	movs	r3, #34	@ 0x22
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	2340      	movs	r3, #64	@ 0x40
 80008fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4618      	mov	r0, r3
 800090e:	f007 f8c7 	bl	8007aa0 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000918:	f000 fc4c 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	233f      	movs	r3, #63	@ 0x3f
 800091e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2101      	movs	r1, #1
 8000940:	4618      	mov	r0, r3
 8000942:	f007 fd07 	bl	8008354 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800094c:	f000 fc32 	bl	80011b4 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	@ 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000400 	.word	0x58000400
 800095c:	58024800 	.word	0x58024800
 8000960:	58024400 	.word	0x58024400

08000964 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0b0      	sub	sp, #192	@ 0xc0
 8000968:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	22c0      	movs	r2, #192	@ 0xc0
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f014 f8b8 	bl	8014ae6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
 8000976:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <PeriphCommonClock_Config+0x60>)
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000980:	2320      	movs	r3, #32
 8000982:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000994:	2340      	movs	r3, #64	@ 0x40
 8000996:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80009a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f008 f89f 	bl	8008af0 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80009b8:	f000 fbfc 	bl	80011b4 <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	37c0      	adds	r7, #192	@ 0xc0
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	80001000 	.word	0x80001000

080009c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ec:	4b31      	ldr	r3, [pc, #196]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 80009ee:	4a32      	ldr	r2, [pc, #200]	@ (8000ab8 <MX_ADC1_Init+0xf0>)
 80009f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80009f2:	4b30      	ldr	r3, [pc, #192]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 80009f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a00:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a06:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a12:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a18:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a24:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a30:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a50:	4818      	ldr	r0, [pc, #96]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a52:	f002 f847 	bl	8002ae4 <HAL_ADC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a5c:	f000 fbaa 	bl	80011b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4812      	ldr	r0, [pc, #72]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a6c:	f002 fdfe 	bl	800366c <HAL_ADCEx_MultiModeConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a76:	f000 fb9d 	bl	80011b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <MX_ADC1_Init+0xf4>)
 8000a7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a86:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 8000a9e:	f002 f9c3 	bl	8002e28 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000aa8:	f000 fb84 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	240001e0 	.word	0x240001e0
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	08600004 	.word	0x08600004

08000ac0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
 8000ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000ada:	4a2c      	ldr	r2, [pc, #176]	@ (8000b8c <MX_ADC2_Init+0xcc>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000ae0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ae4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aec:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af2:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000afe:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b04:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b3c:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b3e:	f001 ffd1 	bl	8002ae4 <HAL_ADC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 fb34 	bl	80011b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <MX_ADC2_Init+0xd0>)
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2306      	movs	r3, #6
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b58:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <MX_ADC2_Init+0xc8>)
 8000b70:	f002 f95a 	bl	8002e28 <HAL_ADC_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8000b7a:	f000 fb1b 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000244 	.word	0x24000244
 8000b8c:	40022100 	.word	0x40022100
 8000b90:	08600004 	.word	0x08600004

08000b94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <MX_I2C3_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c10 <MX_I2C3_Init+0x7c>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bce:	480e      	ldr	r0, [pc, #56]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bd0:	f005 fb48 	bl	8006264 <HAL_I2C_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bda:	f000 faeb 	bl	80011b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000be2:	f005 fbdb 	bl	800639c <HAL_I2CEx_ConfigAnalogFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 fae2 	bl	80011b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_I2C3_Init+0x74>)
 8000bf4:	f005 fc1d 	bl	8006432 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 fad9 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	24000320 	.word	0x24000320
 8000c0c:	40005c00 	.word	0x40005c00
 8000c10:	10707dbc 	.word	0x10707dbc

08000c14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <MX_LPUART1_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c5e:	f00b fb05 	bl	800c26c <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 faa4 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c70:	f00c ffec 	bl	800dc4c <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 fa9b 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c82:	f00d f821 	bl	800dcc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 fa92 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_LPUART1_UART_Init+0x90>)
 8000c92:	f00c ffa2 	bl	800dbda <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 fa8a 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000464 	.word	0x24000464
 8000ca8:	58000c00 	.word	0x58000c00

08000cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb0:	4b27      	ldr	r3, [pc, #156]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cb2:	4a28      	ldr	r2, [pc, #160]	@ (8000d54 <MX_SPI1_Init+0xa8>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb6:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cbe:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cca:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cd8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000ce0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ce4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_SPI1_Init+0xa4>)
 8000d3e:	f00a fbd5 	bl	800b4ec <HAL_SPI_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000d48:	f000 fa34 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240004f8 	.word	0x240004f8
 8000d54:	40013000 	.word	0x40013000

08000d58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d5e:	4a28      	ldr	r2, [pc, #160]	@ (8000e00 <MX_SPI3_Init+0xa8>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d84:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d88:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d8c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <MX_SPI3_Init+0xa4>)
 8000dea:	f00a fb7f 	bl	800b4ec <HAL_SPI_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000df4:	f000 f9de 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	24000580 	.word	0x24000580
 8000e00:	40003c00 	.word	0x40003c00

08000e04 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e08:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e0a:	4a28      	ldr	r2, [pc, #160]	@ (8000eac <MX_SPI4_Init+0xa8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e14:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e1e:	2203      	movs	r2, #3
 8000e20:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e30:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e34:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e3c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e5c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_SPI4_Init+0xa4>)
 8000e96:	f00a fb29 	bl	800b4ec <HAL_SPI_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000ea0:	f000 f988 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	24000608 	.word	0x24000608
 8000eac:	40013400 	.word	0x40013400

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	4b35      	ldr	r3, [pc, #212]	@ (8000f8c <MX_DMA_Init+0xdc>)
 8000eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ebc:	4a33      	ldr	r2, [pc, #204]	@ (8000f8c <MX_DMA_Init+0xdc>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ec6:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <MX_DMA_Init+0xdc>)
 8000ec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <MX_DMA_Init+0xdc>)
 8000ed6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eda:	4a2c      	ldr	r2, [pc, #176]	@ (8000f8c <MX_DMA_Init+0xdc>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ee4:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <MX_DMA_Init+0xdc>)
 8000ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f002 fd4e 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000efc:	200b      	movs	r0, #11
 8000efe:	f002 fd65 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2105      	movs	r1, #5
 8000f06:	200c      	movs	r0, #12
 8000f08:	f002 fd46 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f0c:	200c      	movs	r0, #12
 8000f0e:	f002 fd5d 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2105      	movs	r1, #5
 8000f16:	200d      	movs	r0, #13
 8000f18:	f002 fd3e 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f1c:	200d      	movs	r0, #13
 8000f1e:	f002 fd55 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	200e      	movs	r0, #14
 8000f28:	f002 fd36 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f2c:	200e      	movs	r0, #14
 8000f2e:	f002 fd4d 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2105      	movs	r1, #5
 8000f36:	200f      	movs	r0, #15
 8000f38:	f002 fd2e 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f3c:	200f      	movs	r0, #15
 8000f3e:	f002 fd45 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2105      	movs	r1, #5
 8000f46:	2010      	movs	r0, #16
 8000f48:	f002 fd26 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f4c:	2010      	movs	r0, #16
 8000f4e:	f002 fd3d 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	2011      	movs	r0, #17
 8000f58:	f002 fd1e 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f5c:	2011      	movs	r0, #17
 8000f5e:	f002 fd35 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	202f      	movs	r0, #47	@ 0x2f
 8000f68:	f002 fd16 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f6c:	202f      	movs	r0, #47	@ 0x2f
 8000f6e:	f002 fd2d 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	2038      	movs	r0, #56	@ 0x38
 8000f78:	f002 fd0e 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f7c:	2038      	movs	r0, #56	@ 0x38
 8000f7e:	f002 fd25 	bl	80039cc <HAL_NVIC_EnableIRQ>

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	58024400 	.word	0x58024400

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	@ 0x38
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	4b70      	ldr	r3, [pc, #448]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	4a6e      	ldr	r2, [pc, #440]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	623b      	str	r3, [r7, #32]
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	4b68      	ldr	r3, [pc, #416]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a67      	ldr	r2, [pc, #412]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b64      	ldr	r3, [pc, #400]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	4b61      	ldr	r3, [pc, #388]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a5f      	ldr	r2, [pc, #380]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001000:	4b59      	ldr	r3, [pc, #356]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	4a58      	ldr	r2, [pc, #352]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001010:	4b55      	ldr	r3, [pc, #340]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b52      	ldr	r3, [pc, #328]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	4a50      	ldr	r2, [pc, #320]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102e:	4b4e      	ldr	r3, [pc, #312]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4b4a      	ldr	r3, [pc, #296]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	4a49      	ldr	r2, [pc, #292]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104c:	4b46      	ldr	r3, [pc, #280]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800105a:	4b43      	ldr	r3, [pc, #268]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	4a41      	ldr	r2, [pc, #260]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106a:	4b3f      	ldr	r3, [pc, #252]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b3b      	ldr	r3, [pc, #236]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	4a3a      	ldr	r2, [pc, #232]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001088:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <MX_GPIO_Init+0x1d8>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TxEnable_GPIO_Port, TxEnable_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2104      	movs	r1, #4
 800109a:	4834      	ldr	r0, [pc, #208]	@ (800116c <MX_GPIO_Init+0x1dc>)
 800109c:	f005 f8ae 	bl	80061fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFGainHiLo_GPIO_Port, RFGainHiLo_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2104      	movs	r1, #4
 80010a4:	4832      	ldr	r0, [pc, #200]	@ (8001170 <MX_GPIO_Init+0x1e0>)
 80010a6:	f005 f8a9 	bl	80061fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TxTuneLDAC__GPIO_Port, TxTuneLDAC__Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2101      	movs	r1, #1
 80010ae:	4831      	ldr	r0, [pc, #196]	@ (8001174 <MX_GPIO_Init+0x1e4>)
 80010b0:	f005 f8a4 	bl	80061fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	482f      	ldr	r0, [pc, #188]	@ (8001178 <MX_GPIO_Init+0x1e8>)
 80010ba:	f005 f89f 	bl	80061fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USBFault__Pin */
  GPIO_InitStruct.Pin = USBFault__Pin;
 80010be:	2301      	movs	r3, #1
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USBFault__GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4826      	ldr	r0, [pc, #152]	@ (800116c <MX_GPIO_Init+0x1dc>)
 80010d2:	f004 fee3 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TxEnable_Pin */
  GPIO_InitStruct.Pin = TxEnable_Pin;
 80010d6:	2304      	movs	r3, #4
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TxEnable_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	481f      	ldr	r0, [pc, #124]	@ (800116c <MX_GPIO_Init+0x1dc>)
 80010ee:	f004 fed5 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RxTuneLDAC__Pin TxIQLDAC__Pin */
  GPIO_InitStruct.Pin = RxTuneLDAC__Pin|TxIQLDAC__Pin;
 80010f2:	2303      	movs	r3, #3
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	481a      	ldr	r0, [pc, #104]	@ (8001170 <MX_GPIO_Init+0x1e0>)
 8001106:	f004 fec9 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFGainHiLo_Pin */
  GPIO_InitStruct.Pin = RFGainHiLo_Pin;
 800110a:	2304      	movs	r3, #4
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RFGainHiLo_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	4813      	ldr	r0, [pc, #76]	@ (8001170 <MX_GPIO_Init+0x1e0>)
 8001122:	f004 febb 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TxTuneLDAC__Pin */
  GPIO_InitStruct.Pin = TxTuneLDAC__Pin;
 8001126:	2301      	movs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TxTuneLDAC__GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_GPIO_Init+0x1e4>)
 800113e:	f004 fead 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001142:	2302      	movs	r3, #2
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	@ (8001178 <MX_GPIO_Init+0x1e8>)
 800115a:	f004 fe9f 	bl	8005e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800115e:	bf00      	nop
 8001160:	3738      	adds	r7, #56	@ 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	58024400 	.word	0x58024400
 800116c:	58021400 	.word	0x58021400
 8001170:	58021800 	.word	0x58021800
 8001174:	58020c00 	.word	0x58020c00
 8001178:	58021000 	.word	0x58021000

0800117c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001184:	f012 fe50 	bl	8013e28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;) {
    osDelay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f010 f977 	bl	801147c <osDelay>
 800118e:	e7fb      	b.n	8001188 <StartDefaultTask+0xc>

08001190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011a2:	f001 fa91 	bl	80026c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40001400 	.word	0x40001400

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <Error_Handler+0x8>

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_MspInit+0x38>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011cc:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_MspInit+0x38>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_MspInit+0x38>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	210f      	movs	r1, #15
 80011e8:	f06f 0001 	mvn.w	r0, #1
 80011ec:	f002 fbd4 	bl	8003998 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400

080011fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0be      	sub	sp, #248	@ 0xf8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	22c0      	movs	r2, #192	@ 0xc0
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f013 fc62 	bl	8014ae6 <memset>
  if(hadc->Instance==ADC1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a79      	ldr	r2, [pc, #484]	@ (800140c <HAL_ADC_MspInit+0x210>)
 8001228:	4293      	cmp	r3, r2
 800122a:	f040 809a 	bne.w	8001362 <HAL_ADC_MspInit+0x166>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800123a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800123e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	4618      	mov	r0, r3
 8001248:	f007 fc52 	bl	8008af0 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001252:	f7ff ffaf 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001256:	4b6e      	ldr	r3, [pc, #440]	@ (8001410 <HAL_ADC_MspInit+0x214>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a6c      	ldr	r2, [pc, #432]	@ (8001410 <HAL_ADC_MspInit+0x214>)
 800125e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001260:	4b6b      	ldr	r3, [pc, #428]	@ (8001410 <HAL_ADC_MspInit+0x214>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10e      	bne.n	8001286 <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001268:	4b6a      	ldr	r3, [pc, #424]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 800126a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800126e:	4a69      	ldr	r2, [pc, #420]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001278:	4b66      	ldr	r3, [pc, #408]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 800127a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	4a61      	ldr	r2, [pc, #388]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001296:	4b5f      	ldr	r3, [pc, #380]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b4:	4b57      	ldr	r3, [pc, #348]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = RxQ_Pin;
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(RxQ_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012d8:	4619      	mov	r1, r3
 80012da:	484f      	ldr	r0, [pc, #316]	@ (8001418 <HAL_ADC_MspInit+0x21c>)
 80012dc:	f004 fdde 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxI_Pin;
 80012e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(RxI_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4848      	ldr	r0, [pc, #288]	@ (800141c <HAL_ADC_MspInit+0x220>)
 80012fc:	f004 fdce 	bl	8005e9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001300:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001302:	4a48      	ldr	r2, [pc, #288]	@ (8001424 <HAL_ADC_MspInit+0x228>)
 8001304:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001306:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001308:	2209      	movs	r2, #9
 800130a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130c:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 800131a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001320:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001322:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001326:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001328:	4b3d      	ldr	r3, [pc, #244]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 800132a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001330:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001338:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800133c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133e:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001344:	4836      	ldr	r0, [pc, #216]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001346:	f002 fb4f 	bl	80039e8 <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8001350:	f7ff ff30 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a32      	ldr	r2, [pc, #200]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 8001358:	64da      	str	r2, [r3, #76]	@ 0x4c
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <HAL_ADC_MspInit+0x224>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001360:	e04f      	b.n	8001402 <HAL_ADC_MspInit+0x206>
  else if(hadc->Instance==ADC2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <HAL_ADC_MspInit+0x22c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d14a      	bne.n	8001402 <HAL_ADC_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800136c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001378:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800137c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4618      	mov	r0, r3
 8001386:	f007 fbb3 	bl	8008af0 <HAL_RCCEx_PeriphCLKConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8001390:	f7ff ff10 	bl	80011b4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <HAL_ADC_MspInit+0x214>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <HAL_ADC_MspInit+0x214>)
 800139c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <HAL_ADC_MspInit+0x214>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10e      	bne.n	80013c4 <HAL_ADC_MspInit+0x1c8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80013a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013ac:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80013ae:	f043 0320 	orr.w	r3, r3, #32
 80013b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80013b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80013cc:	f043 0320 	orr.w	r3, r3, #32
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_ADC_MspInit+0x218>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AntVSWR_Pin;
 80013e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(AntVSWR_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	@ (800141c <HAL_ADC_MspInit+0x220>)
 80013fe:	f004 fd4d 	bl	8005e9c <HAL_GPIO_Init>
}
 8001402:	bf00      	nop
 8001404:	37f8      	adds	r7, #248	@ 0xf8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000
 8001410:	24000964 	.word	0x24000964
 8001414:	58024400 	.word	0x58024400
 8001418:	58020000 	.word	0x58020000
 800141c:	58021400 	.word	0x58021400
 8001420:	240002a8 	.word	0x240002a8
 8001424:	40020410 	.word	0x40020410
 8001428:	40022100 	.word	0x40022100

0800142c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0bc      	sub	sp, #240	@ 0xf0
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	22c0      	movs	r2, #192	@ 0xc0
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f013 fb4a 	bl	8014ae6 <memset>
  if(hi2c->Instance==I2C3)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a67      	ldr	r2, [pc, #412]	@ (80015f4 <HAL_I2C_MspInit+0x1c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	f040 80c6 	bne.w	80015ea <HAL_I2C_MspInit+0x1be>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800145e:	f04f 0208 	mov.w	r2, #8
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fb3b 	bl	8008af0 <HAL_RCCEx_PeriphCLKConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001480:	f7ff fe98 	bl	80011b4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	4b5c      	ldr	r3, [pc, #368]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	4a5b      	ldr	r2, [pc, #364]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001494:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b55      	ldr	r3, [pc, #340]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a8:	4a53      	ldr	r2, [pc, #332]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b2:	4b51      	ldr	r3, [pc, #324]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = VFOSDA_Pin;
 80014c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014da:	2304      	movs	r3, #4
 80014dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(VFOSDA_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014e4:	4619      	mov	r1, r3
 80014e6:	4845      	ldr	r0, [pc, #276]	@ (80015fc <HAL_I2C_MspInit+0x1d0>)
 80014e8:	f004 fcd8 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VFOSCL_Pin;
 80014ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f4:	2312      	movs	r3, #18
 80014f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001506:	2304      	movs	r3, #4
 8001508:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(VFOSCL_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001510:	4619      	mov	r1, r3
 8001512:	483b      	ldr	r0, [pc, #236]	@ (8001600 <HAL_I2C_MspInit+0x1d4>)
 8001514:	f004 fcc2 	bl	8005e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001518:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 800151a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800151e:	4a36      	ldr	r2, [pc, #216]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 8001520:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001524:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_I2C_MspInit+0x1cc>)
 800152a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800152e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream0;
 8001536:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001538:	4a33      	ldr	r2, [pc, #204]	@ (8001608 <HAL_I2C_MspInit+0x1dc>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 800153c:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 800153e:	224a      	movs	r2, #74	@ 0x4a
 8001540:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001544:	2240      	movs	r2, #64	@ 0x40
 8001546:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001550:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001554:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155c:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001562:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156e:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001574:	4823      	ldr	r0, [pc, #140]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001576:	f002 fa37 	bl	80039e8 <HAL_DMA_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001580:	f7ff fe18 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 8001588:	639a      	str	r2, [r3, #56]	@ 0x38
 800158a:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <HAL_I2C_MspInit+0x1d8>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 8001592:	4a1f      	ldr	r2, [pc, #124]	@ (8001610 <HAL_I2C_MspInit+0x1e4>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 8001598:	2249      	movs	r2, #73	@ 0x49
 800159a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015d0:	f002 fa0a 	bl	80039e8 <HAL_DMA_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_MspInit+0x1b2>
    {
      Error_Handler();
 80015da:	f7ff fdeb 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015e4:	4a09      	ldr	r2, [pc, #36]	@ (800160c <HAL_I2C_MspInit+0x1e0>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80015ea:	bf00      	nop
 80015ec:	37f0      	adds	r7, #240	@ 0xf0
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40005c00 	.word	0x40005c00
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58020800 	.word	0x58020800
 8001600:	58020000 	.word	0x58020000
 8001604:	24000374 	.word	0x24000374
 8001608:	40020010 	.word	0x40020010
 800160c:	240003ec 	.word	0x240003ec
 8001610:	40020028 	.word	0x40020028

08001614 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ba      	sub	sp, #232	@ 0xe8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	22c0      	movs	r2, #192	@ 0xc0
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f013 fa56 	bl	8014ae6 <memset>
  if(huart->Instance==LPUART1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2b      	ldr	r2, [pc, #172]	@ (80016ec <HAL_UART_MspInit+0xd8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d14e      	bne.n	80016e2 <HAL_UART_MspInit+0xce>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001644:	f04f 0204 	mov.w	r2, #4
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4618      	mov	r0, r3
 800165c:	f007 fa48 	bl	8008af0 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001666:	f7ff fda5 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_UART_MspInit+0xdc>)
 800166c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001670:	4a1f      	ldr	r2, [pc, #124]	@ (80016f0 <HAL_UART_MspInit+0xdc>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <HAL_UART_MspInit+0xdc>)
 800167c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <HAL_UART_MspInit+0xdc>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168e:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <HAL_UART_MspInit+0xdc>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_UART_MspInit+0xdc>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = DbgUARTTX_Pin|DbgUARTRX_Pin;
 80016a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4809      	ldr	r0, [pc, #36]	@ (80016f4 <HAL_UART_MspInit+0xe0>)
 80016ce:	f004 fbe5 	bl	8005e9c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2105      	movs	r1, #5
 80016d6:	208e      	movs	r0, #142	@ 0x8e
 80016d8:	f002 f95e 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80016dc:	208e      	movs	r0, #142	@ 0x8e
 80016de:	f002 f975 	bl	80039cc <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80016e2:	bf00      	nop
 80016e4:	37e8      	adds	r7, #232	@ 0xe8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	58000c00 	.word	0x58000c00
 80016f0:	58024400 	.word	0x58024400
 80016f4:	58020000 	.word	0x58020000

080016f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0c2      	sub	sp, #264	@ 0x108
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001702:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001706:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800171c:	22c0      	movs	r2, #192	@ 0xc0
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f013 f9e0 	bl	8014ae6 <memset>
  if(hspi->Instance==SPI1)
 8001726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800172a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a67      	ldr	r2, [pc, #412]	@ (80018d0 <HAL_SPI_MspInit+0x1d8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	f040 80db 	bne.w	80018f0 <HAL_SPI_MspInit+0x1f8>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800173a:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 800173c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001740:	4a64      	ldr	r2, [pc, #400]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 8001742:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001746:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800174a:	4b62      	ldr	r3, [pc, #392]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 800174c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b5e      	ldr	r3, [pc, #376]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175e:	4a5d      	ldr	r2, [pc, #372]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001768:	4b5a      	ldr	r3, [pc, #360]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001776:	4b57      	ldr	r3, [pc, #348]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177c:	4a55      	ldr	r2, [pc, #340]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 800177e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001786:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_SPI_MspInit+0x1dc>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = RxMOSI_Pin;
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ac:	2305      	movs	r3, #5
 80017ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(RxMOSI_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4847      	ldr	r0, [pc, #284]	@ (80018d8 <HAL_SPI_MspInit+0x1e0>)
 80017ba:	f004 fb6f 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxMISO_Pin|RxNSS_Pin|RxSCK_Pin;
 80017be:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80017c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d8:	2305      	movs	r3, #5
 80017da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017de:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80017e2:	4619      	mov	r1, r3
 80017e4:	483d      	ldr	r0, [pc, #244]	@ (80018dc <HAL_SPI_MspInit+0x1e4>)
 80017e6:	f004 fb59 	bl	8005e9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream2;
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 80017ec:	4a3d      	ldr	r2, [pc, #244]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 80017ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80017f0:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 80017f2:	2226      	movs	r2, #38	@ 0x26
 80017f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f6:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 80017f8:	2240      	movs	r2, #64	@ 0x40
 80017fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fc:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 8001804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001808:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180a:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001816:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001822:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001828:	482d      	ldr	r0, [pc, #180]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 800182a:	f002 f8dd 	bl	80039e8 <HAL_DMA_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 8001834:	f7ff fcbe 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800183c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a27      	ldr	r2, [pc, #156]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 8001844:	679a      	str	r2, [r3, #120]	@ 0x78
 8001846:	4a26      	ldr	r2, [pc, #152]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 8001848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800184c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream3;
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 8001856:	4a25      	ldr	r2, [pc, #148]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 8001858:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 800185c:	2225      	movs	r2, #37	@ 0x25
 800185e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 800186e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001872:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001892:	4815      	ldr	r0, [pc, #84]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 8001894:	f002 f8a8 	bl	80039e8 <HAL_DMA_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_SPI_MspInit+0x1aa>
    {
      Error_Handler();
 800189e:	f7ff fc89 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80018a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 80018ae:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 80018b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2105      	movs	r1, #5
 80018c2:	2023      	movs	r0, #35	@ 0x23
 80018c4:	f002 f868 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018c8:	2023      	movs	r0, #35	@ 0x23
 80018ca:	f002 f87f 	bl	80039cc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 80018ce:	e1df      	b.n	8001c90 <HAL_SPI_MspInit+0x598>
 80018d0:	40013000 	.word	0x40013000
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58020000 	.word	0x58020000
 80018dc:	58021800 	.word	0x58021800
 80018e0:	24000690 	.word	0x24000690
 80018e4:	40020040 	.word	0x40020040
 80018e8:	24000708 	.word	0x24000708
 80018ec:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI3)
 80018f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a79      	ldr	r2, [pc, #484]	@ (8001ae4 <HAL_SPI_MspInit+0x3ec>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	f040 8102 	bne.w	8001b08 <HAL_SPI_MspInit+0x410>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001904:	4b78      	ldr	r3, [pc, #480]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800190a:	4a77      	ldr	r2, [pc, #476]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 800190c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001910:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001914:	4b74      	ldr	r3, [pc, #464]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800191a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b71      	ldr	r3, [pc, #452]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001928:	4a6f      	ldr	r2, [pc, #444]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001932:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b69      	ldr	r3, [pc, #420]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001946:	4a68      	ldr	r2, [pc, #416]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001950:	4b65      	ldr	r3, [pc, #404]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	4b62      	ldr	r3, [pc, #392]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001964:	4a60      	ldr	r2, [pc, #384]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800196e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae8 <HAL_SPI_MspInit+0x3f0>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TxMOSI_Pin;
 800197c:	2304      	movs	r3, #4
 800197e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001994:	2307      	movs	r3, #7
 8001996:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(TxMOSI_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800199e:	4619      	mov	r1, r3
 80019a0:	4852      	ldr	r0, [pc, #328]	@ (8001aec <HAL_SPI_MspInit+0x3f4>)
 80019a2:	f004 fa7b 	bl	8005e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TxNSS_Pin;
 80019a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019c0:	2306      	movs	r3, #6
 80019c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(TxNSS_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019ca:	4619      	mov	r1, r3
 80019cc:	4848      	ldr	r0, [pc, #288]	@ (8001af0 <HAL_SPI_MspInit+0x3f8>)
 80019ce:	f004 fa65 	bl	8005e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TxSCK_Pin|TxMISO_Pin;
 80019d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ec:	2306      	movs	r3, #6
 80019ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019f6:	4619      	mov	r1, r3
 80019f8:	483e      	ldr	r0, [pc, #248]	@ (8001af4 <HAL_SPI_MspInit+0x3fc>)
 80019fa:	f004 fa4f 	bl	8005e9c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream4;
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a00:	4a3e      	ldr	r2, [pc, #248]	@ (8001afc <HAL_SPI_MspInit+0x404>)
 8001a02:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001a04:	4b3c      	ldr	r3, [pc, #240]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a06:	223e      	movs	r2, #62	@ 0x3e
 8001a08:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a0c:	2240      	movs	r2, #64	@ 0x40
 8001a0e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a10:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a16:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a1c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a24:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001a2a:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a36:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a3c:	482e      	ldr	r0, [pc, #184]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a3e:	f001 ffd3 	bl	80039e8 <HAL_DMA_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_SPI_MspInit+0x354>
      Error_Handler();
 8001a48:	f7ff fbb4 	bl	80011b4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a28      	ldr	r2, [pc, #160]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a58:	679a      	str	r2, [r3, #120]	@ 0x78
 8001a5a:	4a27      	ldr	r2, [pc, #156]	@ (8001af8 <HAL_SPI_MspInit+0x400>)
 8001a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_rx.Instance = DMA1_Stream5;
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a6a:	4a26      	ldr	r2, [pc, #152]	@ (8001b04 <HAL_SPI_MspInit+0x40c>)
 8001a6c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001a6e:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a70:	223d      	movs	r2, #61	@ 0x3d
 8001a72:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a74:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a86:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001aa6:	4816      	ldr	r0, [pc, #88]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001aa8:	f001 ff9e 	bl	80039e8 <HAL_DMA_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_SPI_MspInit+0x3be>
      Error_Handler();
 8001ab2:	f7ff fb7f 	bl	80011b4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001ac2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <HAL_SPI_MspInit+0x408>)
 8001ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	2033      	movs	r0, #51	@ 0x33
 8001ad8:	f001 ff5e 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001adc:	2033      	movs	r0, #51	@ 0x33
 8001ade:	f001 ff75 	bl	80039cc <HAL_NVIC_EnableIRQ>
}
 8001ae2:	e0d5      	b.n	8001c90 <HAL_SPI_MspInit+0x598>
 8001ae4:	40003c00 	.word	0x40003c00
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	58020400 	.word	0x58020400
 8001af0:	58020000 	.word	0x58020000
 8001af4:	58020800 	.word	0x58020800
 8001af8:	24000780 	.word	0x24000780
 8001afc:	40020070 	.word	0x40020070
 8001b00:	240007f8 	.word	0x240007f8
 8001b04:	40020088 	.word	0x40020088
  else if(hspi->Instance==SPI4)
 8001b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a61      	ldr	r2, [pc, #388]	@ (8001c9c <HAL_SPI_MspInit+0x5a4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	f040 80ba 	bne.w	8001c90 <HAL_SPI_MspInit+0x598>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b32:	4618      	mov	r0, r3
 8001b34:	f006 ffdc 	bl	8008af0 <HAL_RCCEx_PeriphCLKConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_SPI_MspInit+0x44a>
      Error_Handler();
 8001b3e:	f7ff fb39 	bl	80011b4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b42:	4b57      	ldr	r3, [pc, #348]	@ (8001ca0 <HAL_SPI_MspInit+0x5a8>)
 8001b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b48:	4a55      	ldr	r2, [pc, #340]	@ (8001ca0 <HAL_SPI_MspInit+0x5a8>)
 8001b4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b52:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <HAL_SPI_MspInit+0x5a8>)
 8001b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca0 <HAL_SPI_MspInit+0x5a8>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b66:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca0 <HAL_SPI_MspInit+0x5a8>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca0 <HAL_SPI_MspInit+0x5a8>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TxIQSCK_Pin|TxIQNSS_Pin|TxIQMISO_Pin|TxIQMOSI_Pin;
 8001b7e:	2374      	movs	r3, #116	@ 0x74
 8001b80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b96:	2305      	movs	r3, #5
 8001b98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4840      	ldr	r0, [pc, #256]	@ (8001ca4 <HAL_SPI_MspInit+0x5ac>)
 8001ba4:	f004 f97a 	bl	8005e9c <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA1_Stream6;
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001baa:	4a40      	ldr	r2, [pc, #256]	@ (8001cac <HAL_SPI_MspInit+0x5b4>)
 8001bac:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001bae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bb0:	2254      	movs	r2, #84	@ 0x54
 8001bb2:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc0:	4b39      	ldr	r3, [pc, #228]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bc6:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc8:	4b37      	ldr	r3, [pc, #220]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bce:	4b36      	ldr	r3, [pc, #216]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bda:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001be0:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be2:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001be8:	482f      	ldr	r0, [pc, #188]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001bea:	f001 fefd 	bl	80039e8 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_SPI_MspInit+0x500>
      Error_Handler();
 8001bf4:	f7ff fade 	bl	80011b4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a29      	ldr	r2, [pc, #164]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001c04:	679a      	str	r2, [r3, #120]	@ 0x78
 8001c06:	4a28      	ldr	r2, [pc, #160]	@ (8001ca8 <HAL_SPI_MspInit+0x5b0>)
 8001c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA1_Stream7;
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c16:	4a27      	ldr	r2, [pc, #156]	@ (8001cb4 <HAL_SPI_MspInit+0x5bc>)
 8001c18:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c1c:	2253      	movs	r2, #83	@ 0x53
 8001c1e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c20:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2c:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c32:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c4c:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001c54:	4816      	ldr	r0, [pc, #88]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c56:	f001 fec7 	bl	80039e8 <HAL_DMA_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_SPI_MspInit+0x56c>
      Error_Handler();
 8001c60:	f7ff faa8 	bl	80011b4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c70:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c72:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <HAL_SPI_MspInit+0x5b8>)
 8001c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2105      	movs	r1, #5
 8001c84:	2054      	movs	r0, #84	@ 0x54
 8001c86:	f001 fe87 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001c8a:	2054      	movs	r0, #84	@ 0x54
 8001c8c:	f001 fe9e 	bl	80039cc <HAL_NVIC_EnableIRQ>
}
 8001c90:	bf00      	nop
 8001c92:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013400 	.word	0x40013400
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58021000 	.word	0x58021000
 8001ca8:	24000870 	.word	0x24000870
 8001cac:	400200a0 	.word	0x400200a0
 8001cb0:	240008e8 	.word	0x240008e8
 8001cb4:	400200b8 	.word	0x400200b8

08001cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b090      	sub	sp, #64	@ 0x40
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	d827      	bhi.n	8001d16 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	2037      	movs	r0, #55	@ 0x37
 8001ccc:	f001 fe64 	bl	8003998 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cd0:	2037      	movs	r0, #55	@ 0x37
 8001cd2:	f001 fe7b 	bl	80039cc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001cd6:	4a29      	ldr	r2, [pc, #164]	@ (8001d7c <HAL_InitTick+0xc4>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001cdc:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <HAL_InitTick+0xc8>)
 8001cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce2:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <HAL_InitTick+0xc8>)
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_InitTick+0xc8>)
 8001cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cfa:	f107 0210 	add.w	r2, r7, #16
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f006 feb1 	bl	8008a6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_InitTick+0x6a>
 8001d14:	e001      	b.n	8001d1a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e02b      	b.n	8001d72 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d1a:	f006 fe7b 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 8001d1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001d20:	e004      	b.n	8001d2c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d22:	f006 fe77 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 8001d26:	4603      	mov	r3, r0
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d2e:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <HAL_InitTick+0xcc>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	3b01      	subs	r3, #1
 8001d38:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <HAL_InitTick+0xd0>)
 8001d3c:	4a13      	ldr	r2, [pc, #76]	@ (8001d8c <HAL_InitTick+0xd4>)
 8001d3e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_InitTick+0xd0>)
 8001d42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d46:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d48:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_InitTick+0xd0>)
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_InitTick+0xd0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <HAL_InitTick+0xd0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001d5a:	480b      	ldr	r0, [pc, #44]	@ (8001d88 <HAL_InitTick+0xd0>)
 8001d5c:	f009 ffbf 	bl	800bcde <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001d66:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <HAL_InitTick+0xd0>)
 8001d68:	f00a f81a 	bl	800bda0 <HAL_TIM_Base_Start_IT>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	e000      	b.n	8001d72 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3740      	adds	r7, #64	@ 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	24000024 	.word	0x24000024
 8001d80:	58024400 	.word	0x58024400
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	24000968 	.word	0x24000968
 8001d8c:	40001400 	.word	0x40001400

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <NMI_Handler+0x4>

08001d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <MemManage_Handler+0x4>

08001da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <DMA1_Stream0_IRQHandler+0x10>)
 8001dce:	f002 fecb 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	24000374 	.word	0x24000374

08001ddc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <DMA1_Stream1_IRQHandler+0x10>)
 8001de2:	f002 fec1 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	240003ec 	.word	0x240003ec

08001df0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <DMA1_Stream2_IRQHandler+0x10>)
 8001df6:	f002 feb7 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24000690 	.word	0x24000690

08001e04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <DMA1_Stream3_IRQHandler+0x10>)
 8001e0a:	f002 fead 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24000708 	.word	0x24000708

08001e18 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <DMA1_Stream4_IRQHandler+0x10>)
 8001e1e:	f002 fea3 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	24000780 	.word	0x24000780

08001e2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <DMA1_Stream5_IRQHandler+0x10>)
 8001e32:	f002 fe99 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	240007f8 	.word	0x240007f8

08001e40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <DMA1_Stream6_IRQHandler+0x10>)
 8001e46:	f002 fe8f 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	24000870 	.word	0x24000870

08001e54 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <SPI1_IRQHandler+0x10>)
 8001e5a:	f009 fc6b 	bl	800b734 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	240004f8 	.word	0x240004f8

08001e68 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <DMA1_Stream7_IRQHandler+0x10>)
 8001e6e:	f002 fe7b 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	240008e8 	.word	0x240008e8

08001e7c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <SPI3_IRQHandler+0x10>)
 8001e82:	f009 fc57 	bl	800b734 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	24000580 	.word	0x24000580

08001e90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <TIM7_IRQHandler+0x10>)
 8001e96:	f009 fffb 	bl	800be90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	24000968 	.word	0x24000968

08001ea4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eaa:	f002 fe5d 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	240002a8 	.word	0x240002a8

08001eb8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <OTG_HS_IRQHandler+0x10>)
 8001ebe:	f004 fc45 	bl	800674c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24005924 	.word	0x24005924

08001ecc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <SPI4_IRQHandler+0x10>)
 8001ed2:	f009 fc2f 	bl	800b734 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	24000608 	.word	0x24000608

08001ee0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	@ (8001ef0 <LPUART1_IRQHandler+0x10>)
 8001ee6:	f00a fa9f 	bl	800c428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	24000464 	.word	0x24000464

08001ef4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f06:	f3af 8000 	nop.w
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf0      	blt.n	8001f06 <_read+0x12>
  }

  return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e009      	b.n	8001f54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fb05 	bl	8002558 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf1      	blt.n	8001f40 <_write+0x12>
  }
  return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_close>:

int _close(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_isatty>:

int _isatty(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	@ (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f012 fe1e 	bl	8014c40 <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	24080000 	.word	0x24080000
 8002030:	00000400 	.word	0x00000400
 8002034:	240009b4 	.word	0x240009b4
 8002038:	24007b28 	.word	0x24007b28

0800203c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002040:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <SystemInit+0x114>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <SystemInit+0x114>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002050:	4b40      	ldr	r3, [pc, #256]	@ (8002154 <SystemInit+0x118>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b06      	cmp	r3, #6
 800205a:	d807      	bhi.n	800206c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800205c:	4b3d      	ldr	r3, [pc, #244]	@ (8002154 <SystemInit+0x118>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 030f 	bic.w	r3, r3, #15
 8002064:	4a3b      	ldr	r2, [pc, #236]	@ (8002154 <SystemInit+0x118>)
 8002066:	f043 0307 	orr.w	r3, r3, #7
 800206a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800206c:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <SystemInit+0x11c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a39      	ldr	r2, [pc, #228]	@ (8002158 <SystemInit+0x11c>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002078:	4b37      	ldr	r3, [pc, #220]	@ (8002158 <SystemInit+0x11c>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800207e:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <SystemInit+0x11c>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4935      	ldr	r1, [pc, #212]	@ (8002158 <SystemInit+0x11c>)
 8002084:	4b35      	ldr	r3, [pc, #212]	@ (800215c <SystemInit+0x120>)
 8002086:	4013      	ands	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800208a:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <SystemInit+0x118>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002096:	4b2f      	ldr	r3, [pc, #188]	@ (8002154 <SystemInit+0x118>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 030f 	bic.w	r3, r3, #15
 800209e:	4a2d      	ldr	r2, [pc, #180]	@ (8002154 <SystemInit+0x118>)
 80020a0:	f043 0307 	orr.w	r3, r3, #7
 80020a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <SystemInit+0x11c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <SystemInit+0x11c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020b2:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <SystemInit+0x11c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020b8:	4b27      	ldr	r3, [pc, #156]	@ (8002158 <SystemInit+0x11c>)
 80020ba:	4a29      	ldr	r2, [pc, #164]	@ (8002160 <SystemInit+0x124>)
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <SystemInit+0x11c>)
 80020c0:	4a28      	ldr	r2, [pc, #160]	@ (8002164 <SystemInit+0x128>)
 80020c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020c4:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <SystemInit+0x11c>)
 80020c6:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <SystemInit+0x12c>)
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020ca:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <SystemInit+0x11c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020d0:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <SystemInit+0x11c>)
 80020d2:	4a25      	ldr	r2, [pc, #148]	@ (8002168 <SystemInit+0x12c>)
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <SystemInit+0x11c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <SystemInit+0x11c>)
 80020de:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <SystemInit+0x12c>)
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <SystemInit+0x11c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <SystemInit+0x11c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002158 <SystemInit+0x11c>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <SystemInit+0x11c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80020fa:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <SystemInit+0x130>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <SystemInit+0x134>)
 8002100:	4013      	ands	r3, r2
 8002102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002106:	d202      	bcs.n	800210e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <SystemInit+0x138>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <SystemInit+0x11c>)
 8002110:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d113      	bne.n	8002144 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <SystemInit+0x11c>)
 800211e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002122:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <SystemInit+0x11c>)
 8002124:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002128:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <SystemInit+0x13c>)
 800212e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002132:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <SystemInit+0x11c>)
 8002136:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800213a:	4a07      	ldr	r2, [pc, #28]	@ (8002158 <SystemInit+0x11c>)
 800213c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002140:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00
 8002154:	52002000 	.word	0x52002000
 8002158:	58024400 	.word	0x58024400
 800215c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002160:	02020200 	.word	0x02020200
 8002164:	01ff0000 	.word	0x01ff0000
 8002168:	01010280 	.word	0x01010280
 800216c:	5c001000 	.word	0x5c001000
 8002170:	ffff0000 	.word	0xffff0000
 8002174:	51008108 	.word	0x51008108
 8002178:	52004000 	.word	0x52004000

0800217c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002180:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <ExitRun0Mode+0x2c>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a08      	ldr	r2, [pc, #32]	@ (80021a8 <ExitRun0Mode+0x2c>)
 8002186:	f043 0302 	orr.w	r3, r3, #2
 800218a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800218c:	bf00      	nop
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <ExitRun0Mode+0x2c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f9      	beq.n	800218e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	58024800 	.word	0x58024800

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80021e8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80021b0:	f7ff ffe4 	bl	800217c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021b4:	f7ff ff42 	bl	800203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021de:	f012 fd35 	bl	8014c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7fe fa63 	bl	80006ac <main>
  bx  lr
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021f0:	240001b0 	.word	0x240001b0
  ldr r2, =_sidata
 80021f4:	08015950 	.word	0x08015950
  ldr r2, =_sbss
 80021f8:	240001b0 	.word	0x240001b0
  ldr r4, =_ebss
 80021fc:	24007b28 	.word	0x24007b28

08002200 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC3_IRQHandler>
	...

08002204 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	@ 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <BSP_LED_Init+0x28>
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d006      	beq.n	800222c <BSP_LED_Init+0x28>
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d003      	beq.n	800222c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002224:	f06f 0301 	mvn.w	r3, #1
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222a:	e055      	b.n	80022d8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10f      	bne.n	8002252 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002232:	4b2c      	ldr	r3, [pc, #176]	@ (80022e4 <BSP_LED_Init+0xe0>)
 8002234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002238:	4a2a      	ldr	r2, [pc, #168]	@ (80022e4 <BSP_LED_Init+0xe0>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002242:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <BSP_LED_Init+0xe0>)
 8002244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	e021      	b.n	8002296 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d10f      	bne.n	8002278 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002258:	4b22      	ldr	r3, [pc, #136]	@ (80022e4 <BSP_LED_Init+0xe0>)
 800225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800225e:	4a21      	ldr	r2, [pc, #132]	@ (80022e4 <BSP_LED_Init+0xe0>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002268:	4b1e      	ldr	r3, [pc, #120]	@ (80022e4 <BSP_LED_Init+0xe0>)
 800226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	e00e      	b.n	8002296 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <BSP_LED_Init+0xe0>)
 800227a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227e:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <BSP_LED_Init+0xe0>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002288:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <BSP_LED_Init+0xe0>)
 800228a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4a13      	ldr	r2, [pc, #76]	@ (80022e8 <BSP_LED_Init+0xe4>)
 800229a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800229e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <BSP_LED_Init+0xe8>)
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	f107 0218 	add.w	r2, r7, #24
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fdee 	bl	8005e9c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <BSP_LED_Init+0xe8>)
 80022c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <BSP_LED_Init+0xe4>)
 80022cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022d0:	2200      	movs	r2, #0
 80022d2:	4619      	mov	r1, r3
 80022d4:	f003 ff92 	bl	80061fc <HAL_GPIO_WritePin>
  }

  return ret;
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3730      	adds	r7, #48	@ 0x30
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	58024400 	.word	0x58024400
 80022e8:	080158d0 	.word	0x080158d0
 80022ec:	2400000c 	.word	0x2400000c

080022f0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <BSP_LED_On+0x28>
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d006      	beq.n	8002318 <BSP_LED_On+0x28>
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d003      	beq.n	8002318 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002310:	f06f 0301 	mvn.w	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e00b      	b.n	8002330 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	4a08      	ldr	r2, [pc, #32]	@ (800233c <BSP_LED_On+0x4c>)
 800231c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <BSP_LED_On+0x50>)
 8002324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002328:	2201      	movs	r2, #1
 800232a:	4619      	mov	r1, r3
 800232c:	f003 ff66 	bl	80061fc <HAL_GPIO_WritePin>
  }

  return ret;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2400000c 	.word	0x2400000c
 8002340:	080158d0 	.word	0x080158d0

08002344 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <BSP_LED_Toggle+0x28>
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d006      	beq.n	800236c <BSP_LED_Toggle+0x28>
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d003      	beq.n	800236c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002364:	f06f 0301 	mvn.w	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e00b      	b.n	8002384 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <BSP_LED_Toggle+0x4c>)
 8002370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4907      	ldr	r1, [pc, #28]	@ (8002394 <BSP_LED_Toggle+0x50>)
 8002378:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f003 ff55 	bl	800622e <HAL_GPIO_TogglePin>
  }

  return ret;
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2400000c 	.word	0x2400000c
 8002394:	080158d0 	.word	0x080158d0

08002398 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80023a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <BSP_PB_Init+0xcc>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002464 <BSP_PB_Init+0xcc>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <BSP_PB_Init+0xcc>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80023c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80023cc:	2302      	movs	r3, #2
 80023ce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d0:	2302      	movs	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80023d4:	79bb      	ldrb	r3, [r7, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	4a21      	ldr	r2, [pc, #132]	@ (8002468 <BSP_PB_Init+0xd0>)
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	f107 020c 	add.w	r2, r7, #12
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fd55 	bl	8005e9c <HAL_GPIO_Init>
 80023f2:	e031      	b.n	8002458 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80023f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023f8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002468 <BSP_PB_Init+0xd0>)
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	f107 020c 	add.w	r2, r7, #12
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fd47 	bl	8005e9c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4a16      	ldr	r2, [pc, #88]	@ (800246c <BSP_PB_Init+0xd4>)
 8002414:	441a      	add	r2, r3
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4915      	ldr	r1, [pc, #84]	@ (8002470 <BSP_PB_Init+0xd8>)
 800241a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f003 fd26 	bl	8005e72 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4a10      	ldr	r2, [pc, #64]	@ (800246c <BSP_PB_Init+0xd4>)
 800242c:	1898      	adds	r0, r3, r2
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4a10      	ldr	r2, [pc, #64]	@ (8002474 <BSP_PB_Init+0xdc>)
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	461a      	mov	r2, r3
 8002438:	2100      	movs	r1, #0
 800243a:	f003 fcfb 	bl	8005e34 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800243e:	2028      	movs	r0, #40	@ 0x28
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <BSP_PB_Init+0xe0>)
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	f001 faa4 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002450:	2328      	movs	r3, #40	@ 0x28
 8002452:	4618      	mov	r0, r3
 8002454:	f001 faba 	bl	80039cc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	58024400 	.word	0x58024400
 8002468:	24000018 	.word	0x24000018
 800246c:	240009b8 	.word	0x240009b8
 8002470:	080158d8 	.word	0x080158d8
 8002474:	2400001c 	.word	0x2400001c
 8002478:	24000020 	.word	0x24000020

0800247c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024aa:	f06f 0301 	mvn.w	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e018      	b.n	80024e4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2294      	movs	r2, #148	@ 0x94
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <BSP_COM_Init+0x5c>)
 80024bc:	4413      	add	r3, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f86e 	bl	80025a0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2294      	movs	r2, #148	@ 0x94
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	4a08      	ldr	r2, [pc, #32]	@ (80024f0 <BSP_COM_Init+0x5c>)
 80024ce:	4413      	add	r3, r2
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f80e 	bl	80024f4 <MX_USART3_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80024de:	f06f 0303 	mvn.w	r3, #3
 80024e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80024e4:	68fb      	ldr	r3, [r7, #12]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	240009c0 	.word	0x240009c0

080024f4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <MX_USART3_Init+0x60>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	220c      	movs	r2, #12
 8002512:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	895b      	ldrh	r3, [r3, #10]
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	891b      	ldrh	r3, [r3, #8]
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	899b      	ldrh	r3, [r3, #12]
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002540:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f009 fe92 	bl	800c26c <HAL_UART_Init>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	24000008 	.word	0x24000008

08002558 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002560:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <__io_putchar+0x30>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	2394      	movs	r3, #148	@ 0x94
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	4a07      	ldr	r2, [pc, #28]	@ (800258c <__io_putchar+0x34>)
 800256e:	1898      	adds	r0, r3, r2
 8002570:	1d39      	adds	r1, r7, #4
 8002572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002576:	2201      	movs	r2, #1
 8002578:	f009 fec8 	bl	800c30c <HAL_UART_Transmit>
  return ch;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24000a54 	.word	0x24000a54
 800258c:	240009c0 	.word	0x240009c0

08002590 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002594:	2000      	movs	r0, #0
 8002596:	f7ff ff71 	bl	800247c <BSP_PB_Callback>
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <COM1_MspInit+0xa8>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ae:	4a26      	ldr	r2, [pc, #152]	@ (8002648 <COM1_MspInit+0xa8>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b8:	4b23      	ldr	r3, [pc, #140]	@ (8002648 <COM1_MspInit+0xa8>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <COM1_MspInit+0xa8>)
 80025c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <COM1_MspInit+0xa8>)
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <COM1_MspInit+0xa8>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <COM1_MspInit+0xa8>)
 80025e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ea:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <COM1_MspInit+0xa8>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025f4:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <COM1_MspInit+0xa8>)
 80025f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002606:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800260c:	2302      	movs	r3, #2
 800260e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002610:	2301      	movs	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002614:	2307      	movs	r3, #7
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	480b      	ldr	r0, [pc, #44]	@ (800264c <COM1_MspInit+0xac>)
 8002620:	f003 fc3c 	bl	8005e9c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002628:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800262e:	2307      	movs	r3, #7
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4804      	ldr	r0, [pc, #16]	@ (800264c <COM1_MspInit+0xac>)
 800263a:	f003 fc2f 	bl	8005e9c <HAL_GPIO_Init>
}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	58024400 	.word	0x58024400
 800264c:	58020c00 	.word	0x58020c00

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002656:	2003      	movs	r0, #3
 8002658:	f001 f993 	bl	8003982 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800265c:	f006 f830 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_Init+0x68>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	4913      	ldr	r1, [pc, #76]	@ (80026bc <HAL_Init+0x6c>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_Init+0x68>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	4a0e      	ldr	r2, [pc, #56]	@ (80026bc <HAL_Init+0x6c>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_Init+0x70>)
 8002692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002694:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_Init+0x74>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269a:	200f      	movs	r0, #15
 800269c:	f7ff fb0c 	bl	8001cb8 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e002      	b.n	80026b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026aa:	f7fe fd89 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58024400 	.word	0x58024400
 80026bc:	080158c0 	.word	0x080158c0
 80026c0:	24000004 	.word	0x24000004
 80026c4:	24000000 	.word	0x24000000

080026c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_IncTick+0x20>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_IncTick+0x24>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_IncTick+0x24>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	24000028 	.word	0x24000028
 80026ec:	24000a58 	.word	0x24000a58

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	24000a58 	.word	0x24000a58

08002708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff ffee 	bl	80026f0 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002720:	d005      	beq.n	800272e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_Delay+0x44>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800272e:	bf00      	nop
 8002730:	f7ff ffde 	bl	80026f0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	429a      	cmp	r2, r3
 800273e:	d8f7      	bhi.n	8002730 <HAL_Delay+0x28>
  {
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	24000028 	.word	0x24000028

08002750 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <HAL_GetREVID+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0c1b      	lsrs	r3, r3, #16
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	5c001000 	.word	0x5c001000

08002768 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <LL_ADC_SetChannelPreselection+0x24>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2201      	movs	r2, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	e015      	b.n	8002820 <LL_ADC_SetChannelPreselection+0x50>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2201      	movs	r2, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	69d2      	ldr	r2, [r2, #28]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002836:	b480      	push	{r7}
 8002838:	b087      	sub	sp, #28
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3360      	adds	r3, #96	@ 0x60
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	430b      	orrs	r3, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	431a      	orrs	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	611a      	str	r2, [r3, #16]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3360      	adds	r3, #96	@ 0x60
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	601a      	str	r2, [r3, #0]
  }
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028de:	b480      	push	{r7}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3330      	adds	r3, #48	@ 0x30
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	4413      	add	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	211f      	movs	r1, #31
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	401a      	ands	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 011f 	and.w	r1, r3, #31
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3314      	adds	r3, #20
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	0e5b      	lsrs	r3, r3, #25
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	4413      	add	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	0d1b      	lsrs	r3, r3, #20
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2107      	movs	r1, #7
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	0d1b      	lsrs	r3, r3, #20
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	431a      	orrs	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0318 	and.w	r3, r3, #24
 80029ae:	4908      	ldr	r1, [pc, #32]	@ (80029d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029b0:	40d9      	lsrs	r1, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	400b      	ands	r3, r1
 80029b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	000fffff 	.word	0x000fffff

080029d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6093      	str	r3, [r2, #8]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	5fffffc0 	.word	0x5fffffc0

080029f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a0c:	d101      	bne.n	8002a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	6fffffc0 	.word	0x6fffffc0

08002a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a5c:	d101      	bne.n	8002a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <LL_ADC_IsEnabled+0x18>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <LL_ADC_IsEnabled+0x1a>
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d101      	bne.n	8002aae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d101      	bne.n	8002ad4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e18f      	b.n	8002e1e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7fe fb75 	bl	80011fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff67 	bl	80029f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff4d 	bl	80029d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff82 	bl	8002a48 <LL_ADC_IsInternalRegulatorEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d114      	bne.n	8002b74 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff66 	bl	8002a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b54:	4b87      	ldr	r3, [pc, #540]	@ (8002d74 <HAL_ADC_Init+0x290>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	4a87      	ldr	r2, [pc, #540]	@ (8002d78 <HAL_ADC_Init+0x294>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	3301      	adds	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b66:	e002      	b.n	8002b6e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f9      	bne.n	8002b68 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff65 	bl	8002a48 <LL_ADC_IsInternalRegulatorEnabled>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	f043 0210 	orr.w	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff76 	bl	8002a96 <LL_ADC_REG_IsConversionOngoing>
 8002baa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 8129 	bne.w	8002e0c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 8125 	bne.w	8002e0c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bca:	f043 0202 	orr.w	r2, r3, #2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff4a 	bl	8002a70 <LL_ADC_IsEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d136      	bne.n	8002c50 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a65      	ldr	r2, [pc, #404]	@ (8002d7c <HAL_ADC_Init+0x298>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_ADC_Init+0x112>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a63      	ldr	r2, [pc, #396]	@ (8002d80 <HAL_ADC_Init+0x29c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10e      	bne.n	8002c14 <HAL_ADC_Init+0x130>
 8002bf6:	4861      	ldr	r0, [pc, #388]	@ (8002d7c <HAL_ADC_Init+0x298>)
 8002bf8:	f7ff ff3a 	bl	8002a70 <LL_ADC_IsEnabled>
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	4860      	ldr	r0, [pc, #384]	@ (8002d80 <HAL_ADC_Init+0x29c>)
 8002c00:	f7ff ff36 	bl	8002a70 <LL_ADC_IsEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4323      	orrs	r3, r4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e008      	b.n	8002c26 <HAL_ADC_Init+0x142>
 8002c14:	485b      	ldr	r0, [pc, #364]	@ (8002d84 <HAL_ADC_Init+0x2a0>)
 8002c16:	f7ff ff2b 	bl	8002a70 <LL_ADC_IsEnabled>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a53      	ldr	r2, [pc, #332]	@ (8002d7c <HAL_ADC_Init+0x298>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_ADC_Init+0x15a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a51      	ldr	r2, [pc, #324]	@ (8002d80 <HAL_ADC_Init+0x29c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Init+0x15e>
 8002c3e:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <HAL_ADC_Init+0x2a4>)
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_Init+0x160>
 8002c42:	4a52      	ldr	r2, [pc, #328]	@ (8002d8c <HAL_ADC_Init+0x2a8>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f7ff fd8c 	bl	8002768 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c50:	f7ff fd7e 	bl	8002750 <HAL_GetREVID>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d914      	bls.n	8002c88 <HAL_ADC_Init+0x1a4>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d110      	bne.n	8002c88 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7d5b      	ldrb	r3, [r3, #21]
 8002c6a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c70:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c76:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7f1b      	ldrb	r3, [r3, #28]
 8002c7c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c7e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c80:	f043 030c 	orr.w	r3, r3, #12
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e00d      	b.n	8002ca4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7d5b      	ldrb	r3, [r3, #21]
 8002c8c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c92:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c98:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7f1b      	ldrb	r3, [r3, #28]
 8002c9e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7f1b      	ldrb	r3, [r3, #28]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	045b      	lsls	r3, r3, #17
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d90 <HAL_ADC_Init+0x2ac>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	69b9      	ldr	r1, [r7, #24]
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fed1 	bl	8002a96 <LL_ADC_REG_IsConversionOngoing>
 8002cf4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fede 	bl	8002abc <LL_ADC_INJ_IsConversionOngoing>
 8002d00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d15f      	bne.n	8002dc8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d15c      	bne.n	8002dc8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7d1b      	ldrb	r3, [r3, #20]
 8002d12:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <HAL_ADC_Init+0x2b0>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d130      	bne.n	8002d9c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <HAL_ADC_Init+0x2b4>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0411      	lsls	r1, r2, #16
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d62:	430a      	orrs	r2, r1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	611a      	str	r2, [r3, #16]
 8002d70:	e01c      	b.n	8002dac <HAL_ADC_Init+0x2c8>
 8002d72:	bf00      	nop
 8002d74:	24000000 	.word	0x24000000
 8002d78:	053e2d63 	.word	0x053e2d63
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40022100 	.word	0x40022100
 8002d84:	58026000 	.word	0x58026000
 8002d88:	40022300 	.word	0x40022300
 8002d8c:	58026300 	.word	0x58026300
 8002d90:	fff0c003 	.word	0xfff0c003
 8002d94:	ffffbffc 	.word	0xffffbffc
 8002d98:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fb20 	bl	8003408 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10c      	bne.n	8002dea <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f023 010f 	bic.w	r1, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002de8:	e007      	b.n	8002dfa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 020f 	bic.w	r2, r2, #15
 8002df8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e0a:	e007      	b.n	8002e1c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}
 8002e26:	bf00      	nop

08002e28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b08d      	sub	sp, #52	@ 0x34
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a65      	ldr	r2, [pc, #404]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002e42:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x2a>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e2c7      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x5ba>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe19 	bl	8002a96 <LL_ADC_REG_IsConversionOngoing>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 82ac 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db2c      	blt.n	8002ece <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x6a>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0e9b      	lsrs	r3, r3, #26
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	e016      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x98>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	613b      	str	r3, [r7, #16]
  return result;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e003      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2201      	movs	r2, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	69d1      	ldr	r1, [r2, #28]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f7ff fcff 	bl	80028de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fdd6 	bl	8002a96 <LL_ADC_REG_IsConversionOngoing>
 8002eea:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fde3 	bl	8002abc <LL_ADC_INJ_IsConversionOngoing>
 8002ef6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80b8 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 80b4 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f7ff fd0e 	bl	8002936 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f1a:	4b30      	ldr	r3, [pc, #192]	@ (8002fdc <HAL_ADC_ConfigChannel+0x1b4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f26:	d10b      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x118>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	e01d      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x154>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10b      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x13e>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	e00a      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x154>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d02c      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6919      	ldr	r1, [r3, #16]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f7ff fc4f 	bl	8002836 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6919      	ldr	r1, [r3, #16]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	7e5b      	ldrb	r3, [r3, #25]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x186>
 8002fa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002fac:	e000      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x188>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f7ff fc79 	bl	80028a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	7e1b      	ldrb	r3, [r3, #24]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d102      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1a4>
 8002fc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fca:	e000      	b.n	8002fce <HAL_ADC_ConfigChannel+0x1a6>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f7ff fc51 	bl	8002876 <LL_ADC_SetDataRightShift>
 8002fd4:	e04c      	b.n	8003070 <HAL_ADC_ConfigChannel+0x248>
 8002fd6:	bf00      	nop
 8002fd8:	47ff0000 	.word	0x47ff0000
 8002fdc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	069b      	lsls	r3, r3, #26
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d107      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003002:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800300a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	069b      	lsls	r3, r3, #26
 8003014:	429a      	cmp	r2, r3
 8003016:	d107      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003026:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	429a      	cmp	r2, r3
 800303a:	d107      	bne.n	800304c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800304a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	069b      	lsls	r3, r3, #26
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800306e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fcfb 	bl	8002a70 <LL_ADC_IsEnabled>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 81aa 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	461a      	mov	r2, r3
 8003090:	f7ff fc7c 	bl	800298c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a87      	ldr	r2, [pc, #540]	@ (80032b8 <HAL_ADC_ConfigChannel+0x490>)
 800309a:	4293      	cmp	r3, r2
 800309c:	f040 809a 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4984      	ldr	r1, [pc, #528]	@ (80032bc <HAL_ADC_ConfigChannel+0x494>)
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d147      	bne.n	800313e <HAL_ADC_ConfigChannel+0x316>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4983      	ldr	r1, [pc, #524]	@ (80032c0 <HAL_ADC_ConfigChannel+0x498>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d040      	beq.n	800313a <HAL_ADC_ConfigChannel+0x312>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4981      	ldr	r1, [pc, #516]	@ (80032c4 <HAL_ADC_ConfigChannel+0x49c>)
 80030be:	428b      	cmp	r3, r1
 80030c0:	d039      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x30e>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4980      	ldr	r1, [pc, #512]	@ (80032c8 <HAL_ADC_ConfigChannel+0x4a0>)
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d032      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x30a>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	497e      	ldr	r1, [pc, #504]	@ (80032cc <HAL_ADC_ConfigChannel+0x4a4>)
 80030d2:	428b      	cmp	r3, r1
 80030d4:	d02b      	beq.n	800312e <HAL_ADC_ConfigChannel+0x306>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	497d      	ldr	r1, [pc, #500]	@ (80032d0 <HAL_ADC_ConfigChannel+0x4a8>)
 80030dc:	428b      	cmp	r3, r1
 80030de:	d024      	beq.n	800312a <HAL_ADC_ConfigChannel+0x302>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	497b      	ldr	r1, [pc, #492]	@ (80032d4 <HAL_ADC_ConfigChannel+0x4ac>)
 80030e6:	428b      	cmp	r3, r1
 80030e8:	d01d      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x2fe>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	497a      	ldr	r1, [pc, #488]	@ (80032d8 <HAL_ADC_ConfigChannel+0x4b0>)
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d016      	beq.n	8003122 <HAL_ADC_ConfigChannel+0x2fa>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4978      	ldr	r1, [pc, #480]	@ (80032dc <HAL_ADC_ConfigChannel+0x4b4>)
 80030fa:	428b      	cmp	r3, r1
 80030fc:	d00f      	beq.n	800311e <HAL_ADC_ConfigChannel+0x2f6>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4977      	ldr	r1, [pc, #476]	@ (80032e0 <HAL_ADC_ConfigChannel+0x4b8>)
 8003104:	428b      	cmp	r3, r1
 8003106:	d008      	beq.n	800311a <HAL_ADC_ConfigChannel+0x2f2>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4975      	ldr	r1, [pc, #468]	@ (80032e4 <HAL_ADC_ConfigChannel+0x4bc>)
 800310e:	428b      	cmp	r3, r1
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x2ee>
 8003112:	4b75      	ldr	r3, [pc, #468]	@ (80032e8 <HAL_ADC_ConfigChannel+0x4c0>)
 8003114:	e05a      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 8003116:	2300      	movs	r3, #0
 8003118:	e058      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 800311a:	4b74      	ldr	r3, [pc, #464]	@ (80032ec <HAL_ADC_ConfigChannel+0x4c4>)
 800311c:	e056      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_ADC_ConfigChannel+0x4c8>)
 8003120:	e054      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 8003122:	4b6e      	ldr	r3, [pc, #440]	@ (80032dc <HAL_ADC_ConfigChannel+0x4b4>)
 8003124:	e052      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 8003126:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003128:	e050      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 800312a:	4b72      	ldr	r3, [pc, #456]	@ (80032f4 <HAL_ADC_ConfigChannel+0x4cc>)
 800312c:	e04e      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 800312e:	4b72      	ldr	r3, [pc, #456]	@ (80032f8 <HAL_ADC_ConfigChannel+0x4d0>)
 8003130:	e04c      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 8003132:	4b72      	ldr	r3, [pc, #456]	@ (80032fc <HAL_ADC_ConfigChannel+0x4d4>)
 8003134:	e04a      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 8003136:	4b72      	ldr	r3, [pc, #456]	@ (8003300 <HAL_ADC_ConfigChannel+0x4d8>)
 8003138:	e048      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 800313a:	2301      	movs	r3, #1
 800313c:	e046      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4970      	ldr	r1, [pc, #448]	@ (8003304 <HAL_ADC_ConfigChannel+0x4dc>)
 8003144:	428b      	cmp	r3, r1
 8003146:	d140      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x3a2>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	495c      	ldr	r1, [pc, #368]	@ (80032c0 <HAL_ADC_ConfigChannel+0x498>)
 800314e:	428b      	cmp	r3, r1
 8003150:	d039      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x39e>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	495b      	ldr	r1, [pc, #364]	@ (80032c4 <HAL_ADC_ConfigChannel+0x49c>)
 8003158:	428b      	cmp	r3, r1
 800315a:	d032      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x39a>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4959      	ldr	r1, [pc, #356]	@ (80032c8 <HAL_ADC_ConfigChannel+0x4a0>)
 8003162:	428b      	cmp	r3, r1
 8003164:	d02b      	beq.n	80031be <HAL_ADC_ConfigChannel+0x396>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4958      	ldr	r1, [pc, #352]	@ (80032cc <HAL_ADC_ConfigChannel+0x4a4>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d024      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x392>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4956      	ldr	r1, [pc, #344]	@ (80032d0 <HAL_ADC_ConfigChannel+0x4a8>)
 8003176:	428b      	cmp	r3, r1
 8003178:	d01d      	beq.n	80031b6 <HAL_ADC_ConfigChannel+0x38e>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4955      	ldr	r1, [pc, #340]	@ (80032d4 <HAL_ADC_ConfigChannel+0x4ac>)
 8003180:	428b      	cmp	r3, r1
 8003182:	d016      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0x38a>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4953      	ldr	r1, [pc, #332]	@ (80032d8 <HAL_ADC_ConfigChannel+0x4b0>)
 800318a:	428b      	cmp	r3, r1
 800318c:	d00f      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x386>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4952      	ldr	r1, [pc, #328]	@ (80032dc <HAL_ADC_ConfigChannel+0x4b4>)
 8003194:	428b      	cmp	r3, r1
 8003196:	d008      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x382>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4951      	ldr	r1, [pc, #324]	@ (80032e4 <HAL_ADC_ConfigChannel+0x4bc>)
 800319e:	428b      	cmp	r3, r1
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x37e>
 80031a2:	4b51      	ldr	r3, [pc, #324]	@ (80032e8 <HAL_ADC_ConfigChannel+0x4c0>)
 80031a4:	e012      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031a6:	2300      	movs	r3, #0
 80031a8:	e010      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031aa:	4b51      	ldr	r3, [pc, #324]	@ (80032f0 <HAL_ADC_ConfigChannel+0x4c8>)
 80031ac:	e00e      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031ae:	4b4b      	ldr	r3, [pc, #300]	@ (80032dc <HAL_ADC_ConfigChannel+0x4b4>)
 80031b0:	e00c      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031b2:	4b49      	ldr	r3, [pc, #292]	@ (80032d8 <HAL_ADC_ConfigChannel+0x4b0>)
 80031b4:	e00a      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031b6:	4b4f      	ldr	r3, [pc, #316]	@ (80032f4 <HAL_ADC_ConfigChannel+0x4cc>)
 80031b8:	e008      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031ba:	4b4f      	ldr	r3, [pc, #316]	@ (80032f8 <HAL_ADC_ConfigChannel+0x4d0>)
 80031bc:	e006      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031be:	4b4f      	ldr	r3, [pc, #316]	@ (80032fc <HAL_ADC_ConfigChannel+0x4d4>)
 80031c0:	e004      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003300 <HAL_ADC_ConfigChannel+0x4d8>)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3a4>
 80031ca:	2300      	movs	r3, #0
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f7ff fafe 	bl	80027d0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f280 80fc 	bge.w	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a36      	ldr	r2, [pc, #216]	@ (80032bc <HAL_ADC_ConfigChannel+0x494>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x3ca>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a45      	ldr	r2, [pc, #276]	@ (8003304 <HAL_ADC_ConfigChannel+0x4dc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x3ce>
 80031f2:	4b45      	ldr	r3, [pc, #276]	@ (8003308 <HAL_ADC_ConfigChannel+0x4e0>)
 80031f4:	e000      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x3d0>
 80031f6:	4b45      	ldr	r3, [pc, #276]	@ (800330c <HAL_ADC_ConfigChannel+0x4e4>)
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fadb 	bl	80027b4 <LL_ADC_GetCommonPathInternalCh>
 80031fe:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2d      	ldr	r2, [pc, #180]	@ (80032bc <HAL_ADC_ConfigChannel+0x494>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x3ec>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3d      	ldr	r2, [pc, #244]	@ (8003304 <HAL_ADC_ConfigChannel+0x4dc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10e      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x40a>
 8003214:	4829      	ldr	r0, [pc, #164]	@ (80032bc <HAL_ADC_ConfigChannel+0x494>)
 8003216:	f7ff fc2b 	bl	8002a70 <LL_ADC_IsEnabled>
 800321a:	4604      	mov	r4, r0
 800321c:	4839      	ldr	r0, [pc, #228]	@ (8003304 <HAL_ADC_ConfigChannel+0x4dc>)
 800321e:	f7ff fc27 	bl	8002a70 <LL_ADC_IsEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	4323      	orrs	r3, r4
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e008      	b.n	8003244 <HAL_ADC_ConfigChannel+0x41c>
 8003232:	4837      	ldr	r0, [pc, #220]	@ (8003310 <HAL_ADC_ConfigChannel+0x4e8>)
 8003234:	f7ff fc1c 	bl	8002a70 <LL_ADC_IsEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80b3 	beq.w	80033b0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a31      	ldr	r2, [pc, #196]	@ (8003314 <HAL_ADC_ConfigChannel+0x4ec>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d165      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x4f8>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d160      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <HAL_ADC_ConfigChannel+0x4e8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	f040 80b6 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a13      	ldr	r2, [pc, #76]	@ (80032bc <HAL_ADC_ConfigChannel+0x494>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_ADC_ConfigChannel+0x456>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	@ (8003304 <HAL_ADC_ConfigChannel+0x4dc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x45a>
 800327e:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <HAL_ADC_ConfigChannel+0x4e0>)
 8003280:	e000      	b.n	8003284 <HAL_ADC_ConfigChannel+0x45c>
 8003282:	4a22      	ldr	r2, [pc, #136]	@ (800330c <HAL_ADC_ConfigChannel+0x4e4>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f7ff fa7e 	bl	800278e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003292:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <HAL_ADC_ConfigChannel+0x4f0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	4a20      	ldr	r2, [pc, #128]	@ (800331c <HAL_ADC_ConfigChannel+0x4f4>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	3301      	adds	r3, #1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80032a6:	e002      	b.n	80032ae <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f9      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032b4:	e08f      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
 80032b6:	bf00      	nop
 80032b8:	47ff0000 	.word	0x47ff0000
 80032bc:	40022000 	.word	0x40022000
 80032c0:	04300002 	.word	0x04300002
 80032c4:	08600004 	.word	0x08600004
 80032c8:	0c900008 	.word	0x0c900008
 80032cc:	10c00010 	.word	0x10c00010
 80032d0:	14f00020 	.word	0x14f00020
 80032d4:	2a000400 	.word	0x2a000400
 80032d8:	2e300800 	.word	0x2e300800
 80032dc:	32601000 	.word	0x32601000
 80032e0:	43210000 	.word	0x43210000
 80032e4:	4b840000 	.word	0x4b840000
 80032e8:	4fb80000 	.word	0x4fb80000
 80032ec:	47520000 	.word	0x47520000
 80032f0:	36902000 	.word	0x36902000
 80032f4:	25b00200 	.word	0x25b00200
 80032f8:	21800100 	.word	0x21800100
 80032fc:	1d500080 	.word	0x1d500080
 8003300:	19200040 	.word	0x19200040
 8003304:	40022100 	.word	0x40022100
 8003308:	40022300 	.word	0x40022300
 800330c:	58026300 	.word	0x58026300
 8003310:	58026000 	.word	0x58026000
 8003314:	cb840000 	.word	0xcb840000
 8003318:	24000000 	.word	0x24000000
 800331c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a31      	ldr	r2, [pc, #196]	@ (80033ec <HAL_ADC_ConfigChannel+0x5c4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d11e      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x540>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d119      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2d      	ldr	r2, [pc, #180]	@ (80033f0 <HAL_ADC_ConfigChannel+0x5c8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d14b      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2c      	ldr	r2, [pc, #176]	@ (80033f4 <HAL_ADC_ConfigChannel+0x5cc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_ADC_ConfigChannel+0x52a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2a      	ldr	r2, [pc, #168]	@ (80033f8 <HAL_ADC_ConfigChannel+0x5d0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x52e>
 8003352:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <HAL_ADC_ConfigChannel+0x5d4>)
 8003354:	e000      	b.n	8003358 <HAL_ADC_ConfigChannel+0x530>
 8003356:	4a2a      	ldr	r2, [pc, #168]	@ (8003400 <HAL_ADC_ConfigChannel+0x5d8>)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f7ff fa14 	bl	800278e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003366:	e036      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a25      	ldr	r2, [pc, #148]	@ (8003404 <HAL_ADC_ConfigChannel+0x5dc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d131      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d12c      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_ADC_ConfigChannel+0x5c8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d127      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1a      	ldr	r2, [pc, #104]	@ (80033f4 <HAL_ADC_ConfigChannel+0x5cc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_ADC_ConfigChannel+0x572>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <HAL_ADC_ConfigChannel+0x576>
 800339a:	4a18      	ldr	r2, [pc, #96]	@ (80033fc <HAL_ADC_ConfigChannel+0x5d4>)
 800339c:	e000      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x578>
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <HAL_ADC_ConfigChannel+0x5d8>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f7ff f9f0 	bl	800278e <LL_ADC_SetCommonPathInternalCh>
 80033ae:	e012      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80033c2:	e008      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3734      	adds	r7, #52	@ 0x34
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	c7520000 	.word	0xc7520000
 80033f0:	58026000 	.word	0x58026000
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40022100 	.word	0x40022100
 80033fc:	40022300 	.word	0x40022300
 8003400:	58026300 	.word	0x58026300
 8003404:	cfb80000 	.word	0xcfb80000

08003408 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7a      	ldr	r2, [pc, #488]	@ (8003600 <ADC_ConfigureBoostMode+0x1f8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <ADC_ConfigureBoostMode+0x1c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a79      	ldr	r2, [pc, #484]	@ (8003604 <ADC_ConfigureBoostMode+0x1fc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d109      	bne.n	8003438 <ADC_ConfigureBoostMode+0x30>
 8003424:	4b78      	ldr	r3, [pc, #480]	@ (8003608 <ADC_ConfigureBoostMode+0x200>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e008      	b.n	800344a <ADC_ConfigureBoostMode+0x42>
 8003438:	4b74      	ldr	r3, [pc, #464]	@ (800360c <ADC_ConfigureBoostMode+0x204>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01c      	beq.n	8003488 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800344e:	f005 fab1 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8003452:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800345c:	d010      	beq.n	8003480 <ADC_ConfigureBoostMode+0x78>
 800345e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003462:	d873      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003468:	d002      	beq.n	8003470 <ADC_ConfigureBoostMode+0x68>
 800346a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800346e:	d16d      	bne.n	800354c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	60fb      	str	r3, [r7, #12]
        break;
 800347e:	e068      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	60fb      	str	r3, [r7, #12]
        break;
 8003486:	e064      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003488:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	f006 fd38 	bl	8009f04 <HAL_RCCEx_GetPeriphCLKFreq>
 8003494:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800349e:	d051      	beq.n	8003544 <ADC_ConfigureBoostMode+0x13c>
 80034a0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80034a4:	d854      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034a6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80034aa:	d047      	beq.n	800353c <ADC_ConfigureBoostMode+0x134>
 80034ac:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80034b0:	d84e      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034b2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80034b6:	d03d      	beq.n	8003534 <ADC_ConfigureBoostMode+0x12c>
 80034b8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80034bc:	d848      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034c2:	d033      	beq.n	800352c <ADC_ConfigureBoostMode+0x124>
 80034c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034c8:	d842      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034ca:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034ce:	d029      	beq.n	8003524 <ADC_ConfigureBoostMode+0x11c>
 80034d0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034d4:	d83c      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034d6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034da:	d01a      	beq.n	8003512 <ADC_ConfigureBoostMode+0x10a>
 80034dc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034e0:	d836      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034e2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034e6:	d014      	beq.n	8003512 <ADC_ConfigureBoostMode+0x10a>
 80034e8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034ec:	d830      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f2:	d00e      	beq.n	8003512 <ADC_ConfigureBoostMode+0x10a>
 80034f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f8:	d82a      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 80034fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034fe:	d008      	beq.n	8003512 <ADC_ConfigureBoostMode+0x10a>
 8003500:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003504:	d824      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x148>
 8003506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800350a:	d002      	beq.n	8003512 <ADC_ConfigureBoostMode+0x10a>
 800350c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003510:	d11e      	bne.n	8003550 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	0c9b      	lsrs	r3, r3, #18
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	60fb      	str	r3, [r7, #12]
        break;
 8003522:	e016      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
        break;
 800352a:	e012      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	60fb      	str	r3, [r7, #12]
        break;
 8003532:	e00e      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	60fb      	str	r3, [r7, #12]
        break;
 800353a:	e00a      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	09db      	lsrs	r3, r3, #7
 8003540:	60fb      	str	r3, [r7, #12]
        break;
 8003542:	e006      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	60fb      	str	r3, [r7, #12]
        break;
 800354a:	e002      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
        break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003550:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003552:	f7ff f8fd 	bl	8002750 <HAL_GetREVID>
 8003556:	4603      	mov	r3, r0
 8003558:	f241 0203 	movw	r2, #4099	@ 0x1003
 800355c:	4293      	cmp	r3, r2
 800355e:	d815      	bhi.n	800358c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <ADC_ConfigureBoostMode+0x208>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d908      	bls.n	800357a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003576:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003578:	e03e      	b.n	80035f8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003588:	609a      	str	r2, [r3, #8]
}
 800358a:	e035      	b.n	80035f8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a1f      	ldr	r2, [pc, #124]	@ (8003614 <ADC_ConfigureBoostMode+0x20c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d808      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	e025      	b.n	80035f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003618 <ADC_ConfigureBoostMode+0x210>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d80a      	bhi.n	80035ca <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	e016      	b.n	80035f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a13      	ldr	r2, [pc, #76]	@ (800361c <ADC_ConfigureBoostMode+0x214>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d80a      	bhi.n	80035e8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e4:	609a      	str	r2, [r3, #8]
}
 80035e6:	e007      	b.n	80035f8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80035f6:	609a      	str	r2, [r3, #8]
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40022000 	.word	0x40022000
 8003604:	40022100 	.word	0x40022100
 8003608:	40022300 	.word	0x40022300
 800360c:	58026300 	.word	0x58026300
 8003610:	01312d00 	.word	0x01312d00
 8003614:	005f5e10 	.word	0x005f5e10
 8003618:	00bebc20 	.word	0x00bebc20
 800361c:	017d7840 	.word	0x017d7840

08003620 <LL_ADC_IsEnabled>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <LL_ADC_IsEnabled+0x18>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <LL_ADC_IsEnabled+0x1a>
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_REG_IsConversionOngoing>:
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d101      	bne.n	800365e <LL_ADC_REG_IsConversionOngoing+0x18>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b09f      	sub	sp, #124	@ 0x7c
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003686:	2302      	movs	r3, #2
 8003688:	e0be      	b.n	8003808 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003696:	2300      	movs	r3, #0
 8003698:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5c      	ldr	r2, [pc, #368]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d102      	bne.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	e001      	b.n	80036ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e09d      	b.n	8003808 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ffb9 	bl	8003646 <LL_ADC_REG_IsConversionOngoing>
 80036d4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ffb3 	bl	8003646 <LL_ADC_REG_IsConversionOngoing>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d17f      	bne.n	80037e6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d17c      	bne.n	80037e6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a47      	ldr	r2, [pc, #284]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a46      	ldr	r2, [pc, #280]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003700:	4b45      	ldr	r3, [pc, #276]	@ (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003702:	e000      	b.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003704:	4b45      	ldr	r3, [pc, #276]	@ (800381c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003706:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d039      	beq.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	431a      	orrs	r2, r3
 800371e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003720:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3a      	ldr	r2, [pc, #232]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a38      	ldr	r2, [pc, #224]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10e      	bne.n	8003754 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003736:	4836      	ldr	r0, [pc, #216]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003738:	f7ff ff72 	bl	8003620 <LL_ADC_IsEnabled>
 800373c:	4604      	mov	r4, r0
 800373e:	4835      	ldr	r0, [pc, #212]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003740:	f7ff ff6e 	bl	8003620 <LL_ADC_IsEnabled>
 8003744:	4603      	mov	r3, r0
 8003746:	4323      	orrs	r3, r4
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e008      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003754:	4832      	ldr	r0, [pc, #200]	@ (8003820 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003756:	f7ff ff63 	bl	8003620 <LL_ADC_IsEnabled>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d047      	beq.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800376a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b2d      	ldr	r3, [pc, #180]	@ (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003770:	4013      	ands	r3, r2
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	430a      	orrs	r2, r1
 800377c:	431a      	orrs	r2, r3
 800377e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003780:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003782:	e03a      	b.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800378c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800378e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1e      	ldr	r2, [pc, #120]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1d      	ldr	r2, [pc, #116]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d10e      	bne.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80037a4:	481a      	ldr	r0, [pc, #104]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037a6:	f7ff ff3b 	bl	8003620 <LL_ADC_IsEnabled>
 80037aa:	4604      	mov	r4, r0
 80037ac:	4819      	ldr	r0, [pc, #100]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037ae:	f7ff ff37 	bl	8003620 <LL_ADC_IsEnabled>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4323      	orrs	r3, r4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e008      	b.n	80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80037c2:	4817      	ldr	r0, [pc, #92]	@ (8003820 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037c4:	f7ff ff2c 	bl	8003620 <LL_ADC_IsEnabled>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037de:	4013      	ands	r3, r2
 80037e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037e2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037e4:	e009      	b.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80037f8:	e000      	b.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037fa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003804:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003808:	4618      	mov	r0, r3
 800380a:	377c      	adds	r7, #124	@ 0x7c
 800380c:	46bd      	mov	sp, r7
 800380e:	bd90      	pop	{r4, r7, pc}
 8003810:	40022000 	.word	0x40022000
 8003814:	40022100 	.word	0x40022100
 8003818:	40022300 	.word	0x40022300
 800381c:	58026300 	.word	0x58026300
 8003820:	58026000 	.word	0x58026000
 8003824:	fffff0e0 	.word	0xfffff0e0

08003828 <__NVIC_SetPriorityGrouping>:
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <__NVIC_SetPriorityGrouping+0x40>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003844:	4013      	ands	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003850:	4b06      	ldr	r3, [pc, #24]	@ (800386c <__NVIC_SetPriorityGrouping+0x44>)
 8003852:	4313      	orrs	r3, r2
 8003854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003856:	4a04      	ldr	r2, [pc, #16]	@ (8003868 <__NVIC_SetPriorityGrouping+0x40>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60d3      	str	r3, [r2, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00
 800386c:	05fa0000 	.word	0x05fa0000

08003870 <__NVIC_GetPriorityGrouping>:
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <__NVIC_GetPriorityGrouping+0x18>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f003 0307 	and.w	r3, r3, #7
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_EnableIRQ>:
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389a:	2b00      	cmp	r3, #0
 800389c:	db0b      	blt.n	80038b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	f003 021f 	and.w	r2, r3, #31
 80038a4:	4907      	ldr	r1, [pc, #28]	@ (80038c4 <__NVIC_EnableIRQ+0x38>)
 80038a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2001      	movs	r0, #1
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000e100 	.word	0xe000e100

080038c8 <__NVIC_SetPriority>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	db0a      	blt.n	80038f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	490c      	ldr	r1, [pc, #48]	@ (8003914 <__NVIC_SetPriority+0x4c>)
 80038e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e6:	0112      	lsls	r2, r2, #4
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	440b      	add	r3, r1
 80038ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038f0:	e00a      	b.n	8003908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4908      	ldr	r1, [pc, #32]	@ (8003918 <__NVIC_SetPriority+0x50>)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3b04      	subs	r3, #4
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	440b      	add	r3, r1
 8003906:	761a      	strb	r2, [r3, #24]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000e100 	.word	0xe000e100
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <NVIC_EncodePriority>:
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	@ 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f1c3 0307 	rsb	r3, r3, #7
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf28      	it	cs
 800393a:	2304      	movcs	r3, #4
 800393c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3304      	adds	r3, #4
 8003942:	2b06      	cmp	r3, #6
 8003944:	d902      	bls.n	800394c <NVIC_EncodePriority+0x30>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3b03      	subs	r3, #3
 800394a:	e000      	b.n	800394e <NVIC_EncodePriority+0x32>
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	401a      	ands	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003964:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43d9      	mvns	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	4313      	orrs	r3, r2
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	@ 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ff4c 	bl	8003828 <__NVIC_SetPriorityGrouping>
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039a6:	f7ff ff63 	bl	8003870 <__NVIC_GetPriorityGrouping>
 80039aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f7ff ffb3 	bl	800391c <NVIC_EncodePriority>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff82 	bl	80038c8 <__NVIC_SetPriority>
}
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff56 	bl	800388c <__NVIC_EnableIRQ>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7fe fe7e 	bl	80026f0 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e316      	b.n	800402e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a66      	ldr	r2, [pc, #408]	@ (8003ba0 <HAL_DMA_Init+0x1b8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04a      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a65      	ldr	r2, [pc, #404]	@ (8003ba4 <HAL_DMA_Init+0x1bc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d045      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a63      	ldr	r2, [pc, #396]	@ (8003ba8 <HAL_DMA_Init+0x1c0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d040      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a62      	ldr	r2, [pc, #392]	@ (8003bac <HAL_DMA_Init+0x1c4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d03b      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a60      	ldr	r2, [pc, #384]	@ (8003bb0 <HAL_DMA_Init+0x1c8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d036      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb4 <HAL_DMA_Init+0x1cc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d031      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5d      	ldr	r2, [pc, #372]	@ (8003bb8 <HAL_DMA_Init+0x1d0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02c      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8003bbc <HAL_DMA_Init+0x1d4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d027      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5a      	ldr	r2, [pc, #360]	@ (8003bc0 <HAL_DMA_Init+0x1d8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a59      	ldr	r2, [pc, #356]	@ (8003bc4 <HAL_DMA_Init+0x1dc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01d      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a57      	ldr	r2, [pc, #348]	@ (8003bc8 <HAL_DMA_Init+0x1e0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a56      	ldr	r2, [pc, #344]	@ (8003bcc <HAL_DMA_Init+0x1e4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a54      	ldr	r2, [pc, #336]	@ (8003bd0 <HAL_DMA_Init+0x1e8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a53      	ldr	r2, [pc, #332]	@ (8003bd4 <HAL_DMA_Init+0x1ec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a51      	ldr	r2, [pc, #324]	@ (8003bd8 <HAL_DMA_Init+0x1f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a50      	ldr	r2, [pc, #320]	@ (8003bdc <HAL_DMA_Init+0x1f4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA_Init+0xbc>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_DMA_Init+0xbe>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 813b 	beq.w	8003d22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a37      	ldr	r2, [pc, #220]	@ (8003ba0 <HAL_DMA_Init+0x1b8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a36      	ldr	r2, [pc, #216]	@ (8003ba4 <HAL_DMA_Init+0x1bc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d045      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a34      	ldr	r2, [pc, #208]	@ (8003ba8 <HAL_DMA_Init+0x1c0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d040      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a33      	ldr	r2, [pc, #204]	@ (8003bac <HAL_DMA_Init+0x1c4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d03b      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	@ (8003bb0 <HAL_DMA_Init+0x1c8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d036      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <HAL_DMA_Init+0x1cc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d031      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb8 <HAL_DMA_Init+0x1d0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2d      	ldr	r2, [pc, #180]	@ (8003bbc <HAL_DMA_Init+0x1d4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc0 <HAL_DMA_Init+0x1d8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc4 <HAL_DMA_Init+0x1dc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a28      	ldr	r2, [pc, #160]	@ (8003bc8 <HAL_DMA_Init+0x1e0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a27      	ldr	r2, [pc, #156]	@ (8003bcc <HAL_DMA_Init+0x1e4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a25      	ldr	r2, [pc, #148]	@ (8003bd0 <HAL_DMA_Init+0x1e8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a24      	ldr	r2, [pc, #144]	@ (8003bd4 <HAL_DMA_Init+0x1ec>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <HAL_DMA_Init+0x1f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a21      	ldr	r2, [pc, #132]	@ (8003bdc <HAL_DMA_Init+0x1f4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <HAL_DMA_Init+0x186>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e007      	b.n	8003b7e <HAL_DMA_Init+0x196>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b7e:	e02f      	b.n	8003be0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b80:	f7fe fdb6 	bl	80026f0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d928      	bls.n	8003be0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2203      	movs	r2, #3
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e246      	b.n	800402e <HAL_DMA_Init+0x646>
 8003ba0:	40020010 	.word	0x40020010
 8003ba4:	40020028 	.word	0x40020028
 8003ba8:	40020040 	.word	0x40020040
 8003bac:	40020058 	.word	0x40020058
 8003bb0:	40020070 	.word	0x40020070
 8003bb4:	40020088 	.word	0x40020088
 8003bb8:	400200a0 	.word	0x400200a0
 8003bbc:	400200b8 	.word	0x400200b8
 8003bc0:	40020410 	.word	0x40020410
 8003bc4:	40020428 	.word	0x40020428
 8003bc8:	40020440 	.word	0x40020440
 8003bcc:	40020458 	.word	0x40020458
 8003bd0:	40020470 	.word	0x40020470
 8003bd4:	40020488 	.word	0x40020488
 8003bd8:	400204a0 	.word	0x400204a0
 8003bdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1c8      	bne.n	8003b80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4b83      	ldr	r3, [pc, #524]	@ (8003e08 <HAL_DMA_Init+0x420>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d107      	bne.n	8003c44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c44:	4b71      	ldr	r3, [pc, #452]	@ (8003e0c <HAL_DMA_Init+0x424>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b71      	ldr	r3, [pc, #452]	@ (8003e10 <HAL_DMA_Init+0x428>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c50:	d328      	bcc.n	8003ca4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b28      	cmp	r3, #40	@ 0x28
 8003c58:	d903      	bls.n	8003c62 <HAL_DMA_Init+0x27a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c60:	d917      	bls.n	8003c92 <HAL_DMA_Init+0x2aa>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c68:	d903      	bls.n	8003c72 <HAL_DMA_Init+0x28a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b42      	cmp	r3, #66	@ 0x42
 8003c70:	d90f      	bls.n	8003c92 <HAL_DMA_Init+0x2aa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b46      	cmp	r3, #70	@ 0x46
 8003c78:	d903      	bls.n	8003c82 <HAL_DMA_Init+0x29a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b48      	cmp	r3, #72	@ 0x48
 8003c80:	d907      	bls.n	8003c92 <HAL_DMA_Init+0x2aa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b4e      	cmp	r3, #78	@ 0x4e
 8003c88:	d905      	bls.n	8003c96 <HAL_DMA_Init+0x2ae>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b52      	cmp	r3, #82	@ 0x52
 8003c90:	d801      	bhi.n	8003c96 <HAL_DMA_Init+0x2ae>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_DMA_Init+0x2b0>
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ca2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0307 	bic.w	r3, r3, #7
 8003cba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d117      	bne.n	8003cfe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00e      	beq.n	8003cfe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f001 ff1d 	bl	8005b20 <DMA_CheckFifoParam>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2240      	movs	r2, #64	@ 0x40
 8003cf0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e197      	b.n	800402e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f001 fe58 	bl	80059bc <DMA_CalcBaseAndBitshift>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	223f      	movs	r2, #63	@ 0x3f
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	e0cd      	b.n	8003ebe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	@ (8003e14 <HAL_DMA_Init+0x42c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_Init+0x38a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a39      	ldr	r2, [pc, #228]	@ (8003e18 <HAL_DMA_Init+0x430>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_Init+0x38a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a38      	ldr	r2, [pc, #224]	@ (8003e1c <HAL_DMA_Init+0x434>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_Init+0x38a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a36      	ldr	r2, [pc, #216]	@ (8003e20 <HAL_DMA_Init+0x438>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_Init+0x38a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a35      	ldr	r2, [pc, #212]	@ (8003e24 <HAL_DMA_Init+0x43c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_Init+0x38a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a33      	ldr	r2, [pc, #204]	@ (8003e28 <HAL_DMA_Init+0x440>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_Init+0x38a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a32      	ldr	r2, [pc, #200]	@ (8003e2c <HAL_DMA_Init+0x444>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_Init+0x38a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a30      	ldr	r2, [pc, #192]	@ (8003e30 <HAL_DMA_Init+0x448>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_DMA_Init+0x38e>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_DMA_Init+0x390>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8097 	beq.w	8003eac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a24      	ldr	r2, [pc, #144]	@ (8003e14 <HAL_DMA_Init+0x42c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d021      	beq.n	8003dcc <HAL_DMA_Init+0x3e4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a22      	ldr	r2, [pc, #136]	@ (8003e18 <HAL_DMA_Init+0x430>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01c      	beq.n	8003dcc <HAL_DMA_Init+0x3e4>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a21      	ldr	r2, [pc, #132]	@ (8003e1c <HAL_DMA_Init+0x434>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d017      	beq.n	8003dcc <HAL_DMA_Init+0x3e4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <HAL_DMA_Init+0x438>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d012      	beq.n	8003dcc <HAL_DMA_Init+0x3e4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <HAL_DMA_Init+0x43c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00d      	beq.n	8003dcc <HAL_DMA_Init+0x3e4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e28 <HAL_DMA_Init+0x440>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d008      	beq.n	8003dcc <HAL_DMA_Init+0x3e4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8003e2c <HAL_DMA_Init+0x444>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_Init+0x3e4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	@ (8003e30 <HAL_DMA_Init+0x448>)
 8003dca:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4b13      	ldr	r3, [pc, #76]	@ (8003e34 <HAL_DMA_Init+0x44c>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d021      	beq.n	8003e38 <HAL_DMA_Init+0x450>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b80      	cmp	r3, #128	@ 0x80
 8003dfa:	d102      	bne.n	8003e02 <HAL_DMA_Init+0x41a>
 8003dfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e00:	e01b      	b.n	8003e3a <HAL_DMA_Init+0x452>
 8003e02:	2300      	movs	r3, #0
 8003e04:	e019      	b.n	8003e3a <HAL_DMA_Init+0x452>
 8003e06:	bf00      	nop
 8003e08:	fe10803f 	.word	0xfe10803f
 8003e0c:	5c001000 	.word	0x5c001000
 8003e10:	ffff0000 	.word	0xffff0000
 8003e14:	58025408 	.word	0x58025408
 8003e18:	5802541c 	.word	0x5802541c
 8003e1c:	58025430 	.word	0x58025430
 8003e20:	58025444 	.word	0x58025444
 8003e24:	58025458 	.word	0x58025458
 8003e28:	5802546c 	.word	0x5802546c
 8003e2c:	58025480 	.word	0x58025480
 8003e30:	58025494 	.word	0x58025494
 8003e34:	fffe000f 	.word	0xfffe000f
 8003e38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68d2      	ldr	r2, [r2, #12]
 8003e3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004038 <HAL_DMA_Init+0x650>)
 8003e80:	4413      	add	r3, r2
 8003e82:	4a6e      	ldr	r2, [pc, #440]	@ (800403c <HAL_DMA_Init+0x654>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	009a      	lsls	r2, r3, #2
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 fd93 	bl	80059bc <DMA_CalcBaseAndBitshift>
 8003e96:	4603      	mov	r3, r0
 8003e98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	e008      	b.n	8003ebe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2240      	movs	r2, #64	@ 0x40
 8003eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e0b7      	b.n	800402e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8004040 <HAL_DMA_Init+0x658>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d072      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8004044 <HAL_DMA_Init+0x65c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d06d      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5c      	ldr	r2, [pc, #368]	@ (8004048 <HAL_DMA_Init+0x660>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d068      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800404c <HAL_DMA_Init+0x664>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d063      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a59      	ldr	r2, [pc, #356]	@ (8004050 <HAL_DMA_Init+0x668>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d05e      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a57      	ldr	r2, [pc, #348]	@ (8004054 <HAL_DMA_Init+0x66c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d059      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a56      	ldr	r2, [pc, #344]	@ (8004058 <HAL_DMA_Init+0x670>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d054      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a54      	ldr	r2, [pc, #336]	@ (800405c <HAL_DMA_Init+0x674>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d04f      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a53      	ldr	r2, [pc, #332]	@ (8004060 <HAL_DMA_Init+0x678>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d04a      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a51      	ldr	r2, [pc, #324]	@ (8004064 <HAL_DMA_Init+0x67c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d045      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a50      	ldr	r2, [pc, #320]	@ (8004068 <HAL_DMA_Init+0x680>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d040      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4e      	ldr	r2, [pc, #312]	@ (800406c <HAL_DMA_Init+0x684>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d03b      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4d      	ldr	r2, [pc, #308]	@ (8004070 <HAL_DMA_Init+0x688>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d036      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a4b      	ldr	r2, [pc, #300]	@ (8004074 <HAL_DMA_Init+0x68c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d031      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004078 <HAL_DMA_Init+0x690>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d02c      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a48      	ldr	r2, [pc, #288]	@ (800407c <HAL_DMA_Init+0x694>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d027      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a47      	ldr	r2, [pc, #284]	@ (8004080 <HAL_DMA_Init+0x698>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d022      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a45      	ldr	r2, [pc, #276]	@ (8004084 <HAL_DMA_Init+0x69c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a44      	ldr	r2, [pc, #272]	@ (8004088 <HAL_DMA_Init+0x6a0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a42      	ldr	r2, [pc, #264]	@ (800408c <HAL_DMA_Init+0x6a4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a41      	ldr	r2, [pc, #260]	@ (8004090 <HAL_DMA_Init+0x6a8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00e      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3f      	ldr	r2, [pc, #252]	@ (8004094 <HAL_DMA_Init+0x6ac>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d009      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8004098 <HAL_DMA_Init+0x6b0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_DMA_Init+0x5c6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <HAL_DMA_Init+0x6b4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Init+0x5ca>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_DMA_Init+0x5cc>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d032      	beq.n	800401e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f001 fe2d 	bl	8005c18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b80      	cmp	r3, #128	@ 0x80
 8003fc4:	d102      	bne.n	8003fcc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fe0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <HAL_DMA_Init+0x624>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d80c      	bhi.n	800400c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f001 feaa 	bl	8005d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e008      	b.n	800401e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	a7fdabf8 	.word	0xa7fdabf8
 800403c:	cccccccd 	.word	0xcccccccd
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8
 8004080:	58025408 	.word	0x58025408
 8004084:	5802541c 	.word	0x5802541c
 8004088:	58025430 	.word	0x58025430
 800408c:	58025444 	.word	0x58025444
 8004090:	58025458 	.word	0x58025458
 8004094:	5802546c 	.word	0x5802546c
 8004098:	58025480 	.word	0x58025480
 800409c:	58025494 	.word	0x58025494

080040a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7fe fb22 	bl	80026f0 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e2dc      	b.n	8004672 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d008      	beq.n	80040d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2280      	movs	r2, #128	@ 0x80
 80040c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e2cd      	b.n	8004672 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a76      	ldr	r2, [pc, #472]	@ (80042b4 <HAL_DMA_Abort+0x214>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a74      	ldr	r2, [pc, #464]	@ (80042b8 <HAL_DMA_Abort+0x218>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a73      	ldr	r2, [pc, #460]	@ (80042bc <HAL_DMA_Abort+0x21c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a71      	ldr	r2, [pc, #452]	@ (80042c0 <HAL_DMA_Abort+0x220>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a70      	ldr	r2, [pc, #448]	@ (80042c4 <HAL_DMA_Abort+0x224>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a6e      	ldr	r2, [pc, #440]	@ (80042c8 <HAL_DMA_Abort+0x228>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6d      	ldr	r2, [pc, #436]	@ (80042cc <HAL_DMA_Abort+0x22c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6b      	ldr	r2, [pc, #428]	@ (80042d0 <HAL_DMA_Abort+0x230>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6a      	ldr	r2, [pc, #424]	@ (80042d4 <HAL_DMA_Abort+0x234>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a68      	ldr	r2, [pc, #416]	@ (80042d8 <HAL_DMA_Abort+0x238>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a67      	ldr	r2, [pc, #412]	@ (80042dc <HAL_DMA_Abort+0x23c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a65      	ldr	r2, [pc, #404]	@ (80042e0 <HAL_DMA_Abort+0x240>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a64      	ldr	r2, [pc, #400]	@ (80042e4 <HAL_DMA_Abort+0x244>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a62      	ldr	r2, [pc, #392]	@ (80042e8 <HAL_DMA_Abort+0x248>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a61      	ldr	r2, [pc, #388]	@ (80042ec <HAL_DMA_Abort+0x24c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_Abort+0xd6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a5f      	ldr	r2, [pc, #380]	@ (80042f0 <HAL_DMA_Abort+0x250>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_DMA_Abort+0xda>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_DMA_Abort+0xdc>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 021e 	bic.w	r2, r2, #30
 800418e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800419e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e00a      	b.n	80041be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 020e 	bic.w	r2, r2, #14
 80041b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3c      	ldr	r2, [pc, #240]	@ (80042b4 <HAL_DMA_Abort+0x214>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d072      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3a      	ldr	r2, [pc, #232]	@ (80042b8 <HAL_DMA_Abort+0x218>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d06d      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a39      	ldr	r2, [pc, #228]	@ (80042bc <HAL_DMA_Abort+0x21c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d068      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a37      	ldr	r2, [pc, #220]	@ (80042c0 <HAL_DMA_Abort+0x220>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d063      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a36      	ldr	r2, [pc, #216]	@ (80042c4 <HAL_DMA_Abort+0x224>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d05e      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a34      	ldr	r2, [pc, #208]	@ (80042c8 <HAL_DMA_Abort+0x228>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d059      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a33      	ldr	r2, [pc, #204]	@ (80042cc <HAL_DMA_Abort+0x22c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d054      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a31      	ldr	r2, [pc, #196]	@ (80042d0 <HAL_DMA_Abort+0x230>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d04f      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <HAL_DMA_Abort+0x234>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d04a      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2e      	ldr	r2, [pc, #184]	@ (80042d8 <HAL_DMA_Abort+0x238>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d045      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <HAL_DMA_Abort+0x23c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d040      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <HAL_DMA_Abort+0x240>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d03b      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2a      	ldr	r2, [pc, #168]	@ (80042e4 <HAL_DMA_Abort+0x244>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d036      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a28      	ldr	r2, [pc, #160]	@ (80042e8 <HAL_DMA_Abort+0x248>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a27      	ldr	r2, [pc, #156]	@ (80042ec <HAL_DMA_Abort+0x24c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d02c      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a25      	ldr	r2, [pc, #148]	@ (80042f0 <HAL_DMA_Abort+0x250>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d027      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a24      	ldr	r2, [pc, #144]	@ (80042f4 <HAL_DMA_Abort+0x254>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a22      	ldr	r2, [pc, #136]	@ (80042f8 <HAL_DMA_Abort+0x258>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a21      	ldr	r2, [pc, #132]	@ (80042fc <HAL_DMA_Abort+0x25c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1f      	ldr	r2, [pc, #124]	@ (8004300 <HAL_DMA_Abort+0x260>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1e      	ldr	r2, [pc, #120]	@ (8004304 <HAL_DMA_Abort+0x264>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <HAL_DMA_Abort+0x268>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <HAL_DMA_Abort+0x26c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_DMA_Abort+0x20e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <HAL_DMA_Abort+0x270>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d132      	bne.n	8004314 <HAL_DMA_Abort+0x274>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e031      	b.n	8004316 <HAL_DMA_Abort+0x276>
 80042b2:	bf00      	nop
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
 80042f4:	58025408 	.word	0x58025408
 80042f8:	5802541c 	.word	0x5802541c
 80042fc:	58025430 	.word	0x58025430
 8004300:	58025444 	.word	0x58025444
 8004304:	58025458 	.word	0x58025458
 8004308:	5802546c 	.word	0x5802546c
 800430c:	58025480 	.word	0x58025480
 8004310:	58025494 	.word	0x58025494
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004328:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6d      	ldr	r2, [pc, #436]	@ (80044e4 <HAL_DMA_Abort+0x444>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d04a      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6b      	ldr	r2, [pc, #428]	@ (80044e8 <HAL_DMA_Abort+0x448>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d045      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6a      	ldr	r2, [pc, #424]	@ (80044ec <HAL_DMA_Abort+0x44c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d040      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a68      	ldr	r2, [pc, #416]	@ (80044f0 <HAL_DMA_Abort+0x450>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a67      	ldr	r2, [pc, #412]	@ (80044f4 <HAL_DMA_Abort+0x454>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d036      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a65      	ldr	r2, [pc, #404]	@ (80044f8 <HAL_DMA_Abort+0x458>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a64      	ldr	r2, [pc, #400]	@ (80044fc <HAL_DMA_Abort+0x45c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d02c      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a62      	ldr	r2, [pc, #392]	@ (8004500 <HAL_DMA_Abort+0x460>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d027      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a61      	ldr	r2, [pc, #388]	@ (8004504 <HAL_DMA_Abort+0x464>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5f      	ldr	r2, [pc, #380]	@ (8004508 <HAL_DMA_Abort+0x468>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a5e      	ldr	r2, [pc, #376]	@ (800450c <HAL_DMA_Abort+0x46c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a5c      	ldr	r2, [pc, #368]	@ (8004510 <HAL_DMA_Abort+0x470>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004514 <HAL_DMA_Abort+0x474>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a59      	ldr	r2, [pc, #356]	@ (8004518 <HAL_DMA_Abort+0x478>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a58      	ldr	r2, [pc, #352]	@ (800451c <HAL_DMA_Abort+0x47c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_DMA_Abort+0x32a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a56      	ldr	r2, [pc, #344]	@ (8004520 <HAL_DMA_Abort+0x480>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <HAL_DMA_Abort+0x33c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e007      	b.n	80043ec <HAL_DMA_Abort+0x34c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043ec:	e013      	b.n	8004416 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ee:	f7fe f97f 	bl	80026f0 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d90c      	bls.n	8004416 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2203      	movs	r2, #3
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e12d      	b.n	8004672 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e5      	bne.n	80043ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2f      	ldr	r2, [pc, #188]	@ (80044e4 <HAL_DMA_Abort+0x444>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d04a      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2d      	ldr	r2, [pc, #180]	@ (80044e8 <HAL_DMA_Abort+0x448>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d045      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2c      	ldr	r2, [pc, #176]	@ (80044ec <HAL_DMA_Abort+0x44c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d040      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2a      	ldr	r2, [pc, #168]	@ (80044f0 <HAL_DMA_Abort+0x450>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a29      	ldr	r2, [pc, #164]	@ (80044f4 <HAL_DMA_Abort+0x454>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d036      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a27      	ldr	r2, [pc, #156]	@ (80044f8 <HAL_DMA_Abort+0x458>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_DMA_Abort+0x45c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d02c      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a24      	ldr	r2, [pc, #144]	@ (8004500 <HAL_DMA_Abort+0x460>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d027      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a23      	ldr	r2, [pc, #140]	@ (8004504 <HAL_DMA_Abort+0x464>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d022      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a21      	ldr	r2, [pc, #132]	@ (8004508 <HAL_DMA_Abort+0x468>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01d      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a20      	ldr	r2, [pc, #128]	@ (800450c <HAL_DMA_Abort+0x46c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <HAL_DMA_Abort+0x470>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1d      	ldr	r2, [pc, #116]	@ (8004514 <HAL_DMA_Abort+0x474>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_DMA_Abort+0x478>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1a      	ldr	r2, [pc, #104]	@ (800451c <HAL_DMA_Abort+0x47c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_DMA_Abort+0x422>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a18      	ldr	r2, [pc, #96]	@ (8004520 <HAL_DMA_Abort+0x480>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_DMA_Abort+0x426>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_DMA_Abort+0x428>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02b      	beq.n	8004524 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	223f      	movs	r2, #63	@ 0x3f
 80044dc:	409a      	lsls	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	e02a      	b.n	800453a <HAL_DMA_Abort+0x49a>
 80044e4:	40020010 	.word	0x40020010
 80044e8:	40020028 	.word	0x40020028
 80044ec:	40020040 	.word	0x40020040
 80044f0:	40020058 	.word	0x40020058
 80044f4:	40020070 	.word	0x40020070
 80044f8:	40020088 	.word	0x40020088
 80044fc:	400200a0 	.word	0x400200a0
 8004500:	400200b8 	.word	0x400200b8
 8004504:	40020410 	.word	0x40020410
 8004508:	40020428 	.word	0x40020428
 800450c:	40020440 	.word	0x40020440
 8004510:	40020458 	.word	0x40020458
 8004514:	40020470 	.word	0x40020470
 8004518:	40020488 	.word	0x40020488
 800451c:	400204a0 	.word	0x400204a0
 8004520:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2201      	movs	r2, #1
 8004534:	409a      	lsls	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a4f      	ldr	r2, [pc, #316]	@ (800467c <HAL_DMA_Abort+0x5dc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d072      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a4d      	ldr	r2, [pc, #308]	@ (8004680 <HAL_DMA_Abort+0x5e0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d06d      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4c      	ldr	r2, [pc, #304]	@ (8004684 <HAL_DMA_Abort+0x5e4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d068      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a4a      	ldr	r2, [pc, #296]	@ (8004688 <HAL_DMA_Abort+0x5e8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d063      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a49      	ldr	r2, [pc, #292]	@ (800468c <HAL_DMA_Abort+0x5ec>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d05e      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a47      	ldr	r2, [pc, #284]	@ (8004690 <HAL_DMA_Abort+0x5f0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d059      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a46      	ldr	r2, [pc, #280]	@ (8004694 <HAL_DMA_Abort+0x5f4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d054      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a44      	ldr	r2, [pc, #272]	@ (8004698 <HAL_DMA_Abort+0x5f8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d04f      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a43      	ldr	r2, [pc, #268]	@ (800469c <HAL_DMA_Abort+0x5fc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d04a      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a41      	ldr	r2, [pc, #260]	@ (80046a0 <HAL_DMA_Abort+0x600>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d045      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a40      	ldr	r2, [pc, #256]	@ (80046a4 <HAL_DMA_Abort+0x604>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d040      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a3e      	ldr	r2, [pc, #248]	@ (80046a8 <HAL_DMA_Abort+0x608>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d03b      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3d      	ldr	r2, [pc, #244]	@ (80046ac <HAL_DMA_Abort+0x60c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d036      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3b      	ldr	r2, [pc, #236]	@ (80046b0 <HAL_DMA_Abort+0x610>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d031      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3a      	ldr	r2, [pc, #232]	@ (80046b4 <HAL_DMA_Abort+0x614>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d02c      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a38      	ldr	r2, [pc, #224]	@ (80046b8 <HAL_DMA_Abort+0x618>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d027      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a37      	ldr	r2, [pc, #220]	@ (80046bc <HAL_DMA_Abort+0x61c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a35      	ldr	r2, [pc, #212]	@ (80046c0 <HAL_DMA_Abort+0x620>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01d      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a34      	ldr	r2, [pc, #208]	@ (80046c4 <HAL_DMA_Abort+0x624>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a32      	ldr	r2, [pc, #200]	@ (80046c8 <HAL_DMA_Abort+0x628>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a31      	ldr	r2, [pc, #196]	@ (80046cc <HAL_DMA_Abort+0x62c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2f      	ldr	r2, [pc, #188]	@ (80046d0 <HAL_DMA_Abort+0x630>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2e      	ldr	r2, [pc, #184]	@ (80046d4 <HAL_DMA_Abort+0x634>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_DMA_Abort+0x58a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2c      	ldr	r2, [pc, #176]	@ (80046d8 <HAL_DMA_Abort+0x638>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_DMA_Abort+0x58e>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_DMA_Abort+0x590>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800463c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004654:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800465e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40020010 	.word	0x40020010
 8004680:	40020028 	.word	0x40020028
 8004684:	40020040 	.word	0x40020040
 8004688:	40020058 	.word	0x40020058
 800468c:	40020070 	.word	0x40020070
 8004690:	40020088 	.word	0x40020088
 8004694:	400200a0 	.word	0x400200a0
 8004698:	400200b8 	.word	0x400200b8
 800469c:	40020410 	.word	0x40020410
 80046a0:	40020428 	.word	0x40020428
 80046a4:	40020440 	.word	0x40020440
 80046a8:	40020458 	.word	0x40020458
 80046ac:	40020470 	.word	0x40020470
 80046b0:	40020488 	.word	0x40020488
 80046b4:	400204a0 	.word	0x400204a0
 80046b8:	400204b8 	.word	0x400204b8
 80046bc:	58025408 	.word	0x58025408
 80046c0:	5802541c 	.word	0x5802541c
 80046c4:	58025430 	.word	0x58025430
 80046c8:	58025444 	.word	0x58025444
 80046cc:	58025458 	.word	0x58025458
 80046d0:	5802546c 	.word	0x5802546c
 80046d4:	58025480 	.word	0x58025480
 80046d8:	58025494 	.word	0x58025494

080046dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e237      	b.n	8004b5e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d004      	beq.n	8004704 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2280      	movs	r2, #128	@ 0x80
 80046fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e22c      	b.n	8004b5e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5c      	ldr	r2, [pc, #368]	@ (800487c <HAL_DMA_Abort_IT+0x1a0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d04a      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5b      	ldr	r2, [pc, #364]	@ (8004880 <HAL_DMA_Abort_IT+0x1a4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d045      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a59      	ldr	r2, [pc, #356]	@ (8004884 <HAL_DMA_Abort_IT+0x1a8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d040      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a58      	ldr	r2, [pc, #352]	@ (8004888 <HAL_DMA_Abort_IT+0x1ac>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d03b      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a56      	ldr	r2, [pc, #344]	@ (800488c <HAL_DMA_Abort_IT+0x1b0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d036      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a55      	ldr	r2, [pc, #340]	@ (8004890 <HAL_DMA_Abort_IT+0x1b4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d031      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a53      	ldr	r2, [pc, #332]	@ (8004894 <HAL_DMA_Abort_IT+0x1b8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d02c      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a52      	ldr	r2, [pc, #328]	@ (8004898 <HAL_DMA_Abort_IT+0x1bc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d027      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a50      	ldr	r2, [pc, #320]	@ (800489c <HAL_DMA_Abort_IT+0x1c0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a4f      	ldr	r2, [pc, #316]	@ (80048a0 <HAL_DMA_Abort_IT+0x1c4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d01d      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a4d      	ldr	r2, [pc, #308]	@ (80048a4 <HAL_DMA_Abort_IT+0x1c8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a4c      	ldr	r2, [pc, #304]	@ (80048a8 <HAL_DMA_Abort_IT+0x1cc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a4a      	ldr	r2, [pc, #296]	@ (80048ac <HAL_DMA_Abort_IT+0x1d0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a49      	ldr	r2, [pc, #292]	@ (80048b0 <HAL_DMA_Abort_IT+0x1d4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a47      	ldr	r2, [pc, #284]	@ (80048b4 <HAL_DMA_Abort_IT+0x1d8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a46      	ldr	r2, [pc, #280]	@ (80048b8 <HAL_DMA_Abort_IT+0x1dc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_DMA_Abort_IT+0xcc>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_DMA_Abort_IT+0xce>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8086 	beq.w	80048bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2204      	movs	r2, #4
 80047b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2f      	ldr	r2, [pc, #188]	@ (800487c <HAL_DMA_Abort_IT+0x1a0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04a      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004880 <HAL_DMA_Abort_IT+0x1a4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d045      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004884 <HAL_DMA_Abort_IT+0x1a8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d040      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2b      	ldr	r2, [pc, #172]	@ (8004888 <HAL_DMA_Abort_IT+0x1ac>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d03b      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a29      	ldr	r2, [pc, #164]	@ (800488c <HAL_DMA_Abort_IT+0x1b0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d036      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a28      	ldr	r2, [pc, #160]	@ (8004890 <HAL_DMA_Abort_IT+0x1b4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d031      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a26      	ldr	r2, [pc, #152]	@ (8004894 <HAL_DMA_Abort_IT+0x1b8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02c      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a25      	ldr	r2, [pc, #148]	@ (8004898 <HAL_DMA_Abort_IT+0x1bc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d027      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a23      	ldr	r2, [pc, #140]	@ (800489c <HAL_DMA_Abort_IT+0x1c0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d022      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a22      	ldr	r2, [pc, #136]	@ (80048a0 <HAL_DMA_Abort_IT+0x1c4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d01d      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a20      	ldr	r2, [pc, #128]	@ (80048a4 <HAL_DMA_Abort_IT+0x1c8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1f      	ldr	r2, [pc, #124]	@ (80048a8 <HAL_DMA_Abort_IT+0x1cc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1d      	ldr	r2, [pc, #116]	@ (80048ac <HAL_DMA_Abort_IT+0x1d0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1c      	ldr	r2, [pc, #112]	@ (80048b0 <HAL_DMA_Abort_IT+0x1d4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <HAL_DMA_Abort_IT+0x1d8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_DMA_Abort_IT+0x17c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <HAL_DMA_Abort_IT+0x1dc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d108      	bne.n	800486a <HAL_DMA_Abort_IT+0x18e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e178      	b.n	8004b5c <HAL_DMA_Abort_IT+0x480>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e16f      	b.n	8004b5c <HAL_DMA_Abort_IT+0x480>
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 020e 	bic.w	r2, r2, #14
 80048ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a6c      	ldr	r2, [pc, #432]	@ (8004a84 <HAL_DMA_Abort_IT+0x3a8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d04a      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a6b      	ldr	r2, [pc, #428]	@ (8004a88 <HAL_DMA_Abort_IT+0x3ac>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d045      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a69      	ldr	r2, [pc, #420]	@ (8004a8c <HAL_DMA_Abort_IT+0x3b0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d040      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a68      	ldr	r2, [pc, #416]	@ (8004a90 <HAL_DMA_Abort_IT+0x3b4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d03b      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a66      	ldr	r2, [pc, #408]	@ (8004a94 <HAL_DMA_Abort_IT+0x3b8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d036      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a65      	ldr	r2, [pc, #404]	@ (8004a98 <HAL_DMA_Abort_IT+0x3bc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d031      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a63      	ldr	r2, [pc, #396]	@ (8004a9c <HAL_DMA_Abort_IT+0x3c0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02c      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a62      	ldr	r2, [pc, #392]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3c4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d027      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a60      	ldr	r2, [pc, #384]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3c8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d022      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a5f      	ldr	r2, [pc, #380]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3cc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01d      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a5d      	ldr	r2, [pc, #372]	@ (8004aac <HAL_DMA_Abort_IT+0x3d0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d018      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3d4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a5a      	ldr	r2, [pc, #360]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3d8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a59      	ldr	r2, [pc, #356]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3dc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d009      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a57      	ldr	r2, [pc, #348]	@ (8004abc <HAL_DMA_Abort_IT+0x3e0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_DMA_Abort_IT+0x290>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a56      	ldr	r2, [pc, #344]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3e4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <HAL_DMA_Abort_IT+0x2a2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e007      	b.n	800498e <HAL_DMA_Abort_IT+0x2b2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a3c      	ldr	r2, [pc, #240]	@ (8004a84 <HAL_DMA_Abort_IT+0x3a8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d072      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a3a      	ldr	r2, [pc, #232]	@ (8004a88 <HAL_DMA_Abort_IT+0x3ac>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d06d      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a39      	ldr	r2, [pc, #228]	@ (8004a8c <HAL_DMA_Abort_IT+0x3b0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d068      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a37      	ldr	r2, [pc, #220]	@ (8004a90 <HAL_DMA_Abort_IT+0x3b4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d063      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a36      	ldr	r2, [pc, #216]	@ (8004a94 <HAL_DMA_Abort_IT+0x3b8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d05e      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a34      	ldr	r2, [pc, #208]	@ (8004a98 <HAL_DMA_Abort_IT+0x3bc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d059      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a33      	ldr	r2, [pc, #204]	@ (8004a9c <HAL_DMA_Abort_IT+0x3c0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d054      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a31      	ldr	r2, [pc, #196]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3c4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d04f      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a30      	ldr	r2, [pc, #192]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3c8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d04a      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2e      	ldr	r2, [pc, #184]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3cc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d045      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2d      	ldr	r2, [pc, #180]	@ (8004aac <HAL_DMA_Abort_IT+0x3d0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d040      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3d4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d03b      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3d8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d036      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a28      	ldr	r2, [pc, #160]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3dc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d031      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a27      	ldr	r2, [pc, #156]	@ (8004abc <HAL_DMA_Abort_IT+0x3e0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d02c      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a25      	ldr	r2, [pc, #148]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3e4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d027      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a24      	ldr	r2, [pc, #144]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3e8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d022      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3ec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01d      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a21      	ldr	r2, [pc, #132]	@ (8004acc <HAL_DMA_Abort_IT+0x3f0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d018      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <HAL_DMA_Abort_IT+0x3f4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad4 <HAL_DMA_Abort_IT+0x3f8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <HAL_DMA_Abort_IT+0x3fc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <HAL_DMA_Abort_IT+0x400>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x3a2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	@ (8004ae0 <HAL_DMA_Abort_IT+0x404>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d132      	bne.n	8004ae4 <HAL_DMA_Abort_IT+0x408>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e031      	b.n	8004ae6 <HAL_DMA_Abort_IT+0x40a>
 8004a82:	bf00      	nop
 8004a84:	40020010 	.word	0x40020010
 8004a88:	40020028 	.word	0x40020028
 8004a8c:	40020040 	.word	0x40020040
 8004a90:	40020058 	.word	0x40020058
 8004a94:	40020070 	.word	0x40020070
 8004a98:	40020088 	.word	0x40020088
 8004a9c:	400200a0 	.word	0x400200a0
 8004aa0:	400200b8 	.word	0x400200b8
 8004aa4:	40020410 	.word	0x40020410
 8004aa8:	40020428 	.word	0x40020428
 8004aac:	40020440 	.word	0x40020440
 8004ab0:	40020458 	.word	0x40020458
 8004ab4:	40020470 	.word	0x40020470
 8004ab8:	40020488 	.word	0x40020488
 8004abc:	400204a0 	.word	0x400204a0
 8004ac0:	400204b8 	.word	0x400204b8
 8004ac4:	58025408 	.word	0x58025408
 8004ac8:	5802541c 	.word	0x5802541c
 8004acc:	58025430 	.word	0x58025430
 8004ad0:	58025444 	.word	0x58025444
 8004ad4:	58025458 	.word	0x58025458
 8004ad8:	5802546c 	.word	0x5802546c
 8004adc:	58025480 	.word	0x58025480
 8004ae0:	58025494 	.word	0x58025494
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d028      	beq.n	8004b3c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b18:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00c      	beq.n	8004b3c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b30:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b3a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop

08004b68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b74:	4b67      	ldr	r3, [pc, #412]	@ (8004d14 <HAL_DMA_IRQHandler+0x1ac>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a67      	ldr	r2, [pc, #412]	@ (8004d18 <HAL_DMA_IRQHandler+0x1b0>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5f      	ldr	r2, [pc, #380]	@ (8004d1c <HAL_DMA_IRQHandler+0x1b4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d04a      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d20 <HAL_DMA_IRQHandler+0x1b8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d045      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8004d24 <HAL_DMA_IRQHandler+0x1bc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d040      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d28 <HAL_DMA_IRQHandler+0x1c0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d03b      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a59      	ldr	r2, [pc, #356]	@ (8004d2c <HAL_DMA_IRQHandler+0x1c4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d036      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a57      	ldr	r2, [pc, #348]	@ (8004d30 <HAL_DMA_IRQHandler+0x1c8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d031      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a56      	ldr	r2, [pc, #344]	@ (8004d34 <HAL_DMA_IRQHandler+0x1cc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d02c      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a54      	ldr	r2, [pc, #336]	@ (8004d38 <HAL_DMA_IRQHandler+0x1d0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d027      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a53      	ldr	r2, [pc, #332]	@ (8004d3c <HAL_DMA_IRQHandler+0x1d4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d022      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a51      	ldr	r2, [pc, #324]	@ (8004d40 <HAL_DMA_IRQHandler+0x1d8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01d      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a50      	ldr	r2, [pc, #320]	@ (8004d44 <HAL_DMA_IRQHandler+0x1dc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d018      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8004d48 <HAL_DMA_IRQHandler+0x1e0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a4d      	ldr	r2, [pc, #308]	@ (8004d4c <HAL_DMA_IRQHandler+0x1e4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a4b      	ldr	r2, [pc, #300]	@ (8004d50 <HAL_DMA_IRQHandler+0x1e8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d54 <HAL_DMA_IRQHandler+0x1ec>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xd2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a48      	ldr	r2, [pc, #288]	@ (8004d58 <HAL_DMA_IRQHandler+0x1f0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d101      	bne.n	8004c3e <HAL_DMA_IRQHandler+0xd6>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <HAL_DMA_IRQHandler+0xd8>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 842b 	beq.w	800549c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2208      	movs	r2, #8
 8004c50:	409a      	lsls	r2, r3
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80a2 	beq.w	8004da0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2e      	ldr	r2, [pc, #184]	@ (8004d1c <HAL_DMA_IRQHandler+0x1b4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d04a      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <HAL_DMA_IRQHandler+0x1b8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d045      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2b      	ldr	r2, [pc, #172]	@ (8004d24 <HAL_DMA_IRQHandler+0x1bc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d040      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d28 <HAL_DMA_IRQHandler+0x1c0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d03b      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a28      	ldr	r2, [pc, #160]	@ (8004d2c <HAL_DMA_IRQHandler+0x1c4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d036      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a27      	ldr	r2, [pc, #156]	@ (8004d30 <HAL_DMA_IRQHandler+0x1c8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d031      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a25      	ldr	r2, [pc, #148]	@ (8004d34 <HAL_DMA_IRQHandler+0x1cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d02c      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a24      	ldr	r2, [pc, #144]	@ (8004d38 <HAL_DMA_IRQHandler+0x1d0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d027      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a22      	ldr	r2, [pc, #136]	@ (8004d3c <HAL_DMA_IRQHandler+0x1d4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d022      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a21      	ldr	r2, [pc, #132]	@ (8004d40 <HAL_DMA_IRQHandler+0x1d8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d01d      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d44 <HAL_DMA_IRQHandler+0x1dc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d018      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1e      	ldr	r2, [pc, #120]	@ (8004d48 <HAL_DMA_IRQHandler+0x1e0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d4c <HAL_DMA_IRQHandler+0x1e4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d50 <HAL_DMA_IRQHandler+0x1e8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a19      	ldr	r2, [pc, #100]	@ (8004d54 <HAL_DMA_IRQHandler+0x1ec>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x194>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	@ (8004d58 <HAL_DMA_IRQHandler+0x1f0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d12f      	bne.n	8004d5c <HAL_DMA_IRQHandler+0x1f4>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	e02e      	b.n	8004d70 <HAL_DMA_IRQHandler+0x208>
 8004d12:	bf00      	nop
 8004d14:	24000000 	.word	0x24000000
 8004d18:	1b4e81b5 	.word	0x1b4e81b5
 8004d1c:	40020010 	.word	0x40020010
 8004d20:	40020028 	.word	0x40020028
 8004d24:	40020040 	.word	0x40020040
 8004d28:	40020058 	.word	0x40020058
 8004d2c:	40020070 	.word	0x40020070
 8004d30:	40020088 	.word	0x40020088
 8004d34:	400200a0 	.word	0x400200a0
 8004d38:	400200b8 	.word	0x400200b8
 8004d3c:	40020410 	.word	0x40020410
 8004d40:	40020428 	.word	0x40020428
 8004d44:	40020440 	.word	0x40020440
 8004d48:	40020458 	.word	0x40020458
 8004d4c:	40020470 	.word	0x40020470
 8004d50:	40020488 	.word	0x40020488
 8004d54:	400204a0 	.word	0x400204a0
 8004d58:	400204b8 	.word	0x400204b8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0204 	bic.w	r2, r2, #4
 8004d82:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d98:	f043 0201 	orr.w	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d06e      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a69      	ldr	r2, [pc, #420]	@ (8004f60 <HAL_DMA_IRQHandler+0x3f8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d04a      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a67      	ldr	r2, [pc, #412]	@ (8004f64 <HAL_DMA_IRQHandler+0x3fc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d045      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a66      	ldr	r2, [pc, #408]	@ (8004f68 <HAL_DMA_IRQHandler+0x400>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d040      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a64      	ldr	r2, [pc, #400]	@ (8004f6c <HAL_DMA_IRQHandler+0x404>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d03b      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a63      	ldr	r2, [pc, #396]	@ (8004f70 <HAL_DMA_IRQHandler+0x408>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d036      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a61      	ldr	r2, [pc, #388]	@ (8004f74 <HAL_DMA_IRQHandler+0x40c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d031      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a60      	ldr	r2, [pc, #384]	@ (8004f78 <HAL_DMA_IRQHandler+0x410>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d02c      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5e      	ldr	r2, [pc, #376]	@ (8004f7c <HAL_DMA_IRQHandler+0x414>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d027      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8004f80 <HAL_DMA_IRQHandler+0x418>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a5b      	ldr	r2, [pc, #364]	@ (8004f84 <HAL_DMA_IRQHandler+0x41c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01d      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8004f88 <HAL_DMA_IRQHandler+0x420>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a58      	ldr	r2, [pc, #352]	@ (8004f8c <HAL_DMA_IRQHandler+0x424>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a57      	ldr	r2, [pc, #348]	@ (8004f90 <HAL_DMA_IRQHandler+0x428>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a55      	ldr	r2, [pc, #340]	@ (8004f94 <HAL_DMA_IRQHandler+0x42c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a54      	ldr	r2, [pc, #336]	@ (8004f98 <HAL_DMA_IRQHandler+0x430>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ee>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a52      	ldr	r2, [pc, #328]	@ (8004f9c <HAL_DMA_IRQHandler+0x434>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10a      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x304>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e003      	b.n	8004e74 <HAL_DMA_IRQHandler+0x30c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2201      	movs	r2, #1
 8004e82:	409a      	lsls	r2, r3
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8c:	f043 0202 	orr.w	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 808f 	beq.w	8004fc8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <HAL_DMA_IRQHandler+0x3f8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d04a      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f64 <HAL_DMA_IRQHandler+0x3fc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d045      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a29      	ldr	r2, [pc, #164]	@ (8004f68 <HAL_DMA_IRQHandler+0x400>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d040      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a27      	ldr	r2, [pc, #156]	@ (8004f6c <HAL_DMA_IRQHandler+0x404>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d03b      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a26      	ldr	r2, [pc, #152]	@ (8004f70 <HAL_DMA_IRQHandler+0x408>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d036      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a24      	ldr	r2, [pc, #144]	@ (8004f74 <HAL_DMA_IRQHandler+0x40c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d031      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a23      	ldr	r2, [pc, #140]	@ (8004f78 <HAL_DMA_IRQHandler+0x410>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d02c      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a21      	ldr	r2, [pc, #132]	@ (8004f7c <HAL_DMA_IRQHandler+0x414>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d027      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a20      	ldr	r2, [pc, #128]	@ (8004f80 <HAL_DMA_IRQHandler+0x418>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1e      	ldr	r2, [pc, #120]	@ (8004f84 <HAL_DMA_IRQHandler+0x41c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01d      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1d      	ldr	r2, [pc, #116]	@ (8004f88 <HAL_DMA_IRQHandler+0x420>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d018      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f8c <HAL_DMA_IRQHandler+0x424>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1a      	ldr	r2, [pc, #104]	@ (8004f90 <HAL_DMA_IRQHandler+0x428>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00e      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a18      	ldr	r2, [pc, #96]	@ (8004f94 <HAL_DMA_IRQHandler+0x42c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d009      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a17      	ldr	r2, [pc, #92]	@ (8004f98 <HAL_DMA_IRQHandler+0x430>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x3e2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <HAL_DMA_IRQHandler+0x434>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d12a      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0x438>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e023      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x440>
 8004f60:	40020010 	.word	0x40020010
 8004f64:	40020028 	.word	0x40020028
 8004f68:	40020040 	.word	0x40020040
 8004f6c:	40020058 	.word	0x40020058
 8004f70:	40020070 	.word	0x40020070
 8004f74:	40020088 	.word	0x40020088
 8004f78:	400200a0 	.word	0x400200a0
 8004f7c:	400200b8 	.word	0x400200b8
 8004f80:	40020410 	.word	0x40020410
 8004f84:	40020428 	.word	0x40020428
 8004f88:	40020440 	.word	0x40020440
 8004f8c:	40020458 	.word	0x40020458
 8004f90:	40020470 	.word	0x40020470
 8004f94:	40020488 	.word	0x40020488
 8004f98:	400204a0 	.word	0x400204a0
 8004f9c:	400204b8 	.word	0x400204b8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc0:	f043 0204 	orr.w	r2, r3, #4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80a6 	beq.w	800512a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a85      	ldr	r2, [pc, #532]	@ (80051f8 <HAL_DMA_IRQHandler+0x690>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d04a      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a83      	ldr	r2, [pc, #524]	@ (80051fc <HAL_DMA_IRQHandler+0x694>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d045      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a82      	ldr	r2, [pc, #520]	@ (8005200 <HAL_DMA_IRQHandler+0x698>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d040      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a80      	ldr	r2, [pc, #512]	@ (8005204 <HAL_DMA_IRQHandler+0x69c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d03b      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7f      	ldr	r2, [pc, #508]	@ (8005208 <HAL_DMA_IRQHandler+0x6a0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d036      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a7d      	ldr	r2, [pc, #500]	@ (800520c <HAL_DMA_IRQHandler+0x6a4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d031      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a7c      	ldr	r2, [pc, #496]	@ (8005210 <HAL_DMA_IRQHandler+0x6a8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d02c      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a7a      	ldr	r2, [pc, #488]	@ (8005214 <HAL_DMA_IRQHandler+0x6ac>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d027      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a79      	ldr	r2, [pc, #484]	@ (8005218 <HAL_DMA_IRQHandler+0x6b0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d022      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a77      	ldr	r2, [pc, #476]	@ (800521c <HAL_DMA_IRQHandler+0x6b4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01d      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a76      	ldr	r2, [pc, #472]	@ (8005220 <HAL_DMA_IRQHandler+0x6b8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d018      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a74      	ldr	r2, [pc, #464]	@ (8005224 <HAL_DMA_IRQHandler+0x6bc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a73      	ldr	r2, [pc, #460]	@ (8005228 <HAL_DMA_IRQHandler+0x6c0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00e      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a71      	ldr	r2, [pc, #452]	@ (800522c <HAL_DMA_IRQHandler+0x6c4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d009      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a70      	ldr	r2, [pc, #448]	@ (8005230 <HAL_DMA_IRQHandler+0x6c8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <HAL_DMA_IRQHandler+0x516>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6e      	ldr	r2, [pc, #440]	@ (8005234 <HAL_DMA_IRQHandler+0x6cc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10a      	bne.n	8005094 <HAL_DMA_IRQHandler+0x52c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e009      	b.n	80050a8 <HAL_DMA_IRQHandler+0x540>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d03e      	beq.n	800512a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2210      	movs	r2, #16
 80050b6:	409a      	lsls	r2, r3
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d018      	beq.n	80050fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d108      	bne.n	80050ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d024      	beq.n	800512a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
 80050e8:	e01f      	b.n	800512a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01b      	beq.n	800512a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
 80050fa:	e016      	b.n	800512a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d107      	bne.n	800511a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0208 	bic.w	r2, r2, #8
 8005118:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2220      	movs	r2, #32
 8005134:	409a      	lsls	r2, r3
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8110 	beq.w	8005360 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2c      	ldr	r2, [pc, #176]	@ (80051f8 <HAL_DMA_IRQHandler+0x690>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d04a      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2b      	ldr	r2, [pc, #172]	@ (80051fc <HAL_DMA_IRQHandler+0x694>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d045      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a29      	ldr	r2, [pc, #164]	@ (8005200 <HAL_DMA_IRQHandler+0x698>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d040      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a28      	ldr	r2, [pc, #160]	@ (8005204 <HAL_DMA_IRQHandler+0x69c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d03b      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <HAL_DMA_IRQHandler+0x6a0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d036      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a25      	ldr	r2, [pc, #148]	@ (800520c <HAL_DMA_IRQHandler+0x6a4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d031      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a23      	ldr	r2, [pc, #140]	@ (8005210 <HAL_DMA_IRQHandler+0x6a8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d02c      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a22      	ldr	r2, [pc, #136]	@ (8005214 <HAL_DMA_IRQHandler+0x6ac>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d027      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a20      	ldr	r2, [pc, #128]	@ (8005218 <HAL_DMA_IRQHandler+0x6b0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <HAL_DMA_IRQHandler+0x6b4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d01d      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <HAL_DMA_IRQHandler+0x6b8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <HAL_DMA_IRQHandler+0x6bc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005228 <HAL_DMA_IRQHandler+0x6c0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a19      	ldr	r2, [pc, #100]	@ (800522c <HAL_DMA_IRQHandler+0x6c4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <HAL_DMA_IRQHandler+0x6c8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x678>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a16      	ldr	r2, [pc, #88]	@ (8005234 <HAL_DMA_IRQHandler+0x6cc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d12b      	bne.n	8005238 <HAL_DMA_IRQHandler+0x6d0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf14      	ite	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	2300      	moveq	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	e02a      	b.n	800524c <HAL_DMA_IRQHandler+0x6e4>
 80051f6:	bf00      	nop
 80051f8:	40020010 	.word	0x40020010
 80051fc:	40020028 	.word	0x40020028
 8005200:	40020040 	.word	0x40020040
 8005204:	40020058 	.word	0x40020058
 8005208:	40020070 	.word	0x40020070
 800520c:	40020088 	.word	0x40020088
 8005210:	400200a0 	.word	0x400200a0
 8005214:	400200b8 	.word	0x400200b8
 8005218:	40020410 	.word	0x40020410
 800521c:	40020428 	.word	0x40020428
 8005220:	40020440 	.word	0x40020440
 8005224:	40020458 	.word	0x40020458
 8005228:	40020470 	.word	0x40020470
 800522c:	40020488 	.word	0x40020488
 8005230:	400204a0 	.word	0x400204a0
 8005234:	400204b8 	.word	0x400204b8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf14      	ite	ne
 8005246:	2301      	movne	r3, #1
 8005248:	2300      	moveq	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8087 	beq.w	8005360 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	2220      	movs	r2, #32
 800525c:	409a      	lsls	r2, r3
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b04      	cmp	r3, #4
 800526c:	d139      	bne.n	80052e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0216 	bic.w	r2, r2, #22
 800527c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800528c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <HAL_DMA_IRQHandler+0x736>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0208 	bic.w	r2, r2, #8
 80052ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	223f      	movs	r2, #63	@ 0x3f
 80052b8:	409a      	lsls	r2, r3
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 834a 	beq.w	800596c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
          }
          return;
 80052e0:	e344      	b.n	800596c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d018      	beq.n	8005322 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d108      	bne.n	8005310 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02c      	beq.n	8005360 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
 800530e:	e027      	b.n	8005360 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
 8005320:	e01e      	b.n	8005360 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10f      	bne.n	8005350 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0210 	bic.w	r2, r2, #16
 800533e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8306 	beq.w	8005976 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8088 	beq.w	8005488 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2204      	movs	r2, #4
 800537c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a7a      	ldr	r2, [pc, #488]	@ (8005570 <HAL_DMA_IRQHandler+0xa08>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d04a      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a79      	ldr	r2, [pc, #484]	@ (8005574 <HAL_DMA_IRQHandler+0xa0c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d045      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a77      	ldr	r2, [pc, #476]	@ (8005578 <HAL_DMA_IRQHandler+0xa10>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d040      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a76      	ldr	r2, [pc, #472]	@ (800557c <HAL_DMA_IRQHandler+0xa14>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d03b      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a74      	ldr	r2, [pc, #464]	@ (8005580 <HAL_DMA_IRQHandler+0xa18>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d036      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a73      	ldr	r2, [pc, #460]	@ (8005584 <HAL_DMA_IRQHandler+0xa1c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d031      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a71      	ldr	r2, [pc, #452]	@ (8005588 <HAL_DMA_IRQHandler+0xa20>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02c      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a70      	ldr	r2, [pc, #448]	@ (800558c <HAL_DMA_IRQHandler+0xa24>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d027      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005590 <HAL_DMA_IRQHandler+0xa28>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6d      	ldr	r2, [pc, #436]	@ (8005594 <HAL_DMA_IRQHandler+0xa2c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01d      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005598 <HAL_DMA_IRQHandler+0xa30>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6a      	ldr	r2, [pc, #424]	@ (800559c <HAL_DMA_IRQHandler+0xa34>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a68      	ldr	r2, [pc, #416]	@ (80055a0 <HAL_DMA_IRQHandler+0xa38>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a67      	ldr	r2, [pc, #412]	@ (80055a4 <HAL_DMA_IRQHandler+0xa3c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a65      	ldr	r2, [pc, #404]	@ (80055a8 <HAL_DMA_IRQHandler+0xa40>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_DMA_IRQHandler+0x8b8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a64      	ldr	r2, [pc, #400]	@ (80055ac <HAL_DMA_IRQHandler+0xa44>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <HAL_DMA_IRQHandler+0x8ca>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e007      	b.n	8005442 <HAL_DMA_IRQHandler+0x8da>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544a:	429a      	cmp	r2, r3
 800544c:	d307      	bcc.n	800545e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f2      	bne.n	8005442 <HAL_DMA_IRQHandler+0x8da>
 800545c:	e000      	b.n	8005460 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800545e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2203      	movs	r2, #3
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005476:	e003      	b.n	8005480 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8272 	beq.w	8005976 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
 800549a:	e26c      	b.n	8005976 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a43      	ldr	r2, [pc, #268]	@ (80055b0 <HAL_DMA_IRQHandler+0xa48>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_DMA_IRQHandler+0x984>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a42      	ldr	r2, [pc, #264]	@ (80055b4 <HAL_DMA_IRQHandler+0xa4c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01d      	beq.n	80054ec <HAL_DMA_IRQHandler+0x984>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a40      	ldr	r2, [pc, #256]	@ (80055b8 <HAL_DMA_IRQHandler+0xa50>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d018      	beq.n	80054ec <HAL_DMA_IRQHandler+0x984>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3f      	ldr	r2, [pc, #252]	@ (80055bc <HAL_DMA_IRQHandler+0xa54>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_DMA_IRQHandler+0x984>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3d      	ldr	r2, [pc, #244]	@ (80055c0 <HAL_DMA_IRQHandler+0xa58>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_DMA_IRQHandler+0x984>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a3c      	ldr	r2, [pc, #240]	@ (80055c4 <HAL_DMA_IRQHandler+0xa5c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d009      	beq.n	80054ec <HAL_DMA_IRQHandler+0x984>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a3a      	ldr	r2, [pc, #232]	@ (80055c8 <HAL_DMA_IRQHandler+0xa60>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_DMA_IRQHandler+0x984>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a39      	ldr	r2, [pc, #228]	@ (80055cc <HAL_DMA_IRQHandler+0xa64>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d101      	bne.n	80054f0 <HAL_DMA_IRQHandler+0x988>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_DMA_IRQHandler+0x98a>
 80054f0:	2300      	movs	r3, #0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 823f 	beq.w	8005976 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	2204      	movs	r2, #4
 800550a:	409a      	lsls	r2, r3
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80cd 	beq.w	80056b0 <HAL_DMA_IRQHandler+0xb48>
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80c7 	beq.w	80056b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2204      	movs	r2, #4
 800552c:	409a      	lsls	r2, r3
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d049      	beq.n	80055d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8210 	beq.w	8005970 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005558:	e20a      	b.n	8005970 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8206 	beq.w	8005970 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800556c:	e200      	b.n	8005970 <HAL_DMA_IRQHandler+0xe08>
 800556e:	bf00      	nop
 8005570:	40020010 	.word	0x40020010
 8005574:	40020028 	.word	0x40020028
 8005578:	40020040 	.word	0x40020040
 800557c:	40020058 	.word	0x40020058
 8005580:	40020070 	.word	0x40020070
 8005584:	40020088 	.word	0x40020088
 8005588:	400200a0 	.word	0x400200a0
 800558c:	400200b8 	.word	0x400200b8
 8005590:	40020410 	.word	0x40020410
 8005594:	40020428 	.word	0x40020428
 8005598:	40020440 	.word	0x40020440
 800559c:	40020458 	.word	0x40020458
 80055a0:	40020470 	.word	0x40020470
 80055a4:	40020488 	.word	0x40020488
 80055a8:	400204a0 	.word	0x400204a0
 80055ac:	400204b8 	.word	0x400204b8
 80055b0:	58025408 	.word	0x58025408
 80055b4:	5802541c 	.word	0x5802541c
 80055b8:	58025430 	.word	0x58025430
 80055bc:	58025444 	.word	0x58025444
 80055c0:	58025458 	.word	0x58025458
 80055c4:	5802546c 	.word	0x5802546c
 80055c8:	58025480 	.word	0x58025480
 80055cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d160      	bne.n	800569c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a7f      	ldr	r2, [pc, #508]	@ (80057dc <HAL_DMA_IRQHandler+0xc74>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d04a      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7d      	ldr	r2, [pc, #500]	@ (80057e0 <HAL_DMA_IRQHandler+0xc78>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d045      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a7c      	ldr	r2, [pc, #496]	@ (80057e4 <HAL_DMA_IRQHandler+0xc7c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d040      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a7a      	ldr	r2, [pc, #488]	@ (80057e8 <HAL_DMA_IRQHandler+0xc80>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d03b      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a79      	ldr	r2, [pc, #484]	@ (80057ec <HAL_DMA_IRQHandler+0xc84>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d036      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a77      	ldr	r2, [pc, #476]	@ (80057f0 <HAL_DMA_IRQHandler+0xc88>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d031      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a76      	ldr	r2, [pc, #472]	@ (80057f4 <HAL_DMA_IRQHandler+0xc8c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d02c      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a74      	ldr	r2, [pc, #464]	@ (80057f8 <HAL_DMA_IRQHandler+0xc90>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d027      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a73      	ldr	r2, [pc, #460]	@ (80057fc <HAL_DMA_IRQHandler+0xc94>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d022      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a71      	ldr	r2, [pc, #452]	@ (8005800 <HAL_DMA_IRQHandler+0xc98>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01d      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a70      	ldr	r2, [pc, #448]	@ (8005804 <HAL_DMA_IRQHandler+0xc9c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d018      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6e      	ldr	r2, [pc, #440]	@ (8005808 <HAL_DMA_IRQHandler+0xca0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6d      	ldr	r2, [pc, #436]	@ (800580c <HAL_DMA_IRQHandler+0xca4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00e      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6b      	ldr	r2, [pc, #428]	@ (8005810 <HAL_DMA_IRQHandler+0xca8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6a      	ldr	r2, [pc, #424]	@ (8005814 <HAL_DMA_IRQHandler+0xcac>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_DMA_IRQHandler+0xb12>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a68      	ldr	r2, [pc, #416]	@ (8005818 <HAL_DMA_IRQHandler+0xcb0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <HAL_DMA_IRQHandler+0xb24>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0208 	bic.w	r2, r2, #8
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e007      	b.n	800569c <HAL_DMA_IRQHandler+0xb34>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0204 	bic.w	r2, r2, #4
 800569a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8165 	beq.w	8005970 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ae:	e15f      	b.n	8005970 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2202      	movs	r2, #2
 80056ba:	409a      	lsls	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80c5 	beq.w	8005850 <HAL_DMA_IRQHandler+0xce8>
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80bf 	beq.w	8005850 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2202      	movs	r2, #2
 80056dc:	409a      	lsls	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d018      	beq.n	800571e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 813a 	beq.w	8005974 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005708:	e134      	b.n	8005974 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8130 	beq.w	8005974 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800571c:	e12a      	b.n	8005974 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	f040 8089 	bne.w	800583c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2b      	ldr	r2, [pc, #172]	@ (80057dc <HAL_DMA_IRQHandler+0xc74>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d04a      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a29      	ldr	r2, [pc, #164]	@ (80057e0 <HAL_DMA_IRQHandler+0xc78>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d045      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a28      	ldr	r2, [pc, #160]	@ (80057e4 <HAL_DMA_IRQHandler+0xc7c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d040      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a26      	ldr	r2, [pc, #152]	@ (80057e8 <HAL_DMA_IRQHandler+0xc80>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d03b      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a25      	ldr	r2, [pc, #148]	@ (80057ec <HAL_DMA_IRQHandler+0xc84>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d036      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a23      	ldr	r2, [pc, #140]	@ (80057f0 <HAL_DMA_IRQHandler+0xc88>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d031      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a22      	ldr	r2, [pc, #136]	@ (80057f4 <HAL_DMA_IRQHandler+0xc8c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d02c      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a20      	ldr	r2, [pc, #128]	@ (80057f8 <HAL_DMA_IRQHandler+0xc90>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d027      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1f      	ldr	r2, [pc, #124]	@ (80057fc <HAL_DMA_IRQHandler+0xc94>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1d      	ldr	r2, [pc, #116]	@ (8005800 <HAL_DMA_IRQHandler+0xc98>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01d      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1c      	ldr	r2, [pc, #112]	@ (8005804 <HAL_DMA_IRQHandler+0xc9c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1a      	ldr	r2, [pc, #104]	@ (8005808 <HAL_DMA_IRQHandler+0xca0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a19      	ldr	r2, [pc, #100]	@ (800580c <HAL_DMA_IRQHandler+0xca4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a17      	ldr	r2, [pc, #92]	@ (8005810 <HAL_DMA_IRQHandler+0xca8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a16      	ldr	r2, [pc, #88]	@ (8005814 <HAL_DMA_IRQHandler+0xcac>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_DMA_IRQHandler+0xc62>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a14      	ldr	r2, [pc, #80]	@ (8005818 <HAL_DMA_IRQHandler+0xcb0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d128      	bne.n	800581c <HAL_DMA_IRQHandler+0xcb4>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0214 	bic.w	r2, r2, #20
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e027      	b.n	800582c <HAL_DMA_IRQHandler+0xcc4>
 80057dc:	40020010 	.word	0x40020010
 80057e0:	40020028 	.word	0x40020028
 80057e4:	40020040 	.word	0x40020040
 80057e8:	40020058 	.word	0x40020058
 80057ec:	40020070 	.word	0x40020070
 80057f0:	40020088 	.word	0x40020088
 80057f4:	400200a0 	.word	0x400200a0
 80057f8:	400200b8 	.word	0x400200b8
 80057fc:	40020410 	.word	0x40020410
 8005800:	40020428 	.word	0x40020428
 8005804:	40020440 	.word	0x40020440
 8005808:	40020458 	.word	0x40020458
 800580c:	40020470 	.word	0x40020470
 8005810:	40020488 	.word	0x40020488
 8005814:	400204a0 	.word	0x400204a0
 8005818:	400204b8 	.word	0x400204b8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 020a 	bic.w	r2, r2, #10
 800582a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8097 	beq.w	8005974 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800584e:	e091      	b.n	8005974 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2208      	movs	r2, #8
 800585a:	409a      	lsls	r2, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8088 	beq.w	8005976 <HAL_DMA_IRQHandler+0xe0e>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8082 	beq.w	8005976 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a41      	ldr	r2, [pc, #260]	@ (800597c <HAL_DMA_IRQHandler+0xe14>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d04a      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a3f      	ldr	r2, [pc, #252]	@ (8005980 <HAL_DMA_IRQHandler+0xe18>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d045      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3e      	ldr	r2, [pc, #248]	@ (8005984 <HAL_DMA_IRQHandler+0xe1c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d040      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a3c      	ldr	r2, [pc, #240]	@ (8005988 <HAL_DMA_IRQHandler+0xe20>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d03b      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a3b      	ldr	r2, [pc, #236]	@ (800598c <HAL_DMA_IRQHandler+0xe24>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d036      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a39      	ldr	r2, [pc, #228]	@ (8005990 <HAL_DMA_IRQHandler+0xe28>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d031      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a38      	ldr	r2, [pc, #224]	@ (8005994 <HAL_DMA_IRQHandler+0xe2c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d02c      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a36      	ldr	r2, [pc, #216]	@ (8005998 <HAL_DMA_IRQHandler+0xe30>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d027      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a35      	ldr	r2, [pc, #212]	@ (800599c <HAL_DMA_IRQHandler+0xe34>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a33      	ldr	r2, [pc, #204]	@ (80059a0 <HAL_DMA_IRQHandler+0xe38>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a32      	ldr	r2, [pc, #200]	@ (80059a4 <HAL_DMA_IRQHandler+0xe3c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a30      	ldr	r2, [pc, #192]	@ (80059a8 <HAL_DMA_IRQHandler+0xe40>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	@ (80059ac <HAL_DMA_IRQHandler+0xe44>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a2d      	ldr	r2, [pc, #180]	@ (80059b0 <HAL_DMA_IRQHandler+0xe48>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2c      	ldr	r2, [pc, #176]	@ (80059b4 <HAL_DMA_IRQHandler+0xe4c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_DMA_IRQHandler+0xdaa>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2a      	ldr	r2, [pc, #168]	@ (80059b8 <HAL_DMA_IRQHandler+0xe50>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <HAL_DMA_IRQHandler+0xdbc>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 021c 	bic.w	r2, r2, #28
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e007      	b.n	8005934 <HAL_DMA_IRQHandler+0xdcc>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 020e 	bic.w	r2, r2, #14
 8005932:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2201      	movs	r2, #1
 800593e:	409a      	lsls	r2, r3
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
 800596a:	e004      	b.n	8005976 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800596c:	bf00      	nop
 800596e:	e002      	b.n	8005976 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005970:	bf00      	nop
 8005972:	e000      	b.n	8005976 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005974:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005976:	3728      	adds	r7, #40	@ 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40020010 	.word	0x40020010
 8005980:	40020028 	.word	0x40020028
 8005984:	40020040 	.word	0x40020040
 8005988:	40020058 	.word	0x40020058
 800598c:	40020070 	.word	0x40020070
 8005990:	40020088 	.word	0x40020088
 8005994:	400200a0 	.word	0x400200a0
 8005998:	400200b8 	.word	0x400200b8
 800599c:	40020410 	.word	0x40020410
 80059a0:	40020428 	.word	0x40020428
 80059a4:	40020440 	.word	0x40020440
 80059a8:	40020458 	.word	0x40020458
 80059ac:	40020470 	.word	0x40020470
 80059b0:	40020488 	.word	0x40020488
 80059b4:	400204a0 	.word	0x400204a0
 80059b8:	400204b8 	.word	0x400204b8

080059bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a42      	ldr	r2, [pc, #264]	@ (8005ad4 <DMA_CalcBaseAndBitshift+0x118>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d04a      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a41      	ldr	r2, [pc, #260]	@ (8005ad8 <DMA_CalcBaseAndBitshift+0x11c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d045      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3f      	ldr	r2, [pc, #252]	@ (8005adc <DMA_CalcBaseAndBitshift+0x120>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d040      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ae0 <DMA_CalcBaseAndBitshift+0x124>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d03b      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae4 <DMA_CalcBaseAndBitshift+0x128>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d036      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a3b      	ldr	r2, [pc, #236]	@ (8005ae8 <DMA_CalcBaseAndBitshift+0x12c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d031      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a39      	ldr	r2, [pc, #228]	@ (8005aec <DMA_CalcBaseAndBitshift+0x130>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d02c      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a38      	ldr	r2, [pc, #224]	@ (8005af0 <DMA_CalcBaseAndBitshift+0x134>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d027      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a36      	ldr	r2, [pc, #216]	@ (8005af4 <DMA_CalcBaseAndBitshift+0x138>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d022      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a35      	ldr	r2, [pc, #212]	@ (8005af8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d01d      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a33      	ldr	r2, [pc, #204]	@ (8005afc <DMA_CalcBaseAndBitshift+0x140>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a32      	ldr	r2, [pc, #200]	@ (8005b00 <DMA_CalcBaseAndBitshift+0x144>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a30      	ldr	r2, [pc, #192]	@ (8005b04 <DMA_CalcBaseAndBitshift+0x148>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8005b08 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2d      	ldr	r2, [pc, #180]	@ (8005b0c <DMA_CalcBaseAndBitshift+0x150>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b10 <DMA_CalcBaseAndBitshift+0x154>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d101      	bne.n	8005a68 <DMA_CalcBaseAndBitshift+0xac>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <DMA_CalcBaseAndBitshift+0xae>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d024      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	3b10      	subs	r3, #16
 8005a76:	4a27      	ldr	r2, [pc, #156]	@ (8005b14 <DMA_CalcBaseAndBitshift+0x158>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	4a24      	ldr	r2, [pc, #144]	@ (8005b18 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a88:	5cd3      	ldrb	r3, [r2, r3]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d908      	bls.n	8005aa8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005b1c <DMA_CalcBaseAndBitshift+0x160>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005aa6:	e00d      	b.n	8005ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <DMA_CalcBaseAndBitshift+0x160>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ab6:	e005      	b.n	8005ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40020010 	.word	0x40020010
 8005ad8:	40020028 	.word	0x40020028
 8005adc:	40020040 	.word	0x40020040
 8005ae0:	40020058 	.word	0x40020058
 8005ae4:	40020070 	.word	0x40020070
 8005ae8:	40020088 	.word	0x40020088
 8005aec:	400200a0 	.word	0x400200a0
 8005af0:	400200b8 	.word	0x400200b8
 8005af4:	40020410 	.word	0x40020410
 8005af8:	40020428 	.word	0x40020428
 8005afc:	40020440 	.word	0x40020440
 8005b00:	40020458 	.word	0x40020458
 8005b04:	40020470 	.word	0x40020470
 8005b08:	40020488 	.word	0x40020488
 8005b0c:	400204a0 	.word	0x400204a0
 8005b10:	400204b8 	.word	0x400204b8
 8005b14:	aaaaaaab 	.word	0xaaaaaaab
 8005b18:	080158dc 	.word	0x080158dc
 8005b1c:	fffffc00 	.word	0xfffffc00

08005b20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d120      	bne.n	8005b76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d858      	bhi.n	8005bee <DMA_CheckFifoParam+0xce>
 8005b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b44 <DMA_CheckFifoParam+0x24>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b67 	.word	0x08005b67
 8005b4c:	08005b55 	.word	0x08005b55
 8005b50:	08005bef 	.word	0x08005bef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d048      	beq.n	8005bf2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b64:	e045      	b.n	8005bf2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b6e:	d142      	bne.n	8005bf6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b74:	e03f      	b.n	8005bf6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7e:	d123      	bne.n	8005bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d838      	bhi.n	8005bfa <DMA_CheckFifoParam+0xda>
 8005b88:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <DMA_CheckFifoParam+0x70>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005ba1 	.word	0x08005ba1
 8005b94:	08005ba7 	.word	0x08005ba7
 8005b98:	08005ba1 	.word	0x08005ba1
 8005b9c:	08005bb9 	.word	0x08005bb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ba4:	e030      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d025      	beq.n	8005bfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bb6:	e022      	b.n	8005bfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bc0:	d11f      	bne.n	8005c02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bc6:	e01c      	b.n	8005c02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d902      	bls.n	8005bd6 <DMA_CheckFifoParam+0xb6>
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d003      	beq.n	8005bdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005bd4:	e018      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bda:	e015      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00e      	beq.n	8005c06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
    break;
 8005bec:	e00b      	b.n	8005c06 <DMA_CheckFifoParam+0xe6>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e00a      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
        break;
 8005bf2:	bf00      	nop
 8005bf4:	e008      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e006      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
        break;
 8005bfa:	bf00      	nop
 8005bfc:	e004      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
        break;
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
    break;
 8005c06:	bf00      	nop
    }
  }

  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop

08005c18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a38      	ldr	r2, [pc, #224]	@ (8005d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a36      	ldr	r2, [pc, #216]	@ (8005d10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01d      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a35      	ldr	r2, [pc, #212]	@ (8005d14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a33      	ldr	r2, [pc, #204]	@ (8005d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a32      	ldr	r2, [pc, #200]	@ (8005d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a30      	ldr	r2, [pc, #192]	@ (8005d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2f      	ldr	r2, [pc, #188]	@ (8005d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2d      	ldr	r2, [pc, #180]	@ (8005d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01a      	beq.n	8005cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	3b08      	subs	r3, #8
 8005c88:	4a28      	ldr	r2, [pc, #160]	@ (8005d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4b26      	ldr	r3, [pc, #152]	@ (8005d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a24      	ldr	r2, [pc, #144]	@ (8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ca4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 031f 	and.w	r3, r3, #31
 8005cac:	2201      	movs	r2, #1
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005cb4:	e024      	b.n	8005d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	3b10      	subs	r3, #16
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4a1c      	ldr	r2, [pc, #112]	@ (8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d806      	bhi.n	8005cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d902      	bls.n	8005cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4b18      	ldr	r3, [pc, #96]	@ (8005d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a16      	ldr	r2, [pc, #88]	@ (8005d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005cf0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	58025408 	.word	0x58025408
 8005d10:	5802541c 	.word	0x5802541c
 8005d14:	58025430 	.word	0x58025430
 8005d18:	58025444 	.word	0x58025444
 8005d1c:	58025458 	.word	0x58025458
 8005d20:	5802546c 	.word	0x5802546c
 8005d24:	58025480 	.word	0x58025480
 8005d28:	58025494 	.word	0x58025494
 8005d2c:	cccccccd 	.word	0xcccccccd
 8005d30:	16009600 	.word	0x16009600
 8005d34:	58025880 	.word	0x58025880
 8005d38:	aaaaaaab 	.word	0xaaaaaaab
 8005d3c:	400204b8 	.word	0x400204b8
 8005d40:	4002040f 	.word	0x4002040f
 8005d44:	10008200 	.word	0x10008200
 8005d48:	40020880 	.word	0x40020880

08005d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d04a      	beq.n	8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d847      	bhi.n	8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a25      	ldr	r2, [pc, #148]	@ (8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d022      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a24      	ldr	r2, [pc, #144]	@ (8005e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d01d      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a22      	ldr	r2, [pc, #136]	@ (8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d018      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a21      	ldr	r2, [pc, #132]	@ (8005e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1f      	ldr	r2, [pc, #124]	@ (8005e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00e      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d009      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d101      	bne.n	8005dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4b17      	ldr	r3, [pc, #92]	@ (8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	461a      	mov	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005dd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005dd6:	e009      	b.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4b14      	ldr	r3, [pc, #80]	@ (8005e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a11      	ldr	r2, [pc, #68]	@ (8005e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005dea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	2201      	movs	r2, #1
 8005df2:	409a      	lsls	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	58025408 	.word	0x58025408
 8005e08:	5802541c 	.word	0x5802541c
 8005e0c:	58025430 	.word	0x58025430
 8005e10:	58025444 	.word	0x58025444
 8005e14:	58025458 	.word	0x58025458
 8005e18:	5802546c 	.word	0x5802546c
 8005e1c:	58025480 	.word	0x58025480
 8005e20:	58025494 	.word	0x58025494
 8005e24:	1600963f 	.word	0x1600963f
 8005e28:	58025940 	.word	0x58025940
 8005e2c:	1000823f 	.word	0x1000823f
 8005e30:	40020940 	.word	0x40020940

08005e34 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e00a      	b.n	8005e66 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	605a      	str	r2, [r3, #4]
      break;
 8005e5c:	e002      	b.n	8005e64 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
      break;
 8005e62:	bf00      	nop
  }

  return status;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e003      	b.n	8005e8e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b089      	sub	sp, #36	@ 0x24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005eaa:	4b89      	ldr	r3, [pc, #548]	@ (80060d0 <HAL_GPIO_Init+0x234>)
 8005eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eae:	e194      	b.n	80061da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8186 	beq.w	80061d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d005      	beq.n	8005ee0 <HAL_GPIO_Init+0x44>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d130      	bne.n	8005f42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	2203      	movs	r2, #3
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f16:	2201      	movs	r2, #1
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	f003 0201 	and.w	r2, r3, #1
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d017      	beq.n	8005f7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	2203      	movs	r2, #3
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	4013      	ands	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d123      	bne.n	8005fd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	08da      	lsrs	r2, r3, #3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3208      	adds	r2, #8
 8005f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	220f      	movs	r2, #15
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	08da      	lsrs	r2, r3, #3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3208      	adds	r2, #8
 8005fcc:	69b9      	ldr	r1, [r7, #24]
 8005fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	2203      	movs	r2, #3
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 0203 	and.w	r2, r3, #3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80e0 	beq.w	80061d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006014:	4b2f      	ldr	r3, [pc, #188]	@ (80060d4 <HAL_GPIO_Init+0x238>)
 8006016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800601a:	4a2e      	ldr	r2, [pc, #184]	@ (80060d4 <HAL_GPIO_Init+0x238>)
 800601c:	f043 0302 	orr.w	r3, r3, #2
 8006020:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006024:	4b2b      	ldr	r3, [pc, #172]	@ (80060d4 <HAL_GPIO_Init+0x238>)
 8006026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006032:	4a29      	ldr	r2, [pc, #164]	@ (80060d8 <HAL_GPIO_Init+0x23c>)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	3302      	adds	r3, #2
 800603a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	220f      	movs	r2, #15
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	43db      	mvns	r3, r3
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a20      	ldr	r2, [pc, #128]	@ (80060dc <HAL_GPIO_Init+0x240>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d052      	beq.n	8006104 <HAL_GPIO_Init+0x268>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1f      	ldr	r2, [pc, #124]	@ (80060e0 <HAL_GPIO_Init+0x244>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d031      	beq.n	80060ca <HAL_GPIO_Init+0x22e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1e      	ldr	r2, [pc, #120]	@ (80060e4 <HAL_GPIO_Init+0x248>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d02b      	beq.n	80060c6 <HAL_GPIO_Init+0x22a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <HAL_GPIO_Init+0x24c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d025      	beq.n	80060c2 <HAL_GPIO_Init+0x226>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <HAL_GPIO_Init+0x250>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01f      	beq.n	80060be <HAL_GPIO_Init+0x222>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1b      	ldr	r2, [pc, #108]	@ (80060f0 <HAL_GPIO_Init+0x254>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d019      	beq.n	80060ba <HAL_GPIO_Init+0x21e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1a      	ldr	r2, [pc, #104]	@ (80060f4 <HAL_GPIO_Init+0x258>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_GPIO_Init+0x21a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a19      	ldr	r2, [pc, #100]	@ (80060f8 <HAL_GPIO_Init+0x25c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00d      	beq.n	80060b2 <HAL_GPIO_Init+0x216>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <HAL_GPIO_Init+0x260>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <HAL_GPIO_Init+0x212>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a17      	ldr	r2, [pc, #92]	@ (8006100 <HAL_GPIO_Init+0x264>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <HAL_GPIO_Init+0x20e>
 80060a6:	2309      	movs	r3, #9
 80060a8:	e02d      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060aa:	230a      	movs	r3, #10
 80060ac:	e02b      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060ae:	2308      	movs	r3, #8
 80060b0:	e029      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060b2:	2307      	movs	r3, #7
 80060b4:	e027      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060b6:	2306      	movs	r3, #6
 80060b8:	e025      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060ba:	2305      	movs	r3, #5
 80060bc:	e023      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060be:	2304      	movs	r3, #4
 80060c0:	e021      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060c2:	2303      	movs	r3, #3
 80060c4:	e01f      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e01d      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e01b      	b.n	8006106 <HAL_GPIO_Init+0x26a>
 80060ce:	bf00      	nop
 80060d0:	58000080 	.word	0x58000080
 80060d4:	58024400 	.word	0x58024400
 80060d8:	58000400 	.word	0x58000400
 80060dc:	58020000 	.word	0x58020000
 80060e0:	58020400 	.word	0x58020400
 80060e4:	58020800 	.word	0x58020800
 80060e8:	58020c00 	.word	0x58020c00
 80060ec:	58021000 	.word	0x58021000
 80060f0:	58021400 	.word	0x58021400
 80060f4:	58021800 	.word	0x58021800
 80060f8:	58021c00 	.word	0x58021c00
 80060fc:	58022000 	.word	0x58022000
 8006100:	58022400 	.word	0x58022400
 8006104:	2300      	movs	r3, #0
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	f002 0203 	and.w	r2, r2, #3
 800610c:	0092      	lsls	r2, r2, #2
 800610e:	4093      	lsls	r3, r2
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4313      	orrs	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006116:	4938      	ldr	r1, [pc, #224]	@ (80061f8 <HAL_GPIO_Init+0x35c>)
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	089b      	lsrs	r3, r3, #2
 800611c:	3302      	adds	r3, #2
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	43db      	mvns	r3, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4013      	ands	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800614a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	43db      	mvns	r3, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4013      	ands	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f47f ae63 	bne.w	8005eb0 <HAL_GPIO_Init+0x14>
  }
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	3724      	adds	r7, #36	@ 0x24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	58000400 	.word	0x58000400

080061fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
 8006208:	4613      	mov	r3, r2
 800620a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800620c:	787b      	ldrb	r3, [r7, #1]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006212:	887a      	ldrh	r2, [r7, #2]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006218:	e003      	b.n	8006222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800621a:	887b      	ldrh	r3, [r7, #2]
 800621c:	041a      	lsls	r2, r3, #16
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	619a      	str	r2, [r3, #24]
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006240:	887a      	ldrh	r2, [r7, #2]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4013      	ands	r3, r2
 8006246:	041a      	lsls	r2, r3, #16
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	43d9      	mvns	r1, r3
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	400b      	ands	r3, r1
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	619a      	str	r2, [r3, #24]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e08b      	b.n	800638e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fb f8ce 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2224      	movs	r2, #36	@ 0x24
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80062b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d107      	bne.n	80062de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	e006      	b.n	80062ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80062ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d108      	bne.n	8006306 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006302:	605a      	str	r2, [r3, #4]
 8006304:	e007      	b.n	8006316 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006314:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b1d      	ldr	r3, [pc, #116]	@ (8006398 <HAL_I2C_Init+0x134>)
 8006322:	430b      	orrs	r3, r1
 8006324:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006334:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1a      	ldr	r2, [r3, #32]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	02008000 	.word	0x02008000

0800639c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d138      	bne.n	8006424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063bc:	2302      	movs	r3, #2
 80063be:	e032      	b.n	8006426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	@ 0x24
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e000      	b.n	8006426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b20      	cmp	r3, #32
 8006446:	d139      	bne.n	80064bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006452:	2302      	movs	r3, #2
 8006454:	e033      	b.n	80064be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2224      	movs	r2, #36	@ 0x24
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b086      	sub	sp, #24
 80064ce:	af02      	add	r7, sp, #8
 80064d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0fe      	b.n	80066da <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f00d fe35 	bl	8014160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2203      	movs	r2, #3
 80064fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f007 fd91 	bl	800e02a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	7c1a      	ldrb	r2, [r3, #16]
 8006510:	f88d 2000 	strb.w	r2, [sp]
 8006514:	3304      	adds	r3, #4
 8006516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006518:	f007 fc62 	bl	800dde0 <USB_CoreInit>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e0d5      	b.n	80066da <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f007 fd89 	bl	800e04c <USB_SetCurrentMode>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0c6      	b.n	80066da <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	e04a      	b.n	80065e8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006552:	7bfa      	ldrb	r2, [r7, #15]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	3315      	adds	r3, #21
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006566:	7bfa      	ldrb	r2, [r7, #15]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	3314      	adds	r3, #20
 8006576:	7bfa      	ldrb	r2, [r7, #15]
 8006578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800657a:	7bfa      	ldrb	r2, [r7, #15]
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	b298      	uxth	r0, r3
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	332e      	adds	r3, #46	@ 0x2e
 800658e:	4602      	mov	r2, r0
 8006590:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006592:	7bfa      	ldrb	r2, [r7, #15]
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	3318      	adds	r3, #24
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065a6:	7bfa      	ldrb	r2, [r7, #15]
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	331c      	adds	r3, #28
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065ba:	7bfa      	ldrb	r2, [r7, #15]
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3320      	adds	r3, #32
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065ce:	7bfa      	ldrb	r2, [r7, #15]
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	3324      	adds	r3, #36	@ 0x24
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	3301      	adds	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	791b      	ldrb	r3, [r3, #4]
 80065ec:	7bfa      	ldrb	r2, [r7, #15]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d3af      	bcc.n	8006552 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
 80065f6:	e044      	b.n	8006682 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065f8:	7bfa      	ldrb	r2, [r7, #15]
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006620:	7bfa      	ldrb	r2, [r7, #15]
 8006622:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006624:	7bfa      	ldrb	r2, [r7, #15]
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006650:	7bfa      	ldrb	r2, [r7, #15]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	3301      	adds	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	791b      	ldrb	r3, [r3, #4]
 8006686:	7bfa      	ldrb	r2, [r7, #15]
 8006688:	429a      	cmp	r2, r3
 800668a:	d3b5      	bcc.n	80065f8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7c1a      	ldrb	r2, [r3, #16]
 8006694:	f88d 2000 	strb.w	r2, [sp]
 8006698:	3304      	adds	r3, #4
 800669a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800669c:	f007 fd22 	bl	800e0e4 <USB_DevInit>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e013      	b.n	80066da <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7b1b      	ldrb	r3, [r3, #12]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d102      	bne.n	80066ce <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f96f 	bl	80079ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f008 fd65 	bl	800f1a2 <USB_DevDisconnect>

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_PCD_Start+0x1c>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e022      	b.n	8006744 <HAL_PCD_Start+0x62>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006716:	2b01      	cmp	r3, #1
 8006718:	d105      	bne.n	8006726 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f007 fc6c 	bl	800e008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f008 fd13 	bl	800f160 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b08d      	sub	sp, #52	@ 0x34
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f008 fdd1 	bl	800f30a <USB_GetMode>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 84b9 	bne.w	80070e2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f008 fd35 	bl	800f1e4 <USB_ReadInterrupts>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 84af 	beq.w	80070e0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	0a1b      	lsrs	r3, r3, #8
 800678c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f008 fd22 	bl	800f1e4 <USB_ReadInterrupts>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d107      	bne.n	80067ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f002 0202 	and.w	r2, r2, #2
 80067b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f008 fd10 	bl	800f1e4 <USB_ReadInterrupts>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d161      	bne.n	8006892 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0210 	bic.w	r2, r2, #16
 80067dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	f003 020f 	and.w	r2, r3, #15
 80067ea:	4613      	mov	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4413      	add	r3, r2
 80067fa:	3304      	adds	r3, #4
 80067fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006804:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006808:	d124      	bne.n	8006854 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006810:	4013      	ands	r3, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d035      	beq.n	8006882 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	091b      	lsrs	r3, r3, #4
 800681e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006824:	b29b      	uxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	6a38      	ldr	r0, [r7, #32]
 800682a:	f008 fb47 	bl	800eebc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	091b      	lsrs	r3, r3, #4
 8006836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800683a:	441a      	add	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	695a      	ldr	r2, [r3, #20]
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	091b      	lsrs	r3, r3, #4
 8006848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800684c:	441a      	add	r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	615a      	str	r2, [r3, #20]
 8006852:	e016      	b.n	8006882 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800685a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800685e:	d110      	bne.n	8006882 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006866:	2208      	movs	r2, #8
 8006868:	4619      	mov	r1, r3
 800686a:	6a38      	ldr	r0, [r7, #32]
 800686c:	f008 fb26 	bl	800eebc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	091b      	lsrs	r3, r3, #4
 8006878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800687c:	441a      	add	r2, r3
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0210 	orr.w	r2, r2, #16
 8006890:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f008 fca4 	bl	800f1e4 <USB_ReadInterrupts>
 800689c:	4603      	mov	r3, r0
 800689e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068a6:	f040 80a7 	bne.w	80069f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f008 fca9 	bl	800f20a <USB_ReadDevAllOutEpInterrupt>
 80068b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80068ba:	e099      	b.n	80069f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 808e 	beq.w	80069e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f008 fccd 	bl	800f272 <USB_ReadDevOutEPInterrupt>
 80068d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00c      	beq.n	80068fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f0:	461a      	mov	r2, r3
 80068f2:	2301      	movs	r3, #1
 80068f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80068f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fed1 	bl	80076a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00c      	beq.n	8006922 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006914:	461a      	mov	r2, r3
 8006916:	2308      	movs	r3, #8
 8006918:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800691a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 ffa7 	bl	8007870 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	2310      	movs	r3, #16
 800693c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d030      	beq.n	80069aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006950:	2b80      	cmp	r3, #128	@ 0x80
 8006952:	d109      	bne.n	8006968 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006962:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006966:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	3304      	adds	r3, #4
 800697c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	78db      	ldrb	r3, [r3, #3]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d108      	bne.n	8006998 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2200      	movs	r2, #0
 800698a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f00d fd7c 	bl	8014490 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a4:	461a      	mov	r2, r3
 80069a6:	2302      	movs	r3, #2
 80069a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c0:	461a      	mov	r2, r3
 80069c2:	2320      	movs	r3, #32
 80069c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069dc:	461a      	mov	r2, r3
 80069de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	3301      	adds	r3, #1
 80069e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80069ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ec:	085b      	lsrs	r3, r3, #1
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f47f af62 	bne.w	80068bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f008 fbf1 	bl	800f1e4 <USB_ReadInterrupts>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a0c:	f040 80db 	bne.w	8006bc6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f008 fc12 	bl	800f23e <USB_ReadDevAllInEpInterrupt>
 8006a1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006a20:	e0cd      	b.n	8006bbe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80c2 	beq.w	8006bb2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	4611      	mov	r1, r2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f008 fc38 	bl	800f2ae <USB_ReadDevInEPInterrupt>
 8006a3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d057      	beq.n	8006afa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	2201      	movs	r2, #1
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	43db      	mvns	r3, r3
 8006a64:	69f9      	ldr	r1, [r7, #28]
 8006a66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	799b      	ldrb	r3, [r3, #6]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d132      	bne.n	8006aee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	3320      	adds	r3, #32
 8006a98:	6819      	ldr	r1, [r3, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4403      	add	r3, r0
 8006aa8:	331c      	adds	r3, #28
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4419      	add	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4403      	add	r3, r0
 8006abc:	3320      	adds	r3, #32
 8006abe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d113      	bne.n	8006aee <HAL_PCD_IRQHandler+0x3a2>
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3324      	adds	r3, #36	@ 0x24
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d108      	bne.n	8006aee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2101      	movs	r1, #1
 8006aea:	f008 fc41 	bl	800f370 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f00d fc46 	bl	8014386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b10:	461a      	mov	r2, r3
 8006b12:	2308      	movs	r3, #8
 8006b14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2310      	movs	r3, #16
 8006b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d008      	beq.n	8006b4e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2340      	movs	r3, #64	@ 0x40
 8006b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d023      	beq.n	8006ba0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006b58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b5a:	6a38      	ldr	r0, [r7, #32]
 8006b5c:	f007 fc20 	bl	800e3a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b62:	4613      	mov	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	3310      	adds	r3, #16
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	4413      	add	r3, r2
 8006b70:	3304      	adds	r3, #4
 8006b72:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	78db      	ldrb	r3, [r3, #3]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d108      	bne.n	8006b8e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f00d fc93 	bl	80144b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fcea 	bl	8007586 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f af2e 	bne.w	8006a22 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f008 fb0a 	bl	800f1e4 <USB_ReadInterrupts>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bda:	d122      	bne.n	8006c22 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d108      	bne.n	8006c0c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006c02:	2100      	movs	r1, #0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fef5 	bl	80079f4 <HAL_PCDEx_LPM_Callback>
 8006c0a:	e002      	b.n	8006c12 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f00d fc31 	bl	8014474 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f008 fadc 	bl	800f1e4 <USB_ReadInterrupts>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c36:	d112      	bne.n	8006c5e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d102      	bne.n	8006c4e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f00d fbed 	bl	8014428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f008 fabe 	bl	800f1e4 <USB_ReadInterrupts>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c72:	d121      	bne.n	8006cb8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006c82:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d111      	bne.n	8006cb2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9c:	089b      	lsrs	r3, r3, #2
 8006c9e:	f003 020f 	and.w	r2, r3, #15
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fea2 	bl	80079f4 <HAL_PCDEx_LPM_Callback>
 8006cb0:	e002      	b.n	8006cb8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f00d fbb8 	bl	8014428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f008 fa91 	bl	800f1e4 <USB_ReadInterrupts>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ccc:	f040 80b7 	bne.w	8006e3e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2110      	movs	r1, #16
 8006cea:	4618      	mov	r0, r3
 8006cec:	f007 fb58 	bl	800e3a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf4:	e046      	b.n	8006d84 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d02:	461a      	mov	r2, r3
 8006d04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d36:	461a      	mov	r2, r3
 8006d38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d80:	3301      	adds	r3, #1
 8006d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d3b2      	bcc.n	8006cf6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d9e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006da2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	7bdb      	ldrb	r3, [r3, #15]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d016      	beq.n	8006dda <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dbc:	f043 030b 	orr.w	r3, r3, #11
 8006dc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dd2:	f043 030b 	orr.w	r3, r3, #11
 8006dd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006dd8:	e015      	b.n	8006e06 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de8:	4619      	mov	r1, r3
 8006dea:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006dee:	4313      	orrs	r3, r2
 8006df0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e00:	f043 030b 	orr.w	r3, r3, #11
 8006e04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e14:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006e18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f008 faa1 	bl	800f370 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f008 f9ce 	bl	800f1e4 <USB_ReadInterrupts>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e52:	d123      	bne.n	8006e9c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f008 fa65 	bl	800f328 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f007 fb15 	bl	800e492 <USB_GetDevSpeed>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681c      	ldr	r4, [r3, #0]
 8006e74:	f001 fd9e 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8006e78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e7e:	461a      	mov	r2, r3
 8006e80:	4620      	mov	r0, r4
 8006e82:	f007 f81f 	bl	800dec4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f00d faa5 	bl	80143d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695a      	ldr	r2, [r3, #20]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f008 f99f 	bl	800f1e4 <USB_ReadInterrupts>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d10a      	bne.n	8006ec6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f00d fa82 	bl	80143ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f002 0208 	and.w	r2, r2, #8
 8006ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f008 f98a 	bl	800f1e4 <USB_ReadInterrupts>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed6:	2b80      	cmp	r3, #128	@ 0x80
 8006ed8:	d123      	bne.n	8006f22 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eea:	e014      	b.n	8006f16 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d105      	bne.n	8006f10 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fb0a 	bl	8007524 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	3301      	adds	r3, #1
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	791b      	ldrb	r3, [r3, #4]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d3e4      	bcc.n	8006eec <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f008 f95c 	bl	800f1e4 <USB_ReadInterrupts>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f36:	d13c      	bne.n	8006fb2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f38:	2301      	movs	r3, #1
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f3c:	e02b      	b.n	8006f96 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3318      	adds	r3, #24
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d115      	bne.n	8006f90 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006f64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	da12      	bge.n	8006f90 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6e:	4613      	mov	r3, r2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3317      	adds	r3, #23
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 faca 	bl	8007524 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	3301      	adds	r3, #1
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	791b      	ldrb	r3, [r3, #4]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d3cd      	bcc.n	8006f3e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695a      	ldr	r2, [r3, #20]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f008 f914 	bl	800f1e4 <USB_ReadInterrupts>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fc6:	d156      	bne.n	8007076 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fc8:	2301      	movs	r3, #1
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fcc:	e045      	b.n	800705a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	440b      	add	r3, r1
 8006fec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d12e      	bne.n	8007054 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006ff6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	da2b      	bge.n	8007054 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	0c1a      	lsrs	r2, r3, #16
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007006:	4053      	eors	r3, r2
 8007008:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800700c:	2b00      	cmp	r3, #0
 800700e:	d121      	bne.n	8007054 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007022:	2201      	movs	r2, #1
 8007024:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800704c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007050:	6053      	str	r3, [r2, #4]
            break;
 8007052:	e008      	b.n	8007066 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	3301      	adds	r3, #1
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	791b      	ldrb	r3, [r3, #4]
 800705e:	461a      	mov	r2, r3
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	4293      	cmp	r3, r2
 8007064:	d3b3      	bcc.n	8006fce <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007074:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f008 f8b2 	bl	800f1e4 <USB_ReadInterrupts>
 8007080:	4603      	mov	r3, r0
 8007082:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800708a:	d10a      	bne.n	80070a2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f00d fa23 	bl	80144d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	695a      	ldr	r2, [r3, #20]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80070a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f008 f89c 	bl	800f1e4 <USB_ReadInterrupts>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d115      	bne.n	80070e2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f00d fa13 	bl	80144f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6859      	ldr	r1, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	e000      	b.n	80070e2 <HAL_PCD_IRQHandler+0x996>
      return;
 80070e0:	bf00      	nop
    }
  }
}
 80070e2:	3734      	adds	r7, #52	@ 0x34
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd90      	pop	{r4, r7, pc}

080070e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_PCD_SetAddress+0x1a>
 80070fe:	2302      	movs	r3, #2
 8007100:	e012      	b.n	8007128 <HAL_PCD_SetAddress+0x40>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f007 fffb 	bl	800f114 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	4608      	mov	r0, r1
 800713a:	4611      	mov	r1, r2
 800713c:	461a      	mov	r2, r3
 800713e:	4603      	mov	r3, r0
 8007140:	70fb      	strb	r3, [r7, #3]
 8007142:	460b      	mov	r3, r1
 8007144:	803b      	strh	r3, [r7, #0]
 8007146:	4613      	mov	r3, r2
 8007148:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800714e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007152:	2b00      	cmp	r3, #0
 8007154:	da0f      	bge.n	8007176 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	f003 020f 	and.w	r2, r3, #15
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	3310      	adds	r3, #16
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	3304      	adds	r3, #4
 800716c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	705a      	strb	r2, [r3, #1]
 8007174:	e00f      	b.n	8007196 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	f003 020f 	and.w	r2, r3, #15
 800717c:	4613      	mov	r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	3304      	adds	r3, #4
 800718e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80071a2:	883b      	ldrh	r3, [r7, #0]
 80071a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	78ba      	ldrb	r2, [r7, #2]
 80071b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80071c4:	78bb      	ldrb	r3, [r7, #2]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d102      	bne.n	80071d0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_PCD_EP_Open+0xae>
 80071da:	2302      	movs	r3, #2
 80071dc:	e00e      	b.n	80071fc <HAL_PCD_EP_Open+0xcc>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f007 f975 	bl	800e4dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80071fa:	7afb      	ldrb	r3, [r7, #11]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007210:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007214:	2b00      	cmp	r3, #0
 8007216:	da0f      	bge.n	8007238 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	f003 020f 	and.w	r2, r3, #15
 800721e:	4613      	mov	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	3310      	adds	r3, #16
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	3304      	adds	r3, #4
 800722e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	705a      	strb	r2, [r3, #1]
 8007236:	e00f      	b.n	8007258 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	f003 020f 	and.w	r2, r3, #15
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	3304      	adds	r3, #4
 8007250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	b2da      	uxtb	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_PCD_EP_Close+0x6e>
 800726e:	2302      	movs	r3, #2
 8007270:	e00e      	b.n	8007290 <HAL_PCD_EP_Close+0x8c>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	4618      	mov	r0, r3
 8007282:	f007 f9b3 	bl	800e5ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	460b      	mov	r3, r1
 80072a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	f003 020f 	and.w	r2, r3, #15
 80072ae:	4613      	mov	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	3304      	adds	r3, #4
 80072c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072da:	7afb      	ldrb	r3, [r7, #11]
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	799b      	ldrb	r3, [r3, #6]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d102      	bne.n	80072f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	799b      	ldrb	r3, [r3, #6]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6979      	ldr	r1, [r7, #20]
 8007300:	f007 fa50 	bl	800e7a4 <USB_EPStartXfer>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	f003 020f 	and.w	r2, r3, #15
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007330:	681b      	ldr	r3, [r3, #0]
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	460b      	mov	r3, r1
 800734c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	f003 020f 	and.w	r2, r3, #15
 8007354:	4613      	mov	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	3310      	adds	r3, #16
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	3304      	adds	r3, #4
 8007364:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2200      	movs	r2, #0
 8007376:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2201      	movs	r2, #1
 800737c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	b2da      	uxtb	r2, r3
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	799b      	ldrb	r3, [r3, #6]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d102      	bne.n	8007398 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	799b      	ldrb	r3, [r3, #6]
 80073a0:	461a      	mov	r2, r3
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	f007 f9fe 	bl	800e7a4 <USB_EPStartXfer>

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	7912      	ldrb	r2, [r2, #4]
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d901      	bls.n	80073d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e04f      	b.n	8007470 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da0f      	bge.n	80073f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	f003 020f 	and.w	r2, r3, #15
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	3310      	adds	r3, #16
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4413      	add	r3, r2
 80073ec:	3304      	adds	r3, #4
 80073ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	705a      	strb	r2, [r3, #1]
 80073f6:	e00d      	b.n	8007414 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	4613      	mov	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	3304      	adds	r3, #4
 800740c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	b2da      	uxtb	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_PCD_EP_SetStall+0x82>
 8007430:	2302      	movs	r3, #2
 8007432:	e01d      	b.n	8007470 <HAL_PCD_EP_SetStall+0xbe>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68f9      	ldr	r1, [r7, #12]
 8007442:	4618      	mov	r0, r3
 8007444:	f007 fd92 	bl	800ef6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	7999      	ldrb	r1, [r3, #6]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007460:	461a      	mov	r2, r3
 8007462:	f007 ff85 	bl	800f370 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	7912      	ldrb	r2, [r2, #4]
 800748e:	4293      	cmp	r3, r2
 8007490:	d901      	bls.n	8007496 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e042      	b.n	800751c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da0f      	bge.n	80074be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	3310      	adds	r3, #16
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	3304      	adds	r3, #4
 80074b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	705a      	strb	r2, [r3, #1]
 80074bc:	e00f      	b.n	80074de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	4613      	mov	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4413      	add	r3, r2
 80074d4:	3304      	adds	r3, #4
 80074d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_PCD_EP_ClrStall+0x86>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e00e      	b.n	800751c <HAL_PCD_EP_ClrStall+0xa4>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	4618      	mov	r0, r3
 800750e:	f007 fd9b 	bl	800f048 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007534:	2b00      	cmp	r3, #0
 8007536:	da0c      	bge.n	8007552 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	f003 020f 	and.w	r2, r3, #15
 800753e:	4613      	mov	r3, r2
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	3310      	adds	r3, #16
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	3304      	adds	r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e00c      	b.n	800756c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	f003 020f 	and.w	r2, r3, #15
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	3304      	adds	r3, #4
 800756a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68f9      	ldr	r1, [r7, #12]
 8007572:	4618      	mov	r0, r3
 8007574:	f007 fbba 	bl	800ecec <USB_EPStopXfer>
 8007578:	4603      	mov	r3, r0
 800757a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800757c:	7afb      	ldrb	r3, [r7, #11]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b08a      	sub	sp, #40	@ 0x28
 800758a:	af02      	add	r7, sp, #8
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	3310      	adds	r3, #16
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	3304      	adds	r3, #4
 80075ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	695a      	ldr	r2, [r3, #20]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d901      	bls.n	80075be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e06b      	b.n	8007696 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d902      	bls.n	80075da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	3303      	adds	r3, #3
 80075de:	089b      	lsrs	r3, r3, #2
 80075e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075e2:	e02a      	b.n	800763a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d902      	bls.n	8007600 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	3303      	adds	r3, #3
 8007604:	089b      	lsrs	r3, r3, #2
 8007606:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68d9      	ldr	r1, [r3, #12]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	b2da      	uxtb	r2, r3
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4603      	mov	r3, r0
 800761c:	6978      	ldr	r0, [r7, #20]
 800761e:	f007 fc0f 	bl	800ee40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	441a      	add	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	429a      	cmp	r2, r3
 800764e:	d809      	bhi.n	8007664 <PCD_WriteEmptyTxFifo+0xde>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007658:	429a      	cmp	r2, r3
 800765a:	d203      	bcs.n	8007664 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1bf      	bne.n	80075e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	429a      	cmp	r2, r3
 800766e:	d811      	bhi.n	8007694 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	2201      	movs	r2, #1
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	43db      	mvns	r3, r3
 800768a:	6939      	ldr	r1, [r7, #16]
 800768c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007690:	4013      	ands	r3, r2
 8007692:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	333c      	adds	r3, #60	@ 0x3c
 80076b8:	3304      	adds	r3, #4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	799b      	ldrb	r3, [r3, #6]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d17b      	bne.n	80077ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d015      	beq.n	800770c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4a61      	ldr	r2, [pc, #388]	@ (8007868 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	f240 80b9 	bls.w	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80b3 	beq.w	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007702:	461a      	mov	r2, r3
 8007704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007708:	6093      	str	r3, [r2, #8]
 800770a:	e0a7      	b.n	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007722:	461a      	mov	r2, r3
 8007724:	2320      	movs	r3, #32
 8007726:	6093      	str	r3, [r2, #8]
 8007728:	e098      	b.n	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 8093 	bne.w	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	4a4b      	ldr	r2, [pc, #300]	@ (8007868 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d90f      	bls.n	800775e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007754:	461a      	mov	r2, r3
 8007756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800775a:	6093      	str	r3, [r2, #8]
 800775c:	e07e      	b.n	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	3304      	adds	r3, #4
 8007772:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a1a      	ldr	r2, [r3, #32]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	0159      	lsls	r1, r3, #5
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	440b      	add	r3, r1
 8007780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800778a:	1ad2      	subs	r2, r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d114      	bne.n	80077c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077a8:	461a      	mov	r2, r3
 80077aa:	2101      	movs	r1, #1
 80077ac:	f007 fde0 	bl	800f370 <USB_EP0_OutStart>
 80077b0:	e006      	b.n	80077c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	441a      	add	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f00c fdc2 	bl	8014350 <HAL_PCD_DataOutStageCallback>
 80077cc:	e046      	b.n	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	4a26      	ldr	r2, [pc, #152]	@ (800786c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d124      	bne.n	8007820 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ec:	461a      	mov	r2, r3
 80077ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077f2:	6093      	str	r3, [r2, #8]
 80077f4:	e032      	b.n	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780c:	461a      	mov	r2, r3
 800780e:	2320      	movs	r3, #32
 8007810:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f00c fd99 	bl	8014350 <HAL_PCD_DataOutStageCallback>
 800781e:	e01d      	b.n	800785c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d114      	bne.n	8007850 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d108      	bne.n	8007850 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007848:	461a      	mov	r2, r3
 800784a:	2100      	movs	r1, #0
 800784c:	f007 fd90 	bl	800f370 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f00c fd7a 	bl	8014350 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	4f54300a 	.word	0x4f54300a
 800786c:	4f54310a 	.word	0x4f54310a

08007870 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	333c      	adds	r3, #60	@ 0x3c
 8007888:	3304      	adds	r3, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4a15      	ldr	r2, [pc, #84]	@ (80078f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d90e      	bls.n	80078c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078bc:	461a      	mov	r2, r3
 80078be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f00c fd31 	bl	801432c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a0a      	ldr	r2, [pc, #40]	@ (80078f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d90c      	bls.n	80078ec <PCD_EP_OutSetupPacket_int+0x7c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	799b      	ldrb	r3, [r3, #6]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d108      	bne.n	80078ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078e4:	461a      	mov	r2, r3
 80078e6:	2101      	movs	r1, #1
 80078e8:	f007 fd42 	bl	800f370 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	4f54300a 	.word	0x4f54300a

080078fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
 8007908:	4613      	mov	r3, r2
 800790a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007912:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d107      	bne.n	800792a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800791a:	883b      	ldrh	r3, [r7, #0]
 800791c:	0419      	lsls	r1, r3, #16
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	430a      	orrs	r2, r1
 8007926:	629a      	str	r2, [r3, #40]	@ 0x28
 8007928:	e028      	b.n	800797c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007930:	0c1b      	lsrs	r3, r3, #16
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	4413      	add	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
 800793c:	e00d      	b.n	800795a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	3340      	adds	r3, #64	@ 0x40
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	0c1b      	lsrs	r3, r3, #16
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4413      	add	r3, r2
 8007952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	3301      	adds	r3, #1
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	7bfa      	ldrb	r2, [r7, #15]
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	3b01      	subs	r3, #1
 8007960:	429a      	cmp	r2, r3
 8007962:	d3ec      	bcc.n	800793e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007964:	883b      	ldrh	r3, [r7, #0]
 8007966:	0418      	lsls	r0, r3, #16
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6819      	ldr	r1, [r3, #0]
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	3b01      	subs	r3, #1
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	4302      	orrs	r2, r0
 8007974:	3340      	adds	r3, #64	@ 0x40
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	887a      	ldrh	r2, [r7, #2]
 800799c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079da:	4b05      	ldr	r3, [pc, #20]	@ (80079f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	10000003 	.word	0x10000003

080079f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a14:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <HAL_PWREx_ConfigSupply+0x70>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d00a      	beq.n	8007a36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a20:	4b16      	ldr	r3, [pc, #88]	@ (8007a7c <HAL_PWREx_ConfigSupply+0x70>)
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d001      	beq.n	8007a32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e01f      	b.n	8007a72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	e01d      	b.n	8007a72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a36:	4b11      	ldr	r3, [pc, #68]	@ (8007a7c <HAL_PWREx_ConfigSupply+0x70>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f023 0207 	bic.w	r2, r3, #7
 8007a3e:	490f      	ldr	r1, [pc, #60]	@ (8007a7c <HAL_PWREx_ConfigSupply+0x70>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a46:	f7fa fe53 	bl	80026f0 <HAL_GetTick>
 8007a4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a4c:	e009      	b.n	8007a62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a4e:	f7fa fe4f 	bl	80026f0 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a5c:	d901      	bls.n	8007a62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e007      	b.n	8007a72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a62:	4b06      	ldr	r3, [pc, #24]	@ (8007a7c <HAL_PWREx_ConfigSupply+0x70>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a6e:	d1ee      	bne.n	8007a4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	58024800 	.word	0x58024800

08007a80 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a04      	ldr	r2, [pc, #16]	@ (8007a9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a8e:	60d3      	str	r3, [r2, #12]
}
 8007a90:	bf00      	nop
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	58024800 	.word	0x58024800

08007aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	@ 0x30
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d102      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f000 bc48 	b.w	8008344 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 8088 	beq.w	8007bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ac2:	4b99      	ldr	r3, [pc, #612]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007acc:	4b96      	ldr	r3, [pc, #600]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad4:	2b10      	cmp	r3, #16
 8007ad6:	d007      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x48>
 8007ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ada:	2b18      	cmp	r3, #24
 8007adc:	d111      	bne.n	8007b02 <HAL_RCC_OscConfig+0x62>
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	f003 0303 	and.w	r3, r3, #3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d10c      	bne.n	8007b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae8:	4b8f      	ldr	r3, [pc, #572]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d06d      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x130>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d169      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f000 bc21 	b.w	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b0a:	d106      	bne.n	8007b1a <HAL_RCC_OscConfig+0x7a>
 8007b0c:	4b86      	ldr	r3, [pc, #536]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a85      	ldr	r2, [pc, #532]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	e02e      	b.n	8007b78 <HAL_RCC_OscConfig+0xd8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x9c>
 8007b22:	4b81      	ldr	r3, [pc, #516]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a80      	ldr	r2, [pc, #512]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a7d      	ldr	r2, [pc, #500]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e01d      	b.n	8007b78 <HAL_RCC_OscConfig+0xd8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b44:	d10c      	bne.n	8007b60 <HAL_RCC_OscConfig+0xc0>
 8007b46:	4b78      	ldr	r3, [pc, #480]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a77      	ldr	r2, [pc, #476]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	4b75      	ldr	r3, [pc, #468]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a74      	ldr	r2, [pc, #464]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	e00b      	b.n	8007b78 <HAL_RCC_OscConfig+0xd8>
 8007b60:	4b71      	ldr	r3, [pc, #452]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a70      	ldr	r2, [pc, #448]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	4b6e      	ldr	r3, [pc, #440]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a6d      	ldr	r2, [pc, #436]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d013      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b80:	f7fa fdb6 	bl	80026f0 <HAL_GetTick>
 8007b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b88:	f7fa fdb2 	bl	80026f0 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b64      	cmp	r3, #100	@ 0x64
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e3d4      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b9a:	4b63      	ldr	r3, [pc, #396]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCC_OscConfig+0xe8>
 8007ba6:	e014      	b.n	8007bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba8:	f7fa fda2 	bl	80026f0 <HAL_GetTick>
 8007bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bb0:	f7fa fd9e 	bl	80026f0 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b64      	cmp	r3, #100	@ 0x64
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e3c0      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bc2:	4b59      	ldr	r3, [pc, #356]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f0      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x110>
 8007bce:	e000      	b.n	8007bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80ca 	beq.w	8007d74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007be0:	4b51      	ldr	r3, [pc, #324]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007be8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bea:	4b4f      	ldr	r3, [pc, #316]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_RCC_OscConfig+0x166>
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	2b18      	cmp	r3, #24
 8007bfa:	d156      	bne.n	8007caa <HAL_RCC_OscConfig+0x20a>
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d151      	bne.n	8007caa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c06:	4b48      	ldr	r3, [pc, #288]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <HAL_RCC_OscConfig+0x17e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e392      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c1e:	4b42      	ldr	r3, [pc, #264]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f023 0219 	bic.w	r2, r3, #25
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	493f      	ldr	r1, [pc, #252]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fa fd5e 	bl	80026f0 <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c38:	f7fa fd5a 	bl	80026f0 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e37c      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c4a:	4b37      	ldr	r3, [pc, #220]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c56:	f7fa fd7b 	bl	8002750 <HAL_GetREVID>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d817      	bhi.n	8007c94 <HAL_RCC_OscConfig+0x1f4>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b40      	cmp	r3, #64	@ 0x40
 8007c6a:	d108      	bne.n	8007c7e <HAL_RCC_OscConfig+0x1de>
 8007c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007c74:	4a2c      	ldr	r2, [pc, #176]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c7c:	e07a      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	031b      	lsls	r3, r3, #12
 8007c8c:	4926      	ldr	r1, [pc, #152]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c92:	e06f      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c94:	4b24      	ldr	r3, [pc, #144]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	061b      	lsls	r3, r3, #24
 8007ca2:	4921      	ldr	r1, [pc, #132]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ca8:	e064      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d047      	beq.n	8007d42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f023 0219 	bic.w	r2, r3, #25
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	491a      	ldr	r1, [pc, #104]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc4:	f7fa fd14 	bl	80026f0 <HAL_GetTick>
 8007cc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ccc:	f7fa fd10 	bl	80026f0 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e332      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cde:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0f0      	beq.n	8007ccc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cea:	f7fa fd31 	bl	8002750 <HAL_GetREVID>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d819      	bhi.n	8007d2c <HAL_RCC_OscConfig+0x28c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b40      	cmp	r3, #64	@ 0x40
 8007cfe:	d108      	bne.n	8007d12 <HAL_RCC_OscConfig+0x272>
 8007d00:	4b09      	ldr	r3, [pc, #36]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007d08:	4a07      	ldr	r2, [pc, #28]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d0e:	6053      	str	r3, [r2, #4]
 8007d10:	e030      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
 8007d12:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	031b      	lsls	r3, r3, #12
 8007d20:	4901      	ldr	r1, [pc, #4]	@ (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	604b      	str	r3, [r1, #4]
 8007d26:	e025      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
 8007d28:	58024400 	.word	0x58024400
 8007d2c:	4b9a      	ldr	r3, [pc, #616]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	061b      	lsls	r3, r3, #24
 8007d3a:	4997      	ldr	r1, [pc, #604]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	604b      	str	r3, [r1, #4]
 8007d40:	e018      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d42:	4b95      	ldr	r3, [pc, #596]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a94      	ldr	r2, [pc, #592]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4e:	f7fa fccf 	bl	80026f0 <HAL_GetTick>
 8007d52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d54:	e008      	b.n	8007d68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d56:	f7fa fccb 	bl	80026f0 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e2ed      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d68:	4b8b      	ldr	r3, [pc, #556]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f0      	bne.n	8007d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80a9 	beq.w	8007ed4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d82:	4b85      	ldr	r3, [pc, #532]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d8c:	4b82      	ldr	r3, [pc, #520]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d007      	beq.n	8007da8 <HAL_RCC_OscConfig+0x308>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b18      	cmp	r3, #24
 8007d9c:	d13a      	bne.n	8007e14 <HAL_RCC_OscConfig+0x374>
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d135      	bne.n	8007e14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007da8:	4b7b      	ldr	r3, [pc, #492]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x320>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b80      	cmp	r3, #128	@ 0x80
 8007dba:	d001      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e2c1      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dc0:	f7fa fcc6 	bl	8002750 <HAL_GetREVID>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d817      	bhi.n	8007dfe <HAL_RCC_OscConfig+0x35e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d108      	bne.n	8007de8 <HAL_RCC_OscConfig+0x348>
 8007dd6:	4b70      	ldr	r3, [pc, #448]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007dde:	4a6e      	ldr	r2, [pc, #440]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007de0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007de4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007de6:	e075      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007de8:	4b6b      	ldr	r3, [pc, #428]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	069b      	lsls	r3, r3, #26
 8007df6:	4968      	ldr	r1, [pc, #416]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dfc:	e06a      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dfe:	4b66      	ldr	r3, [pc, #408]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	061b      	lsls	r3, r3, #24
 8007e0c:	4962      	ldr	r1, [pc, #392]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e12:	e05f      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d042      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a5d      	ldr	r2, [pc, #372]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e28:	f7fa fc62 	bl	80026f0 <HAL_GetTick>
 8007e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e30:	f7fa fc5e 	bl	80026f0 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e280      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e42:	4b55      	ldr	r3, [pc, #340]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e4e:	f7fa fc7f 	bl	8002750 <HAL_GetREVID>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d817      	bhi.n	8007e8c <HAL_RCC_OscConfig+0x3ec>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d108      	bne.n	8007e76 <HAL_RCC_OscConfig+0x3d6>
 8007e64:	4b4c      	ldr	r3, [pc, #304]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e72:	6053      	str	r3, [r2, #4]
 8007e74:	e02e      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
 8007e76:	4b48      	ldr	r3, [pc, #288]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	069b      	lsls	r3, r3, #26
 8007e84:	4944      	ldr	r1, [pc, #272]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	604b      	str	r3, [r1, #4]
 8007e8a:	e023      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
 8007e8c:	4b42      	ldr	r3, [pc, #264]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	061b      	lsls	r3, r3, #24
 8007e9a:	493f      	ldr	r1, [pc, #252]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60cb      	str	r3, [r1, #12]
 8007ea0:	e018      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007ea8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eae:	f7fa fc1f 	bl	80026f0 <HAL_GetTick>
 8007eb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007eb4:	e008      	b.n	8007ec8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007eb6:	f7fa fc1b 	bl	80026f0 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e23d      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ec8:	4b33      	ldr	r3, [pc, #204]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f0      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d036      	beq.n	8007f4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d019      	beq.n	8007f1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eec:	4a2a      	ldr	r2, [pc, #168]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef4:	f7fa fbfc 	bl	80026f0 <HAL_GetTick>
 8007ef8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007efa:	e008      	b.n	8007f0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007efc:	f7fa fbf8 	bl	80026f0 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e21a      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f0e:	4b22      	ldr	r3, [pc, #136]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f0      	beq.n	8007efc <HAL_RCC_OscConfig+0x45c>
 8007f1a:	e018      	b.n	8007f4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f20:	4a1d      	ldr	r2, [pc, #116]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f28:	f7fa fbe2 	bl	80026f0 <HAL_GetTick>
 8007f2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f30:	f7fa fbde 	bl	80026f0 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e200      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f42:	4b15      	ldr	r3, [pc, #84]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d039      	beq.n	8007fce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01c      	beq.n	8007f9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f62:	4b0d      	ldr	r3, [pc, #52]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a0c      	ldr	r2, [pc, #48]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f6e:	f7fa fbbf 	bl	80026f0 <HAL_GetTick>
 8007f72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f74:	e008      	b.n	8007f88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f76:	f7fa fbbb 	bl	80026f0 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e1dd      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f88:	4b03      	ldr	r3, [pc, #12]	@ (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0f0      	beq.n	8007f76 <HAL_RCC_OscConfig+0x4d6>
 8007f94:	e01b      	b.n	8007fce <HAL_RCC_OscConfig+0x52e>
 8007f96:	bf00      	nop
 8007f98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f9c:	4b9b      	ldr	r3, [pc, #620]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a9a      	ldr	r2, [pc, #616]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8007fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fa8:	f7fa fba2 	bl	80026f0 <HAL_GetTick>
 8007fac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fb0:	f7fa fb9e 	bl	80026f0 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e1c0      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fc2:	4b92      	ldr	r3, [pc, #584]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1f0      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8081 	beq.w	80080de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fdc:	4b8c      	ldr	r3, [pc, #560]	@ (8008210 <HAL_RCC_OscConfig+0x770>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a8b      	ldr	r2, [pc, #556]	@ (8008210 <HAL_RCC_OscConfig+0x770>)
 8007fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fe8:	f7fa fb82 	bl	80026f0 <HAL_GetTick>
 8007fec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff0:	f7fa fb7e 	bl	80026f0 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b64      	cmp	r3, #100	@ 0x64
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e1a0      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008002:	4b83      	ldr	r3, [pc, #524]	@ (8008210 <HAL_RCC_OscConfig+0x770>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d106      	bne.n	8008024 <HAL_RCC_OscConfig+0x584>
 8008016:	4b7d      	ldr	r3, [pc, #500]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801a:	4a7c      	ldr	r2, [pc, #496]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800801c:	f043 0301 	orr.w	r3, r3, #1
 8008020:	6713      	str	r3, [r2, #112]	@ 0x70
 8008022:	e02d      	b.n	8008080 <HAL_RCC_OscConfig+0x5e0>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10c      	bne.n	8008046 <HAL_RCC_OscConfig+0x5a6>
 800802c:	4b77      	ldr	r3, [pc, #476]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008030:	4a76      	ldr	r2, [pc, #472]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008032:	f023 0301 	bic.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	@ 0x70
 8008038:	4b74      	ldr	r3, [pc, #464]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803c:	4a73      	ldr	r2, [pc, #460]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800803e:	f023 0304 	bic.w	r3, r3, #4
 8008042:	6713      	str	r3, [r2, #112]	@ 0x70
 8008044:	e01c      	b.n	8008080 <HAL_RCC_OscConfig+0x5e0>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b05      	cmp	r3, #5
 800804c:	d10c      	bne.n	8008068 <HAL_RCC_OscConfig+0x5c8>
 800804e:	4b6f      	ldr	r3, [pc, #444]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008052:	4a6e      	ldr	r2, [pc, #440]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008054:	f043 0304 	orr.w	r3, r3, #4
 8008058:	6713      	str	r3, [r2, #112]	@ 0x70
 800805a:	4b6c      	ldr	r3, [pc, #432]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805e:	4a6b      	ldr	r2, [pc, #428]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	6713      	str	r3, [r2, #112]	@ 0x70
 8008066:	e00b      	b.n	8008080 <HAL_RCC_OscConfig+0x5e0>
 8008068:	4b68      	ldr	r3, [pc, #416]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800806a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806c:	4a67      	ldr	r2, [pc, #412]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800806e:	f023 0301 	bic.w	r3, r3, #1
 8008072:	6713      	str	r3, [r2, #112]	@ 0x70
 8008074:	4b65      	ldr	r3, [pc, #404]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008078:	4a64      	ldr	r2, [pc, #400]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800807a:	f023 0304 	bic.w	r3, r3, #4
 800807e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d015      	beq.n	80080b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008088:	f7fa fb32 	bl	80026f0 <HAL_GetTick>
 800808c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808e:	e00a      	b.n	80080a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008090:	f7fa fb2e 	bl	80026f0 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800809e:	4293      	cmp	r3, r2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e14e      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080a6:	4b59      	ldr	r3, [pc, #356]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80080a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0ee      	beq.n	8008090 <HAL_RCC_OscConfig+0x5f0>
 80080b2:	e014      	b.n	80080de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b4:	f7fa fb1c 	bl	80026f0 <HAL_GetTick>
 80080b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080ba:	e00a      	b.n	80080d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080bc:	f7fa fb18 	bl	80026f0 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e138      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080d2:	4b4e      	ldr	r3, [pc, #312]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1ee      	bne.n	80080bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 812d 	beq.w	8008342 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80080e8:	4b48      	ldr	r3, [pc, #288]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080f0:	2b18      	cmp	r3, #24
 80080f2:	f000 80bd 	beq.w	8008270 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	f040 809e 	bne.w	800823c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008100:	4b42      	ldr	r3, [pc, #264]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a41      	ldr	r2, [pc, #260]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800810a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fa faf0 	bl	80026f0 <HAL_GetTick>
 8008110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008114:	f7fa faec 	bl	80026f0 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e10e      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008126:	4b39      	ldr	r3, [pc, #228]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f0      	bne.n	8008114 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008132:	4b36      	ldr	r3, [pc, #216]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008136:	4b37      	ldr	r3, [pc, #220]	@ (8008214 <HAL_RCC_OscConfig+0x774>)
 8008138:	4013      	ands	r3, r2
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008142:	0112      	lsls	r2, r2, #4
 8008144:	430a      	orrs	r2, r1
 8008146:	4931      	ldr	r1, [pc, #196]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008148:	4313      	orrs	r3, r2
 800814a:	628b      	str	r3, [r1, #40]	@ 0x28
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008150:	3b01      	subs	r3, #1
 8008152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800815a:	3b01      	subs	r3, #1
 800815c:	025b      	lsls	r3, r3, #9
 800815e:	b29b      	uxth	r3, r3
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008166:	3b01      	subs	r3, #1
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008174:	3b01      	subs	r3, #1
 8008176:	061b      	lsls	r3, r3, #24
 8008178:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800817c:	4923      	ldr	r1, [pc, #140]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800817e:	4313      	orrs	r3, r2
 8008180:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008182:	4b22      	ldr	r3, [pc, #136]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	4a21      	ldr	r2, [pc, #132]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800818e:	4b1f      	ldr	r3, [pc, #124]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 8008190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008192:	4b21      	ldr	r3, [pc, #132]	@ (8008218 <HAL_RCC_OscConfig+0x778>)
 8008194:	4013      	ands	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800819a:	00d2      	lsls	r2, r2, #3
 800819c:	491b      	ldr	r1, [pc, #108]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081a2:	4b1a      	ldr	r3, [pc, #104]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	f023 020c 	bic.w	r2, r3, #12
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ae:	4917      	ldr	r1, [pc, #92]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081b4:	4b15      	ldr	r3, [pc, #84]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b8:	f023 0202 	bic.w	r2, r3, #2
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c0:	4912      	ldr	r1, [pc, #72]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081c6:	4b11      	ldr	r3, [pc, #68]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ca:	4a10      	ldr	r2, [pc, #64]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d2:	4b0e      	ldr	r3, [pc, #56]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a0d      	ldr	r2, [pc, #52]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081de:	4b0b      	ldr	r3, [pc, #44]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	4a0a      	ldr	r2, [pc, #40]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80081ea:	4b08      	ldr	r3, [pc, #32]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ee:	4a07      	ldr	r2, [pc, #28]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081f0:	f043 0301 	orr.w	r3, r3, #1
 80081f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081f6:	4b05      	ldr	r3, [pc, #20]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a04      	ldr	r2, [pc, #16]	@ (800820c <HAL_RCC_OscConfig+0x76c>)
 80081fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008202:	f7fa fa75 	bl	80026f0 <HAL_GetTick>
 8008206:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008208:	e011      	b.n	800822e <HAL_RCC_OscConfig+0x78e>
 800820a:	bf00      	nop
 800820c:	58024400 	.word	0x58024400
 8008210:	58024800 	.word	0x58024800
 8008214:	fffffc0c 	.word	0xfffffc0c
 8008218:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800821c:	f7fa fa68 	bl	80026f0 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e08a      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800822e:	4b47      	ldr	r3, [pc, #284]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCC_OscConfig+0x77c>
 800823a:	e082      	b.n	8008342 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800823c:	4b43      	ldr	r3, [pc, #268]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a42      	ldr	r2, [pc, #264]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008248:	f7fa fa52 	bl	80026f0 <HAL_GetTick>
 800824c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008250:	f7fa fa4e 	bl	80026f0 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e070      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008262:	4b3a      	ldr	r3, [pc, #232]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f0      	bne.n	8008250 <HAL_RCC_OscConfig+0x7b0>
 800826e:	e068      	b.n	8008342 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008270:	4b36      	ldr	r3, [pc, #216]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008274:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008276:	4b35      	ldr	r3, [pc, #212]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008280:	2b01      	cmp	r3, #1
 8008282:	d031      	beq.n	80082e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f003 0203 	and.w	r2, r3, #3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800828e:	429a      	cmp	r2, r3
 8008290:	d12a      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	091b      	lsrs	r3, r3, #4
 8008296:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800829e:	429a      	cmp	r2, r3
 80082a0:	d122      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d11a      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	0a5b      	lsrs	r3, r3, #9
 80082b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d111      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0c1b      	lsrs	r3, r3, #16
 80082c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d108      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	0e1b      	lsrs	r3, r3, #24
 80082da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d001      	beq.n	80082ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e02b      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80082ec:	4b17      	ldr	r3, [pc, #92]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 80082ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f0:	08db      	lsrs	r3, r3, #3
 80082f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d01f      	beq.n	8008342 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008302:	4b12      	ldr	r3, [pc, #72]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008306:	4a11      	ldr	r2, [pc, #68]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800830e:	f7fa f9ef 	bl	80026f0 <HAL_GetTick>
 8008312:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008314:	bf00      	nop
 8008316:	f7fa f9eb 	bl	80026f0 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831e:	4293      	cmp	r3, r2
 8008320:	d0f9      	beq.n	8008316 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008322:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008326:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <HAL_RCC_OscConfig+0x8b0>)
 8008328:	4013      	ands	r3, r2
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800832e:	00d2      	lsls	r2, r2, #3
 8008330:	4906      	ldr	r1, [pc, #24]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008332:	4313      	orrs	r3, r2
 8008334:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008336:	4b05      	ldr	r3, [pc, #20]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833a:	4a04      	ldr	r2, [pc, #16]	@ (800834c <HAL_RCC_OscConfig+0x8ac>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3730      	adds	r7, #48	@ 0x30
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	58024400 	.word	0x58024400
 8008350:	ffff0007 	.word	0xffff0007

08008354 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e19c      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008368:	4b8a      	ldr	r3, [pc, #552]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d910      	bls.n	8008398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008376:	4b87      	ldr	r3, [pc, #540]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 020f 	bic.w	r2, r3, #15
 800837e:	4985      	ldr	r1, [pc, #532]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008386:	4b83      	ldr	r3, [pc, #524]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d001      	beq.n	8008398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e184      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	4b7b      	ldr	r3, [pc, #492]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d908      	bls.n	80083c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083b4:	4b78      	ldr	r3, [pc, #480]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	4975      	ldr	r1, [pc, #468]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d010      	beq.n	80083f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	4b70      	ldr	r3, [pc, #448]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083de:	429a      	cmp	r2, r3
 80083e0:	d908      	bls.n	80083f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083e2:	4b6d      	ldr	r3, [pc, #436]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	496a      	ldr	r1, [pc, #424]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d010      	beq.n	8008422 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	4b64      	ldr	r3, [pc, #400]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800840c:	429a      	cmp	r2, r3
 800840e:	d908      	bls.n	8008422 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008410:	4b61      	ldr	r3, [pc, #388]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	495e      	ldr	r1, [pc, #376]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 800841e:	4313      	orrs	r3, r2
 8008420:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d010      	beq.n	8008450 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69da      	ldr	r2, [r3, #28]
 8008432:	4b59      	ldr	r3, [pc, #356]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800843a:	429a      	cmp	r2, r3
 800843c:	d908      	bls.n	8008450 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800843e:	4b56      	ldr	r3, [pc, #344]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	4953      	ldr	r1, [pc, #332]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 800844c:	4313      	orrs	r3, r2
 800844e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	4b4d      	ldr	r3, [pc, #308]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	429a      	cmp	r2, r3
 800846a:	d908      	bls.n	800847e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800846c:	4b4a      	ldr	r3, [pc, #296]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f023 020f 	bic.w	r2, r3, #15
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4947      	ldr	r1, [pc, #284]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 800847a:	4313      	orrs	r3, r2
 800847c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d055      	beq.n	8008536 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800848a:	4b43      	ldr	r3, [pc, #268]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	4940      	ldr	r1, [pc, #256]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008498:	4313      	orrs	r3, r2
 800849a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d107      	bne.n	80084b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084a4:	4b3c      	ldr	r3, [pc, #240]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d121      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0f6      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d107      	bne.n	80084cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084bc:	4b36      	ldr	r3, [pc, #216]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d115      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0ea      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084d4:	4b30      	ldr	r3, [pc, #192]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0de      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e4:	4b2c      	ldr	r3, [pc, #176]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0d6      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084f4:	4b28      	ldr	r3, [pc, #160]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f023 0207 	bic.w	r2, r3, #7
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4925      	ldr	r1, [pc, #148]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008502:	4313      	orrs	r3, r2
 8008504:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008506:	f7fa f8f3 	bl	80026f0 <HAL_GetTick>
 800850a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800850c:	e00a      	b.n	8008524 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800850e:	f7fa f8ef 	bl	80026f0 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800851c:	4293      	cmp	r3, r2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e0be      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008524:	4b1c      	ldr	r3, [pc, #112]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	429a      	cmp	r2, r3
 8008534:	d1eb      	bne.n	800850e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	4b14      	ldr	r3, [pc, #80]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	429a      	cmp	r2, r3
 8008550:	d208      	bcs.n	8008564 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008552:	4b11      	ldr	r3, [pc, #68]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f023 020f 	bic.w	r2, r3, #15
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	490e      	ldr	r1, [pc, #56]	@ (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008560:	4313      	orrs	r3, r2
 8008562:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d214      	bcs.n	800859c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008572:	4b08      	ldr	r3, [pc, #32]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f023 020f 	bic.w	r2, r3, #15
 800857a:	4906      	ldr	r1, [pc, #24]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	4313      	orrs	r3, r2
 8008580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008582:	4b04      	ldr	r3, [pc, #16]	@ (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d005      	beq.n	800859c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e086      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
 8008594:	52002000 	.word	0x52002000
 8008598:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d010      	beq.n	80085ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	4b3f      	ldr	r3, [pc, #252]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d208      	bcs.n	80085ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085b8:	4b3c      	ldr	r3, [pc, #240]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	4939      	ldr	r1, [pc, #228]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d010      	beq.n	80085f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	4b34      	ldr	r3, [pc, #208]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d208      	bcs.n	80085f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085e6:	4b31      	ldr	r3, [pc, #196]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	492e      	ldr	r1, [pc, #184]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	4b28      	ldr	r3, [pc, #160]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008610:	429a      	cmp	r2, r3
 8008612:	d208      	bcs.n	8008626 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008614:	4b25      	ldr	r3, [pc, #148]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	4922      	ldr	r1, [pc, #136]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008622:	4313      	orrs	r3, r2
 8008624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69da      	ldr	r2, [r3, #28]
 8008636:	4b1d      	ldr	r3, [pc, #116]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800863e:	429a      	cmp	r2, r3
 8008640:	d208      	bcs.n	8008654 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008642:	4b1a      	ldr	r3, [pc, #104]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	4917      	ldr	r1, [pc, #92]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008650:	4313      	orrs	r3, r2
 8008652:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008654:	f000 f834 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8008658:	4602      	mov	r2, r0
 800865a:	4b14      	ldr	r3, [pc, #80]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	4912      	ldr	r1, [pc, #72]	@ (80086b0 <HAL_RCC_ClockConfig+0x35c>)
 8008666:	5ccb      	ldrb	r3, [r1, r3]
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008672:	4b0e      	ldr	r3, [pc, #56]	@ (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	4a0d      	ldr	r2, [pc, #52]	@ (80086b0 <HAL_RCC_ClockConfig+0x35c>)
 800867c:	5cd3      	ldrb	r3, [r2, r3]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	4a0a      	ldr	r2, [pc, #40]	@ (80086b4 <HAL_RCC_ClockConfig+0x360>)
 800868a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800868c:	4a0a      	ldr	r2, [pc, #40]	@ (80086b8 <HAL_RCC_ClockConfig+0x364>)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008692:	4b0a      	ldr	r3, [pc, #40]	@ (80086bc <HAL_RCC_ClockConfig+0x368>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f9 fb0e 	bl	8001cb8 <HAL_InitTick>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	58024400 	.word	0x58024400
 80086b0:	080158c0 	.word	0x080158c0
 80086b4:	24000004 	.word	0x24000004
 80086b8:	24000000 	.word	0x24000000
 80086bc:	24000024 	.word	0x24000024

080086c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b089      	sub	sp, #36	@ 0x24
 80086c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086c6:	4bb3      	ldr	r3, [pc, #716]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086ce:	2b18      	cmp	r3, #24
 80086d0:	f200 8155 	bhi.w	800897e <HAL_RCC_GetSysClockFreq+0x2be>
 80086d4:	a201      	add	r2, pc, #4	@ (adr r2, 80086dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	08008741 	.word	0x08008741
 80086e0:	0800897f 	.word	0x0800897f
 80086e4:	0800897f 	.word	0x0800897f
 80086e8:	0800897f 	.word	0x0800897f
 80086ec:	0800897f 	.word	0x0800897f
 80086f0:	0800897f 	.word	0x0800897f
 80086f4:	0800897f 	.word	0x0800897f
 80086f8:	0800897f 	.word	0x0800897f
 80086fc:	08008767 	.word	0x08008767
 8008700:	0800897f 	.word	0x0800897f
 8008704:	0800897f 	.word	0x0800897f
 8008708:	0800897f 	.word	0x0800897f
 800870c:	0800897f 	.word	0x0800897f
 8008710:	0800897f 	.word	0x0800897f
 8008714:	0800897f 	.word	0x0800897f
 8008718:	0800897f 	.word	0x0800897f
 800871c:	0800876d 	.word	0x0800876d
 8008720:	0800897f 	.word	0x0800897f
 8008724:	0800897f 	.word	0x0800897f
 8008728:	0800897f 	.word	0x0800897f
 800872c:	0800897f 	.word	0x0800897f
 8008730:	0800897f 	.word	0x0800897f
 8008734:	0800897f 	.word	0x0800897f
 8008738:	0800897f 	.word	0x0800897f
 800873c:	08008773 	.word	0x08008773
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008740:	4b94      	ldr	r3, [pc, #592]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d009      	beq.n	8008760 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800874c:	4b91      	ldr	r3, [pc, #580]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	4a90      	ldr	r2, [pc, #576]	@ (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
 800875c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800875e:	e111      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008760:	4b8d      	ldr	r3, [pc, #564]	@ (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008762:	61bb      	str	r3, [r7, #24]
      break;
 8008764:	e10e      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008766:	4b8d      	ldr	r3, [pc, #564]	@ (800899c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008768:	61bb      	str	r3, [r7, #24]
      break;
 800876a:	e10b      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800876c:	4b8c      	ldr	r3, [pc, #560]	@ (80089a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800876e:	61bb      	str	r3, [r7, #24]
      break;
 8008770:	e108      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008772:	4b88      	ldr	r3, [pc, #544]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800877c:	4b85      	ldr	r3, [pc, #532]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800877e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008780:	091b      	lsrs	r3, r3, #4
 8008782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008786:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008788:	4b82      	ldr	r3, [pc, #520]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008792:	4b80      	ldr	r3, [pc, #512]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008796:	08db      	lsrs	r3, r3, #3
 8008798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 80e1 	beq.w	8008978 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	f000 8083 	beq.w	80088c4 <HAL_RCC_GetSysClockFreq+0x204>
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	f200 80a1 	bhi.w	8008908 <HAL_RCC_GetSysClockFreq+0x248>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_RCC_GetSysClockFreq+0x114>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d056      	beq.n	8008880 <HAL_RCC_GetSysClockFreq+0x1c0>
 80087d2:	e099      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02d      	beq.n	800883c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	4a6b      	ldr	r2, [pc, #428]	@ (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	ee07 3a90 	vmov	s15, r3
 80087f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b62      	ldr	r3, [pc, #392]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800883a:	e087      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80089a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b51      	ldr	r3, [pc, #324]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008862:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800887e:	e065      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80089ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800888e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008892:	4b40      	ldr	r3, [pc, #256]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088c2:	e043      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80089b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80088d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008906:	e021      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80089ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891a:	4b1e      	ldr	r3, [pc, #120]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892a:	ed97 6a02 	vldr	s12, [r7, #8]
 800892e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800893e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800894a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800894c:	4b11      	ldr	r3, [pc, #68]	@ (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008950:	0a5b      	lsrs	r3, r3, #9
 8008952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008956:	3301      	adds	r3, #1
 8008958:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008964:	edd7 6a07 	vldr	s13, [r7, #28]
 8008968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800896c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008970:	ee17 3a90 	vmov	r3, s15
 8008974:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008976:	e005      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	61bb      	str	r3, [r7, #24]
      break;
 800897c:	e002      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800897e:	4b07      	ldr	r3, [pc, #28]	@ (800899c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008980:	61bb      	str	r3, [r7, #24]
      break;
 8008982:	bf00      	nop
  }

  return sysclockfreq;
 8008984:	69bb      	ldr	r3, [r7, #24]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3724      	adds	r7, #36	@ 0x24
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	58024400 	.word	0x58024400
 8008998:	03d09000 	.word	0x03d09000
 800899c:	003d0900 	.word	0x003d0900
 80089a0:	007a1200 	.word	0x007a1200
 80089a4:	46000000 	.word	0x46000000
 80089a8:	4c742400 	.word	0x4c742400
 80089ac:	4a742400 	.word	0x4a742400
 80089b0:	4af42400 	.word	0x4af42400

080089b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089ba:	f7ff fe81 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 80089be:	4602      	mov	r2, r0
 80089c0:	4b10      	ldr	r3, [pc, #64]	@ (8008a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	490f      	ldr	r1, [pc, #60]	@ (8008a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80089cc:	5ccb      	ldrb	r3, [r1, r3]
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	fa22 f303 	lsr.w	r3, r2, r3
 80089d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	4a09      	ldr	r2, [pc, #36]	@ (8008a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80089e2:	5cd3      	ldrb	r3, [r2, r3]
 80089e4:	f003 031f 	and.w	r3, r3, #31
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	4a07      	ldr	r2, [pc, #28]	@ (8008a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80089f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089f2:	4a07      	ldr	r2, [pc, #28]	@ (8008a10 <HAL_RCC_GetHCLKFreq+0x5c>)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089f8:	4b04      	ldr	r3, [pc, #16]	@ (8008a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80089fa:	681b      	ldr	r3, [r3, #0]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	58024400 	.word	0x58024400
 8008a08:	080158c0 	.word	0x080158c0
 8008a0c:	24000004 	.word	0x24000004
 8008a10:	24000000 	.word	0x24000000

08008a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a18:	f7ff ffcc 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	4b06      	ldr	r3, [pc, #24]	@ (8008a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	4904      	ldr	r1, [pc, #16]	@ (8008a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a2a:	5ccb      	ldrb	r3, [r1, r3]
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	080158c0 	.word	0x080158c0

08008a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a44:	f7ff ffb6 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	0a1b      	lsrs	r3, r3, #8
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	4904      	ldr	r1, [pc, #16]	@ (8008a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a56:	5ccb      	ldrb	r3, [r1, r3]
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	58024400 	.word	0x58024400
 8008a68:	080158c0 	.word	0x080158c0

08008a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	223f      	movs	r2, #63	@ 0x3f
 8008a7a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	f003 0207 	and.w	r2, r3, #7
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008a88:	4b17      	ldr	r3, [pc, #92]	@ (8008ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008a94:	4b14      	ldr	r3, [pc, #80]	@ (8008ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	f003 020f 	and.w	r2, r3, #15
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008aa0:	4b11      	ldr	r3, [pc, #68]	@ (8008ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008aac:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008ac4:	4b08      	ldr	r3, [pc, #32]	@ (8008ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ad0:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <HAL_RCC_GetClockConfig+0x80>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 020f 	and.w	r2, r3, #15
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	601a      	str	r2, [r3, #0]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	52002000 	.word	0x52002000

08008af0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af4:	b0ca      	sub	sp, #296	@ 0x128
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008afc:	2300      	movs	r3, #0
 8008afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b02:	2300      	movs	r3, #0
 8008b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008b14:	2500      	movs	r5, #0
 8008b16:	ea54 0305 	orrs.w	r3, r4, r5
 8008b1a:	d049      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b26:	d02f      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008b28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b2c:	d828      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b32:	d01a      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008b34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b38:	d822      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b42:	d007      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b44:	e01c      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b46:	4bb8      	ldr	r3, [pc, #736]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	4ab7      	ldr	r2, [pc, #732]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b52:	e01a      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b58:	3308      	adds	r3, #8
 8008b5a:	2102      	movs	r1, #2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f002 fb61 	bl	800b224 <RCCEx_PLL2_Config>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b68:	e00f      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	3328      	adds	r3, #40	@ 0x28
 8008b70:	2102      	movs	r1, #2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 fc08 	bl	800b388 <RCCEx_PLL3_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b7e:	e004      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b86:	e000      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10a      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b92:	4ba5      	ldr	r3, [pc, #660]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ba0:	4aa1      	ldr	r2, [pc, #644]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ba6:	e003      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008bbc:	f04f 0900 	mov.w	r9, #0
 8008bc0:	ea58 0309 	orrs.w	r3, r8, r9
 8008bc4:	d047      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d82a      	bhi.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008bed 	.word	0x08008bed
 8008bdc:	08008bfb 	.word	0x08008bfb
 8008be0:	08008c11 	.word	0x08008c11
 8008be4:	08008c2f 	.word	0x08008c2f
 8008be8:	08008c2f 	.word	0x08008c2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bec:	4b8e      	ldr	r3, [pc, #568]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	4a8d      	ldr	r2, [pc, #564]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bf8:	e01a      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfe:	3308      	adds	r3, #8
 8008c00:	2100      	movs	r1, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f002 fb0e 	bl	800b224 <RCCEx_PLL2_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c0e:	e00f      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c14:	3328      	adds	r3, #40	@ 0x28
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f002 fbb5 	bl	800b388 <RCCEx_PLL3_Config>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c24:	e004      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c2c:	e000      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c38:	4b7b      	ldr	r3, [pc, #492]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c3c:	f023 0107 	bic.w	r1, r3, #7
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c46:	4a78      	ldr	r2, [pc, #480]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c4c:	e003      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008c62:	f04f 0b00 	mov.w	fp, #0
 8008c66:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c6a:	d04c      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c76:	d030      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7c:	d829      	bhi.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c80:	d02d      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c84:	d825      	bhi.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c86:	2b80      	cmp	r3, #128	@ 0x80
 8008c88:	d018      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008c8a:	2b80      	cmp	r3, #128	@ 0x80
 8008c8c:	d821      	bhi.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008c92:	2b40      	cmp	r3, #64	@ 0x40
 8008c94:	d007      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008c96:	e01c      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c98:	4b63      	ldr	r3, [pc, #396]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	4a62      	ldr	r2, [pc, #392]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ca4:	e01c      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008caa:	3308      	adds	r3, #8
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f002 fab8 	bl	800b224 <RCCEx_PLL2_Config>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cba:	e011      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc0:	3328      	adds	r3, #40	@ 0x28
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f002 fb5f 	bl	800b388 <RCCEx_PLL3_Config>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cd0:	e006      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cd8:	e002      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cda:	bf00      	nop
 8008cdc:	e000      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cf6:	4a4c      	ldr	r2, [pc, #304]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cfc:	e003      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008d12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008d16:	2300      	movs	r3, #0
 8008d18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008d1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d053      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008d2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d32:	d035      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008d34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d38:	d82e      	bhi.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d3e:	d031      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008d40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d44:	d828      	bhi.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d4a:	d01a      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d50:	d822      	bhi.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d5a:	d007      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d5c:	e01c      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d5e:	4b32      	ldr	r3, [pc, #200]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d62:	4a31      	ldr	r2, [pc, #196]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d6a:	e01c      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d70:	3308      	adds	r3, #8
 8008d72:	2100      	movs	r1, #0
 8008d74:	4618      	mov	r0, r3
 8008d76:	f002 fa55 	bl	800b224 <RCCEx_PLL2_Config>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d80:	e011      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d86:	3328      	adds	r3, #40	@ 0x28
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 fafc 	bl	800b388 <RCCEx_PLL3_Config>
 8008d90:	4603      	mov	r3, r0
 8008d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d96:	e006      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d9e:	e002      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008da0:	bf00      	nop
 8008da2:	e000      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dae:	4b1e      	ldr	r3, [pc, #120]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dc4:	e003      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008dda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008de4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008de8:	460b      	mov	r3, r1
 8008dea:	4313      	orrs	r3, r2
 8008dec:	d056      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008df6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dfa:	d038      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008dfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e00:	d831      	bhi.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e06:	d034      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008e08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e0c:	d82b      	bhi.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e12:	d01d      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008e14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e18:	d825      	bhi.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d006      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008e1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e22:	d00a      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e24:	e01f      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e26:	bf00      	nop
 8008e28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e2c:	4ba2      	ldr	r3, [pc, #648]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e30:	4aa1      	ldr	r2, [pc, #644]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e38:	e01c      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3e:	3308      	adds	r3, #8
 8008e40:	2100      	movs	r1, #0
 8008e42:	4618      	mov	r0, r3
 8008e44:	f002 f9ee 	bl	800b224 <RCCEx_PLL2_Config>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e4e:	e011      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	3328      	adds	r3, #40	@ 0x28
 8008e56:	2100      	movs	r1, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f002 fa95 	bl	800b388 <RCCEx_PLL3_Config>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e64:	e006      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e6c:	e002      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e6e:	bf00      	nop
 8008e70:	e000      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10b      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e7c:	4b8e      	ldr	r3, [pc, #568]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e80:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008e8c:	4a8a      	ldr	r2, [pc, #552]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e92:	e003      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008eb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	d03a      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ec2:	2b30      	cmp	r3, #48	@ 0x30
 8008ec4:	d01f      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ec6:	2b30      	cmp	r3, #48	@ 0x30
 8008ec8:	d819      	bhi.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008eca:	2b20      	cmp	r3, #32
 8008ecc:	d00c      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	d815      	bhi.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d019      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008ed6:	2b10      	cmp	r3, #16
 8008ed8:	d111      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eda:	4b77      	ldr	r3, [pc, #476]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	4a76      	ldr	r2, [pc, #472]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ee6:	e011      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eec:	3308      	adds	r3, #8
 8008eee:	2102      	movs	r1, #2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f002 f997 	bl	800b224 <RCCEx_PLL2_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008efc:	e006      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f04:	e002      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f06:	bf00      	nop
 8008f08:	e000      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f14:	4b68      	ldr	r3, [pc, #416]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f22:	4a65      	ldr	r2, [pc, #404]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f24:	430b      	orrs	r3, r1
 8008f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f28:	e003      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008f3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f42:	2300      	movs	r3, #0
 8008f44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	d051      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f5c:	d035      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f62:	d82e      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f68:	d031      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f6e:	d828      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f74:	d01a      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f7a:	d822      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f84:	d007      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008f86:	e01c      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f88:	4b4b      	ldr	r3, [pc, #300]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f94:	e01c      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f002 f940 	bl	800b224 <RCCEx_PLL2_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008faa:	e011      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb0:	3328      	adds	r3, #40	@ 0x28
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f002 f9e7 	bl	800b388 <RCCEx_PLL3_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fc0:	e006      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fc8:	e002      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008fca:	bf00      	nop
 8008fcc:	e000      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fd8:	4b37      	ldr	r3, [pc, #220]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fe6:	4a34      	ldr	r2, [pc, #208]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fec:	e003      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800900c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009010:	460b      	mov	r3, r1
 8009012:	4313      	orrs	r3, r2
 8009014:	d056      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800901c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009020:	d033      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009022:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009026:	d82c      	bhi.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800902c:	d02f      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800902e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009032:	d826      	bhi.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009038:	d02b      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800903a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800903e:	d820      	bhi.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009044:	d012      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800904a:	d81a      	bhi.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d022      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009054:	d115      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905a:	3308      	adds	r3, #8
 800905c:	2101      	movs	r1, #1
 800905e:	4618      	mov	r0, r3
 8009060:	f002 f8e0 	bl	800b224 <RCCEx_PLL2_Config>
 8009064:	4603      	mov	r3, r0
 8009066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800906a:	e015      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009070:	3328      	adds	r3, #40	@ 0x28
 8009072:	2101      	movs	r1, #1
 8009074:	4618      	mov	r0, r3
 8009076:	f002 f987 	bl	800b388 <RCCEx_PLL3_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009080:	e00a      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009088:	e006      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800908a:	bf00      	nop
 800908c:	e004      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800908e:	bf00      	nop
 8009090:	e002      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009092:	bf00      	nop
 8009094:	e000      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10d      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090a0:	4b05      	ldr	r3, [pc, #20]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ae:	4a02      	ldr	r2, [pc, #8]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090b0:	430b      	orrs	r3, r1
 80090b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80090b4:	e006      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80090b6:	bf00      	nop
 80090b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80090d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090d4:	2300      	movs	r3, #0
 80090d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80090de:	460b      	mov	r3, r1
 80090e0:	4313      	orrs	r3, r2
 80090e2:	d055      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80090e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090f0:	d033      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80090f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090f6:	d82c      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090fc:	d02f      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009102:	d826      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009108:	d02b      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800910a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800910e:	d820      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009114:	d012      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800911a:	d81a      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d022      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009124:	d115      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912a:	3308      	adds	r3, #8
 800912c:	2101      	movs	r1, #1
 800912e:	4618      	mov	r0, r3
 8009130:	f002 f878 	bl	800b224 <RCCEx_PLL2_Config>
 8009134:	4603      	mov	r3, r0
 8009136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800913a:	e015      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009140:	3328      	adds	r3, #40	@ 0x28
 8009142:	2101      	movs	r1, #1
 8009144:	4618      	mov	r0, r3
 8009146:	f002 f91f 	bl	800b388 <RCCEx_PLL3_Config>
 800914a:	4603      	mov	r3, r0
 800914c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009150:	e00a      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009158:	e006      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800915a:	bf00      	nop
 800915c:	e004      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800915e:	bf00      	nop
 8009160:	e002      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009162:	bf00      	nop
 8009164:	e000      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009170:	4ba3      	ldr	r3, [pc, #652]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009174:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009180:	4a9f      	ldr	r2, [pc, #636]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009182:	430b      	orrs	r3, r1
 8009184:	6593      	str	r3, [r2, #88]	@ 0x58
 8009186:	e003      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800918c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800919c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091a0:	2300      	movs	r3, #0
 80091a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091aa:	460b      	mov	r3, r1
 80091ac:	4313      	orrs	r3, r2
 80091ae:	d037      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80091b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ba:	d00e      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80091bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c0:	d816      	bhi.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d018      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80091c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ca:	d111      	bne.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091cc:	4b8c      	ldr	r3, [pc, #560]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d0:	4a8b      	ldr	r2, [pc, #556]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091d8:	e00f      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091de:	3308      	adds	r3, #8
 80091e0:	2101      	movs	r1, #1
 80091e2:	4618      	mov	r0, r3
 80091e4:	f002 f81e 	bl	800b224 <RCCEx_PLL2_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091ee:	e004      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091f6:	e000      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80091f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10a      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009202:	4b7f      	ldr	r3, [pc, #508]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009206:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009210:	4a7b      	ldr	r2, [pc, #492]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009212:	430b      	orrs	r3, r1
 8009214:	6513      	str	r3, [r2, #80]	@ 0x50
 8009216:	e003      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800921c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800922c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009230:	2300      	movs	r3, #0
 8009232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009236:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800923a:	460b      	mov	r3, r1
 800923c:	4313      	orrs	r3, r2
 800923e:	d039      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009246:	2b03      	cmp	r3, #3
 8009248:	d81c      	bhi.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800924a:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	0800928d 	.word	0x0800928d
 8009254:	08009261 	.word	0x08009261
 8009258:	0800926f 	.word	0x0800926f
 800925c:	0800928d 	.word	0x0800928d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009260:	4b67      	ldr	r3, [pc, #412]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009264:	4a66      	ldr	r2, [pc, #408]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800926a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800926c:	e00f      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009272:	3308      	adds	r3, #8
 8009274:	2102      	movs	r1, #2
 8009276:	4618      	mov	r0, r3
 8009278:	f001 ffd4 	bl	800b224 <RCCEx_PLL2_Config>
 800927c:	4603      	mov	r3, r0
 800927e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009282:	e004      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800928a:	e000      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800928c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800928e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10a      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009296:	4b5a      	ldr	r3, [pc, #360]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929a:	f023 0103 	bic.w	r1, r3, #3
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092a4:	4a56      	ldr	r2, [pc, #344]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092a6:	430b      	orrs	r3, r1
 80092a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092aa:	e003      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80092c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092c4:	2300      	movs	r3, #0
 80092c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80092ce:	460b      	mov	r3, r1
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f000 809f 	beq.w	8009414 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a4a      	ldr	r2, [pc, #296]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092e2:	f7f9 fa05 	bl	80026f0 <HAL_GetTick>
 80092e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092ea:	e00b      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ec:	f7f9 fa00 	bl	80026f0 <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b64      	cmp	r3, #100	@ 0x64
 80092fa:	d903      	bls.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009302:	e005      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009304:	4b3f      	ldr	r3, [pc, #252]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0ed      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009314:	2b00      	cmp	r3, #0
 8009316:	d179      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009318:	4b39      	ldr	r3, [pc, #228]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800931a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800931c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009324:	4053      	eors	r3, r2
 8009326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800932a:	2b00      	cmp	r3, #0
 800932c:	d015      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800932e:	4b34      	ldr	r3, [pc, #208]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009336:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800933a:	4b31      	ldr	r3, [pc, #196]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933e:	4a30      	ldr	r2, [pc, #192]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009344:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009346:	4b2e      	ldr	r3, [pc, #184]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934a:	4a2d      	ldr	r2, [pc, #180]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800934c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009350:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009352:	4a2b      	ldr	r2, [pc, #172]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009358:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009366:	d118      	bne.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009368:	f7f9 f9c2 	bl	80026f0 <HAL_GetTick>
 800936c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009370:	e00d      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009372:	f7f9 f9bd 	bl	80026f0 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800937c:	1ad2      	subs	r2, r2, r3
 800937e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009382:	429a      	cmp	r2, r3
 8009384:	d903      	bls.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800938c:	e005      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800938e:	4b1c      	ldr	r3, [pc, #112]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0eb      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800939a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d129      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80093aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093b2:	d10e      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80093b4:	4b12      	ldr	r3, [pc, #72]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80093bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80093c4:	091a      	lsrs	r2, r3, #4
 80093c6:	4b10      	ldr	r3, [pc, #64]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	4a0d      	ldr	r2, [pc, #52]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093cc:	430b      	orrs	r3, r1
 80093ce:	6113      	str	r3, [r2, #16]
 80093d0:	e005      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80093d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80093dc:	6113      	str	r3, [r2, #16]
 80093de:	4b08      	ldr	r3, [pc, #32]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80093e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80093ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ee:	4a04      	ldr	r2, [pc, #16]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80093f4:	e00e      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80093fe:	e009      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009400:	58024400 	.word	0x58024400
 8009404:	58024800 	.word	0x58024800
 8009408:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800940c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f002 0301 	and.w	r3, r2, #1
 8009420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009424:	2300      	movs	r3, #0
 8009426:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800942a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800942e:	460b      	mov	r3, r1
 8009430:	4313      	orrs	r3, r2
 8009432:	f000 8089 	beq.w	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800943c:	2b28      	cmp	r3, #40	@ 0x28
 800943e:	d86b      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009440:	a201      	add	r2, pc, #4	@ (adr r2, 8009448 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009446:	bf00      	nop
 8009448:	08009521 	.word	0x08009521
 800944c:	08009519 	.word	0x08009519
 8009450:	08009519 	.word	0x08009519
 8009454:	08009519 	.word	0x08009519
 8009458:	08009519 	.word	0x08009519
 800945c:	08009519 	.word	0x08009519
 8009460:	08009519 	.word	0x08009519
 8009464:	08009519 	.word	0x08009519
 8009468:	080094ed 	.word	0x080094ed
 800946c:	08009519 	.word	0x08009519
 8009470:	08009519 	.word	0x08009519
 8009474:	08009519 	.word	0x08009519
 8009478:	08009519 	.word	0x08009519
 800947c:	08009519 	.word	0x08009519
 8009480:	08009519 	.word	0x08009519
 8009484:	08009519 	.word	0x08009519
 8009488:	08009503 	.word	0x08009503
 800948c:	08009519 	.word	0x08009519
 8009490:	08009519 	.word	0x08009519
 8009494:	08009519 	.word	0x08009519
 8009498:	08009519 	.word	0x08009519
 800949c:	08009519 	.word	0x08009519
 80094a0:	08009519 	.word	0x08009519
 80094a4:	08009519 	.word	0x08009519
 80094a8:	08009521 	.word	0x08009521
 80094ac:	08009519 	.word	0x08009519
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009519 	.word	0x08009519
 80094b8:	08009519 	.word	0x08009519
 80094bc:	08009519 	.word	0x08009519
 80094c0:	08009519 	.word	0x08009519
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009521 	.word	0x08009521
 80094cc:	08009519 	.word	0x08009519
 80094d0:	08009519 	.word	0x08009519
 80094d4:	08009519 	.word	0x08009519
 80094d8:	08009519 	.word	0x08009519
 80094dc:	08009519 	.word	0x08009519
 80094e0:	08009519 	.word	0x08009519
 80094e4:	08009519 	.word	0x08009519
 80094e8:	08009521 	.word	0x08009521
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f0:	3308      	adds	r3, #8
 80094f2:	2101      	movs	r1, #1
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 fe95 	bl	800b224 <RCCEx_PLL2_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009500:	e00f      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009506:	3328      	adds	r3, #40	@ 0x28
 8009508:	2101      	movs	r1, #1
 800950a:	4618      	mov	r0, r3
 800950c:	f001 ff3c 	bl	800b388 <RCCEx_PLL3_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009516:	e004      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800951e:	e000      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800952a:	4bbf      	ldr	r3, [pc, #764]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800952c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800952e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009538:	4abb      	ldr	r2, [pc, #748]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800953a:	430b      	orrs	r3, r1
 800953c:	6553      	str	r3, [r2, #84]	@ 0x54
 800953e:	e003      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f002 0302 	and.w	r3, r2, #2
 8009554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009558:	2300      	movs	r3, #0
 800955a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800955e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009562:	460b      	mov	r3, r1
 8009564:	4313      	orrs	r3, r2
 8009566:	d041      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800956e:	2b05      	cmp	r3, #5
 8009570:	d824      	bhi.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009572:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	080095c5 	.word	0x080095c5
 800957c:	08009591 	.word	0x08009591
 8009580:	080095a7 	.word	0x080095a7
 8009584:	080095c5 	.word	0x080095c5
 8009588:	080095c5 	.word	0x080095c5
 800958c:	080095c5 	.word	0x080095c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009594:	3308      	adds	r3, #8
 8009596:	2101      	movs	r1, #1
 8009598:	4618      	mov	r0, r3
 800959a:	f001 fe43 	bl	800b224 <RCCEx_PLL2_Config>
 800959e:	4603      	mov	r3, r0
 80095a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095a4:	e00f      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095aa:	3328      	adds	r3, #40	@ 0x28
 80095ac:	2101      	movs	r1, #1
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 feea 	bl	800b388 <RCCEx_PLL3_Config>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095ba:	e004      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095c2:	e000      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80095c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095ce:	4b96      	ldr	r3, [pc, #600]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d2:	f023 0107 	bic.w	r1, r3, #7
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095dc:	4a92      	ldr	r2, [pc, #584]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095de:	430b      	orrs	r3, r1
 80095e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80095e2:	e003      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f002 0304 	and.w	r3, r2, #4
 80095f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095fc:	2300      	movs	r3, #0
 80095fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009602:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009606:	460b      	mov	r3, r1
 8009608:	4313      	orrs	r3, r2
 800960a:	d044      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800960c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009614:	2b05      	cmp	r3, #5
 8009616:	d825      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009618:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	0800966d 	.word	0x0800966d
 8009624:	08009639 	.word	0x08009639
 8009628:	0800964f 	.word	0x0800964f
 800962c:	0800966d 	.word	0x0800966d
 8009630:	0800966d 	.word	0x0800966d
 8009634:	0800966d 	.word	0x0800966d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963c:	3308      	adds	r3, #8
 800963e:	2101      	movs	r1, #1
 8009640:	4618      	mov	r0, r3
 8009642:	f001 fdef 	bl	800b224 <RCCEx_PLL2_Config>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800964c:	e00f      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800964e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009652:	3328      	adds	r3, #40	@ 0x28
 8009654:	2101      	movs	r1, #1
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fe96 	bl	800b388 <RCCEx_PLL3_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009662:	e004      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800966a:	e000      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800966c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800966e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10b      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009676:	4b6c      	ldr	r3, [pc, #432]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967a:	f023 0107 	bic.w	r1, r3, #7
 800967e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009686:	4a68      	ldr	r2, [pc, #416]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009688:	430b      	orrs	r3, r1
 800968a:	6593      	str	r3, [r2, #88]	@ 0x58
 800968c:	e003      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f002 0320 	and.w	r3, r2, #32
 80096a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096a6:	2300      	movs	r3, #0
 80096a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096b0:	460b      	mov	r3, r1
 80096b2:	4313      	orrs	r3, r2
 80096b4:	d055      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096c2:	d033      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80096c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096c8:	d82c      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ce:	d02f      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80096d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d4:	d826      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096da:	d02b      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80096dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096e0:	d820      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096e6:	d012      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80096e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ec:	d81a      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d022      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80096f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096f6:	d115      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fc:	3308      	adds	r3, #8
 80096fe:	2100      	movs	r1, #0
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fd8f 	bl	800b224 <RCCEx_PLL2_Config>
 8009706:	4603      	mov	r3, r0
 8009708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800970c:	e015      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009712:	3328      	adds	r3, #40	@ 0x28
 8009714:	2102      	movs	r1, #2
 8009716:	4618      	mov	r0, r3
 8009718:	f001 fe36 	bl	800b388 <RCCEx_PLL3_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009722:	e00a      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800972a:	e006      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800972c:	bf00      	nop
 800972e:	e004      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009730:	bf00      	nop
 8009732:	e002      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009734:	bf00      	nop
 8009736:	e000      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800973a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10b      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009742:	4b39      	ldr	r3, [pc, #228]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009746:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800974a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009752:	4a35      	ldr	r2, [pc, #212]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009754:	430b      	orrs	r3, r1
 8009756:	6553      	str	r3, [r2, #84]	@ 0x54
 8009758:	e003      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800975e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800976e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009772:	2300      	movs	r3, #0
 8009774:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009778:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800977c:	460b      	mov	r3, r1
 800977e:	4313      	orrs	r3, r2
 8009780:	d058      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800978a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800978e:	d033      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009790:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009794:	d82c      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800979a:	d02f      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800979c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097a0:	d826      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097a6:	d02b      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80097a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097ac:	d820      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097b2:	d012      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80097b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097b8:	d81a      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d022      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80097be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097c2:	d115      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c8:	3308      	adds	r3, #8
 80097ca:	2100      	movs	r1, #0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 fd29 	bl	800b224 <RCCEx_PLL2_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097d8:	e015      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097de:	3328      	adds	r3, #40	@ 0x28
 80097e0:	2102      	movs	r1, #2
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 fdd0 	bl	800b388 <RCCEx_PLL3_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097ee:	e00a      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097f6:	e006      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097f8:	bf00      	nop
 80097fa:	e004      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097fc:	bf00      	nop
 80097fe:	e002      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009800:	bf00      	nop
 8009802:	e000      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10e      	bne.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800980e:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009812:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800981e:	4a02      	ldr	r2, [pc, #8]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009820:	430b      	orrs	r3, r1
 8009822:	6593      	str	r3, [r2, #88]	@ 0x58
 8009824:	e006      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009826:	bf00      	nop
 8009828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009844:	2300      	movs	r3, #0
 8009846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800984a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800984e:	460b      	mov	r3, r1
 8009850:	4313      	orrs	r3, r2
 8009852:	d055      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800985c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009860:	d033      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009862:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009866:	d82c      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800986c:	d02f      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800986e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009872:	d826      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009874:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009878:	d02b      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800987a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800987e:	d820      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009884:	d012      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800988a:	d81a      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d022      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009894:	d115      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989a:	3308      	adds	r3, #8
 800989c:	2100      	movs	r1, #0
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 fcc0 	bl	800b224 <RCCEx_PLL2_Config>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098aa:	e015      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b0:	3328      	adds	r3, #40	@ 0x28
 80098b2:	2102      	movs	r1, #2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 fd67 	bl	800b388 <RCCEx_PLL3_Config>
 80098ba:	4603      	mov	r3, r0
 80098bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098c0:	e00a      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098c8:	e006      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098ca:	bf00      	nop
 80098cc:	e004      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098ce:	bf00      	nop
 80098d0:	e002      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098d2:	bf00      	nop
 80098d4:	e000      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10b      	bne.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098e0:	4ba1      	ldr	r3, [pc, #644]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098f0:	4a9d      	ldr	r2, [pc, #628]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098f2:	430b      	orrs	r3, r1
 80098f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80098f6:	e003      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f002 0308 	and.w	r3, r2, #8
 800990c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009910:	2300      	movs	r3, #0
 8009912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009916:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800991a:	460b      	mov	r3, r1
 800991c:	4313      	orrs	r3, r2
 800991e:	d01e      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800992c:	d10c      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009932:	3328      	adds	r3, #40	@ 0x28
 8009934:	2102      	movs	r1, #2
 8009936:	4618      	mov	r0, r3
 8009938:	f001 fd26 	bl	800b388 <RCCEx_PLL3_Config>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009948:	4b87      	ldr	r3, [pc, #540]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800994a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800994c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009958:	4a83      	ldr	r2, [pc, #524]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800995a:	430b      	orrs	r3, r1
 800995c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800995e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f002 0310 	and.w	r3, r2, #16
 800996a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800996e:	2300      	movs	r3, #0
 8009970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009974:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009978:	460b      	mov	r3, r1
 800997a:	4313      	orrs	r3, r2
 800997c:	d01e      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800998a:	d10c      	bne.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800998c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009990:	3328      	adds	r3, #40	@ 0x28
 8009992:	2102      	movs	r1, #2
 8009994:	4618      	mov	r0, r3
 8009996:	f001 fcf7 	bl	800b388 <RCCEx_PLL3_Config>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099a6:	4b70      	ldr	r3, [pc, #448]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099b6:	4a6c      	ldr	r2, [pc, #432]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099b8:	430b      	orrs	r3, r1
 80099ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80099c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099cc:	2300      	movs	r3, #0
 80099ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d03e      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099e8:	d022      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80099ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099ee:	d81b      	bhi.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80099f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099f8:	d00b      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80099fa:	e015      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a00:	3308      	adds	r3, #8
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 fc0d 	bl	800b224 <RCCEx_PLL2_Config>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a10:	e00f      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a16:	3328      	adds	r3, #40	@ 0x28
 8009a18:	2102      	movs	r1, #2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 fcb4 	bl	800b388 <RCCEx_PLL3_Config>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a26:	e004      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a2e:	e000      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10b      	bne.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a4a:	4a47      	ldr	r2, [pc, #284]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a50:	e003      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009a66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a68:	2300      	movs	r3, #0
 8009a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009a70:	460b      	mov	r3, r1
 8009a72:	4313      	orrs	r3, r2
 8009a74:	d03b      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a82:	d01f      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009a84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a88:	d818      	bhi.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a8e:	d003      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009a90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a94:	d007      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009a96:	e011      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a98:	4b33      	ldr	r3, [pc, #204]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9c:	4a32      	ldr	r2, [pc, #200]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009aa4:	e00f      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aaa:	3328      	adds	r3, #40	@ 0x28
 8009aac:	2101      	movs	r1, #1
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f001 fc6a 	bl	800b388 <RCCEx_PLL3_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009aba:	e004      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ac2:	e000      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10b      	bne.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ace:	4b26      	ldr	r3, [pc, #152]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ade:	4a22      	ldr	r2, [pc, #136]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ae0:	430b      	orrs	r3, r1
 8009ae2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ae4:	e003      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009afa:	673b      	str	r3, [r7, #112]	@ 0x70
 8009afc:	2300      	movs	r3, #0
 8009afe:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b04:	460b      	mov	r3, r1
 8009b06:	4313      	orrs	r3, r2
 8009b08:	d034      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b18:	d007      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009b1a:	e011      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b1c:	4b12      	ldr	r3, [pc, #72]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b20:	4a11      	ldr	r2, [pc, #68]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b28:	e00e      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2e:	3308      	adds	r3, #8
 8009b30:	2102      	movs	r1, #2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 fb76 	bl	800b224 <RCCEx_PLL2_Config>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b3e:	e003      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10d      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b5e:	4a02      	ldr	r2, [pc, #8]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b60:	430b      	orrs	r3, r1
 8009b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b64:	e006      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b82:	2300      	movs	r3, #0
 8009b84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	d00c      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b94:	3328      	adds	r3, #40	@ 0x28
 8009b96:	2102      	movs	r1, #2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 fbf5 	bl	800b388 <RCCEx_PLL3_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009bb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bb8:	2300      	movs	r3, #0
 8009bba:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	d038      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bd2:	d018      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bd8:	d811      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bde:	d014      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009be4:	d80b      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d011      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bee:	d106      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf0:	4bc3      	ldr	r3, [pc, #780]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf4:	4ac2      	ldr	r2, [pc, #776]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009bfc:	e008      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c04:	e004      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c06:	bf00      	nop
 8009c08:	e002      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e000      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10b      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c18:	4bb9      	ldr	r3, [pc, #740]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c28:	4ab5      	ldr	r2, [pc, #724]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c2a:	430b      	orrs	r3, r1
 8009c2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c2e:	e003      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c46:	2300      	movs	r3, #0
 8009c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4313      	orrs	r3, r2
 8009c52:	d009      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c54:	4baa      	ldr	r3, [pc, #680]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c62:	4aa7      	ldr	r2, [pc, #668]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c64:	430b      	orrs	r3, r1
 8009c66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009c74:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c76:	2300      	movs	r3, #0
 8009c78:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d00a      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c84:	4b9e      	ldr	r3, [pc, #632]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c94:	4a9a      	ldr	r2, [pc, #616]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c96:	430b      	orrs	r3, r1
 8009c98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ca8:	2300      	movs	r3, #0
 8009caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	d009      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cb6:	4b92      	ldr	r3, [pc, #584]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cc4:	4a8e      	ldr	r2, [pc, #568]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cc6:	430b      	orrs	r3, r1
 8009cc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cd8:	2300      	movs	r3, #0
 8009cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	d00e      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ce6:	4b86      	ldr	r3, [pc, #536]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	4a85      	ldr	r2, [pc, #532]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009cf0:	6113      	str	r3, [r2, #16]
 8009cf2:	4b83      	ldr	r3, [pc, #524]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cf4:	6919      	ldr	r1, [r3, #16]
 8009cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009cfe:	4a80      	ldr	r2, [pc, #512]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d00:	430b      	orrs	r3, r1
 8009d02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009d10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d12:	2300      	movs	r3, #0
 8009d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	d009      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d20:	4b77      	ldr	r3, [pc, #476]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d2e:	4a74      	ldr	r2, [pc, #464]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d30:	430b      	orrs	r3, r1
 8009d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d42:	2300      	movs	r3, #0
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	d00a      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d50:	4b6b      	ldr	r3, [pc, #428]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d60:	4a67      	ldr	r2, [pc, #412]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d62:	430b      	orrs	r3, r1
 8009d64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	2100      	movs	r1, #0
 8009d70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	d011      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d86:	3308      	adds	r3, #8
 8009d88:	2100      	movs	r1, #0
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 fa4a 	bl	800b224 <RCCEx_PLL2_Config>
 8009d90:	4603      	mov	r3, r0
 8009d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	2100      	movs	r1, #0
 8009db0:	6239      	str	r1, [r7, #32]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009db8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	d011      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 fa2a 	bl	800b224 <RCCEx_PLL2_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	2100      	movs	r1, #0
 8009df0:	61b9      	str	r1, [r7, #24]
 8009df2:	f003 0304 	and.w	r3, r3, #4
 8009df6:	61fb      	str	r3, [r7, #28]
 8009df8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	d011      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e06:	3308      	adds	r3, #8
 8009e08:	2102      	movs	r1, #2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 fa0a 	bl	800b224 <RCCEx_PLL2_Config>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	2100      	movs	r1, #0
 8009e30:	6139      	str	r1, [r7, #16]
 8009e32:	f003 0308 	and.w	r3, r3, #8
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	d011      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	3328      	adds	r3, #40	@ 0x28
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 fa9c 	bl	800b388 <RCCEx_PLL3_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	2100      	movs	r1, #0
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	f003 0310 	and.w	r3, r3, #16
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	d011      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e86:	3328      	adds	r3, #40	@ 0x28
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 fa7c 	bl	800b388 <RCCEx_PLL3_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	2100      	movs	r1, #0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	607b      	str	r3, [r7, #4]
 8009eb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	d011      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec6:	3328      	adds	r3, #40	@ 0x28
 8009ec8:	2102      	movs	r1, #2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 fa5c 	bl	800b388 <RCCEx_PLL3_Config>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009ee6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e000      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009efa:	46bd      	mov	sp, r7
 8009efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f00:	58024400 	.word	0x58024400

08009f04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b090      	sub	sp, #64	@ 0x40
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009f16:	430b      	orrs	r3, r1
 8009f18:	f040 8094 	bne.w	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009f1c:	4b9e      	ldr	r3, [pc, #632]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f20:	f003 0307 	and.w	r3, r3, #7
 8009f24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	f200 8087 	bhi.w	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009f49 	.word	0x08009f49
 8009f38:	08009f71 	.word	0x08009f71
 8009f3c:	08009f99 	.word	0x08009f99
 8009f40:	0800a035 	.word	0x0800a035
 8009f44:	08009fc1 	.word	0x08009fc1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f48:	4b93      	ldr	r3, [pc, #588]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f54:	d108      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 f810 	bl	800af80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f64:	f000 bd45 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6c:	f000 bd41 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f70:	4b89      	ldr	r3, [pc, #548]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f7c:	d108      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f7e:	f107 0318 	add.w	r3, r7, #24
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fd54 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f8c:	f000 bd31 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f94:	f000 bd2d 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f98:	4b7f      	ldr	r3, [pc, #508]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fa4:	d108      	bne.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fa6:	f107 030c 	add.w	r3, r7, #12
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fe94 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fb4:	f000 bd1d 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fbc:	f000 bd19 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fc0:	4b75      	ldr	r3, [pc, #468]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fca:	4b73      	ldr	r3, [pc, #460]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d10c      	bne.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d109      	bne.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fdc:	4b6e      	ldr	r3, [pc, #440]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	08db      	lsrs	r3, r3, #3
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fee:	e01f      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ff0:	4b69      	ldr	r3, [pc, #420]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ffc:	d106      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a004:	d102      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a006:	4b66      	ldr	r3, [pc, #408]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a00a:	e011      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a00c:	4b62      	ldr	r3, [pc, #392]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a018:	d106      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a020:	d102      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a022:	4b60      	ldr	r3, [pc, #384]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a026:	e003      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a02c:	f000 bce1 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a030:	f000 bcdf 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a034:	4b5c      	ldr	r3, [pc, #368]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a038:	f000 bcdb 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a040:	f000 bcd7 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a044:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a048:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a04c:	430b      	orrs	r3, r1
 800a04e:	f040 80ad 	bne.w	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a052:	4b51      	ldr	r3, [pc, #324]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a056:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a05a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a062:	d056      	beq.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a06a:	f200 8090 	bhi.w	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	2bc0      	cmp	r3, #192	@ 0xc0
 800a072:	f000 8088 	beq.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a078:	2bc0      	cmp	r3, #192	@ 0xc0
 800a07a:	f200 8088 	bhi.w	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a080:	2b80      	cmp	r3, #128	@ 0x80
 800a082:	d032      	beq.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	2b80      	cmp	r3, #128	@ 0x80
 800a088:	f200 8081 	bhi.w	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a094:	2b40      	cmp	r3, #64	@ 0x40
 800a096:	d014      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a098:	e079      	b.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a09a:	4b3f      	ldr	r3, [pc, #252]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0a6:	d108      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 ff67 	bl	800af80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b6:	f000 bc9c 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0be:	f000 bc98 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0c2:	4b35      	ldr	r3, [pc, #212]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0ce:	d108      	bne.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0d0:	f107 0318 	add.w	r3, r7, #24
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fcab 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0de:	f000 bc88 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e6:	f000 bc84 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0ea:	4b2b      	ldr	r3, [pc, #172]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0f6:	d108      	bne.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0f8:	f107 030c 	add.w	r3, r7, #12
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 fdeb 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a106:	f000 bc74 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a10e:	f000 bc70 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a112:	4b21      	ldr	r3, [pc, #132]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a11a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a11c:	4b1e      	ldr	r3, [pc, #120]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b04      	cmp	r3, #4
 800a126:	d10c      	bne.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d109      	bne.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a12e:	4b1a      	ldr	r3, [pc, #104]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	08db      	lsrs	r3, r3, #3
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	4a18      	ldr	r2, [pc, #96]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a13a:	fa22 f303 	lsr.w	r3, r2, r3
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a140:	e01f      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a142:	4b15      	ldr	r3, [pc, #84]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a14a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a14e:	d106      	bne.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a156:	d102      	bne.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a158:	4b11      	ldr	r3, [pc, #68]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a15c:	e011      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a15e:	4b0e      	ldr	r3, [pc, #56]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a16a:	d106      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a172:	d102      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a174:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a178:	e003      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a17e:	f000 bc38 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a182:	f000 bc36 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a186:	4b08      	ldr	r3, [pc, #32]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18a:	f000 bc32 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a192:	f000 bc2e 	b.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a196:	bf00      	nop
 800a198:	58024400 	.word	0x58024400
 800a19c:	03d09000 	.word	0x03d09000
 800a1a0:	003d0900 	.word	0x003d0900
 800a1a4:	007a1200 	.word	0x007a1200
 800a1a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a1b4:	430b      	orrs	r3, r1
 800a1b6:	f040 809c 	bne.w	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a1ba:	4b9e      	ldr	r3, [pc, #632]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1be:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a1c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a1ca:	d054      	beq.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a1d2:	f200 808b 	bhi.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a1dc:	f000 8083 	beq.w	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a1e6:	f200 8081 	bhi.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1f0:	d02f      	beq.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1f8:	d878      	bhi.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d004      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a206:	d012      	beq.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a208:	e070      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a20a:	4b8a      	ldr	r3, [pc, #552]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a216:	d107      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 feaf 	bl	800af80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a226:	e3e4      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22c:	e3e1      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a22e:	4b81      	ldr	r3, [pc, #516]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a23a:	d107      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a23c:	f107 0318 	add.w	r3, r7, #24
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fbf5 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a24a:	e3d2      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a250:	e3cf      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a252:	4b78      	ldr	r3, [pc, #480]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a25a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a25e:	d107      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a260:	f107 030c 	add.w	r3, r7, #12
 800a264:	4618      	mov	r0, r3
 800a266:	f000 fd37 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a26e:	e3c0      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a274:	e3bd      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a276:	4b6f      	ldr	r3, [pc, #444]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a27a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a27e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a280:	4b6c      	ldr	r3, [pc, #432]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d10c      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d109      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a292:	4b68      	ldr	r3, [pc, #416]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	08db      	lsrs	r3, r3, #3
 800a298:	f003 0303 	and.w	r3, r3, #3
 800a29c:	4a66      	ldr	r2, [pc, #408]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a29e:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2a4:	e01e      	b.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2a6:	4b63      	ldr	r3, [pc, #396]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2b2:	d106      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2ba:	d102      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2bc:	4b5f      	ldr	r3, [pc, #380]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2c0:	e010      	b.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2c2:	4b5c      	ldr	r3, [pc, #368]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2ce:	d106      	bne.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d6:	d102      	bne.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2d8:	4b59      	ldr	r3, [pc, #356]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2dc:	e002      	b.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2e2:	e386      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2e4:	e385      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2e6:	4b57      	ldr	r3, [pc, #348]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ea:	e382      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f0:	e37f      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	f040 80a7 	bne.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a300:	4b4c      	ldr	r3, [pc, #304]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a304:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a308:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a310:	d055      	beq.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a318:	f200 8096 	bhi.w	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a322:	f000 8084 	beq.w	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a32c:	f200 808c 	bhi.w	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a336:	d030      	beq.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a33e:	f200 8083 	bhi.w	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a34e:	d012      	beq.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a350:	e07a      	b.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a352:	4b38      	ldr	r3, [pc, #224]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a35a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a35e:	d107      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fe0b 	bl	800af80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36e:	e340      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a374:	e33d      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a376:	4b2f      	ldr	r3, [pc, #188]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a37e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a382:	d107      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a384:	f107 0318 	add.w	r3, r7, #24
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fb51 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a392:	e32e      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a398:	e32b      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a39a:	4b26      	ldr	r3, [pc, #152]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a6:	d107      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3a8:	f107 030c 	add.w	r3, r7, #12
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fc93 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b6:	e31c      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3bc:	e319      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3be:	4b1d      	ldr	r3, [pc, #116]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b04      	cmp	r3, #4
 800a3d2:	d10c      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3da:	4b16      	ldr	r3, [pc, #88]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	08db      	lsrs	r3, r3, #3
 800a3e0:	f003 0303 	and.w	r3, r3, #3
 800a3e4:	4a14      	ldr	r2, [pc, #80]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ec:	e01e      	b.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3ee:	4b11      	ldr	r3, [pc, #68]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3fa:	d106      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a402:	d102      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a404:	4b0d      	ldr	r3, [pc, #52]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a408:	e010      	b.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a40a:	4b0a      	ldr	r3, [pc, #40]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a416:	d106      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a41e:	d102      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a420:	4b07      	ldr	r3, [pc, #28]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a424:	e002      	b.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a42a:	e2e2      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a42c:	e2e1      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a42e:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a432:	e2de      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a434:	58024400 	.word	0x58024400
 800a438:	03d09000 	.word	0x03d09000
 800a43c:	003d0900 	.word	0x003d0900
 800a440:	007a1200 	.word	0x007a1200
 800a444:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	e2d1      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a452:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a456:	430b      	orrs	r3, r1
 800a458:	f040 809c 	bne.w	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a45c:	4b93      	ldr	r3, [pc, #588]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a460:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a464:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a46c:	d054      	beq.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a470:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a474:	f200 808b 	bhi.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a47e:	f000 8083 	beq.w	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a484:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a488:	f200 8081 	bhi.w	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a492:	d02f      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a49a:	d878      	bhi.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d004      	beq.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4a8:	d012      	beq.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a4aa:	e070      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4ac:	4b7f      	ldr	r3, [pc, #508]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4b8:	d107      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fd5e 	bl	800af80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c8:	e293      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ce:	e290      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4d0:	4b76      	ldr	r3, [pc, #472]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4dc:	d107      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4de:	f107 0318 	add.w	r3, r7, #24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 faa4 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ec:	e281      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f2:	e27e      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4f4:	4b6d      	ldr	r3, [pc, #436]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a500:	d107      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a502:	f107 030c 	add.w	r3, r7, #12
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fbe6 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a510:	e26f      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a516:	e26c      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a518:	4b64      	ldr	r3, [pc, #400]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a51c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a520:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a522:	4b62      	ldr	r3, [pc, #392]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0304 	and.w	r3, r3, #4
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	d10c      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a530:	2b00      	cmp	r3, #0
 800a532:	d109      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a534:	4b5d      	ldr	r3, [pc, #372]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	08db      	lsrs	r3, r3, #3
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	4a5c      	ldr	r2, [pc, #368]	@ (800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a540:	fa22 f303 	lsr.w	r3, r2, r3
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a546:	e01e      	b.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a548:	4b58      	ldr	r3, [pc, #352]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a554:	d106      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a55c:	d102      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a55e:	4b55      	ldr	r3, [pc, #340]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a562:	e010      	b.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a564:	4b51      	ldr	r3, [pc, #324]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a570:	d106      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a578:	d102      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a57a:	4b4f      	ldr	r3, [pc, #316]	@ (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a57e:	e002      	b.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a584:	e235      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a586:	e234      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a588:	4b4c      	ldr	r3, [pc, #304]	@ (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58c:	e231      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a592:	e22e      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a594:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a598:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a59c:	430b      	orrs	r3, r1
 800a59e:	f040 808f 	bne.w	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a5a2:	4b42      	ldr	r3, [pc, #264]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5b2:	d06b      	beq.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5ba:	d874      	bhi.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5c2:	d056      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5ca:	d86c      	bhi.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5d2:	d03b      	beq.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5da:	d864      	bhi.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e2:	d021      	beq.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5ea:	d85c      	bhi.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d004      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5f8:	d004      	beq.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a5fa:	e054      	b.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5fc:	f7fe fa0a 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800a600:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a602:	e1f6      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a604:	4b29      	ldr	r3, [pc, #164]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a60c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a610:	d107      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a612:	f107 0318 	add.w	r3, r7, #24
 800a616:	4618      	mov	r0, r3
 800a618:	f000 fa0a 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a620:	e1e7      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a626:	e1e4      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a628:	4b20      	ldr	r3, [pc, #128]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a634:	d107      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a636:	f107 030c 	add.w	r3, r7, #12
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 fb4c 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a644:	e1d5      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64a:	e1d2      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a64c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b04      	cmp	r3, #4
 800a656:	d109      	bne.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a658:	4b14      	ldr	r3, [pc, #80]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	08db      	lsrs	r3, r3, #3
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	4a13      	ldr	r2, [pc, #76]	@ (800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a664:	fa22 f303 	lsr.w	r3, r2, r3
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66a:	e1c2      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a670:	e1bf      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a672:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a67a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a67e:	d102      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a680:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a684:	e1b5      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a68a:	e1b2      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a68c:	4b07      	ldr	r3, [pc, #28]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a698:	d102      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a69a:	4b07      	ldr	r3, [pc, #28]	@ (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a69e:	e1a8      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a4:	e1a5      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6aa:	e1a2      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6ac:	58024400 	.word	0x58024400
 800a6b0:	03d09000 	.word	0x03d09000
 800a6b4:	003d0900 	.word	0x003d0900
 800a6b8:	007a1200 	.word	0x007a1200
 800a6bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	d173      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a6cc:	4b9c      	ldr	r3, [pc, #624]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6dc:	d02f      	beq.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6e4:	d863      	bhi.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6f2:	d012      	beq.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a6f4:	e05b      	b.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6f6:	4b92      	ldr	r3, [pc, #584]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a702:	d107      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a704:	f107 0318 	add.w	r3, r7, #24
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 f991 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a712:	e16e      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a718:	e16b      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a71a:	4b89      	ldr	r3, [pc, #548]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a726:	d107      	bne.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a728:	f107 030c 	add.w	r3, r7, #12
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fad3 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a736:	e15c      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73c:	e159      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a73e:	4b80      	ldr	r3, [pc, #512]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a746:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a748:	4b7d      	ldr	r3, [pc, #500]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b04      	cmp	r3, #4
 800a752:	d10c      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	2b00      	cmp	r3, #0
 800a758:	d109      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a75a:	4b79      	ldr	r3, [pc, #484]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	08db      	lsrs	r3, r3, #3
 800a760:	f003 0303 	and.w	r3, r3, #3
 800a764:	4a77      	ldr	r2, [pc, #476]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a766:	fa22 f303 	lsr.w	r3, r2, r3
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a76c:	e01e      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a76e:	4b74      	ldr	r3, [pc, #464]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a77a:	d106      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a782:	d102      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a784:	4b70      	ldr	r3, [pc, #448]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a788:	e010      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a78a:	4b6d      	ldr	r3, [pc, #436]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a796:	d106      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a79a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a79e:	d102      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7a0:	4b6a      	ldr	r3, [pc, #424]	@ (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7a4:	e002      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7aa:	e122      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7ac:	e121      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b2:	e11e      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a7bc:	430b      	orrs	r3, r1
 800a7be:	d133      	bne.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a7c0:	4b5f      	ldr	r3, [pc, #380]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d004      	beq.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7d6:	d012      	beq.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a7d8:	e023      	b.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7da:	4b59      	ldr	r3, [pc, #356]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7e6:	d107      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 fbc7 	bl	800af80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f6:	e0fc      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7fc:	e0f9      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7fe:	4b50      	ldr	r3, [pc, #320]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a80a:	d107      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a80c:	f107 0318 	add.w	r3, r7, #24
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f90d 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a81a:	e0ea      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a820:	e0e7      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a826:	e0e4      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a82c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a830:	430b      	orrs	r3, r1
 800a832:	f040 808d 	bne.w	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a836:	4b42      	ldr	r3, [pc, #264]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a83a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a83e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a846:	d06b      	beq.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a84e:	d874      	bhi.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a856:	d056      	beq.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a85e:	d86c      	bhi.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a866:	d03b      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a86e:	d864      	bhi.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a876:	d021      	beq.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a87e:	d85c      	bhi.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a88c:	d004      	beq.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a88e:	e054      	b.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a890:	f000 f8b8 	bl	800aa04 <HAL_RCCEx_GetD3PCLK1Freq>
 800a894:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a896:	e0ac      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a898:	4b29      	ldr	r3, [pc, #164]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8a4:	d107      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a6:	f107 0318 	add.w	r3, r7, #24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 f8c0 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b4:	e09d      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ba:	e09a      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8bc:	4b20      	ldr	r3, [pc, #128]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8c8:	d107      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ca:	f107 030c 	add.w	r3, r7, #12
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fa02 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d8:	e08b      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8de:	e088      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8e0:	4b17      	ldr	r3, [pc, #92]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d109      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8ec:	4b14      	ldr	r3, [pc, #80]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	08db      	lsrs	r3, r3, #3
 800a8f2:	f003 0303 	and.w	r3, r3, #3
 800a8f6:	4a13      	ldr	r2, [pc, #76]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fe:	e078      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a904:	e075      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a906:	4b0e      	ldr	r3, [pc, #56]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a90e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a912:	d102      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a914:	4b0c      	ldr	r3, [pc, #48]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a918:	e06b      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91e:	e068      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a920:	4b07      	ldr	r3, [pc, #28]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a92c:	d102      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a92e:	4b07      	ldr	r3, [pc, #28]	@ (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a932:	e05e      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a938:	e05b      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93e:	e058      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a940:	58024400 	.word	0x58024400
 800a944:	03d09000 	.word	0x03d09000
 800a948:	003d0900 	.word	0x003d0900
 800a94c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a954:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a958:	430b      	orrs	r3, r1
 800a95a:	d148      	bne.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a95c:	4b27      	ldr	r3, [pc, #156]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a964:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a96c:	d02a      	beq.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a974:	d838      	bhi.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a982:	d00d      	beq.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a984:	e030      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a986:	4b1d      	ldr	r3, [pc, #116]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a98e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a992:	d102      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a994:	4b1a      	ldr	r3, [pc, #104]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a998:	e02b      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99e:	e028      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9a0:	4b16      	ldr	r3, [pc, #88]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9ac:	d107      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fae4 	bl	800af80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9bc:	e019      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c2:	e016      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9d0:	d107      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d2:	f107 0318 	add.w	r3, r7, #24
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 f82a 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e0:	e007      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e6:	e004      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e001      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3740      	adds	r7, #64	@ 0x40
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	58024400 	.word	0x58024400
 800aa00:	007a1200 	.word	0x007a1200

0800aa04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa08:	f7fd ffd4 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	4b06      	ldr	r3, [pc, #24]	@ (800aa28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	091b      	lsrs	r3, r3, #4
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	4904      	ldr	r1, [pc, #16]	@ (800aa2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa1a:	5ccb      	ldrb	r3, [r1, r3]
 800aa1c:	f003 031f 	and.w	r3, r3, #31
 800aa20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	58024400 	.word	0x58024400
 800aa2c:	080158c0 	.word	0x080158c0

0800aa30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b089      	sub	sp, #36	@ 0x24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa38:	4ba1      	ldr	r3, [pc, #644]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa42:	4b9f      	ldr	r3, [pc, #636]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa46:	0b1b      	lsrs	r3, r3, #12
 800aa48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa4e:	4b9c      	ldr	r3, [pc, #624]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa52:	091b      	lsrs	r3, r3, #4
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa5a:	4b99      	ldr	r3, [pc, #612]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	fb02 f303 	mul.w	r3, r2, r3
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 8111 	beq.w	800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	f000 8083 	beq.w	800ab8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	f200 80a1 	bhi.w	800abd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d056      	beq.n	800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa9a:	e099      	b.n	800abd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa9c:	4b88      	ldr	r3, [pc, #544]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d02d      	beq.n	800ab04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa8:	4b85      	ldr	r3, [pc, #532]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	08db      	lsrs	r3, r3, #3
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	4a84      	ldr	r2, [pc, #528]	@ (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aab4:	fa22 f303 	lsr.w	r3, r2, r3
 800aab8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad2:	4b7b      	ldr	r3, [pc, #492]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aae6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800acc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aafe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab02:	e087      	b.n	800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800accc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab16:	4b6a      	ldr	r3, [pc, #424]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800acc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab46:	e065      	b.n	800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5a:	4b59      	ldr	r3, [pc, #356]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800acc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab8a:	e043      	b.n	800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800acd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9e:	4b48      	ldr	r3, [pc, #288]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abae:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800acc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abce:	e021      	b.n	800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b37      	ldr	r3, [pc, #220]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800acc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ac14:	4b2a      	ldr	r3, [pc, #168]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac18:	0a5b      	lsrs	r3, r3, #9
 800ac1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3a:	ee17 2a90 	vmov	r2, s15
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac42:	4b1f      	ldr	r3, [pc, #124]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac46:	0c1b      	lsrs	r3, r3, #16
 800ac48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac68:	ee17 2a90 	vmov	r2, s15
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac70:	4b13      	ldr	r3, [pc, #76]	@ (800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac74:	0e1b      	lsrs	r3, r3, #24
 800ac76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac96:	ee17 2a90 	vmov	r2, s15
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac9e:	e008      	b.n	800acb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	609a      	str	r2, [r3, #8]
}
 800acb2:	bf00      	nop
 800acb4:	3724      	adds	r7, #36	@ 0x24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	58024400 	.word	0x58024400
 800acc4:	03d09000 	.word	0x03d09000
 800acc8:	46000000 	.word	0x46000000
 800accc:	4c742400 	.word	0x4c742400
 800acd0:	4a742400 	.word	0x4a742400
 800acd4:	4af42400 	.word	0x4af42400

0800acd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800acd8:	b480      	push	{r7}
 800acda:	b089      	sub	sp, #36	@ 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ace0:	4ba1      	ldr	r3, [pc, #644]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800acea:	4b9f      	ldr	r3, [pc, #636]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acee:	0d1b      	lsrs	r3, r3, #20
 800acf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acf4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acf6:	4b9c      	ldr	r3, [pc, #624]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acfa:	0a1b      	lsrs	r3, r3, #8
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ad02:	4b99      	ldr	r3, [pc, #612]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad06:	08db      	lsrs	r3, r3, #3
 800ad08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f000 8111 	beq.w	800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	f000 8083 	beq.w	800ae34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	f200 80a1 	bhi.w	800ae78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d056      	beq.n	800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad42:	e099      	b.n	800ae78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad44:	4b88      	ldr	r3, [pc, #544]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0320 	and.w	r3, r3, #32
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d02d      	beq.n	800adac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad50:	4b85      	ldr	r3, [pc, #532]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	08db      	lsrs	r3, r3, #3
 800ad56:	f003 0303 	and.w	r3, r3, #3
 800ad5a:	4a84      	ldr	r2, [pc, #528]	@ (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	ee07 3a90 	vmov	s15, r3
 800ad68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad7a:	4b7b      	ldr	r3, [pc, #492]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adaa:	e087      	b.n	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800adba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adbe:	4b6a      	ldr	r3, [pc, #424]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adce:	ed97 6a03 	vldr	s12, [r7, #12]
 800add2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800add6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ade2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adee:	e065      	b.n	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae02:	4b59      	ldr	r3, [pc, #356]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae32:	e043      	b.n	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae46:	4b48      	ldr	r3, [pc, #288]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae76:	e021      	b.n	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8a:	4b37      	ldr	r3, [pc, #220]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aebc:	4b2a      	ldr	r3, [pc, #168]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec0:	0a5b      	lsrs	r3, r3, #9
 800aec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aed6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee2:	ee17 2a90 	vmov	r2, s15
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aeea:	4b1f      	ldr	r3, [pc, #124]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeee:	0c1b      	lsrs	r3, r3, #16
 800aef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aef4:	ee07 3a90 	vmov	s15, r3
 800aef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af04:	edd7 6a07 	vldr	s13, [r7, #28]
 800af08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af10:	ee17 2a90 	vmov	r2, s15
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800af18:	4b13      	ldr	r3, [pc, #76]	@ (800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1c:	0e1b      	lsrs	r3, r3, #24
 800af1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af32:	edd7 6a07 	vldr	s13, [r7, #28]
 800af36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3e:	ee17 2a90 	vmov	r2, s15
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af46:	e008      	b.n	800af5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	609a      	str	r2, [r3, #8]
}
 800af5a:	bf00      	nop
 800af5c:	3724      	adds	r7, #36	@ 0x24
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	58024400 	.word	0x58024400
 800af6c:	03d09000 	.word	0x03d09000
 800af70:	46000000 	.word	0x46000000
 800af74:	4c742400 	.word	0x4c742400
 800af78:	4a742400 	.word	0x4a742400
 800af7c:	4af42400 	.word	0x4af42400

0800af80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af80:	b480      	push	{r7}
 800af82:	b089      	sub	sp, #36	@ 0x24
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af88:	4ba0      	ldr	r3, [pc, #640]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af92:	4b9e      	ldr	r3, [pc, #632]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af96:	091b      	lsrs	r3, r3, #4
 800af98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af9e:	4b9b      	ldr	r3, [pc, #620]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800afa8:	4b98      	ldr	r3, [pc, #608]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afac:	08db      	lsrs	r3, r3, #3
 800afae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	fb02 f303 	mul.w	r3, r2, r3
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 8111 	beq.w	800b1ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	f000 8083 	beq.w	800b0da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	f200 80a1 	bhi.w	800b11e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d056      	beq.n	800b096 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afe8:	e099      	b.n	800b11e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afea:	4b88      	ldr	r3, [pc, #544]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d02d      	beq.n	800b052 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aff6:	4b85      	ldr	r3, [pc, #532]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	08db      	lsrs	r3, r3, #3
 800affc:	f003 0303 	and.w	r3, r3, #3
 800b000:	4a83      	ldr	r2, [pc, #524]	@ (800b210 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b002:	fa22 f303 	lsr.w	r3, r2, r3
 800b006:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	ee07 3a90 	vmov	s15, r3
 800b018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b020:	4b7a      	ldr	r3, [pc, #488]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b028:	ee07 3a90 	vmov	s15, r3
 800b02c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b030:	ed97 6a03 	vldr	s12, [r7, #12]
 800b034:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b050:	e087      	b.n	800b162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	ee07 3a90 	vmov	s15, r3
 800b058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b218 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b064:	4b69      	ldr	r3, [pc, #420]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06c:	ee07 3a90 	vmov	s15, r3
 800b070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b074:	ed97 6a03 	vldr	s12, [r7, #12]
 800b078:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b07c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b094:	e065      	b.n	800b162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b0a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a8:	4b58      	ldr	r3, [pc, #352]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b0:	ee07 3a90 	vmov	s15, r3
 800b0b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0bc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0d8:	e043      	b.n	800b162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	ee07 3a90 	vmov	s15, r3
 800b0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b220 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ec:	4b47      	ldr	r3, [pc, #284]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b100:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b10c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b114:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b118:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b11c:	e021      	b.n	800b162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b128:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b218 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b12c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b130:	4b36      	ldr	r3, [pc, #216]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b138:	ee07 3a90 	vmov	s15, r3
 800b13c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b140:	ed97 6a03 	vldr	s12, [r7, #12]
 800b144:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b14c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b160:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b162:	4b2a      	ldr	r3, [pc, #168]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b166:	0a5b      	lsrs	r3, r3, #9
 800b168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b16c:	ee07 3a90 	vmov	s15, r3
 800b170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b17c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b188:	ee17 2a90 	vmov	r2, s15
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b190:	4b1e      	ldr	r3, [pc, #120]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1b6:	ee17 2a90 	vmov	r2, s15
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b1be:	4b13      	ldr	r3, [pc, #76]	@ (800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c2:	0e1b      	lsrs	r3, r3, #24
 800b1c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1e4:	ee17 2a90 	vmov	r2, s15
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1ec:	e008      	b.n	800b200 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	609a      	str	r2, [r3, #8]
}
 800b200:	bf00      	nop
 800b202:	3724      	adds	r7, #36	@ 0x24
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	58024400 	.word	0x58024400
 800b210:	03d09000 	.word	0x03d09000
 800b214:	46000000 	.word	0x46000000
 800b218:	4c742400 	.word	0x4c742400
 800b21c:	4a742400 	.word	0x4a742400
 800b220:	4af42400 	.word	0x4af42400

0800b224 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b232:	4b53      	ldr	r3, [pc, #332]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b236:	f003 0303 	and.w	r3, r3, #3
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d101      	bne.n	800b242 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e099      	b.n	800b376 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b242:	4b4f      	ldr	r3, [pc, #316]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a4e      	ldr	r2, [pc, #312]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b248:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b24e:	f7f7 fa4f 	bl	80026f0 <HAL_GetTick>
 800b252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b254:	e008      	b.n	800b268 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b256:	f7f7 fa4b 	bl	80026f0 <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	d901      	bls.n	800b268 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e086      	b.n	800b376 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b268:	4b45      	ldr	r3, [pc, #276]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1f0      	bne.n	800b256 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b274:	4b42      	ldr	r3, [pc, #264]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b278:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	031b      	lsls	r3, r3, #12
 800b282:	493f      	ldr	r1, [pc, #252]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b284:	4313      	orrs	r3, r2
 800b286:	628b      	str	r3, [r1, #40]	@ 0x28
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	3b01      	subs	r3, #1
 800b298:	025b      	lsls	r3, r3, #9
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	431a      	orrs	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	041b      	lsls	r3, r3, #16
 800b2a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	061b      	lsls	r3, r3, #24
 800b2b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b2b8:	4931      	ldr	r1, [pc, #196]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b2be:	4b30      	ldr	r3, [pc, #192]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	492d      	ldr	r1, [pc, #180]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2d0:	4b2b      	ldr	r3, [pc, #172]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d4:	f023 0220 	bic.w	r2, r3, #32
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	4928      	ldr	r1, [pc, #160]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2e2:	4b27      	ldr	r3, [pc, #156]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e6:	4a26      	ldr	r2, [pc, #152]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2e8:	f023 0310 	bic.w	r3, r3, #16
 800b2ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2ee:	4b24      	ldr	r3, [pc, #144]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2f2:	4b24      	ldr	r3, [pc, #144]	@ (800b384 <RCCEx_PLL2_Config+0x160>)
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	69d2      	ldr	r2, [r2, #28]
 800b2fa:	00d2      	lsls	r2, r2, #3
 800b2fc:	4920      	ldr	r1, [pc, #128]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b302:	4b1f      	ldr	r3, [pc, #124]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b306:	4a1e      	ldr	r2, [pc, #120]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b308:	f043 0310 	orr.w	r3, r3, #16
 800b30c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d106      	bne.n	800b322 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b314:	4b1a      	ldr	r3, [pc, #104]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b318:	4a19      	ldr	r2, [pc, #100]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b31a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b31e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b320:	e00f      	b.n	800b342 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d106      	bne.n	800b336 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b328:	4b15      	ldr	r3, [pc, #84]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32c:	4a14      	ldr	r2, [pc, #80]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b32e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b332:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b334:	e005      	b.n	800b342 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b336:	4b12      	ldr	r3, [pc, #72]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33a:	4a11      	ldr	r2, [pc, #68]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b33c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b340:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b342:	4b0f      	ldr	r3, [pc, #60]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a0e      	ldr	r2, [pc, #56]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b348:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b34c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b34e:	f7f7 f9cf 	bl	80026f0 <HAL_GetTick>
 800b352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b354:	e008      	b.n	800b368 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b356:	f7f7 f9cb 	bl	80026f0 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	d901      	bls.n	800b368 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e006      	b.n	800b376 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b368:	4b05      	ldr	r3, [pc, #20]	@ (800b380 <RCCEx_PLL2_Config+0x15c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d0f0      	beq.n	800b356 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	58024400 	.word	0x58024400
 800b384:	ffff0007 	.word	0xffff0007

0800b388 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b396:	4b53      	ldr	r3, [pc, #332]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d101      	bne.n	800b3a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e099      	b.n	800b4da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b3a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a4e      	ldr	r2, [pc, #312]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3b2:	f7f7 f99d 	bl	80026f0 <HAL_GetTick>
 800b3b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3b8:	e008      	b.n	800b3cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3ba:	f7f7 f999 	bl	80026f0 <HAL_GetTick>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d901      	bls.n	800b3cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e086      	b.n	800b4da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3cc:	4b45      	ldr	r3, [pc, #276]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1f0      	bne.n	800b3ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3d8:	4b42      	ldr	r3, [pc, #264]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	051b      	lsls	r3, r3, #20
 800b3e6:	493f      	ldr	r1, [pc, #252]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	025b      	lsls	r3, r3, #9
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	431a      	orrs	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	3b01      	subs	r3, #1
 800b408:	041b      	lsls	r3, r3, #16
 800b40a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b40e:	431a      	orrs	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	3b01      	subs	r3, #1
 800b416:	061b      	lsls	r3, r3, #24
 800b418:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b41c:	4931      	ldr	r1, [pc, #196]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b422:	4b30      	ldr	r3, [pc, #192]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b426:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	492d      	ldr	r1, [pc, #180]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b430:	4313      	orrs	r3, r2
 800b432:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b434:	4b2b      	ldr	r3, [pc, #172]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b438:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	4928      	ldr	r1, [pc, #160]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b442:	4313      	orrs	r3, r2
 800b444:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b446:	4b27      	ldr	r3, [pc, #156]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44a:	4a26      	ldr	r2, [pc, #152]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b44c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b450:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b452:	4b24      	ldr	r3, [pc, #144]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b456:	4b24      	ldr	r3, [pc, #144]	@ (800b4e8 <RCCEx_PLL3_Config+0x160>)
 800b458:	4013      	ands	r3, r2
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	69d2      	ldr	r2, [r2, #28]
 800b45e:	00d2      	lsls	r2, r2, #3
 800b460:	4920      	ldr	r1, [pc, #128]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b462:	4313      	orrs	r3, r2
 800b464:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b466:	4b1f      	ldr	r3, [pc, #124]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b46c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b470:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d106      	bne.n	800b486 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b478:	4b1a      	ldr	r3, [pc, #104]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47c:	4a19      	ldr	r2, [pc, #100]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b47e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b482:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b484:	e00f      	b.n	800b4a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d106      	bne.n	800b49a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b48c:	4b15      	ldr	r3, [pc, #84]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b490:	4a14      	ldr	r2, [pc, #80]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b492:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b496:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b498:	e005      	b.n	800b4a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b49a:	4b12      	ldr	r3, [pc, #72]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49e:	4a11      	ldr	r2, [pc, #68]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b4a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b4a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b4a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b4ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4b2:	f7f7 f91d 	bl	80026f0 <HAL_GetTick>
 800b4b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4b8:	e008      	b.n	800b4cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4ba:	f7f7 f919 	bl	80026f0 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d901      	bls.n	800b4cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e006      	b.n	800b4da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4cc:	4b05      	ldr	r3, [pc, #20]	@ (800b4e4 <RCCEx_PLL3_Config+0x15c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0f0      	beq.n	800b4ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	58024400 	.word	0x58024400
 800b4e8:	ffff0007 	.word	0xffff0007

0800b4ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e10f      	b.n	800b71e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a87      	ldr	r2, [pc, #540]	@ (800b728 <HAL_SPI_Init+0x23c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d00f      	beq.n	800b52e <HAL_SPI_Init+0x42>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a86      	ldr	r2, [pc, #536]	@ (800b72c <HAL_SPI_Init+0x240>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d00a      	beq.n	800b52e <HAL_SPI_Init+0x42>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a84      	ldr	r2, [pc, #528]	@ (800b730 <HAL_SPI_Init+0x244>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d005      	beq.n	800b52e <HAL_SPI_Init+0x42>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	2b0f      	cmp	r3, #15
 800b528:	d901      	bls.n	800b52e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e0f7      	b.n	800b71e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fbba 	bl	800bca8 <SPI_GetPacketSize>
 800b534:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a7b      	ldr	r2, [pc, #492]	@ (800b728 <HAL_SPI_Init+0x23c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00c      	beq.n	800b55a <HAL_SPI_Init+0x6e>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a79      	ldr	r2, [pc, #484]	@ (800b72c <HAL_SPI_Init+0x240>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d007      	beq.n	800b55a <HAL_SPI_Init+0x6e>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a78      	ldr	r2, [pc, #480]	@ (800b730 <HAL_SPI_Init+0x244>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d002      	beq.n	800b55a <HAL_SPI_Init+0x6e>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b08      	cmp	r3, #8
 800b558:	d811      	bhi.n	800b57e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b55e:	4a72      	ldr	r2, [pc, #456]	@ (800b728 <HAL_SPI_Init+0x23c>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d009      	beq.n	800b578 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a70      	ldr	r2, [pc, #448]	@ (800b72c <HAL_SPI_Init+0x240>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d004      	beq.n	800b578 <HAL_SPI_Init+0x8c>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a6f      	ldr	r2, [pc, #444]	@ (800b730 <HAL_SPI_Init+0x244>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d104      	bne.n	800b582 <HAL_SPI_Init+0x96>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b10      	cmp	r3, #16
 800b57c:	d901      	bls.n	800b582 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e0cd      	b.n	800b71e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7f6 f8ae 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0201 	bic.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b5be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5c8:	d119      	bne.n	800b5fe <HAL_SPI_Init+0x112>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5d2:	d103      	bne.n	800b5dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d008      	beq.n	800b5ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10c      	bne.n	800b5fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ec:	d107      	bne.n	800b5fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b5fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00f      	beq.n	800b62a <HAL_SPI_Init+0x13e>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	2b06      	cmp	r3, #6
 800b610:	d90b      	bls.n	800b62a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	e007      	b.n	800b63a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b638:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	69da      	ldr	r2, [r3, #28]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b642:	431a      	orrs	r2, r3
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b64c:	ea42 0103 	orr.w	r1, r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b664:	431a      	orrs	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	431a      	orrs	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	431a      	orrs	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	431a      	orrs	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	431a      	orrs	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	431a      	orrs	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b68e:	431a      	orrs	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	431a      	orrs	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b69a:	ea42 0103 	orr.w	r1, r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d113      	bne.n	800b6da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b6d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f022 0201 	bic.w	r2, r2, #1
 800b6e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00a      	beq.n	800b70c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	430a      	orrs	r2, r1
 800b70a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	40013000 	.word	0x40013000
 800b72c:	40003800 	.word	0x40003800
 800b730:	40003c00 	.word	0x40003c00

0800b734 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b08a      	sub	sp, #40	@ 0x28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b74c:	6a3a      	ldr	r2, [r7, #32]
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	4013      	ands	r3, r2
 800b752:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b75c:	2300      	movs	r3, #0
 800b75e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b766:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3330      	adds	r3, #48	@ 0x30
 800b76e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b776:	2b00      	cmp	r3, #0
 800b778:	d010      	beq.n	800b79c <HAL_SPI_IRQHandler+0x68>
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	f003 0308 	and.w	r3, r3, #8
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00b      	beq.n	800b79c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	699a      	ldr	r2, [r3, #24]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b792:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f9c3 	bl	800bb20 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b79a:	e192      	b.n	800bac2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d113      	bne.n	800b7ce <HAL_SPI_IRQHandler+0x9a>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	f003 0320 	and.w	r3, r3, #32
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10e      	bne.n	800b7ce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d009      	beq.n	800b7ce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	4798      	blx	r3
    handled = 1UL;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10f      	bne.n	800b7f8 <HAL_SPI_IRQHandler+0xc4>
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00a      	beq.n	800b7f8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d105      	bne.n	800b7f8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	4798      	blx	r3
    handled = 1UL;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	f003 0320 	and.w	r3, r3, #32
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10f      	bne.n	800b822 <HAL_SPI_IRQHandler+0xee>
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	f003 0302 	and.w	r3, r3, #2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b812:	2b00      	cmp	r3, #0
 800b814:	d105      	bne.n	800b822 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	4798      	blx	r3
    handled = 1UL;
 800b81e:	2301      	movs	r3, #1
 800b820:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b824:	2b00      	cmp	r3, #0
 800b826:	f040 8147 	bne.w	800bab8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	f003 0308 	and.w	r3, r3, #8
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 808b 	beq.w	800b94c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	699a      	ldr	r2, [r3, #24]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f042 0208 	orr.w	r2, r2, #8
 800b844:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	699a      	ldr	r2, [r3, #24]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 0210 	orr.w	r2, r2, #16
 800b854:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	699a      	ldr	r2, [r3, #24]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b864:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	691a      	ldr	r2, [r3, #16]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f022 0208 	bic.w	r2, r2, #8
 800b874:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d13d      	bne.n	800b900 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b884:	e036      	b.n	800b8f4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	2b0f      	cmp	r3, #15
 800b88c:	d90b      	bls.n	800b8a6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b896:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b898:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b89e:	1d1a      	adds	r2, r3, #4
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	665a      	str	r2, [r3, #100]	@ 0x64
 800b8a4:	e01d      	b.n	800b8e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	2b07      	cmp	r3, #7
 800b8ac:	d90b      	bls.n	800b8c6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	8812      	ldrh	r2, [r2, #0]
 800b8b6:	b292      	uxth	r2, r2
 800b8b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8be:	1c9a      	adds	r2, r3, #2
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	665a      	str	r2, [r3, #100]	@ 0x64
 800b8c4:	e00d      	b.n	800b8e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8d2:	7812      	ldrb	r2, [r2, #0]
 800b8d4:	b2d2      	uxtb	r2, r2
 800b8d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1c2      	bne.n	800b886 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f931 	bl	800bb68 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f8f7 	bl	800bb0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b91e:	e0d0      	b.n	800bac2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b920:	7cfb      	ldrb	r3, [r7, #19]
 800b922:	2b05      	cmp	r3, #5
 800b924:	d103      	bne.n	800b92e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f8e6 	bl	800baf8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b92c:	e0c6      	b.n	800babc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b92e:	7cfb      	ldrb	r3, [r7, #19]
 800b930:	2b04      	cmp	r3, #4
 800b932:	d103      	bne.n	800b93c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f8d5 	bl	800bae4 <HAL_SPI_RxCpltCallback>
    return;
 800b93a:	e0bf      	b.n	800babc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b93c:	7cfb      	ldrb	r3, [r7, #19]
 800b93e:	2b03      	cmp	r3, #3
 800b940:	f040 80bc 	bne.w	800babc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f8c3 	bl	800bad0 <HAL_SPI_TxCpltCallback>
    return;
 800b94a:	e0b7      	b.n	800babc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b952:	2b00      	cmp	r3, #0
 800b954:	f000 80b5 	beq.w	800bac2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00f      	beq.n	800b982 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b968:	f043 0204 	orr.w	r2, r3, #4
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	699a      	ldr	r2, [r3, #24]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b980:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00f      	beq.n	800b9ac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b992:	f043 0201 	orr.w	r2, r3, #1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	699a      	ldr	r2, [r3, #24]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00f      	beq.n	800b9d6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9bc:	f043 0208 	orr.w	r2, r3, #8
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	699a      	ldr	r2, [r3, #24]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f003 0320 	and.w	r3, r3, #32
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00f      	beq.n	800ba00 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	699a      	ldr	r2, [r3, #24]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0220 	orr.w	r2, r2, #32
 800b9fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d05a      	beq.n	800bac0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f022 0201 	bic.w	r2, r2, #1
 800ba18:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6919      	ldr	r1, [r3, #16]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	4b28      	ldr	r3, [pc, #160]	@ (800bac8 <HAL_SPI_IRQHandler+0x394>)
 800ba26:	400b      	ands	r3, r1
 800ba28:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ba30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ba34:	d138      	bne.n	800baa8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ba44:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d013      	beq.n	800ba76 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba52:	4a1e      	ldr	r2, [pc, #120]	@ (800bacc <HAL_SPI_IRQHandler+0x398>)
 800ba54:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f8 fe3e 	bl	80046dc <HAL_DMA_Abort_IT>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d020      	beq.n	800bac0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba82:	4a12      	ldr	r2, [pc, #72]	@ (800bacc <HAL_SPI_IRQHandler+0x398>)
 800ba84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7f8 fe26 	bl	80046dc <HAL_DMA_Abort_IT>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d014      	beq.n	800bac0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800baa6:	e00b      	b.n	800bac0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f82b 	bl	800bb0c <HAL_SPI_ErrorCallback>
    return;
 800bab6:	e003      	b.n	800bac0 <HAL_SPI_IRQHandler+0x38c>
    return;
 800bab8:	bf00      	nop
 800baba:	e002      	b.n	800bac2 <HAL_SPI_IRQHandler+0x38e>
    return;
 800babc:	bf00      	nop
 800babe:	e000      	b.n	800bac2 <HAL_SPI_IRQHandler+0x38e>
    return;
 800bac0:	bf00      	nop
  }
}
 800bac2:	3728      	adds	r7, #40	@ 0x28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	fffffc94 	.word	0xfffffc94
 800bacc:	0800bb35 	.word	0x0800bb35

0800bad0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f7ff ffd6 	bl	800bb0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bb60:	bf00      	nop
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	699a      	ldr	r2, [r3, #24]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f042 0208 	orr.w	r2, r2, #8
 800bb86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	699a      	ldr	r2, [r3, #24]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f042 0210 	orr.w	r2, r2, #16
 800bb96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f022 0201 	bic.w	r2, r2, #1
 800bba6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	6919      	ldr	r1, [r3, #16]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4b3c      	ldr	r3, [pc, #240]	@ (800bca4 <SPI_CloseTransfer+0x13c>)
 800bbb4:	400b      	ands	r3, r1
 800bbb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	689a      	ldr	r2, [r3, #8]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bbc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b04      	cmp	r3, #4
 800bbd2:	d014      	beq.n	800bbfe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f003 0320 	and.w	r3, r3, #32
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00f      	beq.n	800bbfe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbe4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	699a      	ldr	r2, [r3, #24]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f042 0220 	orr.w	r2, r2, #32
 800bbfc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d014      	beq.n	800bc34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00f      	beq.n	800bc34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc1a:	f043 0204 	orr.w	r2, r3, #4
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	699a      	ldr	r2, [r3, #24]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00f      	beq.n	800bc5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc44:	f043 0201 	orr.w	r2, r3, #1
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	699a      	ldr	r2, [r3, #24]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00f      	beq.n	800bc88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc6e:	f043 0208 	orr.w	r2, r3, #8
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699a      	ldr	r2, [r3, #24]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bc86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bc98:	bf00      	nop
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	fffffc90 	.word	0xfffffc90

0800bca8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb4:	095b      	lsrs	r3, r3, #5
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	3307      	adds	r3, #7
 800bcc6:	08db      	lsrs	r3, r3, #3
 800bcc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	fb02 f303 	mul.w	r3, r2, r3
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e049      	b.n	800bd84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d106      	bne.n	800bd0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f841 	bl	800bd8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2202      	movs	r2, #2
 800bd0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3304      	adds	r3, #4
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	f000 f9e7 	bl	800c0f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d001      	beq.n	800bdb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e054      	b.n	800be62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68da      	ldr	r2, [r3, #12]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0201 	orr.w	r2, r2, #1
 800bdce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a26      	ldr	r2, [pc, #152]	@ (800be70 <HAL_TIM_Base_Start_IT+0xd0>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d022      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x80>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bde2:	d01d      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x80>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a22      	ldr	r2, [pc, #136]	@ (800be74 <HAL_TIM_Base_Start_IT+0xd4>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d018      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x80>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a21      	ldr	r2, [pc, #132]	@ (800be78 <HAL_TIM_Base_Start_IT+0xd8>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d013      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x80>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a1f      	ldr	r2, [pc, #124]	@ (800be7c <HAL_TIM_Base_Start_IT+0xdc>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d00e      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x80>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a1e      	ldr	r2, [pc, #120]	@ (800be80 <HAL_TIM_Base_Start_IT+0xe0>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d009      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x80>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a1c      	ldr	r2, [pc, #112]	@ (800be84 <HAL_TIM_Base_Start_IT+0xe4>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d004      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x80>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a1b      	ldr	r2, [pc, #108]	@ (800be88 <HAL_TIM_Base_Start_IT+0xe8>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d115      	bne.n	800be4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	689a      	ldr	r2, [r3, #8]
 800be26:	4b19      	ldr	r3, [pc, #100]	@ (800be8c <HAL_TIM_Base_Start_IT+0xec>)
 800be28:	4013      	ands	r3, r2
 800be2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b06      	cmp	r3, #6
 800be30:	d015      	beq.n	800be5e <HAL_TIM_Base_Start_IT+0xbe>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be38:	d011      	beq.n	800be5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f042 0201 	orr.w	r2, r2, #1
 800be48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be4a:	e008      	b.n	800be5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f042 0201 	orr.w	r2, r2, #1
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	e000      	b.n	800be60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	40010000 	.word	0x40010000
 800be74:	40000400 	.word	0x40000400
 800be78:	40000800 	.word	0x40000800
 800be7c:	40000c00 	.word	0x40000c00
 800be80:	40010400 	.word	0x40010400
 800be84:	40001800 	.word	0x40001800
 800be88:	40014000 	.word	0x40014000
 800be8c:	00010007 	.word	0x00010007

0800be90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d020      	beq.n	800bef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d01b      	beq.n	800bef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f06f 0202 	mvn.w	r2, #2
 800bec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	f003 0303 	and.w	r3, r3, #3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f8e9 	bl	800c0b2 <HAL_TIM_IC_CaptureCallback>
 800bee0:	e005      	b.n	800beee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f8db 	bl	800c09e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f8ec 	bl	800c0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b00      	cmp	r3, #0
 800befc:	d020      	beq.n	800bf40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f003 0304 	and.w	r3, r3, #4
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d01b      	beq.n	800bf40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f06f 0204 	mvn.w	r2, #4
 800bf10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2202      	movs	r2, #2
 800bf16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d003      	beq.n	800bf2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f8c3 	bl	800c0b2 <HAL_TIM_IC_CaptureCallback>
 800bf2c:	e005      	b.n	800bf3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f8b5 	bl	800c09e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f8c6 	bl	800c0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f003 0308 	and.w	r3, r3, #8
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d020      	beq.n	800bf8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f003 0308 	and.w	r3, r3, #8
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d01b      	beq.n	800bf8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f06f 0208 	mvn.w	r2, #8
 800bf5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2204      	movs	r2, #4
 800bf62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	f003 0303 	and.w	r3, r3, #3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f89d 	bl	800c0b2 <HAL_TIM_IC_CaptureCallback>
 800bf78:	e005      	b.n	800bf86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f88f 	bl	800c09e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f8a0 	bl	800c0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	f003 0310 	and.w	r3, r3, #16
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d020      	beq.n	800bfd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f003 0310 	and.w	r3, r3, #16
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d01b      	beq.n	800bfd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f06f 0210 	mvn.w	r2, #16
 800bfa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2208      	movs	r2, #8
 800bfae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d003      	beq.n	800bfc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f877 	bl	800c0b2 <HAL_TIM_IC_CaptureCallback>
 800bfc4:	e005      	b.n	800bfd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f869 	bl	800c09e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f87a 	bl	800c0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00c      	beq.n	800bffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d007      	beq.n	800bffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f06f 0201 	mvn.w	r2, #1
 800bff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7f5 f8ca 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c002:	2b00      	cmp	r3, #0
 800c004:	d104      	bne.n	800c010 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00c      	beq.n	800c02a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c016:	2b00      	cmp	r3, #0
 800c018:	d007      	beq.n	800c02a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f90d 	bl	800c244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00c      	beq.n	800c04e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d007      	beq.n	800c04e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f905 	bl	800c258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00c      	beq.n	800c072 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d007      	beq.n	800c072 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f834 	bl	800c0da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f003 0320 	and.w	r3, r3, #32
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00c      	beq.n	800c096 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d007      	beq.n	800c096 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f06f 0220 	mvn.w	r2, #32
 800c08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f8cd 	bl	800c230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b083      	sub	sp, #12
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b083      	sub	sp, #12
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0ce:	bf00      	nop
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0e2:	bf00      	nop
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
	...

0800c0f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a43      	ldr	r2, [pc, #268]	@ (800c210 <TIM_Base_SetConfig+0x120>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d013      	beq.n	800c130 <TIM_Base_SetConfig+0x40>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c10e:	d00f      	beq.n	800c130 <TIM_Base_SetConfig+0x40>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a40      	ldr	r2, [pc, #256]	@ (800c214 <TIM_Base_SetConfig+0x124>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d00b      	beq.n	800c130 <TIM_Base_SetConfig+0x40>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a3f      	ldr	r2, [pc, #252]	@ (800c218 <TIM_Base_SetConfig+0x128>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d007      	beq.n	800c130 <TIM_Base_SetConfig+0x40>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a3e      	ldr	r2, [pc, #248]	@ (800c21c <TIM_Base_SetConfig+0x12c>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d003      	beq.n	800c130 <TIM_Base_SetConfig+0x40>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a3d      	ldr	r2, [pc, #244]	@ (800c220 <TIM_Base_SetConfig+0x130>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d108      	bne.n	800c142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4313      	orrs	r3, r2
 800c140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a32      	ldr	r2, [pc, #200]	@ (800c210 <TIM_Base_SetConfig+0x120>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d01f      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c150:	d01b      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a2f      	ldr	r2, [pc, #188]	@ (800c214 <TIM_Base_SetConfig+0x124>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d017      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4a2e      	ldr	r2, [pc, #184]	@ (800c218 <TIM_Base_SetConfig+0x128>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d013      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a2d      	ldr	r2, [pc, #180]	@ (800c21c <TIM_Base_SetConfig+0x12c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d00f      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a2c      	ldr	r2, [pc, #176]	@ (800c220 <TIM_Base_SetConfig+0x130>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d00b      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a2b      	ldr	r2, [pc, #172]	@ (800c224 <TIM_Base_SetConfig+0x134>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d007      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a2a      	ldr	r2, [pc, #168]	@ (800c228 <TIM_Base_SetConfig+0x138>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d003      	beq.n	800c18a <TIM_Base_SetConfig+0x9a>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a29      	ldr	r2, [pc, #164]	@ (800c22c <TIM_Base_SetConfig+0x13c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d108      	bne.n	800c19c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	4313      	orrs	r3, r2
 800c19a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a14      	ldr	r2, [pc, #80]	@ (800c210 <TIM_Base_SetConfig+0x120>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d00f      	beq.n	800c1e2 <TIM_Base_SetConfig+0xf2>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a16      	ldr	r2, [pc, #88]	@ (800c220 <TIM_Base_SetConfig+0x130>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d00b      	beq.n	800c1e2 <TIM_Base_SetConfig+0xf2>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a15      	ldr	r2, [pc, #84]	@ (800c224 <TIM_Base_SetConfig+0x134>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d007      	beq.n	800c1e2 <TIM_Base_SetConfig+0xf2>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a14      	ldr	r2, [pc, #80]	@ (800c228 <TIM_Base_SetConfig+0x138>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d003      	beq.n	800c1e2 <TIM_Base_SetConfig+0xf2>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a13      	ldr	r2, [pc, #76]	@ (800c22c <TIM_Base_SetConfig+0x13c>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d103      	bne.n	800c1ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	691a      	ldr	r2, [r3, #16]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f043 0204 	orr.w	r2, r3, #4
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	601a      	str	r2, [r3, #0]
}
 800c202:	bf00      	nop
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	40010000 	.word	0x40010000
 800c214:	40000400 	.word	0x40000400
 800c218:	40000800 	.word	0x40000800
 800c21c:	40000c00 	.word	0x40000c00
 800c220:	40010400 	.word	0x40010400
 800c224:	40014000 	.word	0x40014000
 800c228:	40014400 	.word	0x40014400
 800c22c:	40014800 	.word	0x40014800

0800c230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c24c:	bf00      	nop
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e042      	b.n	800c304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c284:	2b00      	cmp	r3, #0
 800c286:	d106      	bne.n	800c296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7f5 f9bf 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2224      	movs	r2, #36	@ 0x24
 800c29a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f022 0201 	bic.w	r2, r2, #1
 800c2ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 fa14 	bl	800d6e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fca9 	bl	800cc14 <UART_SetConfig>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d101      	bne.n	800c2cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e01b      	b.n	800c304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c2da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	689a      	ldr	r2, [r3, #8]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c2ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f042 0201 	orr.w	r2, r2, #1
 800c2fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 fa93 	bl	800d828 <UART_CheckIdleState>
 800c302:	4603      	mov	r3, r0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08a      	sub	sp, #40	@ 0x28
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	603b      	str	r3, [r7, #0]
 800c318:	4613      	mov	r3, r2
 800c31a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c322:	2b20      	cmp	r3, #32
 800c324:	d17b      	bne.n	800c41e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <HAL_UART_Transmit+0x26>
 800c32c:	88fb      	ldrh	r3, [r7, #6]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e074      	b.n	800c420 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2221      	movs	r2, #33	@ 0x21
 800c342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c346:	f7f6 f9d3 	bl	80026f0 <HAL_GetTick>
 800c34a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	88fa      	ldrh	r2, [r7, #6]
 800c350:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	88fa      	ldrh	r2, [r7, #6]
 800c358:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c364:	d108      	bne.n	800c378 <HAL_UART_Transmit+0x6c>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d104      	bne.n	800c378 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c36e:	2300      	movs	r3, #0
 800c370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	61bb      	str	r3, [r7, #24]
 800c376:	e003      	b.n	800c380 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c37c:	2300      	movs	r3, #0
 800c37e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c380:	e030      	b.n	800c3e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	2200      	movs	r2, #0
 800c38a:	2180      	movs	r1, #128	@ 0x80
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f001 faf5 	bl	800d97c <UART_WaitOnFlagUntilTimeout>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2220      	movs	r2, #32
 800c39c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e03d      	b.n	800c420 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10b      	bne.n	800c3c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	3302      	adds	r3, #2
 800c3be:	61bb      	str	r3, [r7, #24]
 800c3c0:	e007      	b.n	800c3d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1c8      	bne.n	800c382 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2140      	movs	r1, #64	@ 0x40
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f001 fabe 	bl	800d97c <UART_WaitOnFlagUntilTimeout>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d005      	beq.n	800c412 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2220      	movs	r2, #32
 800c40a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	e006      	b.n	800c420 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2220      	movs	r2, #32
 800c416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e000      	b.n	800c420 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c41e:	2302      	movs	r3, #2
  }
}
 800c420:	4618      	mov	r0, r3
 800c422:	3720      	adds	r7, #32
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b0ba      	sub	sp, #232	@ 0xe8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	69db      	ldr	r3, [r3, #28]
 800c436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c44e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c452:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c456:	4013      	ands	r3, r2
 800c458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c45c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c460:	2b00      	cmp	r3, #0
 800c462:	d11b      	bne.n	800c49c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c468:	f003 0320 	and.w	r3, r3, #32
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d015      	beq.n	800c49c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c474:	f003 0320 	and.w	r3, r3, #32
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d105      	bne.n	800c488 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c47c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d009      	beq.n	800c49c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 8393 	beq.w	800cbb8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	4798      	blx	r3
      }
      return;
 800c49a:	e38d      	b.n	800cbb8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c49c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 8123 	beq.w	800c6ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c4a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c4aa:	4b8d      	ldr	r3, [pc, #564]	@ (800c6e0 <HAL_UART_IRQHandler+0x2b8>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d106      	bne.n	800c4c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c4b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c4b6:	4b8b      	ldr	r3, [pc, #556]	@ (800c6e4 <HAL_UART_IRQHandler+0x2bc>)
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 8116 	beq.w	800c6ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4c4:	f003 0301 	and.w	r3, r3, #1
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d011      	beq.n	800c4f0 <HAL_UART_IRQHandler+0xc8>
 800c4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00b      	beq.n	800c4f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4e6:	f043 0201 	orr.w	r2, r3, #1
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d011      	beq.n	800c520 <HAL_UART_IRQHandler+0xf8>
 800c4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00b      	beq.n	800c520 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2202      	movs	r2, #2
 800c50e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c516:	f043 0204 	orr.w	r2, r3, #4
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c524:	f003 0304 	and.w	r3, r3, #4
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d011      	beq.n	800c550 <HAL_UART_IRQHandler+0x128>
 800c52c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00b      	beq.n	800c550 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2204      	movs	r2, #4
 800c53e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c546:	f043 0202 	orr.w	r2, r3, #2
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c554:	f003 0308 	and.w	r3, r3, #8
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d017      	beq.n	800c58c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c560:	f003 0320 	and.w	r3, r3, #32
 800c564:	2b00      	cmp	r3, #0
 800c566:	d105      	bne.n	800c574 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c568:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c56c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6e0 <HAL_UART_IRQHandler+0x2b8>)
 800c56e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00b      	beq.n	800c58c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2208      	movs	r2, #8
 800c57a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c582:	f043 0208 	orr.w	r2, r3, #8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c594:	2b00      	cmp	r3, #0
 800c596:	d012      	beq.n	800c5be <HAL_UART_IRQHandler+0x196>
 800c598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c59c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00c      	beq.n	800c5be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c5ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5b4:	f043 0220 	orr.w	r2, r3, #32
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 82f9 	beq.w	800cbbc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ce:	f003 0320 	and.w	r3, r3, #32
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d013      	beq.n	800c5fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d105      	bne.n	800c5ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d007      	beq.n	800c5fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c612:	2b40      	cmp	r3, #64	@ 0x40
 800c614:	d005      	beq.n	800c622 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c61a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d054      	beq.n	800c6cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f001 fa18 	bl	800da58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c632:	2b40      	cmp	r3, #64	@ 0x40
 800c634:	d146      	bne.n	800c6c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3308      	adds	r3, #8
 800c63c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c644:	e853 3f00 	ldrex	r3, [r3]
 800c648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c64c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3308      	adds	r3, #8
 800c65e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c66e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c672:	e841 2300 	strex	r3, r2, [r1]
 800c676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c67a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1d9      	bne.n	800c636 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d017      	beq.n	800c6bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c692:	4a15      	ldr	r2, [pc, #84]	@ (800c6e8 <HAL_UART_IRQHandler+0x2c0>)
 800c694:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7f8 f81d 	bl	80046dc <HAL_DMA_Abort_IT>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d019      	beq.n	800c6dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ba:	e00f      	b.n	800c6dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fa93 	bl	800cbe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c2:	e00b      	b.n	800c6dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fa8f 	bl	800cbe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ca:	e007      	b.n	800c6dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fa8b 	bl	800cbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c6da:	e26f      	b.n	800cbbc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6dc:	bf00      	nop
    return;
 800c6de:	e26d      	b.n	800cbbc <HAL_UART_IRQHandler+0x794>
 800c6e0:	10000001 	.word	0x10000001
 800c6e4:	04000120 	.word	0x04000120
 800c6e8:	0800db25 	.word	0x0800db25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	f040 8203 	bne.w	800cafc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6fa:	f003 0310 	and.w	r3, r3, #16
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 81fc 	beq.w	800cafc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c708:	f003 0310 	and.w	r3, r3, #16
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 81f5 	beq.w	800cafc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2210      	movs	r2, #16
 800c718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c724:	2b40      	cmp	r3, #64	@ 0x40
 800c726:	f040 816d 	bne.w	800ca04 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4aa4      	ldr	r2, [pc, #656]	@ (800c9c4 <HAL_UART_IRQHandler+0x59c>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d068      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4aa1      	ldr	r2, [pc, #644]	@ (800c9c8 <HAL_UART_IRQHandler+0x5a0>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d061      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a9f      	ldr	r2, [pc, #636]	@ (800c9cc <HAL_UART_IRQHandler+0x5a4>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d05a      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a9c      	ldr	r2, [pc, #624]	@ (800c9d0 <HAL_UART_IRQHandler+0x5a8>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d053      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a9a      	ldr	r2, [pc, #616]	@ (800c9d4 <HAL_UART_IRQHandler+0x5ac>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d04c      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a97      	ldr	r2, [pc, #604]	@ (800c9d8 <HAL_UART_IRQHandler+0x5b0>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d045      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a95      	ldr	r2, [pc, #596]	@ (800c9dc <HAL_UART_IRQHandler+0x5b4>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d03e      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a92      	ldr	r2, [pc, #584]	@ (800c9e0 <HAL_UART_IRQHandler+0x5b8>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d037      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a90      	ldr	r2, [pc, #576]	@ (800c9e4 <HAL_UART_IRQHandler+0x5bc>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d030      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a8d      	ldr	r2, [pc, #564]	@ (800c9e8 <HAL_UART_IRQHandler+0x5c0>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d029      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a8b      	ldr	r2, [pc, #556]	@ (800c9ec <HAL_UART_IRQHandler+0x5c4>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d022      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a88      	ldr	r2, [pc, #544]	@ (800c9f0 <HAL_UART_IRQHandler+0x5c8>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d01b      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a86      	ldr	r2, [pc, #536]	@ (800c9f4 <HAL_UART_IRQHandler+0x5cc>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d014      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a83      	ldr	r2, [pc, #524]	@ (800c9f8 <HAL_UART_IRQHandler+0x5d0>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00d      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a81      	ldr	r2, [pc, #516]	@ (800c9fc <HAL_UART_IRQHandler+0x5d4>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d006      	beq.n	800c80a <HAL_UART_IRQHandler+0x3e2>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a7e      	ldr	r2, [pc, #504]	@ (800ca00 <HAL_UART_IRQHandler+0x5d8>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d106      	bne.n	800c818 <HAL_UART_IRQHandler+0x3f0>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	b29b      	uxth	r3, r3
 800c816:	e005      	b.n	800c824 <HAL_UART_IRQHandler+0x3fc>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	b29b      	uxth	r3, r3
 800c824:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 80ad 	beq.w	800c98c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c838:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c83c:	429a      	cmp	r2, r3
 800c83e:	f080 80a5 	bcs.w	800c98c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c858:	f000 8087 	beq.w	800c96a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c868:	e853 3f00 	ldrex	r3, [r3]
 800c86c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	461a      	mov	r2, r3
 800c882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c88a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c892:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c896:	e841 2300 	strex	r3, r2, [r1]
 800c89a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1da      	bne.n	800c85c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3308      	adds	r3, #8
 800c8ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c8b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8b8:	f023 0301 	bic.w	r3, r3, #1
 800c8bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c8ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e1      	bne.n	800c8a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8ec:	e853 3f00 	ldrex	r3, [r3]
 800c8f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	3308      	adds	r3, #8
 800c902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c906:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c908:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c90c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c90e:	e841 2300 	strex	r3, r2, [r1]
 800c912:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1e3      	bne.n	800c8e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2220      	movs	r2, #32
 800c91e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c930:	e853 3f00 	ldrex	r3, [r3]
 800c934:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c938:	f023 0310 	bic.w	r3, r3, #16
 800c93c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	461a      	mov	r2, r3
 800c946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c94a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c94c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c952:	e841 2300 	strex	r3, r2, [r1]
 800c956:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1e4      	bne.n	800c928 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c964:	4618      	mov	r0, r3
 800c966:	f7f7 fb9b 	bl	80040a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2202      	movs	r2, #2
 800c96e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	b29b      	uxth	r3, r3
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f939 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c98a:	e119      	b.n	800cbc0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c996:	429a      	cmp	r2, r3
 800c998:	f040 8112 	bne.w	800cbc0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9a2:	69db      	ldr	r3, [r3, #28]
 800c9a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9a8:	f040 810a 	bne.w	800cbc0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f91e 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
      return;
 800c9c0:	e0fe      	b.n	800cbc0 <HAL_UART_IRQHandler+0x798>
 800c9c2:	bf00      	nop
 800c9c4:	40020010 	.word	0x40020010
 800c9c8:	40020028 	.word	0x40020028
 800c9cc:	40020040 	.word	0x40020040
 800c9d0:	40020058 	.word	0x40020058
 800c9d4:	40020070 	.word	0x40020070
 800c9d8:	40020088 	.word	0x40020088
 800c9dc:	400200a0 	.word	0x400200a0
 800c9e0:	400200b8 	.word	0x400200b8
 800c9e4:	40020410 	.word	0x40020410
 800c9e8:	40020428 	.word	0x40020428
 800c9ec:	40020440 	.word	0x40020440
 800c9f0:	40020458 	.word	0x40020458
 800c9f4:	40020470 	.word	0x40020470
 800c9f8:	40020488 	.word	0x40020488
 800c9fc:	400204a0 	.word	0x400204a0
 800ca00:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 80cf 	beq.w	800cbc4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800ca26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 80ca 	beq.w	800cbc4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	e853 3f00 	ldrex	r3, [r3]
 800ca3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca52:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e4      	bne.n	800ca30 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca70:	e853 3f00 	ldrex	r3, [r3]
 800ca74:	623b      	str	r3, [r7, #32]
   return(result);
 800ca76:	6a3a      	ldr	r2, [r7, #32]
 800ca78:	4b55      	ldr	r3, [pc, #340]	@ (800cbd0 <HAL_UART_IRQHandler+0x7a8>)
 800ca7a:	4013      	ands	r3, r2
 800ca7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3308      	adds	r3, #8
 800ca86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ca8a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca92:	e841 2300 	strex	r3, r2, [r1]
 800ca96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1e3      	bne.n	800ca66 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2220      	movs	r2, #32
 800caa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	e853 3f00 	ldrex	r3, [r3]
 800cabe:	60fb      	str	r3, [r7, #12]
   return(result);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 0310 	bic.w	r3, r3, #16
 800cac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cad4:	61fb      	str	r3, [r7, #28]
 800cad6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad8:	69b9      	ldr	r1, [r7, #24]
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	e841 2300 	strex	r3, r2, [r1]
 800cae0:	617b      	str	r3, [r7, #20]
   return(result);
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1e4      	bne.n	800cab2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2202      	movs	r2, #2
 800caec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800caee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f881 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cafa:	e063      	b.n	800cbc4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00e      	beq.n	800cb26 <HAL_UART_IRQHandler+0x6fe>
 800cb08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d008      	beq.n	800cb26 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cb1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 f83d 	bl	800db9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb24:	e051      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d014      	beq.n	800cb5c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d105      	bne.n	800cb4a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d008      	beq.n	800cb5c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d03a      	beq.n	800cbc8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
    }
    return;
 800cb5a:	e035      	b.n	800cbc8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d009      	beq.n	800cb7c <HAL_UART_IRQHandler+0x754>
 800cb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d003      	beq.n	800cb7c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 ffe7 	bl	800db48 <UART_EndTransmit_IT>
    return;
 800cb7a:	e026      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d009      	beq.n	800cb9c <HAL_UART_IRQHandler+0x774>
 800cb88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d003      	beq.n	800cb9c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f001 f816 	bl	800dbc6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb9a:	e016      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d010      	beq.n	800cbca <HAL_UART_IRQHandler+0x7a2>
 800cba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	da0c      	bge.n	800cbca <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fffe 	bl	800dbb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbb6:	e008      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
      return;
 800cbb8:	bf00      	nop
 800cbba:	e006      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
    return;
 800cbbc:	bf00      	nop
 800cbbe:	e004      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
      return;
 800cbc0:	bf00      	nop
 800cbc2:	e002      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
      return;
 800cbc4:	bf00      	nop
 800cbc6:	e000      	b.n	800cbca <HAL_UART_IRQHandler+0x7a2>
    return;
 800cbc8:	bf00      	nop
  }
}
 800cbca:	37e8      	adds	r7, #232	@ 0xe8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	effffffe 	.word	0xeffffffe

0800cbd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	460b      	mov	r3, r1
 800cc06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc18:	b092      	sub	sp, #72	@ 0x48
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	689a      	ldr	r2, [r3, #8]
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	431a      	orrs	r2, r3
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	431a      	orrs	r2, r3
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	69db      	ldr	r3, [r3, #28]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	4bbe      	ldr	r3, [pc, #760]	@ (800cf3c <UART_SetConfig+0x328>)
 800cc44:	4013      	ands	r3, r2
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	6812      	ldr	r2, [r2, #0]
 800cc4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc4c:	430b      	orrs	r3, r1
 800cc4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	68da      	ldr	r2, [r3, #12]
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	430a      	orrs	r2, r1
 800cc64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4ab3      	ldr	r2, [pc, #716]	@ (800cf40 <UART_SetConfig+0x32c>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d004      	beq.n	800cc80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	689a      	ldr	r2, [r3, #8]
 800cc86:	4baf      	ldr	r3, [pc, #700]	@ (800cf44 <UART_SetConfig+0x330>)
 800cc88:	4013      	ands	r3, r2
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	6812      	ldr	r2, [r2, #0]
 800cc8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc90:	430b      	orrs	r3, r1
 800cc92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc9a:	f023 010f 	bic.w	r1, r3, #15
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	430a      	orrs	r2, r1
 800cca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4aa6      	ldr	r2, [pc, #664]	@ (800cf48 <UART_SetConfig+0x334>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d177      	bne.n	800cda4 <UART_SetConfig+0x190>
 800ccb4:	4ba5      	ldr	r3, [pc, #660]	@ (800cf4c <UART_SetConfig+0x338>)
 800ccb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccbc:	2b28      	cmp	r3, #40	@ 0x28
 800ccbe:	d86d      	bhi.n	800cd9c <UART_SetConfig+0x188>
 800ccc0:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc8 <UART_SetConfig+0xb4>)
 800ccc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc6:	bf00      	nop
 800ccc8:	0800cd6d 	.word	0x0800cd6d
 800cccc:	0800cd9d 	.word	0x0800cd9d
 800ccd0:	0800cd9d 	.word	0x0800cd9d
 800ccd4:	0800cd9d 	.word	0x0800cd9d
 800ccd8:	0800cd9d 	.word	0x0800cd9d
 800ccdc:	0800cd9d 	.word	0x0800cd9d
 800cce0:	0800cd9d 	.word	0x0800cd9d
 800cce4:	0800cd9d 	.word	0x0800cd9d
 800cce8:	0800cd75 	.word	0x0800cd75
 800ccec:	0800cd9d 	.word	0x0800cd9d
 800ccf0:	0800cd9d 	.word	0x0800cd9d
 800ccf4:	0800cd9d 	.word	0x0800cd9d
 800ccf8:	0800cd9d 	.word	0x0800cd9d
 800ccfc:	0800cd9d 	.word	0x0800cd9d
 800cd00:	0800cd9d 	.word	0x0800cd9d
 800cd04:	0800cd9d 	.word	0x0800cd9d
 800cd08:	0800cd7d 	.word	0x0800cd7d
 800cd0c:	0800cd9d 	.word	0x0800cd9d
 800cd10:	0800cd9d 	.word	0x0800cd9d
 800cd14:	0800cd9d 	.word	0x0800cd9d
 800cd18:	0800cd9d 	.word	0x0800cd9d
 800cd1c:	0800cd9d 	.word	0x0800cd9d
 800cd20:	0800cd9d 	.word	0x0800cd9d
 800cd24:	0800cd9d 	.word	0x0800cd9d
 800cd28:	0800cd85 	.word	0x0800cd85
 800cd2c:	0800cd9d 	.word	0x0800cd9d
 800cd30:	0800cd9d 	.word	0x0800cd9d
 800cd34:	0800cd9d 	.word	0x0800cd9d
 800cd38:	0800cd9d 	.word	0x0800cd9d
 800cd3c:	0800cd9d 	.word	0x0800cd9d
 800cd40:	0800cd9d 	.word	0x0800cd9d
 800cd44:	0800cd9d 	.word	0x0800cd9d
 800cd48:	0800cd8d 	.word	0x0800cd8d
 800cd4c:	0800cd9d 	.word	0x0800cd9d
 800cd50:	0800cd9d 	.word	0x0800cd9d
 800cd54:	0800cd9d 	.word	0x0800cd9d
 800cd58:	0800cd9d 	.word	0x0800cd9d
 800cd5c:	0800cd9d 	.word	0x0800cd9d
 800cd60:	0800cd9d 	.word	0x0800cd9d
 800cd64:	0800cd9d 	.word	0x0800cd9d
 800cd68:	0800cd95 	.word	0x0800cd95
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd72:	e222      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7a:	e21e      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cd7c:	2308      	movs	r3, #8
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd82:	e21a      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cd84:	2310      	movs	r3, #16
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8a:	e216      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cd8c:	2320      	movs	r3, #32
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd92:	e212      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cd94:	2340      	movs	r3, #64	@ 0x40
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e20e      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cd9c:	2380      	movs	r3, #128	@ 0x80
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda2:	e20a      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a69      	ldr	r2, [pc, #420]	@ (800cf50 <UART_SetConfig+0x33c>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d130      	bne.n	800ce10 <UART_SetConfig+0x1fc>
 800cdae:	4b67      	ldr	r3, [pc, #412]	@ (800cf4c <UART_SetConfig+0x338>)
 800cdb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdb2:	f003 0307 	and.w	r3, r3, #7
 800cdb6:	2b05      	cmp	r3, #5
 800cdb8:	d826      	bhi.n	800ce08 <UART_SetConfig+0x1f4>
 800cdba:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc0 <UART_SetConfig+0x1ac>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdd9 	.word	0x0800cdd9
 800cdc4:	0800cde1 	.word	0x0800cde1
 800cdc8:	0800cde9 	.word	0x0800cde9
 800cdcc:	0800cdf1 	.word	0x0800cdf1
 800cdd0:	0800cdf9 	.word	0x0800cdf9
 800cdd4:	0800ce01 	.word	0x0800ce01
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdde:	e1ec      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cde0:	2304      	movs	r3, #4
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde6:	e1e8      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cde8:	2308      	movs	r3, #8
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdee:	e1e4      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cdf0:	2310      	movs	r3, #16
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf6:	e1e0      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cdf8:	2320      	movs	r3, #32
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e1dc      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce00:	2340      	movs	r3, #64	@ 0x40
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e1d8      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce08:	2380      	movs	r3, #128	@ 0x80
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e1d4      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a4f      	ldr	r2, [pc, #316]	@ (800cf54 <UART_SetConfig+0x340>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d130      	bne.n	800ce7c <UART_SetConfig+0x268>
 800ce1a:	4b4c      	ldr	r3, [pc, #304]	@ (800cf4c <UART_SetConfig+0x338>)
 800ce1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce1e:	f003 0307 	and.w	r3, r3, #7
 800ce22:	2b05      	cmp	r3, #5
 800ce24:	d826      	bhi.n	800ce74 <UART_SetConfig+0x260>
 800ce26:	a201      	add	r2, pc, #4	@ (adr r2, 800ce2c <UART_SetConfig+0x218>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce45 	.word	0x0800ce45
 800ce30:	0800ce4d 	.word	0x0800ce4d
 800ce34:	0800ce55 	.word	0x0800ce55
 800ce38:	0800ce5d 	.word	0x0800ce5d
 800ce3c:	0800ce65 	.word	0x0800ce65
 800ce40:	0800ce6d 	.word	0x0800ce6d
 800ce44:	2300      	movs	r3, #0
 800ce46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4a:	e1b6      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce4c:	2304      	movs	r3, #4
 800ce4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce52:	e1b2      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce54:	2308      	movs	r3, #8
 800ce56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5a:	e1ae      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce5c:	2310      	movs	r3, #16
 800ce5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce62:	e1aa      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce64:	2320      	movs	r3, #32
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6a:	e1a6      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce6c:	2340      	movs	r3, #64	@ 0x40
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce72:	e1a2      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce74:	2380      	movs	r3, #128	@ 0x80
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7a:	e19e      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a35      	ldr	r2, [pc, #212]	@ (800cf58 <UART_SetConfig+0x344>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d130      	bne.n	800cee8 <UART_SetConfig+0x2d4>
 800ce86:	4b31      	ldr	r3, [pc, #196]	@ (800cf4c <UART_SetConfig+0x338>)
 800ce88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	2b05      	cmp	r3, #5
 800ce90:	d826      	bhi.n	800cee0 <UART_SetConfig+0x2cc>
 800ce92:	a201      	add	r2, pc, #4	@ (adr r2, 800ce98 <UART_SetConfig+0x284>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800ceb1 	.word	0x0800ceb1
 800ce9c:	0800ceb9 	.word	0x0800ceb9
 800cea0:	0800cec1 	.word	0x0800cec1
 800cea4:	0800cec9 	.word	0x0800cec9
 800cea8:	0800ced1 	.word	0x0800ced1
 800ceac:	0800ced9 	.word	0x0800ced9
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb6:	e180      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ceb8:	2304      	movs	r3, #4
 800ceba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cebe:	e17c      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cec0:	2308      	movs	r3, #8
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec6:	e178      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cec8:	2310      	movs	r3, #16
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cece:	e174      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ced0:	2320      	movs	r3, #32
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced6:	e170      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800ced8:	2340      	movs	r3, #64	@ 0x40
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cede:	e16c      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cee0:	2380      	movs	r3, #128	@ 0x80
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cee6:	e168      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a1b      	ldr	r2, [pc, #108]	@ (800cf5c <UART_SetConfig+0x348>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d142      	bne.n	800cf78 <UART_SetConfig+0x364>
 800cef2:	4b16      	ldr	r3, [pc, #88]	@ (800cf4c <UART_SetConfig+0x338>)
 800cef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	2b05      	cmp	r3, #5
 800cefc:	d838      	bhi.n	800cf70 <UART_SetConfig+0x35c>
 800cefe:	a201      	add	r2, pc, #4	@ (adr r2, 800cf04 <UART_SetConfig+0x2f0>)
 800cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf04:	0800cf1d 	.word	0x0800cf1d
 800cf08:	0800cf25 	.word	0x0800cf25
 800cf0c:	0800cf2d 	.word	0x0800cf2d
 800cf10:	0800cf35 	.word	0x0800cf35
 800cf14:	0800cf61 	.word	0x0800cf61
 800cf18:	0800cf69 	.word	0x0800cf69
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf22:	e14a      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cf24:	2304      	movs	r3, #4
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2a:	e146      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cf2c:	2308      	movs	r3, #8
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e142      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cf34:	2310      	movs	r3, #16
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3a:	e13e      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cf3c:	cfff69f3 	.word	0xcfff69f3
 800cf40:	58000c00 	.word	0x58000c00
 800cf44:	11fff4ff 	.word	0x11fff4ff
 800cf48:	40011000 	.word	0x40011000
 800cf4c:	58024400 	.word	0x58024400
 800cf50:	40004400 	.word	0x40004400
 800cf54:	40004800 	.word	0x40004800
 800cf58:	40004c00 	.word	0x40004c00
 800cf5c:	40005000 	.word	0x40005000
 800cf60:	2320      	movs	r3, #32
 800cf62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf66:	e128      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cf68:	2340      	movs	r3, #64	@ 0x40
 800cf6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf6e:	e124      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cf70:	2380      	movs	r3, #128	@ 0x80
 800cf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf76:	e120      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4acb      	ldr	r2, [pc, #812]	@ (800d2ac <UART_SetConfig+0x698>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d176      	bne.n	800d070 <UART_SetConfig+0x45c>
 800cf82:	4bcb      	ldr	r3, [pc, #812]	@ (800d2b0 <UART_SetConfig+0x69c>)
 800cf84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf8a:	2b28      	cmp	r3, #40	@ 0x28
 800cf8c:	d86c      	bhi.n	800d068 <UART_SetConfig+0x454>
 800cf8e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf94 <UART_SetConfig+0x380>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800d039 	.word	0x0800d039
 800cf98:	0800d069 	.word	0x0800d069
 800cf9c:	0800d069 	.word	0x0800d069
 800cfa0:	0800d069 	.word	0x0800d069
 800cfa4:	0800d069 	.word	0x0800d069
 800cfa8:	0800d069 	.word	0x0800d069
 800cfac:	0800d069 	.word	0x0800d069
 800cfb0:	0800d069 	.word	0x0800d069
 800cfb4:	0800d041 	.word	0x0800d041
 800cfb8:	0800d069 	.word	0x0800d069
 800cfbc:	0800d069 	.word	0x0800d069
 800cfc0:	0800d069 	.word	0x0800d069
 800cfc4:	0800d069 	.word	0x0800d069
 800cfc8:	0800d069 	.word	0x0800d069
 800cfcc:	0800d069 	.word	0x0800d069
 800cfd0:	0800d069 	.word	0x0800d069
 800cfd4:	0800d049 	.word	0x0800d049
 800cfd8:	0800d069 	.word	0x0800d069
 800cfdc:	0800d069 	.word	0x0800d069
 800cfe0:	0800d069 	.word	0x0800d069
 800cfe4:	0800d069 	.word	0x0800d069
 800cfe8:	0800d069 	.word	0x0800d069
 800cfec:	0800d069 	.word	0x0800d069
 800cff0:	0800d069 	.word	0x0800d069
 800cff4:	0800d051 	.word	0x0800d051
 800cff8:	0800d069 	.word	0x0800d069
 800cffc:	0800d069 	.word	0x0800d069
 800d000:	0800d069 	.word	0x0800d069
 800d004:	0800d069 	.word	0x0800d069
 800d008:	0800d069 	.word	0x0800d069
 800d00c:	0800d069 	.word	0x0800d069
 800d010:	0800d069 	.word	0x0800d069
 800d014:	0800d059 	.word	0x0800d059
 800d018:	0800d069 	.word	0x0800d069
 800d01c:	0800d069 	.word	0x0800d069
 800d020:	0800d069 	.word	0x0800d069
 800d024:	0800d069 	.word	0x0800d069
 800d028:	0800d069 	.word	0x0800d069
 800d02c:	0800d069 	.word	0x0800d069
 800d030:	0800d069 	.word	0x0800d069
 800d034:	0800d061 	.word	0x0800d061
 800d038:	2301      	movs	r3, #1
 800d03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d03e:	e0bc      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d040:	2304      	movs	r3, #4
 800d042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d046:	e0b8      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d048:	2308      	movs	r3, #8
 800d04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d04e:	e0b4      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d050:	2310      	movs	r3, #16
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d056:	e0b0      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d058:	2320      	movs	r3, #32
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05e:	e0ac      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d060:	2340      	movs	r3, #64	@ 0x40
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e0a8      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d068:	2380      	movs	r3, #128	@ 0x80
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e0a4      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a8f      	ldr	r2, [pc, #572]	@ (800d2b4 <UART_SetConfig+0x6a0>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d130      	bne.n	800d0dc <UART_SetConfig+0x4c8>
 800d07a:	4b8d      	ldr	r3, [pc, #564]	@ (800d2b0 <UART_SetConfig+0x69c>)
 800d07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	2b05      	cmp	r3, #5
 800d084:	d826      	bhi.n	800d0d4 <UART_SetConfig+0x4c0>
 800d086:	a201      	add	r2, pc, #4	@ (adr r2, 800d08c <UART_SetConfig+0x478>)
 800d088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08c:	0800d0a5 	.word	0x0800d0a5
 800d090:	0800d0ad 	.word	0x0800d0ad
 800d094:	0800d0b5 	.word	0x0800d0b5
 800d098:	0800d0bd 	.word	0x0800d0bd
 800d09c:	0800d0c5 	.word	0x0800d0c5
 800d0a0:	0800d0cd 	.word	0x0800d0cd
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0aa:	e086      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d0ac:	2304      	movs	r3, #4
 800d0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b2:	e082      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d0b4:	2308      	movs	r3, #8
 800d0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ba:	e07e      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d0bc:	2310      	movs	r3, #16
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c2:	e07a      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d0c4:	2320      	movs	r3, #32
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ca:	e076      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d0cc:	2340      	movs	r3, #64	@ 0x40
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e072      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d0d4:	2380      	movs	r3, #128	@ 0x80
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e06e      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a75      	ldr	r2, [pc, #468]	@ (800d2b8 <UART_SetConfig+0x6a4>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d130      	bne.n	800d148 <UART_SetConfig+0x534>
 800d0e6:	4b72      	ldr	r3, [pc, #456]	@ (800d2b0 <UART_SetConfig+0x69c>)
 800d0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0ea:	f003 0307 	and.w	r3, r3, #7
 800d0ee:	2b05      	cmp	r3, #5
 800d0f0:	d826      	bhi.n	800d140 <UART_SetConfig+0x52c>
 800d0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f8 <UART_SetConfig+0x4e4>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d111 	.word	0x0800d111
 800d0fc:	0800d119 	.word	0x0800d119
 800d100:	0800d121 	.word	0x0800d121
 800d104:	0800d129 	.word	0x0800d129
 800d108:	0800d131 	.word	0x0800d131
 800d10c:	0800d139 	.word	0x0800d139
 800d110:	2300      	movs	r3, #0
 800d112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d116:	e050      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d118:	2304      	movs	r3, #4
 800d11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d11e:	e04c      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d120:	2308      	movs	r3, #8
 800d122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d126:	e048      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d128:	2310      	movs	r3, #16
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12e:	e044      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d130:	2320      	movs	r3, #32
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d136:	e040      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d138:	2340      	movs	r3, #64	@ 0x40
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d13e:	e03c      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d140:	2380      	movs	r3, #128	@ 0x80
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d146:	e038      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a5b      	ldr	r2, [pc, #364]	@ (800d2bc <UART_SetConfig+0x6a8>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d130      	bne.n	800d1b4 <UART_SetConfig+0x5a0>
 800d152:	4b57      	ldr	r3, [pc, #348]	@ (800d2b0 <UART_SetConfig+0x69c>)
 800d154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b05      	cmp	r3, #5
 800d15c:	d826      	bhi.n	800d1ac <UART_SetConfig+0x598>
 800d15e:	a201      	add	r2, pc, #4	@ (adr r2, 800d164 <UART_SetConfig+0x550>)
 800d160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d164:	0800d17d 	.word	0x0800d17d
 800d168:	0800d185 	.word	0x0800d185
 800d16c:	0800d18d 	.word	0x0800d18d
 800d170:	0800d195 	.word	0x0800d195
 800d174:	0800d19d 	.word	0x0800d19d
 800d178:	0800d1a5 	.word	0x0800d1a5
 800d17c:	2302      	movs	r3, #2
 800d17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d182:	e01a      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d184:	2304      	movs	r3, #4
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18a:	e016      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d18c:	2308      	movs	r3, #8
 800d18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d192:	e012      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d194:	2310      	movs	r3, #16
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19a:	e00e      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d19c:	2320      	movs	r3, #32
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a2:	e00a      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d1a4:	2340      	movs	r3, #64	@ 0x40
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1aa:	e006      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d1ac:	2380      	movs	r3, #128	@ 0x80
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b2:	e002      	b.n	800d1ba <UART_SetConfig+0x5a6>
 800d1b4:	2380      	movs	r3, #128	@ 0x80
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a3f      	ldr	r2, [pc, #252]	@ (800d2bc <UART_SetConfig+0x6a8>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	f040 80f8 	bne.w	800d3b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d1c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d1ca:	2b20      	cmp	r3, #32
 800d1cc:	dc46      	bgt.n	800d25c <UART_SetConfig+0x648>
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	f2c0 8082 	blt.w	800d2d8 <UART_SetConfig+0x6c4>
 800d1d4:	3b02      	subs	r3, #2
 800d1d6:	2b1e      	cmp	r3, #30
 800d1d8:	d87e      	bhi.n	800d2d8 <UART_SetConfig+0x6c4>
 800d1da:	a201      	add	r2, pc, #4	@ (adr r2, 800d1e0 <UART_SetConfig+0x5cc>)
 800d1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e0:	0800d263 	.word	0x0800d263
 800d1e4:	0800d2d9 	.word	0x0800d2d9
 800d1e8:	0800d26b 	.word	0x0800d26b
 800d1ec:	0800d2d9 	.word	0x0800d2d9
 800d1f0:	0800d2d9 	.word	0x0800d2d9
 800d1f4:	0800d2d9 	.word	0x0800d2d9
 800d1f8:	0800d27b 	.word	0x0800d27b
 800d1fc:	0800d2d9 	.word	0x0800d2d9
 800d200:	0800d2d9 	.word	0x0800d2d9
 800d204:	0800d2d9 	.word	0x0800d2d9
 800d208:	0800d2d9 	.word	0x0800d2d9
 800d20c:	0800d2d9 	.word	0x0800d2d9
 800d210:	0800d2d9 	.word	0x0800d2d9
 800d214:	0800d2d9 	.word	0x0800d2d9
 800d218:	0800d28b 	.word	0x0800d28b
 800d21c:	0800d2d9 	.word	0x0800d2d9
 800d220:	0800d2d9 	.word	0x0800d2d9
 800d224:	0800d2d9 	.word	0x0800d2d9
 800d228:	0800d2d9 	.word	0x0800d2d9
 800d22c:	0800d2d9 	.word	0x0800d2d9
 800d230:	0800d2d9 	.word	0x0800d2d9
 800d234:	0800d2d9 	.word	0x0800d2d9
 800d238:	0800d2d9 	.word	0x0800d2d9
 800d23c:	0800d2d9 	.word	0x0800d2d9
 800d240:	0800d2d9 	.word	0x0800d2d9
 800d244:	0800d2d9 	.word	0x0800d2d9
 800d248:	0800d2d9 	.word	0x0800d2d9
 800d24c:	0800d2d9 	.word	0x0800d2d9
 800d250:	0800d2d9 	.word	0x0800d2d9
 800d254:	0800d2d9 	.word	0x0800d2d9
 800d258:	0800d2cb 	.word	0x0800d2cb
 800d25c:	2b40      	cmp	r3, #64	@ 0x40
 800d25e:	d037      	beq.n	800d2d0 <UART_SetConfig+0x6bc>
 800d260:	e03a      	b.n	800d2d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d262:	f7fd fbcf 	bl	800aa04 <HAL_RCCEx_GetD3PCLK1Freq>
 800d266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d268:	e03c      	b.n	800d2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d26a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fd fbde 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d278:	e034      	b.n	800d2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d27a:	f107 0318 	add.w	r3, r7, #24
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fd fd2a 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d288:	e02c      	b.n	800d2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d28a:	4b09      	ldr	r3, [pc, #36]	@ (800d2b0 <UART_SetConfig+0x69c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b00      	cmp	r3, #0
 800d294:	d016      	beq.n	800d2c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d296:	4b06      	ldr	r3, [pc, #24]	@ (800d2b0 <UART_SetConfig+0x69c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	08db      	lsrs	r3, r3, #3
 800d29c:	f003 0303 	and.w	r3, r3, #3
 800d2a0:	4a07      	ldr	r2, [pc, #28]	@ (800d2c0 <UART_SetConfig+0x6ac>)
 800d2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2a8:	e01c      	b.n	800d2e4 <UART_SetConfig+0x6d0>
 800d2aa:	bf00      	nop
 800d2ac:	40011400 	.word	0x40011400
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	40007800 	.word	0x40007800
 800d2b8:	40007c00 	.word	0x40007c00
 800d2bc:	58000c00 	.word	0x58000c00
 800d2c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d2c4:	4b9d      	ldr	r3, [pc, #628]	@ (800d53c <UART_SetConfig+0x928>)
 800d2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2c8:	e00c      	b.n	800d2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2ca:	4b9d      	ldr	r3, [pc, #628]	@ (800d540 <UART_SetConfig+0x92c>)
 800d2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ce:	e009      	b.n	800d2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2d6:	e005      	b.n	800d2e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d2e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 81de 	beq.w	800d6a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2f0:	4a94      	ldr	r2, [pc, #592]	@ (800d544 <UART_SetConfig+0x930>)
 800d2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	685a      	ldr	r2, [r3, #4]
 800d304:	4613      	mov	r3, r2
 800d306:	005b      	lsls	r3, r3, #1
 800d308:	4413      	add	r3, r2
 800d30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d305      	bcc.n	800d31c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d318:	429a      	cmp	r2, r3
 800d31a:	d903      	bls.n	800d324 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d322:	e1c1      	b.n	800d6a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d326:	2200      	movs	r2, #0
 800d328:	60bb      	str	r3, [r7, #8]
 800d32a:	60fa      	str	r2, [r7, #12]
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d330:	4a84      	ldr	r2, [pc, #528]	@ (800d544 <UART_SetConfig+0x930>)
 800d332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d336:	b29b      	uxth	r3, r3
 800d338:	2200      	movs	r2, #0
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	607a      	str	r2, [r7, #4]
 800d33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d346:	f7f3 f81b 	bl	8000380 <__aeabi_uldivmod>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4610      	mov	r0, r2
 800d350:	4619      	mov	r1, r3
 800d352:	f04f 0200 	mov.w	r2, #0
 800d356:	f04f 0300 	mov.w	r3, #0
 800d35a:	020b      	lsls	r3, r1, #8
 800d35c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d360:	0202      	lsls	r2, r0, #8
 800d362:	6979      	ldr	r1, [r7, #20]
 800d364:	6849      	ldr	r1, [r1, #4]
 800d366:	0849      	lsrs	r1, r1, #1
 800d368:	2000      	movs	r0, #0
 800d36a:	460c      	mov	r4, r1
 800d36c:	4605      	mov	r5, r0
 800d36e:	eb12 0804 	adds.w	r8, r2, r4
 800d372:	eb43 0905 	adc.w	r9, r3, r5
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	469a      	mov	sl, r3
 800d37e:	4693      	mov	fp, r2
 800d380:	4652      	mov	r2, sl
 800d382:	465b      	mov	r3, fp
 800d384:	4640      	mov	r0, r8
 800d386:	4649      	mov	r1, r9
 800d388:	f7f2 fffa 	bl	8000380 <__aeabi_uldivmod>
 800d38c:	4602      	mov	r2, r0
 800d38e:	460b      	mov	r3, r1
 800d390:	4613      	mov	r3, r2
 800d392:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d39a:	d308      	bcc.n	800d3ae <UART_SetConfig+0x79a>
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3a2:	d204      	bcs.n	800d3ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3aa:	60da      	str	r2, [r3, #12]
 800d3ac:	e17c      	b.n	800d6a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d3b4:	e178      	b.n	800d6a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3be:	f040 80c5 	bne.w	800d54c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d3c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	2b20      	cmp	r3, #32
 800d3c8:	dc48      	bgt.n	800d45c <UART_SetConfig+0x848>
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	db7b      	blt.n	800d4c6 <UART_SetConfig+0x8b2>
 800d3ce:	2b20      	cmp	r3, #32
 800d3d0:	d879      	bhi.n	800d4c6 <UART_SetConfig+0x8b2>
 800d3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d8 <UART_SetConfig+0x7c4>)
 800d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d8:	0800d463 	.word	0x0800d463
 800d3dc:	0800d46b 	.word	0x0800d46b
 800d3e0:	0800d4c7 	.word	0x0800d4c7
 800d3e4:	0800d4c7 	.word	0x0800d4c7
 800d3e8:	0800d473 	.word	0x0800d473
 800d3ec:	0800d4c7 	.word	0x0800d4c7
 800d3f0:	0800d4c7 	.word	0x0800d4c7
 800d3f4:	0800d4c7 	.word	0x0800d4c7
 800d3f8:	0800d483 	.word	0x0800d483
 800d3fc:	0800d4c7 	.word	0x0800d4c7
 800d400:	0800d4c7 	.word	0x0800d4c7
 800d404:	0800d4c7 	.word	0x0800d4c7
 800d408:	0800d4c7 	.word	0x0800d4c7
 800d40c:	0800d4c7 	.word	0x0800d4c7
 800d410:	0800d4c7 	.word	0x0800d4c7
 800d414:	0800d4c7 	.word	0x0800d4c7
 800d418:	0800d493 	.word	0x0800d493
 800d41c:	0800d4c7 	.word	0x0800d4c7
 800d420:	0800d4c7 	.word	0x0800d4c7
 800d424:	0800d4c7 	.word	0x0800d4c7
 800d428:	0800d4c7 	.word	0x0800d4c7
 800d42c:	0800d4c7 	.word	0x0800d4c7
 800d430:	0800d4c7 	.word	0x0800d4c7
 800d434:	0800d4c7 	.word	0x0800d4c7
 800d438:	0800d4c7 	.word	0x0800d4c7
 800d43c:	0800d4c7 	.word	0x0800d4c7
 800d440:	0800d4c7 	.word	0x0800d4c7
 800d444:	0800d4c7 	.word	0x0800d4c7
 800d448:	0800d4c7 	.word	0x0800d4c7
 800d44c:	0800d4c7 	.word	0x0800d4c7
 800d450:	0800d4c7 	.word	0x0800d4c7
 800d454:	0800d4c7 	.word	0x0800d4c7
 800d458:	0800d4b9 	.word	0x0800d4b9
 800d45c:	2b40      	cmp	r3, #64	@ 0x40
 800d45e:	d02e      	beq.n	800d4be <UART_SetConfig+0x8aa>
 800d460:	e031      	b.n	800d4c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d462:	f7fb fad7 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800d466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d468:	e033      	b.n	800d4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d46a:	f7fb fae9 	bl	8008a40 <HAL_RCC_GetPCLK2Freq>
 800d46e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d470:	e02f      	b.n	800d4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d476:	4618      	mov	r0, r3
 800d478:	f7fd fada 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d480:	e027      	b.n	800d4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d482:	f107 0318 	add.w	r3, r7, #24
 800d486:	4618      	mov	r0, r3
 800d488:	f7fd fc26 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d490:	e01f      	b.n	800d4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d492:	4b2d      	ldr	r3, [pc, #180]	@ (800d548 <UART_SetConfig+0x934>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 0320 	and.w	r3, r3, #32
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d009      	beq.n	800d4b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d49e:	4b2a      	ldr	r3, [pc, #168]	@ (800d548 <UART_SetConfig+0x934>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	08db      	lsrs	r3, r3, #3
 800d4a4:	f003 0303 	and.w	r3, r3, #3
 800d4a8:	4a24      	ldr	r2, [pc, #144]	@ (800d53c <UART_SetConfig+0x928>)
 800d4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4b0:	e00f      	b.n	800d4d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d4b2:	4b22      	ldr	r3, [pc, #136]	@ (800d53c <UART_SetConfig+0x928>)
 800d4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4b6:	e00c      	b.n	800d4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4b8:	4b21      	ldr	r3, [pc, #132]	@ (800d540 <UART_SetConfig+0x92c>)
 800d4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4bc:	e009      	b.n	800d4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4c4:	e005      	b.n	800d4d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d4d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 80e7 	beq.w	800d6a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4de:	4a19      	ldr	r2, [pc, #100]	@ (800d544 <UART_SetConfig+0x930>)
 800d4e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4ec:	005a      	lsls	r2, r3, #1
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	085b      	lsrs	r3, r3, #1
 800d4f4:	441a      	add	r2, r3
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d502:	2b0f      	cmp	r3, #15
 800d504:	d916      	bls.n	800d534 <UART_SetConfig+0x920>
 800d506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d50c:	d212      	bcs.n	800d534 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d510:	b29b      	uxth	r3, r3
 800d512:	f023 030f 	bic.w	r3, r3, #15
 800d516:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51a:	085b      	lsrs	r3, r3, #1
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	f003 0307 	and.w	r3, r3, #7
 800d522:	b29a      	uxth	r2, r3
 800d524:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d526:	4313      	orrs	r3, r2
 800d528:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d530:	60da      	str	r2, [r3, #12]
 800d532:	e0b9      	b.n	800d6a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d53a:	e0b5      	b.n	800d6a8 <UART_SetConfig+0xa94>
 800d53c:	03d09000 	.word	0x03d09000
 800d540:	003d0900 	.word	0x003d0900
 800d544:	080158e4 	.word	0x080158e4
 800d548:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d54c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d550:	2b20      	cmp	r3, #32
 800d552:	dc49      	bgt.n	800d5e8 <UART_SetConfig+0x9d4>
 800d554:	2b00      	cmp	r3, #0
 800d556:	db7c      	blt.n	800d652 <UART_SetConfig+0xa3e>
 800d558:	2b20      	cmp	r3, #32
 800d55a:	d87a      	bhi.n	800d652 <UART_SetConfig+0xa3e>
 800d55c:	a201      	add	r2, pc, #4	@ (adr r2, 800d564 <UART_SetConfig+0x950>)
 800d55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d562:	bf00      	nop
 800d564:	0800d5ef 	.word	0x0800d5ef
 800d568:	0800d5f7 	.word	0x0800d5f7
 800d56c:	0800d653 	.word	0x0800d653
 800d570:	0800d653 	.word	0x0800d653
 800d574:	0800d5ff 	.word	0x0800d5ff
 800d578:	0800d653 	.word	0x0800d653
 800d57c:	0800d653 	.word	0x0800d653
 800d580:	0800d653 	.word	0x0800d653
 800d584:	0800d60f 	.word	0x0800d60f
 800d588:	0800d653 	.word	0x0800d653
 800d58c:	0800d653 	.word	0x0800d653
 800d590:	0800d653 	.word	0x0800d653
 800d594:	0800d653 	.word	0x0800d653
 800d598:	0800d653 	.word	0x0800d653
 800d59c:	0800d653 	.word	0x0800d653
 800d5a0:	0800d653 	.word	0x0800d653
 800d5a4:	0800d61f 	.word	0x0800d61f
 800d5a8:	0800d653 	.word	0x0800d653
 800d5ac:	0800d653 	.word	0x0800d653
 800d5b0:	0800d653 	.word	0x0800d653
 800d5b4:	0800d653 	.word	0x0800d653
 800d5b8:	0800d653 	.word	0x0800d653
 800d5bc:	0800d653 	.word	0x0800d653
 800d5c0:	0800d653 	.word	0x0800d653
 800d5c4:	0800d653 	.word	0x0800d653
 800d5c8:	0800d653 	.word	0x0800d653
 800d5cc:	0800d653 	.word	0x0800d653
 800d5d0:	0800d653 	.word	0x0800d653
 800d5d4:	0800d653 	.word	0x0800d653
 800d5d8:	0800d653 	.word	0x0800d653
 800d5dc:	0800d653 	.word	0x0800d653
 800d5e0:	0800d653 	.word	0x0800d653
 800d5e4:	0800d645 	.word	0x0800d645
 800d5e8:	2b40      	cmp	r3, #64	@ 0x40
 800d5ea:	d02e      	beq.n	800d64a <UART_SetConfig+0xa36>
 800d5ec:	e031      	b.n	800d652 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5ee:	f7fb fa11 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800d5f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5f4:	e033      	b.n	800d65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5f6:	f7fb fa23 	bl	8008a40 <HAL_RCC_GetPCLK2Freq>
 800d5fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5fc:	e02f      	b.n	800d65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d602:	4618      	mov	r0, r3
 800d604:	f7fd fa14 	bl	800aa30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d60c:	e027      	b.n	800d65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d60e:	f107 0318 	add.w	r3, r7, #24
 800d612:	4618      	mov	r0, r3
 800d614:	f7fd fb60 	bl	800acd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d61c:	e01f      	b.n	800d65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d61e:	4b2d      	ldr	r3, [pc, #180]	@ (800d6d4 <UART_SetConfig+0xac0>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b00      	cmp	r3, #0
 800d628:	d009      	beq.n	800d63e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d62a:	4b2a      	ldr	r3, [pc, #168]	@ (800d6d4 <UART_SetConfig+0xac0>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	08db      	lsrs	r3, r3, #3
 800d630:	f003 0303 	and.w	r3, r3, #3
 800d634:	4a28      	ldr	r2, [pc, #160]	@ (800d6d8 <UART_SetConfig+0xac4>)
 800d636:	fa22 f303 	lsr.w	r3, r2, r3
 800d63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d63c:	e00f      	b.n	800d65e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d63e:	4b26      	ldr	r3, [pc, #152]	@ (800d6d8 <UART_SetConfig+0xac4>)
 800d640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d642:	e00c      	b.n	800d65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d644:	4b25      	ldr	r3, [pc, #148]	@ (800d6dc <UART_SetConfig+0xac8>)
 800d646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d648:	e009      	b.n	800d65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d64a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d650:	e005      	b.n	800d65e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d656:	2301      	movs	r3, #1
 800d658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d65c:	bf00      	nop
    }

    if (pclk != 0U)
 800d65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d660:	2b00      	cmp	r3, #0
 800d662:	d021      	beq.n	800d6a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d668:	4a1d      	ldr	r2, [pc, #116]	@ (800d6e0 <UART_SetConfig+0xacc>)
 800d66a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d66e:	461a      	mov	r2, r3
 800d670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d672:	fbb3 f2f2 	udiv	r2, r3, r2
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	085b      	lsrs	r3, r3, #1
 800d67c:	441a      	add	r2, r3
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	fbb2 f3f3 	udiv	r3, r2, r3
 800d686:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	d909      	bls.n	800d6a2 <UART_SetConfig+0xa8e>
 800d68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d694:	d205      	bcs.n	800d6a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d698:	b29a      	uxth	r2, r3
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60da      	str	r2, [r3, #12]
 800d6a0:	e002      	b.n	800d6a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d6c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3748      	adds	r7, #72	@ 0x48
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6d2:	bf00      	nop
 800d6d4:	58024400 	.word	0x58024400
 800d6d8:	03d09000 	.word	0x03d09000
 800d6dc:	003d0900 	.word	0x003d0900
 800d6e0:	080158e4 	.word	0x080158e4

0800d6e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f0:	f003 0308 	and.w	r3, r3, #8
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00a      	beq.n	800d70e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	430a      	orrs	r2, r1
 800d70c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00a      	beq.n	800d730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	430a      	orrs	r2, r1
 800d72e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d734:	f003 0302 	and.w	r3, r3, #2
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00a      	beq.n	800d752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	430a      	orrs	r2, r1
 800d750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d756:	f003 0304 	and.w	r3, r3, #4
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00a      	beq.n	800d774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	430a      	orrs	r2, r1
 800d772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d778:	f003 0310 	and.w	r3, r3, #16
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00a      	beq.n	800d796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	430a      	orrs	r2, r1
 800d794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00a      	beq.n	800d7b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	430a      	orrs	r2, r1
 800d7b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d01a      	beq.n	800d7fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7e2:	d10a      	bne.n	800d7fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00a      	beq.n	800d81c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	430a      	orrs	r2, r1
 800d81a:	605a      	str	r2, [r3, #4]
  }
}
 800d81c:	bf00      	nop
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b098      	sub	sp, #96	@ 0x60
 800d82c:	af02      	add	r7, sp, #8
 800d82e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d838:	f7f4 ff5a 	bl	80026f0 <HAL_GetTick>
 800d83c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f003 0308 	and.w	r3, r3, #8
 800d848:	2b08      	cmp	r3, #8
 800d84a:	d12f      	bne.n	800d8ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d84c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d854:	2200      	movs	r2, #0
 800d856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f88e 	bl	800d97c <UART_WaitOnFlagUntilTimeout>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d022      	beq.n	800d8ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d86e:	e853 3f00 	ldrex	r3, [r3]
 800d872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d87a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	461a      	mov	r2, r3
 800d882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d884:	647b      	str	r3, [r7, #68]	@ 0x44
 800d886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d88a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d88c:	e841 2300 	strex	r3, r2, [r1]
 800d890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1e6      	bne.n	800d866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2220      	movs	r2, #32
 800d89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e063      	b.n	800d974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f003 0304 	and.w	r3, r3, #4
 800d8b6:	2b04      	cmp	r3, #4
 800d8b8:	d149      	bne.n	800d94e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 f857 	bl	800d97c <UART_WaitOnFlagUntilTimeout>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d03c      	beq.n	800d94e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	e853 3f00 	ldrex	r3, [r3]
 800d8e0:	623b      	str	r3, [r7, #32]
   return(result);
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8fa:	e841 2300 	strex	r3, r2, [r1]
 800d8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1e6      	bne.n	800d8d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3308      	adds	r3, #8
 800d90c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	e853 3f00 	ldrex	r3, [r3]
 800d914:	60fb      	str	r3, [r7, #12]
   return(result);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f023 0301 	bic.w	r3, r3, #1
 800d91c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	3308      	adds	r3, #8
 800d924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d926:	61fa      	str	r2, [r7, #28]
 800d928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92a:	69b9      	ldr	r1, [r7, #24]
 800d92c:	69fa      	ldr	r2, [r7, #28]
 800d92e:	e841 2300 	strex	r3, r2, [r1]
 800d932:	617b      	str	r3, [r7, #20]
   return(result);
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1e5      	bne.n	800d906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2220      	movs	r2, #32
 800d93e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d94a:	2303      	movs	r3, #3
 800d94c:	e012      	b.n	800d974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2220      	movs	r2, #32
 800d952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2220      	movs	r2, #32
 800d95a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3758      	adds	r7, #88	@ 0x58
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	603b      	str	r3, [r7, #0]
 800d988:	4613      	mov	r3, r2
 800d98a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d98c:	e04f      	b.n	800da2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d994:	d04b      	beq.n	800da2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d996:	f7f4 feab 	bl	80026f0 <HAL_GetTick>
 800d99a:	4602      	mov	r2, r0
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	69ba      	ldr	r2, [r7, #24]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d302      	bcc.n	800d9ac <UART_WaitOnFlagUntilTimeout+0x30>
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	e04e      	b.n	800da4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f003 0304 	and.w	r3, r3, #4
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d037      	beq.n	800da2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b80      	cmp	r3, #128	@ 0x80
 800d9c2:	d034      	beq.n	800da2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	2b40      	cmp	r3, #64	@ 0x40
 800d9c8:	d031      	beq.n	800da2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	f003 0308 	and.w	r3, r3, #8
 800d9d4:	2b08      	cmp	r3, #8
 800d9d6:	d110      	bne.n	800d9fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2208      	movs	r2, #8
 800d9de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f000 f839 	bl	800da58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2208      	movs	r2, #8
 800d9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e029      	b.n	800da4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	69db      	ldr	r3, [r3, #28]
 800da00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800da04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da08:	d111      	bne.n	800da2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800da12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f000 f81f 	bl	800da58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2220      	movs	r2, #32
 800da1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2200      	movs	r2, #0
 800da26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e00f      	b.n	800da4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	69da      	ldr	r2, [r3, #28]
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	4013      	ands	r3, r2
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	bf0c      	ite	eq
 800da3e:	2301      	moveq	r3, #1
 800da40:	2300      	movne	r3, #0
 800da42:	b2db      	uxtb	r3, r3
 800da44:	461a      	mov	r2, r3
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d0a0      	beq.n	800d98e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da58:	b480      	push	{r7}
 800da5a:	b095      	sub	sp, #84	@ 0x54
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da68:	e853 3f00 	ldrex	r3, [r3]
 800da6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	461a      	mov	r2, r3
 800da7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800da80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da86:	e841 2300 	strex	r3, r2, [r1]
 800da8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e6      	bne.n	800da60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	3308      	adds	r3, #8
 800da98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6a3b      	ldr	r3, [r7, #32]
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800daa2:	69fa      	ldr	r2, [r7, #28]
 800daa4:	4b1e      	ldr	r3, [pc, #120]	@ (800db20 <UART_EndRxTransfer+0xc8>)
 800daa6:	4013      	ands	r3, r2
 800daa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3308      	adds	r3, #8
 800dab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daba:	e841 2300 	strex	r3, r2, [r1]
 800dabe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1e5      	bne.n	800da92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d118      	bne.n	800db00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	e853 3f00 	ldrex	r3, [r3]
 800dada:	60bb      	str	r3, [r7, #8]
   return(result);
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	f023 0310 	bic.w	r3, r3, #16
 800dae2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	461a      	mov	r2, r3
 800daea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daec:	61bb      	str	r3, [r7, #24]
 800daee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf0:	6979      	ldr	r1, [r7, #20]
 800daf2:	69ba      	ldr	r2, [r7, #24]
 800daf4:	e841 2300 	strex	r3, r2, [r1]
 800daf8:	613b      	str	r3, [r7, #16]
   return(result);
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e6      	bne.n	800dace <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2220      	movs	r2, #32
 800db04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800db14:	bf00      	nop
 800db16:	3754      	adds	r7, #84	@ 0x54
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	effffffe 	.word	0xeffffffe

0800db24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2200      	movs	r2, #0
 800db36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff f854 	bl	800cbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db40:	bf00      	nop
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b088      	sub	sp, #32
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	e853 3f00 	ldrex	r3, [r3]
 800db5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db64:	61fb      	str	r3, [r7, #28]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	61bb      	str	r3, [r7, #24]
 800db70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db72:	6979      	ldr	r1, [r7, #20]
 800db74:	69ba      	ldr	r2, [r7, #24]
 800db76:	e841 2300 	strex	r3, r2, [r1]
 800db7a:	613b      	str	r3, [r7, #16]
   return(result);
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1e6      	bne.n	800db50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2220      	movs	r2, #32
 800db86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff f81f 	bl	800cbd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db96:	bf00      	nop
 800db98:	3720      	adds	r7, #32
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dba6:	bf00      	nop
 800dba8:	370c      	adds	r7, #12
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b083      	sub	sp, #12
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dbba:	bf00      	nop
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b083      	sub	sp, #12
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dbce:	bf00      	nop
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b085      	sub	sp, #20
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d101      	bne.n	800dbf0 <HAL_UARTEx_DisableFifoMode+0x16>
 800dbec:	2302      	movs	r3, #2
 800dbee:	e027      	b.n	800dc40 <HAL_UARTEx_DisableFifoMode+0x66>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2224      	movs	r2, #36	@ 0x24
 800dbfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f022 0201 	bic.w	r2, r2, #1
 800dc16:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dc1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2220      	movs	r2, #32
 800dc32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3714      	adds	r7, #20
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d101      	bne.n	800dc64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc60:	2302      	movs	r3, #2
 800dc62:	e02d      	b.n	800dcc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2224      	movs	r2, #36	@ 0x24
 800dc70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f022 0201 	bic.w	r2, r2, #1
 800dc8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	430a      	orrs	r2, r1
 800dc9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f84f 	bl	800dd44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d101      	bne.n	800dce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dcdc:	2302      	movs	r3, #2
 800dcde:	e02d      	b.n	800dd3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2224      	movs	r2, #36	@ 0x24
 800dcec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f022 0201 	bic.w	r2, r2, #1
 800dd06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	430a      	orrs	r2, r1
 800dd1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 f811 	bl	800dd44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2220      	movs	r2, #32
 800dd2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d108      	bne.n	800dd66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd64:	e031      	b.n	800ddca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd66:	2310      	movs	r3, #16
 800dd68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd6a:	2310      	movs	r3, #16
 800dd6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	0e5b      	lsrs	r3, r3, #25
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	f003 0307 	and.w	r3, r3, #7
 800dd7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	0f5b      	lsrs	r3, r3, #29
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	f003 0307 	and.w	r3, r3, #7
 800dd8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd8e:	7bbb      	ldrb	r3, [r7, #14]
 800dd90:	7b3a      	ldrb	r2, [r7, #12]
 800dd92:	4911      	ldr	r1, [pc, #68]	@ (800ddd8 <UARTEx_SetNbDataToProcess+0x94>)
 800dd94:	5c8a      	ldrb	r2, [r1, r2]
 800dd96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd9a:	7b3a      	ldrb	r2, [r7, #12]
 800dd9c:	490f      	ldr	r1, [pc, #60]	@ (800dddc <UARTEx_SetNbDataToProcess+0x98>)
 800dd9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dda0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddac:	7bfb      	ldrb	r3, [r7, #15]
 800ddae:	7b7a      	ldrb	r2, [r7, #13]
 800ddb0:	4909      	ldr	r1, [pc, #36]	@ (800ddd8 <UARTEx_SetNbDataToProcess+0x94>)
 800ddb2:	5c8a      	ldrb	r2, [r1, r2]
 800ddb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ddb8:	7b7a      	ldrb	r2, [r7, #13]
 800ddba:	4908      	ldr	r1, [pc, #32]	@ (800dddc <UARTEx_SetNbDataToProcess+0x98>)
 800ddbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ddca:	bf00      	nop
 800ddcc:	3714      	adds	r7, #20
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	080158fc 	.word	0x080158fc
 800dddc:	08015904 	.word	0x08015904

0800dde0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dde0:	b084      	sub	sp, #16
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b084      	sub	sp, #16
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	f107 001c 	add.w	r0, r7, #28
 800ddee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ddf2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d121      	bne.n	800de3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68da      	ldr	r2, [r3, #12]
 800de0a:	4b2c      	ldr	r3, [pc, #176]	@ (800debc <USB_CoreInit+0xdc>)
 800de0c:	4013      	ands	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800de1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de22:	2b01      	cmp	r3, #1
 800de24:	d105      	bne.n	800de32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f001 fafa 	bl	800f42c <USB_CoreReset>
 800de38:	4603      	mov	r3, r0
 800de3a:	73fb      	strb	r3, [r7, #15]
 800de3c:	e01b      	b.n	800de76 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f001 faee 	bl	800f42c <USB_CoreReset>
 800de50:	4603      	mov	r3, r0
 800de52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800de54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d106      	bne.n	800de6a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	639a      	str	r2, [r3, #56]	@ 0x38
 800de68:	e005      	b.n	800de76 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800de76:	7fbb      	ldrb	r3, [r7, #30]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d116      	bne.n	800deaa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de80:	b29a      	uxth	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800de8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dec0 <USB_CoreInit+0xe0>)
 800de8c:	4313      	orrs	r3, r2
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f043 0206 	orr.w	r2, r3, #6
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	f043 0220 	orr.w	r2, r3, #32
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800deb6:	b004      	add	sp, #16
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	ffbdffbf 	.word	0xffbdffbf
 800dec0:	03ee0000 	.word	0x03ee0000

0800dec4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b087      	sub	sp, #28
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	4613      	mov	r3, r2
 800ded0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d165      	bne.n	800dfa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	4a41      	ldr	r2, [pc, #260]	@ (800dfe0 <USB_SetTurnaroundTime+0x11c>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d906      	bls.n	800deee <USB_SetTurnaroundTime+0x2a>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	4a40      	ldr	r2, [pc, #256]	@ (800dfe4 <USB_SetTurnaroundTime+0x120>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d202      	bcs.n	800deee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dee8:	230f      	movs	r3, #15
 800deea:	617b      	str	r3, [r7, #20]
 800deec:	e062      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	4a3c      	ldr	r2, [pc, #240]	@ (800dfe4 <USB_SetTurnaroundTime+0x120>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d306      	bcc.n	800df04 <USB_SetTurnaroundTime+0x40>
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	4a3b      	ldr	r2, [pc, #236]	@ (800dfe8 <USB_SetTurnaroundTime+0x124>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d202      	bcs.n	800df04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800defe:	230e      	movs	r3, #14
 800df00:	617b      	str	r3, [r7, #20]
 800df02:	e057      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	4a38      	ldr	r2, [pc, #224]	@ (800dfe8 <USB_SetTurnaroundTime+0x124>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d306      	bcc.n	800df1a <USB_SetTurnaroundTime+0x56>
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	4a37      	ldr	r2, [pc, #220]	@ (800dfec <USB_SetTurnaroundTime+0x128>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d202      	bcs.n	800df1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800df14:	230d      	movs	r3, #13
 800df16:	617b      	str	r3, [r7, #20]
 800df18:	e04c      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	4a33      	ldr	r2, [pc, #204]	@ (800dfec <USB_SetTurnaroundTime+0x128>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d306      	bcc.n	800df30 <USB_SetTurnaroundTime+0x6c>
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	4a32      	ldr	r2, [pc, #200]	@ (800dff0 <USB_SetTurnaroundTime+0x12c>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d802      	bhi.n	800df30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800df2a:	230c      	movs	r3, #12
 800df2c:	617b      	str	r3, [r7, #20]
 800df2e:	e041      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	4a2f      	ldr	r2, [pc, #188]	@ (800dff0 <USB_SetTurnaroundTime+0x12c>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d906      	bls.n	800df46 <USB_SetTurnaroundTime+0x82>
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	4a2e      	ldr	r2, [pc, #184]	@ (800dff4 <USB_SetTurnaroundTime+0x130>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d802      	bhi.n	800df46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800df40:	230b      	movs	r3, #11
 800df42:	617b      	str	r3, [r7, #20]
 800df44:	e036      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	4a2a      	ldr	r2, [pc, #168]	@ (800dff4 <USB_SetTurnaroundTime+0x130>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d906      	bls.n	800df5c <USB_SetTurnaroundTime+0x98>
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	4a29      	ldr	r2, [pc, #164]	@ (800dff8 <USB_SetTurnaroundTime+0x134>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d802      	bhi.n	800df5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800df56:	230a      	movs	r3, #10
 800df58:	617b      	str	r3, [r7, #20]
 800df5a:	e02b      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	4a26      	ldr	r2, [pc, #152]	@ (800dff8 <USB_SetTurnaroundTime+0x134>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d906      	bls.n	800df72 <USB_SetTurnaroundTime+0xae>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	4a25      	ldr	r2, [pc, #148]	@ (800dffc <USB_SetTurnaroundTime+0x138>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d202      	bcs.n	800df72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800df6c:	2309      	movs	r3, #9
 800df6e:	617b      	str	r3, [r7, #20]
 800df70:	e020      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	4a21      	ldr	r2, [pc, #132]	@ (800dffc <USB_SetTurnaroundTime+0x138>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d306      	bcc.n	800df88 <USB_SetTurnaroundTime+0xc4>
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	4a20      	ldr	r2, [pc, #128]	@ (800e000 <USB_SetTurnaroundTime+0x13c>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d802      	bhi.n	800df88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800df82:	2308      	movs	r3, #8
 800df84:	617b      	str	r3, [r7, #20]
 800df86:	e015      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	4a1d      	ldr	r2, [pc, #116]	@ (800e000 <USB_SetTurnaroundTime+0x13c>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d906      	bls.n	800df9e <USB_SetTurnaroundTime+0xda>
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	4a1c      	ldr	r2, [pc, #112]	@ (800e004 <USB_SetTurnaroundTime+0x140>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d202      	bcs.n	800df9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800df98:	2307      	movs	r3, #7
 800df9a:	617b      	str	r3, [r7, #20]
 800df9c:	e00a      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800df9e:	2306      	movs	r3, #6
 800dfa0:	617b      	str	r3, [r7, #20]
 800dfa2:	e007      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dfa4:	79fb      	ldrb	r3, [r7, #7]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d102      	bne.n	800dfb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dfaa:	2309      	movs	r3, #9
 800dfac:	617b      	str	r3, [r7, #20]
 800dfae:	e001      	b.n	800dfb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dfb0:	2309      	movs	r3, #9
 800dfb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	68da      	ldr	r2, [r3, #12]
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	029b      	lsls	r3, r3, #10
 800dfc8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800dfcc:	431a      	orrs	r2, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	371c      	adds	r7, #28
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr
 800dfe0:	00d8acbf 	.word	0x00d8acbf
 800dfe4:	00e4e1c0 	.word	0x00e4e1c0
 800dfe8:	00f42400 	.word	0x00f42400
 800dfec:	01067380 	.word	0x01067380
 800dff0:	011a499f 	.word	0x011a499f
 800dff4:	01312cff 	.word	0x01312cff
 800dff8:	014ca43f 	.word	0x014ca43f
 800dffc:	016e3600 	.word	0x016e3600
 800e000:	01a6ab1f 	.word	0x01a6ab1f
 800e004:	01e84800 	.word	0x01e84800

0800e008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	689b      	ldr	r3, [r3, #8]
 800e014:	f043 0201 	orr.w	r2, r3, #1
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b083      	sub	sp, #12
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	f023 0201 	bic.w	r2, r3, #1
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e058:	2300      	movs	r3, #0
 800e05a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d115      	bne.n	800e09a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e07a:	200a      	movs	r0, #10
 800e07c:	f7f4 fb44 	bl	8002708 <HAL_Delay>
      ms += 10U;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	330a      	adds	r3, #10
 800e084:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f001 f93f 	bl	800f30a <USB_GetMode>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d01e      	beq.n	800e0d0 <USB_SetCurrentMode+0x84>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2bc7      	cmp	r3, #199	@ 0xc7
 800e096:	d9f0      	bls.n	800e07a <USB_SetCurrentMode+0x2e>
 800e098:	e01a      	b.n	800e0d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e09a:	78fb      	ldrb	r3, [r7, #3]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d115      	bne.n	800e0cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e0ac:	200a      	movs	r0, #10
 800e0ae:	f7f4 fb2b 	bl	8002708 <HAL_Delay>
      ms += 10U;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	330a      	adds	r3, #10
 800e0b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f001 f926 	bl	800f30a <USB_GetMode>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d005      	beq.n	800e0d0 <USB_SetCurrentMode+0x84>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2bc7      	cmp	r3, #199	@ 0xc7
 800e0c8:	d9f0      	bls.n	800e0ac <USB_SetCurrentMode+0x60>
 800e0ca:	e001      	b.n	800e0d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e005      	b.n	800e0dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2bc8      	cmp	r3, #200	@ 0xc8
 800e0d4:	d101      	bne.n	800e0da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e000      	b.n	800e0dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3710      	adds	r7, #16
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0e4:	b084      	sub	sp, #16
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b086      	sub	sp, #24
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e0f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e0fe:	2300      	movs	r3, #0
 800e100:	613b      	str	r3, [r7, #16]
 800e102:	e009      	b.n	800e118 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3340      	adds	r3, #64	@ 0x40
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	2200      	movs	r2, #0
 800e110:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	3301      	adds	r3, #1
 800e116:	613b      	str	r3, [r7, #16]
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	2b0e      	cmp	r3, #14
 800e11c:	d9f2      	bls.n	800e104 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e11e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e122:	2b00      	cmp	r3, #0
 800e124:	d11c      	bne.n	800e160 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e134:	f043 0302 	orr.w	r3, r3, #2
 800e138:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e13e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e005      	b.n	800e16c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e164:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e172:	461a      	mov	r2, r3
 800e174:	2300      	movs	r3, #0
 800e176:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e178:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d10d      	bne.n	800e19c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e184:	2b00      	cmp	r3, #0
 800e186:	d104      	bne.n	800e192 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e188:	2100      	movs	r1, #0
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f968 	bl	800e460 <USB_SetDevSpeed>
 800e190:	e008      	b.n	800e1a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e192:	2101      	movs	r1, #1
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f963 	bl	800e460 <USB_SetDevSpeed>
 800e19a:	e003      	b.n	800e1a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e19c:	2103      	movs	r1, #3
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 f95e 	bl	800e460 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e1a4:	2110      	movs	r1, #16
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 f8fa 	bl	800e3a0 <USB_FlushTxFifo>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f924 	bl	800e404 <USB_FlushRxFifo>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1d8:	461a      	mov	r2, r3
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	613b      	str	r3, [r7, #16]
 800e1ee:	e043      	b.n	800e278 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	015a      	lsls	r2, r3, #5
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e206:	d118      	bne.n	800e23a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	015a      	lsls	r2, r3, #5
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	4413      	add	r3, r2
 800e216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e21a:	461a      	mov	r2, r3
 800e21c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e220:	6013      	str	r3, [r2, #0]
 800e222:	e013      	b.n	800e24c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e230:	461a      	mov	r2, r3
 800e232:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	e008      	b.n	800e24c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	015a      	lsls	r2, r3, #5
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	4413      	add	r3, r2
 800e242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e246:	461a      	mov	r2, r3
 800e248:	2300      	movs	r3, #0
 800e24a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	4413      	add	r3, r2
 800e254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e258:	461a      	mov	r2, r3
 800e25a:	2300      	movs	r3, #0
 800e25c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	015a      	lsls	r2, r3, #5
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	4413      	add	r3, r2
 800e266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e26a:	461a      	mov	r2, r3
 800e26c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	3301      	adds	r3, #1
 800e276:	613b      	str	r3, [r7, #16]
 800e278:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e27c:	461a      	mov	r2, r3
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	4293      	cmp	r3, r2
 800e282:	d3b5      	bcc.n	800e1f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e284:	2300      	movs	r3, #0
 800e286:	613b      	str	r3, [r7, #16]
 800e288:	e043      	b.n	800e312 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	015a      	lsls	r2, r3, #5
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	4413      	add	r3, r2
 800e292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e29c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2a0:	d118      	bne.n	800e2d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10a      	bne.n	800e2be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	015a      	lsls	r2, r3, #5
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e2ba:	6013      	str	r3, [r2, #0]
 800e2bc:	e013      	b.n	800e2e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	015a      	lsls	r2, r3, #5
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	e008      	b.n	800e2e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	015a      	lsls	r2, r3, #5
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e304:	461a      	mov	r2, r3
 800e306:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e30a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	3301      	adds	r3, #1
 800e310:	613b      	str	r3, [r7, #16]
 800e312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e316:	461a      	mov	r2, r3
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d3b5      	bcc.n	800e28a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	68fa      	ldr	r2, [r7, #12]
 800e328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e32c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e330:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e33e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e344:	2b00      	cmp	r3, #0
 800e346:	d105      	bne.n	800e354 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	f043 0210 	orr.w	r2, r3, #16
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	699a      	ldr	r2, [r3, #24]
 800e358:	4b0f      	ldr	r3, [pc, #60]	@ (800e398 <USB_DevInit+0x2b4>)
 800e35a:	4313      	orrs	r3, r2
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e360:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	699b      	ldr	r3, [r3, #24]
 800e36c:	f043 0208 	orr.w	r2, r3, #8
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e374:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d105      	bne.n	800e388 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	699a      	ldr	r2, [r3, #24]
 800e380:	4b06      	ldr	r3, [pc, #24]	@ (800e39c <USB_DevInit+0x2b8>)
 800e382:	4313      	orrs	r3, r2
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e388:	7dfb      	ldrb	r3, [r7, #23]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e394:	b004      	add	sp, #16
 800e396:	4770      	bx	lr
 800e398:	803c3800 	.word	0x803c3800
 800e39c:	40000004 	.word	0x40000004

0800e3a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3ba:	d901      	bls.n	800e3c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e3bc:	2303      	movs	r3, #3
 800e3be:	e01b      	b.n	800e3f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	daf2      	bge.n	800e3ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	019b      	lsls	r3, r3, #6
 800e3d0:	f043 0220 	orr.w	r2, r3, #32
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3e4:	d901      	bls.n	800e3ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	e006      	b.n	800e3f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	f003 0320 	and.w	r3, r3, #32
 800e3f2:	2b20      	cmp	r3, #32
 800e3f4:	d0f0      	beq.n	800e3d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3714      	adds	r7, #20
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e40c:	2300      	movs	r3, #0
 800e40e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	3301      	adds	r3, #1
 800e414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e41c:	d901      	bls.n	800e422 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e41e:	2303      	movs	r3, #3
 800e420:	e018      	b.n	800e454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	691b      	ldr	r3, [r3, #16]
 800e426:	2b00      	cmp	r3, #0
 800e428:	daf2      	bge.n	800e410 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e42a:	2300      	movs	r3, #0
 800e42c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2210      	movs	r2, #16
 800e432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3301      	adds	r3, #1
 800e438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e440:	d901      	bls.n	800e446 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e442:	2303      	movs	r3, #3
 800e444:	e006      	b.n	800e454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	f003 0310 	and.w	r3, r3, #16
 800e44e:	2b10      	cmp	r3, #16
 800e450:	d0f0      	beq.n	800e434 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	460b      	mov	r3, r1
 800e46a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	78fb      	ldrb	r3, [r7, #3]
 800e47a:	68f9      	ldr	r1, [r7, #12]
 800e47c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e480:	4313      	orrs	r3, r2
 800e482:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3714      	adds	r7, #20
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e492:	b480      	push	{r7}
 800e494:	b087      	sub	sp, #28
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	f003 0306 	and.w	r3, r3, #6
 800e4aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d102      	bne.n	800e4b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	75fb      	strb	r3, [r7, #23]
 800e4b6:	e00a      	b.n	800e4ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2b02      	cmp	r3, #2
 800e4bc:	d002      	beq.n	800e4c4 <USB_GetDevSpeed+0x32>
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2b06      	cmp	r3, #6
 800e4c2:	d102      	bne.n	800e4ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	75fb      	strb	r3, [r7, #23]
 800e4c8:	e001      	b.n	800e4ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e4ca:	230f      	movs	r3, #15
 800e4cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	371c      	adds	r7, #28
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	785b      	ldrb	r3, [r3, #1]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d139      	bne.n	800e56c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4fe:	69da      	ldr	r2, [r3, #28]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	f003 030f 	and.w	r3, r3, #15
 800e508:	2101      	movs	r1, #1
 800e50a:	fa01 f303 	lsl.w	r3, r1, r3
 800e50e:	b29b      	uxth	r3, r3
 800e510:	68f9      	ldr	r1, [r7, #12]
 800e512:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e516:	4313      	orrs	r3, r2
 800e518:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	015a      	lsls	r2, r3, #5
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	4413      	add	r3, r2
 800e522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d153      	bne.n	800e5d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	015a      	lsls	r2, r3, #5
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	4413      	add	r3, r2
 800e538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	791b      	ldrb	r3, [r3, #4]
 800e54a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e54c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	059b      	lsls	r3, r3, #22
 800e552:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e554:	431a      	orrs	r2, r3
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	0159      	lsls	r1, r3, #5
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	440b      	add	r3, r1
 800e55e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e562:	4619      	mov	r1, r3
 800e564:	4b20      	ldr	r3, [pc, #128]	@ (800e5e8 <USB_ActivateEndpoint+0x10c>)
 800e566:	4313      	orrs	r3, r2
 800e568:	600b      	str	r3, [r1, #0]
 800e56a:	e035      	b.n	800e5d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e572:	69da      	ldr	r2, [r3, #28]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	f003 030f 	and.w	r3, r3, #15
 800e57c:	2101      	movs	r1, #1
 800e57e:	fa01 f303 	lsl.w	r3, r1, r3
 800e582:	041b      	lsls	r3, r3, #16
 800e584:	68f9      	ldr	r1, [r7, #12]
 800e586:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e58a:	4313      	orrs	r3, r2
 800e58c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	015a      	lsls	r2, r3, #5
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	4413      	add	r3, r2
 800e596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d119      	bne.n	800e5d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	015a      	lsls	r2, r3, #5
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	791b      	ldrb	r3, [r3, #4]
 800e5be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e5c0:	430b      	orrs	r3, r1
 800e5c2:	431a      	orrs	r2, r3
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	0159      	lsls	r1, r3, #5
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	440b      	add	r3, r1
 800e5cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	4b05      	ldr	r3, [pc, #20]	@ (800e5e8 <USB_ActivateEndpoint+0x10c>)
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	10008000 	.word	0x10008000

0800e5ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	785b      	ldrb	r3, [r3, #1]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d161      	bne.n	800e6cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	015a      	lsls	r2, r3, #5
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	4413      	add	r3, r2
 800e610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e61a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e61e:	d11f      	bne.n	800e660 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	015a      	lsls	r2, r3, #5
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	4413      	add	r3, r2
 800e628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	0151      	lsls	r1, r2, #5
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	440a      	add	r2, r1
 800e636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e63a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e63e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	0151      	lsls	r1, r2, #5
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	440a      	add	r2, r1
 800e656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e65a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e65e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	f003 030f 	and.w	r3, r3, #15
 800e670:	2101      	movs	r1, #1
 800e672:	fa01 f303 	lsl.w	r3, r1, r3
 800e676:	b29b      	uxth	r3, r3
 800e678:	43db      	mvns	r3, r3
 800e67a:	68f9      	ldr	r1, [r7, #12]
 800e67c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e680:	4013      	ands	r3, r2
 800e682:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e68a:	69da      	ldr	r2, [r3, #28]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	f003 030f 	and.w	r3, r3, #15
 800e694:	2101      	movs	r1, #1
 800e696:	fa01 f303 	lsl.w	r3, r1, r3
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	43db      	mvns	r3, r3
 800e69e:	68f9      	ldr	r1, [r7, #12]
 800e6a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	015a      	lsls	r2, r3, #5
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	0159      	lsls	r1, r3, #5
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	440b      	add	r3, r1
 800e6be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	4b35      	ldr	r3, [pc, #212]	@ (800e79c <USB_DeactivateEndpoint+0x1b0>)
 800e6c6:	4013      	ands	r3, r2
 800e6c8:	600b      	str	r3, [r1, #0]
 800e6ca:	e060      	b.n	800e78e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	015a      	lsls	r2, r3, #5
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6e2:	d11f      	bne.n	800e724 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	015a      	lsls	r2, r3, #5
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	0151      	lsls	r1, r2, #5
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	440a      	add	r2, r1
 800e6fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e702:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	0151      	lsls	r1, r2, #5
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	440a      	add	r2, r1
 800e71a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e71e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e722:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e72a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	f003 030f 	and.w	r3, r3, #15
 800e734:	2101      	movs	r1, #1
 800e736:	fa01 f303 	lsl.w	r3, r1, r3
 800e73a:	041b      	lsls	r3, r3, #16
 800e73c:	43db      	mvns	r3, r3
 800e73e:	68f9      	ldr	r1, [r7, #12]
 800e740:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e744:	4013      	ands	r3, r2
 800e746:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e74e:	69da      	ldr	r2, [r3, #28]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	f003 030f 	and.w	r3, r3, #15
 800e758:	2101      	movs	r1, #1
 800e75a:	fa01 f303 	lsl.w	r3, r1, r3
 800e75e:	041b      	lsls	r3, r3, #16
 800e760:	43db      	mvns	r3, r3
 800e762:	68f9      	ldr	r1, [r7, #12]
 800e764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e768:	4013      	ands	r3, r2
 800e76a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	015a      	lsls	r2, r3, #5
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4413      	add	r3, r2
 800e774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	0159      	lsls	r1, r3, #5
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	440b      	add	r3, r1
 800e782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e786:	4619      	mov	r1, r3
 800e788:	4b05      	ldr	r3, [pc, #20]	@ (800e7a0 <USB_DeactivateEndpoint+0x1b4>)
 800e78a:	4013      	ands	r3, r2
 800e78c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3714      	adds	r7, #20
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr
 800e79c:	ec337800 	.word	0xec337800
 800e7a0:	eff37800 	.word	0xeff37800

0800e7a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08a      	sub	sp, #40	@ 0x28
 800e7a8:	af02      	add	r7, sp, #8
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	785b      	ldrb	r3, [r3, #1]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	f040 8185 	bne.w	800ead0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	691b      	ldr	r3, [r3, #16]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d132      	bne.n	800e834 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	015a      	lsls	r2, r3, #5
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7da:	691a      	ldr	r2, [r3, #16]
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	0159      	lsls	r1, r3, #5
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	440b      	add	r3, r1
 800e7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4ba7      	ldr	r3, [pc, #668]	@ (800ea88 <USB_EPStartXfer+0x2e4>)
 800e7ec:	4013      	ands	r3, r2
 800e7ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	015a      	lsls	r2, r3, #5
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	69ba      	ldr	r2, [r7, #24]
 800e800:	0151      	lsls	r1, r2, #5
 800e802:	69fa      	ldr	r2, [r7, #28]
 800e804:	440a      	add	r2, r1
 800e806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e80a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e80e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	015a      	lsls	r2, r3, #5
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	4413      	add	r3, r2
 800e818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e81c:	691a      	ldr	r2, [r3, #16]
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	0159      	lsls	r1, r3, #5
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	440b      	add	r3, r1
 800e826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e82a:	4619      	mov	r1, r3
 800e82c:	4b97      	ldr	r3, [pc, #604]	@ (800ea8c <USB_EPStartXfer+0x2e8>)
 800e82e:	4013      	ands	r3, r2
 800e830:	610b      	str	r3, [r1, #16]
 800e832:	e097      	b.n	800e964 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e840:	691a      	ldr	r2, [r3, #16]
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	0159      	lsls	r1, r3, #5
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	440b      	add	r3, r1
 800e84a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e84e:	4619      	mov	r1, r3
 800e850:	4b8e      	ldr	r3, [pc, #568]	@ (800ea8c <USB_EPStartXfer+0x2e8>)
 800e852:	4013      	ands	r3, r2
 800e854:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	015a      	lsls	r2, r3, #5
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	4413      	add	r3, r2
 800e85e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e862:	691a      	ldr	r2, [r3, #16]
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	0159      	lsls	r1, r3, #5
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	440b      	add	r3, r1
 800e86c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e870:	4619      	mov	r1, r3
 800e872:	4b85      	ldr	r3, [pc, #532]	@ (800ea88 <USB_EPStartXfer+0x2e4>)
 800e874:	4013      	ands	r3, r2
 800e876:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d11a      	bne.n	800e8b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	691a      	ldr	r2, [r3, #16]
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	429a      	cmp	r2, r3
 800e888:	d903      	bls.n	800e892 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	689a      	ldr	r2, [r3, #8]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	015a      	lsls	r2, r3, #5
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	4413      	add	r3, r2
 800e89a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	0151      	lsls	r1, r2, #5
 800e8a4:	69fa      	ldr	r2, [r7, #28]
 800e8a6:	440a      	add	r2, r1
 800e8a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e8b0:	6113      	str	r3, [r2, #16]
 800e8b2:	e044      	b.n	800e93e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	691a      	ldr	r2, [r3, #16]
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	4413      	add	r3, r2
 800e8be:	1e5a      	subs	r2, r3, #1
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	015a      	lsls	r2, r3, #5
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8d6:	691a      	ldr	r2, [r3, #16]
 800e8d8:	8afb      	ldrh	r3, [r7, #22]
 800e8da:	04d9      	lsls	r1, r3, #19
 800e8dc:	4b6c      	ldr	r3, [pc, #432]	@ (800ea90 <USB_EPStartXfer+0x2ec>)
 800e8de:	400b      	ands	r3, r1
 800e8e0:	69b9      	ldr	r1, [r7, #24]
 800e8e2:	0148      	lsls	r0, r1, #5
 800e8e4:	69f9      	ldr	r1, [r7, #28]
 800e8e6:	4401      	add	r1, r0
 800e8e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	791b      	ldrb	r3, [r3, #4]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d122      	bne.n	800e93e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	015a      	lsls	r2, r3, #5
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	4413      	add	r3, r2
 800e900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	0151      	lsls	r1, r2, #5
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	440a      	add	r2, r1
 800e90e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e912:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e916:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	015a      	lsls	r2, r3, #5
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	4413      	add	r3, r2
 800e920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e924:	691a      	ldr	r2, [r3, #16]
 800e926:	8afb      	ldrh	r3, [r7, #22]
 800e928:	075b      	lsls	r3, r3, #29
 800e92a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e92e:	69b9      	ldr	r1, [r7, #24]
 800e930:	0148      	lsls	r0, r1, #5
 800e932:	69f9      	ldr	r1, [r7, #28]
 800e934:	4401      	add	r1, r0
 800e936:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e93a:	4313      	orrs	r3, r2
 800e93c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	015a      	lsls	r2, r3, #5
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	4413      	add	r3, r2
 800e946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e94a:	691a      	ldr	r2, [r3, #16]
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e954:	69b9      	ldr	r1, [r7, #24]
 800e956:	0148      	lsls	r0, r1, #5
 800e958:	69f9      	ldr	r1, [r7, #28]
 800e95a:	4401      	add	r1, r0
 800e95c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e960:	4313      	orrs	r3, r2
 800e962:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d14b      	bne.n	800ea02 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	69db      	ldr	r3, [r3, #28]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	015a      	lsls	r2, r3, #5
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	4413      	add	r3, r2
 800e97a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e97e:	461a      	mov	r2, r3
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	791b      	ldrb	r3, [r3, #4]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d128      	bne.n	800e9e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d110      	bne.n	800e9c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	015a      	lsls	r2, r3, #5
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	69ba      	ldr	r2, [r7, #24]
 800e9ae:	0151      	lsls	r1, r2, #5
 800e9b0:	69fa      	ldr	r2, [r7, #28]
 800e9b2:	440a      	add	r2, r1
 800e9b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e9bc:	6013      	str	r3, [r2, #0]
 800e9be:	e00f      	b.n	800e9e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	015a      	lsls	r2, r3, #5
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	69ba      	ldr	r2, [r7, #24]
 800e9d0:	0151      	lsls	r1, r2, #5
 800e9d2:	69fa      	ldr	r2, [r7, #28]
 800e9d4:	440a      	add	r2, r1
 800e9d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	015a      	lsls	r2, r3, #5
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	69ba      	ldr	r2, [r7, #24]
 800e9f0:	0151      	lsls	r1, r2, #5
 800e9f2:	69fa      	ldr	r2, [r7, #28]
 800e9f4:	440a      	add	r2, r1
 800e9f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e9fe:	6013      	str	r3, [r2, #0]
 800ea00:	e169      	b.n	800ecd6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	015a      	lsls	r2, r3, #5
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	4413      	add	r3, r2
 800ea0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	69ba      	ldr	r2, [r7, #24]
 800ea12:	0151      	lsls	r1, r2, #5
 800ea14:	69fa      	ldr	r2, [r7, #28]
 800ea16:	440a      	add	r2, r1
 800ea18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ea20:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	791b      	ldrb	r3, [r3, #4]
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d015      	beq.n	800ea56 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 8151 	beq.w	800ecd6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	f003 030f 	and.w	r3, r3, #15
 800ea44:	2101      	movs	r1, #1
 800ea46:	fa01 f303 	lsl.w	r3, r1, r3
 800ea4a:	69f9      	ldr	r1, [r7, #28]
 800ea4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea50:	4313      	orrs	r3, r2
 800ea52:	634b      	str	r3, [r1, #52]	@ 0x34
 800ea54:	e13f      	b.n	800ecd6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d116      	bne.n	800ea94 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	015a      	lsls	r2, r3, #5
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	69ba      	ldr	r2, [r7, #24]
 800ea76:	0151      	lsls	r1, r2, #5
 800ea78:	69fa      	ldr	r2, [r7, #28]
 800ea7a:	440a      	add	r2, r1
 800ea7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ea84:	6013      	str	r3, [r2, #0]
 800ea86:	e015      	b.n	800eab4 <USB_EPStartXfer+0x310>
 800ea88:	e007ffff 	.word	0xe007ffff
 800ea8c:	fff80000 	.word	0xfff80000
 800ea90:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	015a      	lsls	r2, r3, #5
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	69ba      	ldr	r2, [r7, #24]
 800eaa4:	0151      	lsls	r1, r2, #5
 800eaa6:	69fa      	ldr	r2, [r7, #28]
 800eaa8:	440a      	add	r2, r1
 800eaaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eaae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eab2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	68d9      	ldr	r1, [r3, #12]
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	781a      	ldrb	r2, [r3, #0]
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	691b      	ldr	r3, [r3, #16]
 800eac0:	b298      	uxth	r0, r3
 800eac2:	79fb      	ldrb	r3, [r7, #7]
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	4603      	mov	r3, r0
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f000 f9b9 	bl	800ee40 <USB_WritePacket>
 800eace:	e102      	b.n	800ecd6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	015a      	lsls	r2, r3, #5
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	4413      	add	r3, r2
 800ead8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eadc:	691a      	ldr	r2, [r3, #16]
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	0159      	lsls	r1, r3, #5
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	440b      	add	r3, r1
 800eae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaea:	4619      	mov	r1, r3
 800eaec:	4b7c      	ldr	r3, [pc, #496]	@ (800ece0 <USB_EPStartXfer+0x53c>)
 800eaee:	4013      	ands	r3, r2
 800eaf0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	015a      	lsls	r2, r3, #5
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	4413      	add	r3, r2
 800eafa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eafe:	691a      	ldr	r2, [r3, #16]
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	0159      	lsls	r1, r3, #5
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	440b      	add	r3, r1
 800eb08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	4b75      	ldr	r3, [pc, #468]	@ (800ece4 <USB_EPStartXfer+0x540>)
 800eb10:	4013      	ands	r3, r2
 800eb12:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800eb14:	69bb      	ldr	r3, [r7, #24]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d12f      	bne.n	800eb7a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d003      	beq.n	800eb2a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	689a      	ldr	r2, [r3, #8]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	689a      	ldr	r2, [r3, #8]
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	015a      	lsls	r2, r3, #5
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	4413      	add	r3, r2
 800eb3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb3e:	691a      	ldr	r2, [r3, #16]
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	6a1b      	ldr	r3, [r3, #32]
 800eb44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb48:	69b9      	ldr	r1, [r7, #24]
 800eb4a:	0148      	lsls	r0, r1, #5
 800eb4c:	69f9      	ldr	r1, [r7, #28]
 800eb4e:	4401      	add	r1, r0
 800eb50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb54:	4313      	orrs	r3, r2
 800eb56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	015a      	lsls	r2, r3, #5
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	4413      	add	r3, r2
 800eb60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	69ba      	ldr	r2, [r7, #24]
 800eb68:	0151      	lsls	r1, r2, #5
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	440a      	add	r2, r1
 800eb6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb76:	6113      	str	r3, [r2, #16]
 800eb78:	e05f      	b.n	800ec3a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	691b      	ldr	r3, [r3, #16]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d123      	bne.n	800ebca <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	015a      	lsls	r2, r3, #5
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	4413      	add	r3, r2
 800eb8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb8e:	691a      	ldr	r2, [r3, #16]
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb98:	69b9      	ldr	r1, [r7, #24]
 800eb9a:	0148      	lsls	r0, r1, #5
 800eb9c:	69f9      	ldr	r1, [r7, #28]
 800eb9e:	4401      	add	r1, r0
 800eba0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eba4:	4313      	orrs	r3, r2
 800eba6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	015a      	lsls	r2, r3, #5
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	4413      	add	r3, r2
 800ebb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	69ba      	ldr	r2, [r7, #24]
 800ebb8:	0151      	lsls	r1, r2, #5
 800ebba:	69fa      	ldr	r2, [r7, #28]
 800ebbc:	440a      	add	r2, r1
 800ebbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ebc6:	6113      	str	r3, [r2, #16]
 800ebc8:	e037      	b.n	800ec3a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	691a      	ldr	r2, [r3, #16]
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	1e5a      	subs	r2, r3, #1
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebde:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	8afa      	ldrh	r2, [r7, #22]
 800ebe6:	fb03 f202 	mul.w	r2, r3, r2
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	015a      	lsls	r2, r3, #5
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebfa:	691a      	ldr	r2, [r3, #16]
 800ebfc:	8afb      	ldrh	r3, [r7, #22]
 800ebfe:	04d9      	lsls	r1, r3, #19
 800ec00:	4b39      	ldr	r3, [pc, #228]	@ (800ece8 <USB_EPStartXfer+0x544>)
 800ec02:	400b      	ands	r3, r1
 800ec04:	69b9      	ldr	r1, [r7, #24]
 800ec06:	0148      	lsls	r0, r1, #5
 800ec08:	69f9      	ldr	r1, [r7, #28]
 800ec0a:	4401      	add	r1, r0
 800ec0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec10:	4313      	orrs	r3, r2
 800ec12:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	015a      	lsls	r2, r3, #5
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec20:	691a      	ldr	r2, [r3, #16]
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec2a:	69b9      	ldr	r1, [r7, #24]
 800ec2c:	0148      	lsls	r0, r1, #5
 800ec2e:	69f9      	ldr	r1, [r7, #28]
 800ec30:	4401      	add	r1, r0
 800ec32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec36:	4313      	orrs	r3, r2
 800ec38:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ec3a:	79fb      	ldrb	r3, [r7, #7]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d10d      	bne.n	800ec5c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d009      	beq.n	800ec5c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	68d9      	ldr	r1, [r3, #12]
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	015a      	lsls	r2, r3, #5
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	4413      	add	r3, r2
 800ec54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec58:	460a      	mov	r2, r1
 800ec5a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	791b      	ldrb	r3, [r3, #4]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d128      	bne.n	800ecb6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d110      	bne.n	800ec96 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	015a      	lsls	r2, r3, #5
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	69ba      	ldr	r2, [r7, #24]
 800ec84:	0151      	lsls	r1, r2, #5
 800ec86:	69fa      	ldr	r2, [r7, #28]
 800ec88:	440a      	add	r2, r1
 800ec8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ec92:	6013      	str	r3, [r2, #0]
 800ec94:	e00f      	b.n	800ecb6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	015a      	lsls	r2, r3, #5
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	69ba      	ldr	r2, [r7, #24]
 800eca6:	0151      	lsls	r1, r2, #5
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	440a      	add	r2, r1
 800ecac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ecb4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	015a      	lsls	r2, r3, #5
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	69ba      	ldr	r2, [r7, #24]
 800ecc6:	0151      	lsls	r1, r2, #5
 800ecc8:	69fa      	ldr	r2, [r7, #28]
 800ecca:	440a      	add	r2, r1
 800eccc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecd0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ecd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3720      	adds	r7, #32
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	fff80000 	.word	0xfff80000
 800ece4:	e007ffff 	.word	0xe007ffff
 800ece8:	1ff80000 	.word	0x1ff80000

0800ecec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b087      	sub	sp, #28
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	785b      	ldrb	r3, [r3, #1]
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d14a      	bne.n	800eda0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	015a      	lsls	r2, r3, #5
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	4413      	add	r3, r2
 800ed14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed22:	f040 8086 	bne.w	800ee32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	015a      	lsls	r2, r3, #5
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	4413      	add	r3, r2
 800ed30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	683a      	ldr	r2, [r7, #0]
 800ed38:	7812      	ldrb	r2, [r2, #0]
 800ed3a:	0151      	lsls	r1, r2, #5
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	440a      	add	r2, r1
 800ed40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	015a      	lsls	r2, r3, #5
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	4413      	add	r3, r2
 800ed54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	7812      	ldrb	r2, [r2, #0]
 800ed5e:	0151      	lsls	r1, r2, #5
 800ed60:	693a      	ldr	r2, [r7, #16]
 800ed62:	440a      	add	r2, r1
 800ed64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d902      	bls.n	800ed84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	75fb      	strb	r3, [r7, #23]
          break;
 800ed82:	e056      	b.n	800ee32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	015a      	lsls	r2, r3, #5
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed9c:	d0e7      	beq.n	800ed6e <USB_EPStopXfer+0x82>
 800ed9e:	e048      	b.n	800ee32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	015a      	lsls	r2, r3, #5
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	4413      	add	r3, r2
 800edaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800edb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800edb8:	d13b      	bne.n	800ee32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	015a      	lsls	r2, r3, #5
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	4413      	add	r3, r2
 800edc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	7812      	ldrb	r2, [r2, #0]
 800edce:	0151      	lsls	r1, r2, #5
 800edd0:	693a      	ldr	r2, [r7, #16]
 800edd2:	440a      	add	r2, r1
 800edd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800edd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eddc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	015a      	lsls	r2, r3, #5
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	4413      	add	r3, r2
 800ede8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	683a      	ldr	r2, [r7, #0]
 800edf0:	7812      	ldrb	r2, [r2, #0]
 800edf2:	0151      	lsls	r1, r2, #5
 800edf4:	693a      	ldr	r2, [r7, #16]
 800edf6:	440a      	add	r2, r1
 800edf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800edfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	3301      	adds	r3, #1
 800ee06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d902      	bls.n	800ee18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ee12:	2301      	movs	r3, #1
 800ee14:	75fb      	strb	r3, [r7, #23]
          break;
 800ee16:	e00c      	b.n	800ee32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	015a      	lsls	r2, r3, #5
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	4413      	add	r3, r2
 800ee22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee30:	d0e7      	beq.n	800ee02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ee32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	371c      	adds	r7, #28
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b089      	sub	sp, #36	@ 0x24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	460b      	mov	r3, r1
 800ee50:	71fb      	strb	r3, [r7, #7]
 800ee52:	4613      	mov	r3, r2
 800ee54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ee5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d123      	bne.n	800eeae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee66:	88bb      	ldrh	r3, [r7, #4]
 800ee68:	3303      	adds	r3, #3
 800ee6a:	089b      	lsrs	r3, r3, #2
 800ee6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ee6e:	2300      	movs	r3, #0
 800ee70:	61bb      	str	r3, [r7, #24]
 800ee72:	e018      	b.n	800eea6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ee74:	79fb      	ldrb	r3, [r7, #7]
 800ee76:	031a      	lsls	r2, r3, #12
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee80:	461a      	mov	r2, r3
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	3301      	adds	r3, #1
 800ee92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	3301      	adds	r3, #1
 800ee98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	3301      	adds	r3, #1
 800eea4:	61bb      	str	r3, [r7, #24]
 800eea6:	69ba      	ldr	r2, [r7, #24]
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d3e2      	bcc.n	800ee74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3724      	adds	r7, #36	@ 0x24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b08b      	sub	sp, #44	@ 0x2c
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	4613      	mov	r3, r2
 800eec8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800eed2:	88fb      	ldrh	r3, [r7, #6]
 800eed4:	089b      	lsrs	r3, r3, #2
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800eeda:	88fb      	ldrh	r3, [r7, #6]
 800eedc:	f003 0303 	and.w	r3, r3, #3
 800eee0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eee2:	2300      	movs	r3, #0
 800eee4:	623b      	str	r3, [r7, #32]
 800eee6:	e014      	b.n	800ef12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef2:	601a      	str	r2, [r3, #0]
    pDest++;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef6:	3301      	adds	r3, #1
 800eef8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eefc:	3301      	adds	r3, #1
 800eefe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef02:	3301      	adds	r3, #1
 800ef04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef08:	3301      	adds	r3, #1
 800ef0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ef0c:	6a3b      	ldr	r3, [r7, #32]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	623b      	str	r3, [r7, #32]
 800ef12:	6a3a      	ldr	r2, [r7, #32]
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d3e6      	bcc.n	800eee8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ef1a:	8bfb      	ldrh	r3, [r7, #30]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d01e      	beq.n	800ef5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ef20:	2300      	movs	r3, #0
 800ef22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f107 0310 	add.w	r3, r7, #16
 800ef30:	6812      	ldr	r2, [r2, #0]
 800ef32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ef34:	693a      	ldr	r2, [r7, #16]
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	00db      	lsls	r3, r3, #3
 800ef3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef44:	701a      	strb	r2, [r3, #0]
      i++;
 800ef46:	6a3b      	ldr	r3, [r7, #32]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4e:	3301      	adds	r3, #1
 800ef50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ef52:	8bfb      	ldrh	r3, [r7, #30]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ef58:	8bfb      	ldrh	r3, [r7, #30]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1ea      	bne.n	800ef34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	372c      	adds	r7, #44	@ 0x2c
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	785b      	ldrb	r3, [r3, #1]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d12c      	bne.n	800efe2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4413      	add	r3, r2
 800ef90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	db12      	blt.n	800efc0 <USB_EPSetStall+0x54>
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d00f      	beq.n	800efc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	015a      	lsls	r2, r3, #5
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4413      	add	r3, r2
 800efa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	0151      	lsls	r1, r2, #5
 800efb2:	68fa      	ldr	r2, [r7, #12]
 800efb4:	440a      	add	r2, r1
 800efb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800efbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	015a      	lsls	r2, r3, #5
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	4413      	add	r3, r2
 800efc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	0151      	lsls	r1, r2, #5
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	440a      	add	r2, r1
 800efd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	e02b      	b.n	800f03a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	015a      	lsls	r2, r3, #5
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	4413      	add	r3, r2
 800efea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	db12      	blt.n	800f01a <USB_EPSetStall+0xae>
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00f      	beq.n	800f01a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	015a      	lsls	r2, r3, #5
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	4413      	add	r3, r2
 800f002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68ba      	ldr	r2, [r7, #8]
 800f00a:	0151      	lsls	r1, r2, #5
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	440a      	add	r2, r1
 800f010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f014:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f018:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	015a      	lsls	r2, r3, #5
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	4413      	add	r3, r2
 800f022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	0151      	lsls	r1, r2, #5
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	440a      	add	r2, r1
 800f030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f034:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f038:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	785b      	ldrb	r3, [r3, #1]
 800f060:	2b01      	cmp	r3, #1
 800f062:	d128      	bne.n	800f0b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	015a      	lsls	r2, r3, #5
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	4413      	add	r3, r2
 800f06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	0151      	lsls	r1, r2, #5
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	440a      	add	r2, r1
 800f07a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f07e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f082:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	791b      	ldrb	r3, [r3, #4]
 800f088:	2b03      	cmp	r3, #3
 800f08a:	d003      	beq.n	800f094 <USB_EPClearStall+0x4c>
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	791b      	ldrb	r3, [r3, #4]
 800f090:	2b02      	cmp	r3, #2
 800f092:	d138      	bne.n	800f106 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	015a      	lsls	r2, r3, #5
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4413      	add	r3, r2
 800f09c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	0151      	lsls	r1, r2, #5
 800f0a6:	68fa      	ldr	r2, [r7, #12]
 800f0a8:	440a      	add	r2, r1
 800f0aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0b2:	6013      	str	r3, [r2, #0]
 800f0b4:	e027      	b.n	800f106 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	015a      	lsls	r2, r3, #5
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	4413      	add	r3, r2
 800f0be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	0151      	lsls	r1, r2, #5
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	440a      	add	r2, r1
 800f0cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f0d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	791b      	ldrb	r3, [r3, #4]
 800f0da:	2b03      	cmp	r3, #3
 800f0dc:	d003      	beq.n	800f0e6 <USB_EPClearStall+0x9e>
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	791b      	ldrb	r3, [r3, #4]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d10f      	bne.n	800f106 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	015a      	lsls	r2, r3, #5
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	0151      	lsls	r1, r2, #5
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	440a      	add	r2, r1
 800f0fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f104:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f114:	b480      	push	{r7}
 800f116:	b085      	sub	sp, #20
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	68fa      	ldr	r2, [r7, #12]
 800f12e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f132:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f136:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f148:	68f9      	ldr	r1, [r7, #12]
 800f14a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f14e:	4313      	orrs	r3, r2
 800f150:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f152:	2300      	movs	r3, #0
}
 800f154:	4618      	mov	r0, r3
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f17a:	f023 0303 	bic.w	r3, r3, #3
 800f17e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f18e:	f023 0302 	bic.w	r3, r3, #2
 800f192:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr

0800f1a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1a2:	b480      	push	{r7}
 800f1a4:	b085      	sub	sp, #20
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f1bc:	f023 0303 	bic.w	r3, r3, #3
 800f1c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1d0:	f043 0302 	orr.w	r3, r3, #2
 800f1d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3714      	adds	r7, #20
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	695b      	ldr	r3, [r3, #20]
 800f1f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	699b      	ldr	r3, [r3, #24]
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	4013      	ands	r3, r2
 800f1fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3714      	adds	r7, #20
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr

0800f20a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f20a:	b480      	push	{r7}
 800f20c:	b085      	sub	sp, #20
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f226:	69db      	ldr	r3, [r3, #28]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	4013      	ands	r3, r2
 800f22c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	0c1b      	lsrs	r3, r3, #16
}
 800f232:	4618      	mov	r0, r3
 800f234:	3714      	adds	r7, #20
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f23e:	b480      	push	{r7}
 800f240:	b085      	sub	sp, #20
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f250:	699b      	ldr	r3, [r3, #24]
 800f252:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f25a:	69db      	ldr	r3, [r3, #28]
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	4013      	ands	r3, r2
 800f260:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	b29b      	uxth	r3, r3
}
 800f266:	4618      	mov	r0, r3
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f272:	b480      	push	{r7}
 800f274:	b085      	sub	sp, #20
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
 800f27a:	460b      	mov	r3, r1
 800f27c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f282:	78fb      	ldrb	r3, [r7, #3]
 800f284:	015a      	lsls	r2, r3, #5
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	4413      	add	r3, r2
 800f28a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	4013      	ands	r3, r2
 800f29e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3714      	adds	r7, #20
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	b087      	sub	sp, #28
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2d2:	78fb      	ldrb	r3, [r7, #3]
 800f2d4:	f003 030f 	and.w	r3, r3, #15
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	fa22 f303 	lsr.w	r3, r2, r3
 800f2de:	01db      	lsls	r3, r3, #7
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	693a      	ldr	r2, [r7, #16]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2e8:	78fb      	ldrb	r3, [r7, #3]
 800f2ea:	015a      	lsls	r2, r3, #5
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	4013      	ands	r3, r2
 800f2fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	371c      	adds	r7, #28
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f30a:	b480      	push	{r7}
 800f30c:	b083      	sub	sp, #12
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	695b      	ldr	r3, [r3, #20]
 800f316:	f003 0301 	and.w	r3, r3, #1
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	370c      	adds	r7, #12
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
	...

0800f328 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f328:	b480      	push	{r7}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f342:	4619      	mov	r1, r3
 800f344:	4b09      	ldr	r3, [pc, #36]	@ (800f36c <USB_ActivateSetup+0x44>)
 800f346:	4013      	ands	r3, r2
 800f348:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f35c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3714      	adds	r7, #20
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	fffff800 	.word	0xfffff800

0800f370 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f370:	b480      	push	{r7}
 800f372:	b087      	sub	sp, #28
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	460b      	mov	r3, r1
 800f37a:	607a      	str	r2, [r7, #4]
 800f37c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	333c      	adds	r3, #60	@ 0x3c
 800f386:	3304      	adds	r3, #4
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	4a26      	ldr	r2, [pc, #152]	@ (800f428 <USB_EP0_OutStart+0xb8>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d90a      	bls.n	800f3aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f3a4:	d101      	bne.n	800f3aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	e037      	b.n	800f41a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f3c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3d0:	691b      	ldr	r3, [r3, #16]
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3d8:	f043 0318 	orr.w	r3, r3, #24
 800f3dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f3f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f3f2:	7afb      	ldrb	r3, [r7, #11]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d10f      	bne.n	800f418 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3fe:	461a      	mov	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f412:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f416:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	371c      	adds	r7, #28
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	4f54300a 	.word	0x4f54300a

0800f42c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b085      	sub	sp, #20
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f434:	2300      	movs	r3, #0
 800f436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	3301      	adds	r3, #1
 800f43c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f444:	d901      	bls.n	800f44a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f446:	2303      	movs	r3, #3
 800f448:	e01b      	b.n	800f482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	daf2      	bge.n	800f438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f452:	2300      	movs	r3, #0
 800f454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	691b      	ldr	r3, [r3, #16]
 800f45a:	f043 0201 	orr.w	r2, r3, #1
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3301      	adds	r3, #1
 800f466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f46e:	d901      	bls.n	800f474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f470:	2303      	movs	r3, #3
 800f472:	e006      	b.n	800f482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	f003 0301 	and.w	r3, r3, #1
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d0f0      	beq.n	800f462 <USB_CoreReset+0x36>

  return HAL_OK;
 800f480:	2300      	movs	r3, #0
}
 800f482:	4618      	mov	r0, r3
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr
	...

0800f490 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	460b      	mov	r3, r1
 800f49a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800f49c:	f641 30d0 	movw	r0, #7120	@ 0x1bd0
 800f4a0:	f005 f9c6 	bl	8014830 <USBD_static_malloc>
 800f4a4:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d109      	bne.n	800f4c0 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	32b0      	adds	r2, #176	@ 0xb0
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f4bc:	2302      	movs	r3, #2
 800f4be:	e07e      	b.n	800f5be <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	32b0      	adds	r2, #176	@ 0xb0
 800f4ca:	68f9      	ldr	r1, [r7, #12]
 800f4cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	32b0      	adds	r2, #176	@ 0xb0
 800f4da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	7c1b      	ldrb	r3, [r3, #16]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10e      	bne.n	800f50a <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800f4ec:	4b36      	ldr	r3, [pc, #216]	@ (800f5c8 <USBD_AUDIO_Init+0x138>)
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	f003 020f 	and.w	r2, r3, #15
 800f4f4:	6879      	ldr	r1, [r7, #4]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4413      	add	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	440b      	add	r3, r1
 800f500:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f504:	2201      	movs	r2, #1
 800f506:	801a      	strh	r2, [r3, #0]
 800f508:	e00d      	b.n	800f526 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800f50a:	4b2f      	ldr	r3, [pc, #188]	@ (800f5c8 <USBD_AUDIO_Init+0x138>)
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	f003 020f 	and.w	r2, r3, #15
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	440b      	add	r3, r1
 800f51e:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f522:	2201      	movs	r2, #1
 800f524:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800f526:	4b28      	ldr	r3, [pc, #160]	@ (800f5c8 <USBD_AUDIO_Init+0x138>)
 800f528:	7819      	ldrb	r1, [r3, #0]
 800f52a:	2358      	movs	r3, #88	@ 0x58
 800f52c:	2201      	movs	r2, #1
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f005 f85b 	bl	80145ea <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800f534:	4b24      	ldr	r3, [pc, #144]	@ (800f5c8 <USBD_AUDIO_Init+0x138>)
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	f003 020f 	and.w	r2, r3, #15
 800f53c:	6879      	ldr	r1, [r7, #4]
 800f53e:	4613      	mov	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4413      	add	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	440b      	add	r3, r1
 800f548:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f54c:	2201      	movs	r2, #1
 800f54e:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f55c:	2203      	movs	r2, #3
 800f55e:	f883 2b84 	strb.w	r2, [r3, #2948]	@ 0xb84
  haudio->wr_ptr = 0U;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f568:	2200      	movs	r2, #0
 800f56a:	f8a3 2b88 	strh.w	r2, [r3, #2952]	@ 0xb88
  haudio->rd_ptr = 0U;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f574:	2200      	movs	r2, #0
 800f576:	f8a3 2b86 	strh.w	r2, [r3, #2950]	@ 0xb86
  haudio->rd_enable = 0U;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f580:	2200      	movs	r2, #0
 800f582:	f883 2b85 	strb.w	r2, [r3, #2949]	@ 0xb85

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	33b0      	adds	r3, #176	@ 0xb0
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2200      	movs	r2, #0
 800f59a:	2146      	movs	r1, #70	@ 0x46
 800f59c:	f245 6054 	movw	r0, #22100	@ 0x5654
 800f5a0:	4798      	blx	r3
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d001      	beq.n	800f5ac <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800f5a8:	2303      	movs	r3, #3
 800f5aa:	e008      	b.n	800f5be <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800f5ac:	4b06      	ldr	r3, [pc, #24]	@ (800f5c8 <USBD_AUDIO_Init+0x138>)
 800f5ae:	7819      	ldrb	r1, [r3, #0]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	1d1a      	adds	r2, r3, #4
 800f5b4:	2358      	movs	r3, #88	@ 0x58
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f005 f906 	bl	80147c8 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	240000de 	.word	0x240000de

0800f5cc <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800f5d8:	4b28      	ldr	r3, [pc, #160]	@ (800f67c <USBD_AUDIO_DeInit+0xb0>)
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f005 f829 	bl	8014636 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800f5e4:	4b25      	ldr	r3, [pc, #148]	@ (800f67c <USBD_AUDIO_DeInit+0xb0>)
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	f003 020f 	and.w	r2, r3, #15
 800f5ec:	6879      	ldr	r1, [r7, #4]
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	4413      	add	r3, r2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	440b      	add	r3, r1
 800f5f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 800f600:	4b1e      	ldr	r3, [pc, #120]	@ (800f67c <USBD_AUDIO_DeInit+0xb0>)
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	f003 020f 	and.w	r2, r3, #15
 800f608:	6879      	ldr	r1, [r7, #4]
 800f60a:	4613      	mov	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	4413      	add	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	440b      	add	r3, r1
 800f614:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f618:	2200      	movs	r2, #0
 800f61a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	32b0      	adds	r2, #176	@ 0xb0
 800f626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d020      	beq.n	800f670 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	33b0      	adds	r3, #176	@ 0xb0
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	4413      	add	r3, r2
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	2000      	movs	r0, #0
 800f642:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	32b0      	adds	r2, #176	@ 0xb0
 800f64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f652:	4618      	mov	r0, r3
 800f654:	f005 f8fa 	bl	801484c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	32b0      	adds	r2, #176	@ 0xb0
 800f662:	2100      	movs	r1, #0
 800f664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	240000de 	.word	0x240000de

0800f680 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800f68a:	2300      	movs	r3, #0
 800f68c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800f68e:	2300      	movs	r3, #0
 800f690:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	32b0      	adds	r2, #176	@ 0xb0
 800f69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a0:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d101      	bne.n	800f6ac <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800f6a8:	2303      	movs	r3, #3
 800f6aa:	e0c1      	b.n	800f830 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d01a      	beq.n	800f6ee <USBD_AUDIO_Setup+0x6e>
 800f6b8:	2b20      	cmp	r3, #32
 800f6ba:	f040 80b1 	bne.w	800f820 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	785b      	ldrb	r3, [r3, #1]
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d006      	beq.n	800f6d4 <USBD_AUDIO_Setup+0x54>
 800f6c6:	2b81      	cmp	r3, #129	@ 0x81
 800f6c8:	d109      	bne.n	800f6de <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 f9f5 	bl	800fabc <AUDIO_REQ_GetCurrent>
          break;
 800f6d2:	e00b      	b.n	800f6ec <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fa1c 	bl	800fb14 <AUDIO_REQ_SetCurrent>
          break;
 800f6dc:	e006      	b.n	800f6ec <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 800f6de:	6839      	ldr	r1, [r7, #0]
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f001 fcae 	bl	8011042 <USBD_CtlError>
          ret = USBD_FAIL;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	75fb      	strb	r3, [r7, #23]
          break;
 800f6ea:	bf00      	nop
      }
      break;
 800f6ec:	e09f      	b.n	800f82e <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	785b      	ldrb	r3, [r3, #1]
 800f6f2:	2b0b      	cmp	r3, #11
 800f6f4:	f200 8089 	bhi.w	800f80a <USBD_AUDIO_Setup+0x18a>
 800f6f8:	a201      	add	r2, pc, #4	@ (adr r2, 800f700 <USBD_AUDIO_Setup+0x80>)
 800f6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fe:	bf00      	nop
 800f700:	0800f731 	.word	0x0800f731
 800f704:	0800f819 	.word	0x0800f819
 800f708:	0800f80b 	.word	0x0800f80b
 800f70c:	0800f80b 	.word	0x0800f80b
 800f710:	0800f80b 	.word	0x0800f80b
 800f714:	0800f80b 	.word	0x0800f80b
 800f718:	0800f75b 	.word	0x0800f75b
 800f71c:	0800f80b 	.word	0x0800f80b
 800f720:	0800f80b 	.word	0x0800f80b
 800f724:	0800f80b 	.word	0x0800f80b
 800f728:	0800f7a3 	.word	0x0800f7a3
 800f72c:	0800f7cb 	.word	0x0800f7cb
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f736:	b2db      	uxtb	r3, r3
 800f738:	2b03      	cmp	r3, #3
 800f73a:	d107      	bne.n	800f74c <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f73c:	f107 0308 	add.w	r3, r7, #8
 800f740:	2202      	movs	r2, #2
 800f742:	4619      	mov	r1, r3
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f001 fcf9 	bl	801113c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f74a:	e068      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f001 fc77 	bl	8011042 <USBD_CtlError>
            ret = USBD_FAIL;
 800f754:	2303      	movs	r3, #3
 800f756:	75fb      	strb	r3, [r7, #23]
          break;
 800f758:	e061      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	885b      	ldrh	r3, [r3, #2]
 800f75e:	0a1b      	lsrs	r3, r3, #8
 800f760:	b29b      	uxth	r3, r3
 800f762:	2b21      	cmp	r3, #33	@ 0x21
 800f764:	d15a      	bne.n	800f81c <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 fa3f 	bl	800fbf0 <USBD_AUDIO_GetAudioHeaderDesc>
 800f772:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00c      	beq.n	800f794 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	88db      	ldrh	r3, [r3, #6]
 800f77e:	2b09      	cmp	r3, #9
 800f780:	bf28      	it	cs
 800f782:	2309      	movcs	r3, #9
 800f784:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800f786:	897b      	ldrh	r3, [r7, #10]
 800f788:	461a      	mov	r2, r3
 800f78a:	68f9      	ldr	r1, [r7, #12]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f001 fcd5 	bl	801113c <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800f792:	e043      	b.n	800f81c <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f001 fc53 	bl	8011042 <USBD_CtlError>
              ret = USBD_FAIL;
 800f79c:	2303      	movs	r3, #3
 800f79e:	75fb      	strb	r3, [r7, #23]
          break;
 800f7a0:	e03c      	b.n	800f81c <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b03      	cmp	r3, #3
 800f7ac:	d106      	bne.n	800f7bc <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f001 fcc1 	bl	801113c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7ba:	e030      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f001 fc3f 	bl	8011042 <USBD_CtlError>
            ret = USBD_FAIL;
 800f7c4:	2303      	movs	r3, #3
 800f7c6:	75fb      	strb	r3, [r7, #23]
          break;
 800f7c8:	e029      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	2b03      	cmp	r3, #3
 800f7d4:	d112      	bne.n	800f7fc <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	885b      	ldrh	r3, [r3, #2]
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	2b02      	cmp	r3, #2
 800f7de:	d806      	bhi.n	800f7ee <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	885b      	ldrh	r3, [r3, #2]
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7ec:	e017      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 800f7ee:	6839      	ldr	r1, [r7, #0]
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f001 fc26 	bl	8011042 <USBD_CtlError>
              ret = USBD_FAIL;
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	75fb      	strb	r3, [r7, #23]
          break;
 800f7fa:	e010      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7fc:	6839      	ldr	r1, [r7, #0]
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f001 fc1f 	bl	8011042 <USBD_CtlError>
            ret = USBD_FAIL;
 800f804:	2303      	movs	r3, #3
 800f806:	75fb      	strb	r3, [r7, #23]
          break;
 800f808:	e009      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f001 fc18 	bl	8011042 <USBD_CtlError>
          ret = USBD_FAIL;
 800f812:	2303      	movs	r3, #3
 800f814:	75fb      	strb	r3, [r7, #23]
          break;
 800f816:	e002      	b.n	800f81e <USBD_AUDIO_Setup+0x19e>
          break;
 800f818:	bf00      	nop
 800f81a:	e008      	b.n	800f82e <USBD_AUDIO_Setup+0x1ae>
          break;
 800f81c:	bf00      	nop
      }
      break;
 800f81e:	e006      	b.n	800f82e <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f001 fc0d 	bl	8011042 <USBD_CtlError>
      ret = USBD_FAIL;
 800f828:	2303      	movs	r3, #3
 800f82a:	75fb      	strb	r3, [r7, #23]
      break;
 800f82c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3718      	adds	r7, #24
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	226d      	movs	r2, #109	@ 0x6d
 800f844:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800f846:	4b03      	ldr	r3, [pc, #12]	@ (800f854 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800f848:	4618      	mov	r0, r3
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	24000064 	.word	0x24000064

0800f858 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	460b      	mov	r3, r1
 800f862:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	370c      	adds	r7, #12
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr

0800f872 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b084      	sub	sp, #16
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	32b0      	adds	r2, #176	@ 0xb0
 800f884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f888:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d101      	bne.n	800f894 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f890:	2303      	movs	r3, #3
 800f892:	e02a      	b.n	800f8ea <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f89a:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	@ 0xb8a
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d122      	bne.n	800f8e8 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8a8:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	@ 0xbcc
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	d11b      	bne.n	800f8e8 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	33b0      	adds	r3, #176	@ 0xb0
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	691b      	ldr	r3, [r3, #16]
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f8c8:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	@ 0xb8b
 800f8cc:	4610      	mov	r0, r2
 800f8ce:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 2b8a 	strb.w	r2, [r3, #2954]	@ 0xb8a
      haudio->control.len = 0U;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f883 2bcb 	strb.w	r2, [r3, #3019]	@ 0xbcb
    }
  }

  return (uint8_t)USBD_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800f8f2:	b480      	push	{r7}
 800f8f4:	b083      	sub	sp, #12
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr

0800f91e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f91e:	b480      	push	{r7}
 800f920:	b083      	sub	sp, #12
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	460b      	mov	r3, r1
 800f928:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	32b0      	adds	r2, #176	@ 0xb0
 800f94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d101      	bne.n	800f95a <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f956:	2303      	movs	r3, #3
 800f958:	e016      	b.n	800f988 <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	32b0      	adds	r2, #176	@ 0xb0
 800f964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f968:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f970:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	@ 0xb88
 800f974:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	4413      	add	r3, r2
 800f97a:	1d1a      	adds	r2, r3, #4
 800f97c:	78f9      	ldrb	r1, [r7, #3]
 800f97e:	2358      	movs	r3, #88	@ 0x58
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f004 ff21 	bl	80147c8 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800f986:	2300      	movs	r3, #0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	32b0      	adds	r2, #176	@ 0xb0
 800f9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9aa:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d101      	bne.n	800f9b6 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f9b2:	2303      	movs	r3, #3
 800f9b4:	e07c      	b.n	800fab0 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800f9b6:	4b40      	ldr	r3, [pc, #256]	@ (800fab8 <USBD_AUDIO_DataOut+0x128>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	78fa      	ldrb	r2, [r7, #3]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d176      	bne.n	800faae <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f004 ff20 	bl	801480a <USBD_LL_GetRxDataSize>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	33b0      	adds	r3, #176	@ 0xb0
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	695b      	ldr	r3, [r3, #20]
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f9e6:	f8b2 2b88 	ldrh.w	r2, [r2, #2952]	@ 0xb88
 800f9ea:	4611      	mov	r1, r2
 800f9ec:	68fa      	ldr	r2, [r7, #12]
 800f9ee:	440a      	add	r2, r1
 800f9f0:	1d10      	adds	r0, r2, #4
 800f9f2:	8979      	ldrh	r1, [r7, #10]
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f9fe:	f8b3 2b88 	ldrh.w	r2, [r3, #2952]	@ 0xb88
 800fa02:	897b      	ldrh	r3, [r7, #10]
 800fa04:	4413      	add	r3, r2
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa0e:	f8a3 2b88 	strh.w	r2, [r3, #2952]	@ 0xb88

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa18:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	@ 0xb88
 800fa1c:	f5b3 5fdc 	cmp.w	r3, #7040	@ 0x1b80
 800fa20:	d321      	bcc.n	800fa66 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f8a3 2b88 	strh.w	r2, [r3, #2952]	@ 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa34:	f893 3b84 	ldrb.w	r3, [r3, #2948]	@ 0xb84
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d114      	bne.n	800fa66 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	33b0      	adds	r3, #176	@ 0xb0
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	1d10      	adds	r0, r2, #4
 800fa52:	2201      	movs	r2, #1
 800fa54:	f44f 615c 	mov.w	r1, #3520	@ 0xdc0
 800fa58:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa60:	2200      	movs	r2, #0
 800fa62:	f883 2b84 	strb.w	r2, [r3, #2948]	@ 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa6c:	f893 3b85 	ldrb.w	r3, [r3, #2949]	@ 0xb85
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10d      	bne.n	800fa90 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa7a:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	@ 0xb88
 800fa7e:	f5b3 6f5c 	cmp.w	r3, #3520	@ 0xdc0
 800fa82:	d105      	bne.n	800fa90 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	f883 2b85 	strb.w	r2, [r3, #2949]	@ 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800fa90:	4b09      	ldr	r3, [pc, #36]	@ (800fab8 <USBD_AUDIO_DataOut+0x128>)
 800fa92:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa9a:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	@ 0xb88
 800fa9e:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4413      	add	r3, r2
 800faa4:	1d1a      	adds	r2, r3, #4
 800faa6:	2358      	movs	r3, #88	@ 0x58
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f004 fe8d 	bl	80147c8 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	240000de 	.word	0x240000de

0800fabc <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	32b0      	adds	r2, #176	@ 0xb0
 800fad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fad4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d017      	beq.n	800fb0c <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	f641 338b 	movw	r3, #7051	@ 0x1b8b
 800fae2:	4413      	add	r3, r2
 800fae4:	2240      	movs	r2, #64	@ 0x40
 800fae6:	2100      	movs	r1, #0
 800fae8:	4618      	mov	r0, r3
 800faea:	f004 fffc 	bl	8014ae6 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	f641 338b 	movw	r3, #7051	@ 0x1b8b
 800faf4:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	88d2      	ldrh	r2, [r2, #6]
 800fafa:	2a40      	cmp	r2, #64	@ 0x40
 800fafc:	bf28      	it	cs
 800fafe:	2240      	movcs	r2, #64	@ 0x40
 800fb00:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f001 fb19 	bl	801113c <USBD_CtlSendData>
 800fb0a:	e000      	b.n	800fb0e <AUDIO_REQ_GetCurrent+0x52>
    return;
 800fb0c:	bf00      	nop
}
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	32b0      	adds	r2, #176	@ 0xb0
 800fb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb2c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d02f      	beq.n	800fb94 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	88db      	ldrh	r3, [r3, #6]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d02c      	beq.n	800fb96 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 2b8a 	strb.w	r2, [r3, #2954]	@ 0xb8a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	88db      	ldrh	r3, [r3, #6]
 800fb4c:	2b3f      	cmp	r3, #63	@ 0x3f
 800fb4e:	d803      	bhi.n	800fb58 <AUDIO_REQ_SetCurrent+0x44>
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	88db      	ldrh	r3, [r3, #6]
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	e000      	b.n	800fb5a <AUDIO_REQ_SetCurrent+0x46>
 800fb58:	2240      	movs	r2, #64	@ 0x40
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb60:	f883 2bcb 	strb.w	r2, [r3, #3019]	@ 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	889b      	ldrh	r3, [r3, #4]
 800fb68:	0a1b      	lsrs	r3, r3, #8
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb74:	f883 2bcc 	strb.w	r2, [r3, #3020]	@ 0xbcc

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	f641 338b 	movw	r3, #7051	@ 0x1b8b
 800fb7e:	4413      	add	r3, r2
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800fb86:	f892 2bcb 	ldrb.w	r2, [r2, #3019]	@ 0xbcb
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f001 fb01 	bl	8011194 <USBD_CtlPrepareRx>
 800fb92:	e000      	b.n	800fb96 <AUDIO_REQ_SetCurrent+0x82>
    return;
 800fb94:	bf00      	nop
  }
}
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	220a      	movs	r2, #10
 800fba8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800fbaa:	4b03      	ldr	r3, [pc, #12]	@ (800fbb8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	370c      	adds	r7, #12
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr
 800fbb8:	240000d4 	.word	0x240000d4

0800fbbc <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d101      	bne.n	800fbd0 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	e009      	b.n	800fbe4 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	33b0      	adds	r3, #176	@ 0xb0
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	4413      	add	r3, r2
 800fbde:	683a      	ldr	r2, [r7, #0]
 800fbe0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	885b      	ldrh	r3, [r3, #2]
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	7812      	ldrb	r2, [r2, #0]
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d91b      	bls.n	800fc4a <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fc18:	e011      	b.n	800fc3e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fc1a:	f107 030a 	add.w	r3, r7, #10
 800fc1e:	4619      	mov	r1, r3
 800fc20:	6978      	ldr	r0, [r7, #20]
 800fc22:	f000 fbe6 	bl	80103f2 <USBD_GetNextDesc>
 800fc26:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	785b      	ldrb	r3, [r3, #1]
 800fc2c:	2b24      	cmp	r3, #36	@ 0x24
 800fc2e:	d106      	bne.n	800fc3e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d102      	bne.n	800fc3e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	613b      	str	r3, [r7, #16]
        break;
 800fc3c:	e005      	b.n	800fc4a <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	885b      	ldrh	r3, [r3, #2]
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	897b      	ldrh	r3, [r7, #10]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d8e7      	bhi.n	800fc1a <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 800fc4a:	693b      	ldr	r3, [r7, #16]
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3718      	adds	r7, #24
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	4613      	mov	r3, r2
 800fc60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d101      	bne.n	800fc6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fc68:	2303      	movs	r3, #3
 800fc6a:	e01f      	b.n	800fcac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2201      	movs	r2, #1
 800fc96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	79fa      	ldrb	r2, [r7, #7]
 800fc9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f004 fc35 	bl	8014510 <USBD_LL_Init>
 800fca6:	4603      	mov	r3, r0
 800fca8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3718      	adds	r7, #24
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d101      	bne.n	800fccc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fcc8:	2303      	movs	r3, #3
 800fcca:	e025      	b.n	800fd18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	683a      	ldr	r2, [r7, #0]
 800fcd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	32ae      	adds	r2, #174	@ 0xae
 800fcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00f      	beq.n	800fd08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	32ae      	adds	r2, #174	@ 0xae
 800fcf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcf8:	f107 020e 	add.w	r2, r7, #14
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	4798      	blx	r3
 800fd00:	4602      	mov	r2, r0
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd0e:	1c5a      	adds	r2, r3, #1
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fd16:	2300      	movs	r3, #0
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3710      	adds	r7, #16
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f004 fc43 	bl	80145b4 <USBD_LL_Start>
 800fd2e:	4603      	mov	r3, r0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fd40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	370c      	adds	r7, #12
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr

0800fd4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b084      	sub	sp, #16
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
 800fd56:	460b      	mov	r3, r1
 800fd58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d009      	beq.n	800fd7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	78fa      	ldrb	r2, [r7, #3]
 800fd72:	4611      	mov	r1, r2
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	4798      	blx	r3
 800fd78:	4603      	mov	r3, r0
 800fd7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b084      	sub	sp, #16
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
 800fd8e:	460b      	mov	r3, r1
 800fd90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd92:	2300      	movs	r3, #0
 800fd94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	78fa      	ldrb	r2, [r7, #3]
 800fda0:	4611      	mov	r1, r2
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	4798      	blx	r3
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fdac:	2303      	movs	r3, #3
 800fdae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b084      	sub	sp, #16
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
 800fdc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fdca:	6839      	ldr	r1, [r7, #0]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f001 f8fe 	bl	8010fce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fde0:	461a      	mov	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fdee:	f003 031f 	and.w	r3, r3, #31
 800fdf2:	2b02      	cmp	r3, #2
 800fdf4:	d01a      	beq.n	800fe2c <USBD_LL_SetupStage+0x72>
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	d822      	bhi.n	800fe40 <USBD_LL_SetupStage+0x86>
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d002      	beq.n	800fe04 <USBD_LL_SetupStage+0x4a>
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d00a      	beq.n	800fe18 <USBD_LL_SetupStage+0x5e>
 800fe02:	e01d      	b.n	800fe40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 fb2b 	bl	8010468 <USBD_StdDevReq>
 800fe12:	4603      	mov	r3, r0
 800fe14:	73fb      	strb	r3, [r7, #15]
      break;
 800fe16:	e020      	b.n	800fe5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe1e:	4619      	mov	r1, r3
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fb93 	bl	801054c <USBD_StdItfReq>
 800fe26:	4603      	mov	r3, r0
 800fe28:	73fb      	strb	r3, [r7, #15]
      break;
 800fe2a:	e016      	b.n	800fe5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe32:	4619      	mov	r1, r3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 fbf5 	bl	8010624 <USBD_StdEPReq>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	73fb      	strb	r3, [r7, #15]
      break;
 800fe3e:	e00c      	b.n	800fe5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fe46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f004 fc10 	bl	8014674 <USBD_LL_StallEP>
 800fe54:	4603      	mov	r3, r0
 800fe56:	73fb      	strb	r3, [r7, #15]
      break;
 800fe58:	bf00      	nop
  }

  return ret;
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3710      	adds	r7, #16
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b086      	sub	sp, #24
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	607a      	str	r2, [r7, #4]
 800fe70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fe76:	7afb      	ldrb	r3, [r7, #11]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d16e      	bne.n	800ff5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fe82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	f040 8098 	bne.w	800ffc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	689a      	ldr	r2, [r3, #8]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d913      	bls.n	800fec4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	689a      	ldr	r2, [r3, #8]
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	1ad2      	subs	r2, r2, r3
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	68da      	ldr	r2, [r3, #12]
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	4293      	cmp	r3, r2
 800feb4:	bf28      	it	cs
 800feb6:	4613      	movcs	r3, r2
 800feb8:	461a      	mov	r2, r3
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f001 f986 	bl	80111ce <USBD_CtlContinueRx>
 800fec2:	e07d      	b.n	800ffc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800feca:	f003 031f 	and.w	r3, r3, #31
 800fece:	2b02      	cmp	r3, #2
 800fed0:	d014      	beq.n	800fefc <USBD_LL_DataOutStage+0x98>
 800fed2:	2b02      	cmp	r3, #2
 800fed4:	d81d      	bhi.n	800ff12 <USBD_LL_DataOutStage+0xae>
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d002      	beq.n	800fee0 <USBD_LL_DataOutStage+0x7c>
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d003      	beq.n	800fee6 <USBD_LL_DataOutStage+0x82>
 800fede:	e018      	b.n	800ff12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fee0:	2300      	movs	r3, #0
 800fee2:	75bb      	strb	r3, [r7, #22]
            break;
 800fee4:	e018      	b.n	800ff18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800feec:	b2db      	uxtb	r3, r3
 800feee:	4619      	mov	r1, r3
 800fef0:	68f8      	ldr	r0, [r7, #12]
 800fef2:	f000 fa64 	bl	80103be <USBD_CoreFindIF>
 800fef6:	4603      	mov	r3, r0
 800fef8:	75bb      	strb	r3, [r7, #22]
            break;
 800fefa:	e00d      	b.n	800ff18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	4619      	mov	r1, r3
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f000 fa66 	bl	80103d8 <USBD_CoreFindEP>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	75bb      	strb	r3, [r7, #22]
            break;
 800ff10:	e002      	b.n	800ff18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ff12:	2300      	movs	r3, #0
 800ff14:	75bb      	strb	r3, [r7, #22]
            break;
 800ff16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ff18:	7dbb      	ldrb	r3, [r7, #22]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d119      	bne.n	800ff52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	2b03      	cmp	r3, #3
 800ff28:	d113      	bne.n	800ff52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ff2a:	7dba      	ldrb	r2, [r7, #22]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	32ae      	adds	r2, #174	@ 0xae
 800ff30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff34:	691b      	ldr	r3, [r3, #16]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00b      	beq.n	800ff52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ff3a:	7dba      	ldrb	r2, [r7, #22]
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ff42:	7dba      	ldrb	r2, [r7, #22]
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	32ae      	adds	r2, #174	@ 0xae
 800ff48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	f001 f94c 	bl	80111f0 <USBD_CtlSendStatus>
 800ff58:	e032      	b.n	800ffc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ff5a:	7afb      	ldrb	r3, [r7, #11]
 800ff5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	4619      	mov	r1, r3
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f000 fa37 	bl	80103d8 <USBD_CoreFindEP>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff6e:	7dbb      	ldrb	r3, [r7, #22]
 800ff70:	2bff      	cmp	r3, #255	@ 0xff
 800ff72:	d025      	beq.n	800ffc0 <USBD_LL_DataOutStage+0x15c>
 800ff74:	7dbb      	ldrb	r3, [r7, #22]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d122      	bne.n	800ffc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	2b03      	cmp	r3, #3
 800ff84:	d117      	bne.n	800ffb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ff86:	7dba      	ldrb	r2, [r7, #22]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	32ae      	adds	r2, #174	@ 0xae
 800ff8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff90:	699b      	ldr	r3, [r3, #24]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00f      	beq.n	800ffb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ff96:	7dba      	ldrb	r2, [r7, #22]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ff9e:	7dba      	ldrb	r2, [r7, #22]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	32ae      	adds	r2, #174	@ 0xae
 800ffa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	7afa      	ldrb	r2, [r7, #11]
 800ffac:	4611      	mov	r1, r2
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	4798      	blx	r3
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d001      	beq.n	800ffc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ffbc:	7dfb      	ldrb	r3, [r7, #23]
 800ffbe:	e000      	b.n	800ffc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ffc0:	2300      	movs	r3, #0
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3718      	adds	r7, #24
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b086      	sub	sp, #24
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	60f8      	str	r0, [r7, #12]
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	607a      	str	r2, [r7, #4]
 800ffd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ffd8:	7afb      	ldrb	r3, [r7, #11]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d16f      	bne.n	80100be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	3314      	adds	r3, #20
 800ffe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	d15a      	bne.n	80100a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	689a      	ldr	r2, [r3, #8]
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d914      	bls.n	8010024 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	689a      	ldr	r2, [r3, #8]
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	1ad2      	subs	r2, r2, r3
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	461a      	mov	r2, r3
 801000e:	6879      	ldr	r1, [r7, #4]
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f001 f8ae 	bl	8011172 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010016:	2300      	movs	r3, #0
 8010018:	2200      	movs	r2, #0
 801001a:	2100      	movs	r1, #0
 801001c:	68f8      	ldr	r0, [r7, #12]
 801001e:	f004 fbd3 	bl	80147c8 <USBD_LL_PrepareReceive>
 8010022:	e03f      	b.n	80100a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	68da      	ldr	r2, [r3, #12]
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	429a      	cmp	r2, r3
 801002e:	d11c      	bne.n	801006a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	685a      	ldr	r2, [r3, #4]
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010038:	429a      	cmp	r2, r3
 801003a:	d316      	bcc.n	801006a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	685a      	ldr	r2, [r3, #4]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010046:	429a      	cmp	r2, r3
 8010048:	d20f      	bcs.n	801006a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801004a:	2200      	movs	r2, #0
 801004c:	2100      	movs	r1, #0
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	f001 f88f 	bl	8011172 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2200      	movs	r2, #0
 8010058:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801005c:	2300      	movs	r3, #0
 801005e:	2200      	movs	r2, #0
 8010060:	2100      	movs	r1, #0
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f004 fbb0 	bl	80147c8 <USBD_LL_PrepareReceive>
 8010068:	e01c      	b.n	80100a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b03      	cmp	r3, #3
 8010074:	d10f      	bne.n	8010096 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d009      	beq.n	8010096 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2200      	movs	r2, #0
 8010086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010096:	2180      	movs	r1, #128	@ 0x80
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f004 faeb 	bl	8014674 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f001 f8b9 	bl	8011216 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d03a      	beq.n	8010124 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80100ae:	68f8      	ldr	r0, [r7, #12]
 80100b0:	f7ff fe42 	bl	800fd38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80100bc:	e032      	b.n	8010124 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80100be:	7afb      	ldrb	r3, [r7, #11]
 80100c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	4619      	mov	r1, r3
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f000 f985 	bl	80103d8 <USBD_CoreFindEP>
 80100ce:	4603      	mov	r3, r0
 80100d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	2bff      	cmp	r3, #255	@ 0xff
 80100d6:	d025      	beq.n	8010124 <USBD_LL_DataInStage+0x15a>
 80100d8:	7dfb      	ldrb	r3, [r7, #23]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d122      	bne.n	8010124 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	2b03      	cmp	r3, #3
 80100e8:	d11c      	bne.n	8010124 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80100ea:	7dfa      	ldrb	r2, [r7, #23]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	32ae      	adds	r2, #174	@ 0xae
 80100f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d014      	beq.n	8010124 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80100fa:	7dfa      	ldrb	r2, [r7, #23]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010102:	7dfa      	ldrb	r2, [r7, #23]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	32ae      	adds	r2, #174	@ 0xae
 8010108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010c:	695b      	ldr	r3, [r3, #20]
 801010e:	7afa      	ldrb	r2, [r7, #11]
 8010110:	4611      	mov	r1, r2
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	4798      	blx	r3
 8010116:	4603      	mov	r3, r0
 8010118:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801011a:	7dbb      	ldrb	r3, [r7, #22]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d001      	beq.n	8010124 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010120:	7dbb      	ldrb	r3, [r7, #22]
 8010122:	e000      	b.n	8010126 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010124:	2300      	movs	r3, #0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b084      	sub	sp, #16
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010136:	2300      	movs	r3, #0
 8010138:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2201      	movs	r2, #1
 801013e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010166:	2b00      	cmp	r3, #0
 8010168:	d014      	beq.n	8010194 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00e      	beq.n	8010194 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	6852      	ldr	r2, [r2, #4]
 8010182:	b2d2      	uxtb	r2, r2
 8010184:	4611      	mov	r1, r2
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	4798      	blx	r3
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010190:	2303      	movs	r3, #3
 8010192:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010194:	2340      	movs	r3, #64	@ 0x40
 8010196:	2200      	movs	r2, #0
 8010198:	2100      	movs	r1, #0
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f004 fa25 	bl	80145ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2201      	movs	r2, #1
 80101a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2240      	movs	r2, #64	@ 0x40
 80101ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80101b0:	2340      	movs	r3, #64	@ 0x40
 80101b2:	2200      	movs	r2, #0
 80101b4:	2180      	movs	r1, #128	@ 0x80
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f004 fa17 	bl	80145ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2201      	movs	r2, #1
 80101c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2240      	movs	r2, #64	@ 0x40
 80101c6:	621a      	str	r2, [r3, #32]

  return ret;
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80101d2:	b480      	push	{r7}
 80101d4:	b083      	sub	sp, #12
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
 80101da:	460b      	mov	r3, r1
 80101dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	78fa      	ldrb	r2, [r7, #3]
 80101e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	370c      	adds	r7, #12
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr

080101f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80101f2:	b480      	push	{r7}
 80101f4:	b083      	sub	sp, #12
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b04      	cmp	r3, #4
 8010204:	d006      	beq.n	8010214 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801020c:	b2da      	uxtb	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2204      	movs	r2, #4
 8010218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	370c      	adds	r7, #12
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801022a:	b480      	push	{r7}
 801022c:	b083      	sub	sp, #12
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010238:	b2db      	uxtb	r3, r3
 801023a:	2b04      	cmp	r3, #4
 801023c:	d106      	bne.n	801024c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010244:	b2da      	uxtb	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b03      	cmp	r3, #3
 801026c:	d110      	bne.n	8010290 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00b      	beq.n	8010290 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801027e:	69db      	ldr	r3, [r3, #28]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d005      	beq.n	8010290 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801028a:	69db      	ldr	r3, [r3, #28]
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
 80102a2:	460b      	mov	r3, r1
 80102a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	32ae      	adds	r2, #174	@ 0xae
 80102b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d101      	bne.n	80102bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80102b8:	2303      	movs	r3, #3
 80102ba:	e01c      	b.n	80102f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d115      	bne.n	80102f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	32ae      	adds	r2, #174	@ 0xae
 80102d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102d6:	6a1b      	ldr	r3, [r3, #32]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00b      	beq.n	80102f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	32ae      	adds	r2, #174	@ 0xae
 80102e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ea:	6a1b      	ldr	r3, [r3, #32]
 80102ec:	78fa      	ldrb	r2, [r7, #3]
 80102ee:	4611      	mov	r1, r2
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b082      	sub	sp, #8
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	460b      	mov	r3, r1
 8010308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	32ae      	adds	r2, #174	@ 0xae
 8010314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d101      	bne.n	8010320 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801031c:	2303      	movs	r3, #3
 801031e:	e01c      	b.n	801035a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2b03      	cmp	r3, #3
 801032a:	d115      	bne.n	8010358 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	32ae      	adds	r2, #174	@ 0xae
 8010336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801033a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00b      	beq.n	8010358 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	32ae      	adds	r2, #174	@ 0xae
 801034a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801034e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010350:	78fa      	ldrb	r2, [r7, #3]
 8010352:	4611      	mov	r1, r2
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010362:	b480      	push	{r7}
 8010364:	b083      	sub	sp, #12
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2201      	movs	r2, #1
 8010388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00e      	beq.n	80103b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	6852      	ldr	r2, [r2, #4]
 80103a2:	b2d2      	uxtb	r2, r2
 80103a4:	4611      	mov	r1, r2
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	4798      	blx	r3
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80103b0:	2303      	movs	r3, #3
 80103b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80103b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80103be:	b480      	push	{r7}
 80103c0:	b083      	sub	sp, #12
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	460b      	mov	r3, r1
 80103c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80103ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	460b      	mov	r3, r1
 80103e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80103e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	370c      	adds	r7, #12
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr

080103f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80103f2:	b480      	push	{r7}
 80103f4:	b085      	sub	sp, #20
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
 80103fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	7812      	ldrb	r2, [r2, #0]
 8010408:	4413      	add	r3, r2
 801040a:	b29a      	uxth	r2, r3
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	461a      	mov	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4413      	add	r3, r2
 801041a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801041c:	68fb      	ldr	r3, [r7, #12]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3714      	adds	r7, #20
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr

0801042a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801042a:	b480      	push	{r7}
 801042c:	b087      	sub	sp, #28
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	3301      	adds	r3, #1
 8010440:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010448:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801044c:	021b      	lsls	r3, r3, #8
 801044e:	b21a      	sxth	r2, r3
 8010450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010454:	4313      	orrs	r3, r2
 8010456:	b21b      	sxth	r3, r3
 8010458:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801045a:	89fb      	ldrh	r3, [r7, #14]
}
 801045c:	4618      	mov	r0, r3
 801045e:	371c      	adds	r7, #28
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b084      	sub	sp, #16
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010472:	2300      	movs	r3, #0
 8010474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801047e:	2b40      	cmp	r3, #64	@ 0x40
 8010480:	d005      	beq.n	801048e <USBD_StdDevReq+0x26>
 8010482:	2b40      	cmp	r3, #64	@ 0x40
 8010484:	d857      	bhi.n	8010536 <USBD_StdDevReq+0xce>
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00f      	beq.n	80104aa <USBD_StdDevReq+0x42>
 801048a:	2b20      	cmp	r3, #32
 801048c:	d153      	bne.n	8010536 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	32ae      	adds	r2, #174	@ 0xae
 8010498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	6839      	ldr	r1, [r7, #0]
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	4798      	blx	r3
 80104a4:	4603      	mov	r3, r0
 80104a6:	73fb      	strb	r3, [r7, #15]
      break;
 80104a8:	e04a      	b.n	8010540 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	785b      	ldrb	r3, [r3, #1]
 80104ae:	2b09      	cmp	r3, #9
 80104b0:	d83b      	bhi.n	801052a <USBD_StdDevReq+0xc2>
 80104b2:	a201      	add	r2, pc, #4	@ (adr r2, 80104b8 <USBD_StdDevReq+0x50>)
 80104b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b8:	0801050d 	.word	0x0801050d
 80104bc:	08010521 	.word	0x08010521
 80104c0:	0801052b 	.word	0x0801052b
 80104c4:	08010517 	.word	0x08010517
 80104c8:	0801052b 	.word	0x0801052b
 80104cc:	080104eb 	.word	0x080104eb
 80104d0:	080104e1 	.word	0x080104e1
 80104d4:	0801052b 	.word	0x0801052b
 80104d8:	08010503 	.word	0x08010503
 80104dc:	080104f5 	.word	0x080104f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fa3c 	bl	8010960 <USBD_GetDescriptor>
          break;
 80104e8:	e024      	b.n	8010534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fbcb 	bl	8010c88 <USBD_SetAddress>
          break;
 80104f2:	e01f      	b.n	8010534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80104f4:	6839      	ldr	r1, [r7, #0]
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 fc0a 	bl	8010d10 <USBD_SetConfig>
 80104fc:	4603      	mov	r3, r0
 80104fe:	73fb      	strb	r3, [r7, #15]
          break;
 8010500:	e018      	b.n	8010534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fcad 	bl	8010e64 <USBD_GetConfig>
          break;
 801050a:	e013      	b.n	8010534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 fcde 	bl	8010ed0 <USBD_GetStatus>
          break;
 8010514:	e00e      	b.n	8010534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010516:	6839      	ldr	r1, [r7, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 fd0d 	bl	8010f38 <USBD_SetFeature>
          break;
 801051e:	e009      	b.n	8010534 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010520:	6839      	ldr	r1, [r7, #0]
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fd31 	bl	8010f8a <USBD_ClrFeature>
          break;
 8010528:	e004      	b.n	8010534 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801052a:	6839      	ldr	r1, [r7, #0]
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 fd88 	bl	8011042 <USBD_CtlError>
          break;
 8010532:	bf00      	nop
      }
      break;
 8010534:	e004      	b.n	8010540 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fd82 	bl	8011042 <USBD_CtlError>
      break;
 801053e:	bf00      	nop
  }

  return ret;
 8010540:	7bfb      	ldrb	r3, [r7, #15]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop

0801054c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010556:	2300      	movs	r3, #0
 8010558:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010562:	2b40      	cmp	r3, #64	@ 0x40
 8010564:	d005      	beq.n	8010572 <USBD_StdItfReq+0x26>
 8010566:	2b40      	cmp	r3, #64	@ 0x40
 8010568:	d852      	bhi.n	8010610 <USBD_StdItfReq+0xc4>
 801056a:	2b00      	cmp	r3, #0
 801056c:	d001      	beq.n	8010572 <USBD_StdItfReq+0x26>
 801056e:	2b20      	cmp	r3, #32
 8010570:	d14e      	bne.n	8010610 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010578:	b2db      	uxtb	r3, r3
 801057a:	3b01      	subs	r3, #1
 801057c:	2b02      	cmp	r3, #2
 801057e:	d840      	bhi.n	8010602 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	889b      	ldrh	r3, [r3, #4]
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b02      	cmp	r3, #2
 8010588:	d836      	bhi.n	80105f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	889b      	ldrh	r3, [r3, #4]
 801058e:	b2db      	uxtb	r3, r3
 8010590:	4619      	mov	r1, r3
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f7ff ff13 	bl	80103be <USBD_CoreFindIF>
 8010598:	4603      	mov	r3, r0
 801059a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801059c:	7bbb      	ldrb	r3, [r7, #14]
 801059e:	2bff      	cmp	r3, #255	@ 0xff
 80105a0:	d01d      	beq.n	80105de <USBD_StdItfReq+0x92>
 80105a2:	7bbb      	ldrb	r3, [r7, #14]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d11a      	bne.n	80105de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80105a8:	7bba      	ldrb	r2, [r7, #14]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	32ae      	adds	r2, #174	@ 0xae
 80105ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b2:	689b      	ldr	r3, [r3, #8]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00f      	beq.n	80105d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80105b8:	7bba      	ldrb	r2, [r7, #14]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80105c0:	7bba      	ldrb	r2, [r7, #14]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	32ae      	adds	r2, #174	@ 0xae
 80105c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ca:	689b      	ldr	r3, [r3, #8]
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	4798      	blx	r3
 80105d2:	4603      	mov	r3, r0
 80105d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80105d6:	e004      	b.n	80105e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80105d8:	2303      	movs	r3, #3
 80105da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80105dc:	e001      	b.n	80105e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80105de:	2303      	movs	r3, #3
 80105e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	88db      	ldrh	r3, [r3, #6]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d110      	bne.n	801060c <USBD_StdItfReq+0xc0>
 80105ea:	7bfb      	ldrb	r3, [r7, #15]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d10d      	bne.n	801060c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 fdfd 	bl	80111f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80105f6:	e009      	b.n	801060c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80105f8:	6839      	ldr	r1, [r7, #0]
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 fd21 	bl	8011042 <USBD_CtlError>
          break;
 8010600:	e004      	b.n	801060c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010602:	6839      	ldr	r1, [r7, #0]
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 fd1c 	bl	8011042 <USBD_CtlError>
          break;
 801060a:	e000      	b.n	801060e <USBD_StdItfReq+0xc2>
          break;
 801060c:	bf00      	nop
      }
      break;
 801060e:	e004      	b.n	801061a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010610:	6839      	ldr	r1, [r7, #0]
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fd15 	bl	8011042 <USBD_CtlError>
      break;
 8010618:	bf00      	nop
  }

  return ret;
 801061a:	7bfb      	ldrb	r3, [r7, #15]
}
 801061c:	4618      	mov	r0, r3
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801062e:	2300      	movs	r3, #0
 8010630:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	889b      	ldrh	r3, [r3, #4]
 8010636:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010640:	2b40      	cmp	r3, #64	@ 0x40
 8010642:	d007      	beq.n	8010654 <USBD_StdEPReq+0x30>
 8010644:	2b40      	cmp	r3, #64	@ 0x40
 8010646:	f200 817f 	bhi.w	8010948 <USBD_StdEPReq+0x324>
 801064a:	2b00      	cmp	r3, #0
 801064c:	d02a      	beq.n	80106a4 <USBD_StdEPReq+0x80>
 801064e:	2b20      	cmp	r3, #32
 8010650:	f040 817a 	bne.w	8010948 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010654:	7bbb      	ldrb	r3, [r7, #14]
 8010656:	4619      	mov	r1, r3
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff febd 	bl	80103d8 <USBD_CoreFindEP>
 801065e:	4603      	mov	r3, r0
 8010660:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010662:	7b7b      	ldrb	r3, [r7, #13]
 8010664:	2bff      	cmp	r3, #255	@ 0xff
 8010666:	f000 8174 	beq.w	8010952 <USBD_StdEPReq+0x32e>
 801066a:	7b7b      	ldrb	r3, [r7, #13]
 801066c:	2b00      	cmp	r3, #0
 801066e:	f040 8170 	bne.w	8010952 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010672:	7b7a      	ldrb	r2, [r7, #13]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801067a:	7b7a      	ldrb	r2, [r7, #13]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	32ae      	adds	r2, #174	@ 0xae
 8010680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	2b00      	cmp	r3, #0
 8010688:	f000 8163 	beq.w	8010952 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801068c:	7b7a      	ldrb	r2, [r7, #13]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	32ae      	adds	r2, #174	@ 0xae
 8010692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	6839      	ldr	r1, [r7, #0]
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	4798      	blx	r3
 801069e:	4603      	mov	r3, r0
 80106a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80106a2:	e156      	b.n	8010952 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	785b      	ldrb	r3, [r3, #1]
 80106a8:	2b03      	cmp	r3, #3
 80106aa:	d008      	beq.n	80106be <USBD_StdEPReq+0x9a>
 80106ac:	2b03      	cmp	r3, #3
 80106ae:	f300 8145 	bgt.w	801093c <USBD_StdEPReq+0x318>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f000 809b 	beq.w	80107ee <USBD_StdEPReq+0x1ca>
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d03c      	beq.n	8010736 <USBD_StdEPReq+0x112>
 80106bc:	e13e      	b.n	801093c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d002      	beq.n	80106d0 <USBD_StdEPReq+0xac>
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	d016      	beq.n	80106fc <USBD_StdEPReq+0xd8>
 80106ce:	e02c      	b.n	801072a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106d0:	7bbb      	ldrb	r3, [r7, #14]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d00d      	beq.n	80106f2 <USBD_StdEPReq+0xce>
 80106d6:	7bbb      	ldrb	r3, [r7, #14]
 80106d8:	2b80      	cmp	r3, #128	@ 0x80
 80106da:	d00a      	beq.n	80106f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106dc:	7bbb      	ldrb	r3, [r7, #14]
 80106de:	4619      	mov	r1, r3
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f003 ffc7 	bl	8014674 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80106e6:	2180      	movs	r1, #128	@ 0x80
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f003 ffc3 	bl	8014674 <USBD_LL_StallEP>
 80106ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80106f0:	e020      	b.n	8010734 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 fca4 	bl	8011042 <USBD_CtlError>
              break;
 80106fa:	e01b      	b.n	8010734 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	885b      	ldrh	r3, [r3, #2]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d10e      	bne.n	8010722 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010704:	7bbb      	ldrb	r3, [r7, #14]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00b      	beq.n	8010722 <USBD_StdEPReq+0xfe>
 801070a:	7bbb      	ldrb	r3, [r7, #14]
 801070c:	2b80      	cmp	r3, #128	@ 0x80
 801070e:	d008      	beq.n	8010722 <USBD_StdEPReq+0xfe>
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	88db      	ldrh	r3, [r3, #6]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d104      	bne.n	8010722 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010718:	7bbb      	ldrb	r3, [r7, #14]
 801071a:	4619      	mov	r1, r3
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f003 ffa9 	bl	8014674 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 fd64 	bl	80111f0 <USBD_CtlSendStatus>

              break;
 8010728:	e004      	b.n	8010734 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801072a:	6839      	ldr	r1, [r7, #0]
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f000 fc88 	bl	8011042 <USBD_CtlError>
              break;
 8010732:	bf00      	nop
          }
          break;
 8010734:	e107      	b.n	8010946 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801073c:	b2db      	uxtb	r3, r3
 801073e:	2b02      	cmp	r3, #2
 8010740:	d002      	beq.n	8010748 <USBD_StdEPReq+0x124>
 8010742:	2b03      	cmp	r3, #3
 8010744:	d016      	beq.n	8010774 <USBD_StdEPReq+0x150>
 8010746:	e04b      	b.n	80107e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010748:	7bbb      	ldrb	r3, [r7, #14]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00d      	beq.n	801076a <USBD_StdEPReq+0x146>
 801074e:	7bbb      	ldrb	r3, [r7, #14]
 8010750:	2b80      	cmp	r3, #128	@ 0x80
 8010752:	d00a      	beq.n	801076a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010754:	7bbb      	ldrb	r3, [r7, #14]
 8010756:	4619      	mov	r1, r3
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f003 ff8b 	bl	8014674 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801075e:	2180      	movs	r1, #128	@ 0x80
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f003 ff87 	bl	8014674 <USBD_LL_StallEP>
 8010766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010768:	e040      	b.n	80107ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801076a:	6839      	ldr	r1, [r7, #0]
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 fc68 	bl	8011042 <USBD_CtlError>
              break;
 8010772:	e03b      	b.n	80107ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	885b      	ldrh	r3, [r3, #2]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d136      	bne.n	80107ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801077c:	7bbb      	ldrb	r3, [r7, #14]
 801077e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010782:	2b00      	cmp	r3, #0
 8010784:	d004      	beq.n	8010790 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010786:	7bbb      	ldrb	r3, [r7, #14]
 8010788:	4619      	mov	r1, r3
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f003 ff91 	bl	80146b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 fd2d 	bl	80111f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010796:	7bbb      	ldrb	r3, [r7, #14]
 8010798:	4619      	mov	r1, r3
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7ff fe1c 	bl	80103d8 <USBD_CoreFindEP>
 80107a0:	4603      	mov	r3, r0
 80107a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80107a4:	7b7b      	ldrb	r3, [r7, #13]
 80107a6:	2bff      	cmp	r3, #255	@ 0xff
 80107a8:	d01f      	beq.n	80107ea <USBD_StdEPReq+0x1c6>
 80107aa:	7b7b      	ldrb	r3, [r7, #13]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d11c      	bne.n	80107ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80107b0:	7b7a      	ldrb	r2, [r7, #13]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80107b8:	7b7a      	ldrb	r2, [r7, #13]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	32ae      	adds	r2, #174	@ 0xae
 80107be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d010      	beq.n	80107ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80107c8:	7b7a      	ldrb	r2, [r7, #13]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	32ae      	adds	r2, #174	@ 0xae
 80107ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	6839      	ldr	r1, [r7, #0]
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	4798      	blx	r3
 80107da:	4603      	mov	r3, r0
 80107dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80107de:	e004      	b.n	80107ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80107e0:	6839      	ldr	r1, [r7, #0]
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fc2d 	bl	8011042 <USBD_CtlError>
              break;
 80107e8:	e000      	b.n	80107ec <USBD_StdEPReq+0x1c8>
              break;
 80107ea:	bf00      	nop
          }
          break;
 80107ec:	e0ab      	b.n	8010946 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	2b02      	cmp	r3, #2
 80107f8:	d002      	beq.n	8010800 <USBD_StdEPReq+0x1dc>
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	d032      	beq.n	8010864 <USBD_StdEPReq+0x240>
 80107fe:	e097      	b.n	8010930 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010800:	7bbb      	ldrb	r3, [r7, #14]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d007      	beq.n	8010816 <USBD_StdEPReq+0x1f2>
 8010806:	7bbb      	ldrb	r3, [r7, #14]
 8010808:	2b80      	cmp	r3, #128	@ 0x80
 801080a:	d004      	beq.n	8010816 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801080c:	6839      	ldr	r1, [r7, #0]
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 fc17 	bl	8011042 <USBD_CtlError>
                break;
 8010814:	e091      	b.n	801093a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801081a:	2b00      	cmp	r3, #0
 801081c:	da0b      	bge.n	8010836 <USBD_StdEPReq+0x212>
 801081e:	7bbb      	ldrb	r3, [r7, #14]
 8010820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010824:	4613      	mov	r3, r2
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	4413      	add	r3, r2
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	3310      	adds	r3, #16
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	4413      	add	r3, r2
 8010832:	3304      	adds	r3, #4
 8010834:	e00b      	b.n	801084e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010836:	7bbb      	ldrb	r3, [r7, #14]
 8010838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801083c:	4613      	mov	r3, r2
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	4413      	add	r3, r2
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	4413      	add	r3, r2
 801084c:	3304      	adds	r3, #4
 801084e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	2200      	movs	r2, #0
 8010854:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	2202      	movs	r2, #2
 801085a:	4619      	mov	r1, r3
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 fc6d 	bl	801113c <USBD_CtlSendData>
              break;
 8010862:	e06a      	b.n	801093a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010868:	2b00      	cmp	r3, #0
 801086a:	da11      	bge.n	8010890 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801086c:	7bbb      	ldrb	r3, [r7, #14]
 801086e:	f003 020f 	and.w	r2, r3, #15
 8010872:	6879      	ldr	r1, [r7, #4]
 8010874:	4613      	mov	r3, r2
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	4413      	add	r3, r2
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	440b      	add	r3, r1
 801087e:	3324      	adds	r3, #36	@ 0x24
 8010880:	881b      	ldrh	r3, [r3, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d117      	bne.n	80108b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010886:	6839      	ldr	r1, [r7, #0]
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f000 fbda 	bl	8011042 <USBD_CtlError>
                  break;
 801088e:	e054      	b.n	801093a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010890:	7bbb      	ldrb	r3, [r7, #14]
 8010892:	f003 020f 	and.w	r2, r3, #15
 8010896:	6879      	ldr	r1, [r7, #4]
 8010898:	4613      	mov	r3, r2
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	4413      	add	r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	440b      	add	r3, r1
 80108a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80108a6:	881b      	ldrh	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d104      	bne.n	80108b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80108ac:	6839      	ldr	r1, [r7, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 fbc7 	bl	8011042 <USBD_CtlError>
                  break;
 80108b4:	e041      	b.n	801093a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	da0b      	bge.n	80108d6 <USBD_StdEPReq+0x2b2>
 80108be:	7bbb      	ldrb	r3, [r7, #14]
 80108c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80108c4:	4613      	mov	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4413      	add	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	3310      	adds	r3, #16
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	4413      	add	r3, r2
 80108d2:	3304      	adds	r3, #4
 80108d4:	e00b      	b.n	80108ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80108d6:	7bbb      	ldrb	r3, [r7, #14]
 80108d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108dc:	4613      	mov	r3, r2
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	4413      	add	r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80108e8:	687a      	ldr	r2, [r7, #4]
 80108ea:	4413      	add	r3, r2
 80108ec:	3304      	adds	r3, #4
 80108ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108f0:	7bbb      	ldrb	r3, [r7, #14]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d002      	beq.n	80108fc <USBD_StdEPReq+0x2d8>
 80108f6:	7bbb      	ldrb	r3, [r7, #14]
 80108f8:	2b80      	cmp	r3, #128	@ 0x80
 80108fa:	d103      	bne.n	8010904 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	2200      	movs	r2, #0
 8010900:	601a      	str	r2, [r3, #0]
 8010902:	e00e      	b.n	8010922 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010904:	7bbb      	ldrb	r3, [r7, #14]
 8010906:	4619      	mov	r1, r3
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f003 fef1 	bl	80146f0 <USBD_LL_IsStallEP>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d003      	beq.n	801091c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2201      	movs	r2, #1
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	e002      	b.n	8010922 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	2200      	movs	r2, #0
 8010920:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	2202      	movs	r2, #2
 8010926:	4619      	mov	r1, r3
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 fc07 	bl	801113c <USBD_CtlSendData>
              break;
 801092e:	e004      	b.n	801093a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010930:	6839      	ldr	r1, [r7, #0]
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fb85 	bl	8011042 <USBD_CtlError>
              break;
 8010938:	bf00      	nop
          }
          break;
 801093a:	e004      	b.n	8010946 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 fb7f 	bl	8011042 <USBD_CtlError>
          break;
 8010944:	bf00      	nop
      }
      break;
 8010946:	e005      	b.n	8010954 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010948:	6839      	ldr	r1, [r7, #0]
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 fb79 	bl	8011042 <USBD_CtlError>
      break;
 8010950:	e000      	b.n	8010954 <USBD_StdEPReq+0x330>
      break;
 8010952:	bf00      	nop
  }

  return ret;
 8010954:	7bfb      	ldrb	r3, [r7, #15]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3710      	adds	r7, #16
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
	...

08010960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801096a:	2300      	movs	r3, #0
 801096c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801096e:	2300      	movs	r3, #0
 8010970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010972:	2300      	movs	r3, #0
 8010974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	885b      	ldrh	r3, [r3, #2]
 801097a:	0a1b      	lsrs	r3, r3, #8
 801097c:	b29b      	uxth	r3, r3
 801097e:	3b01      	subs	r3, #1
 8010980:	2b0e      	cmp	r3, #14
 8010982:	f200 8152 	bhi.w	8010c2a <USBD_GetDescriptor+0x2ca>
 8010986:	a201      	add	r2, pc, #4	@ (adr r2, 801098c <USBD_GetDescriptor+0x2c>)
 8010988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801098c:	080109fd 	.word	0x080109fd
 8010990:	08010a15 	.word	0x08010a15
 8010994:	08010a55 	.word	0x08010a55
 8010998:	08010c2b 	.word	0x08010c2b
 801099c:	08010c2b 	.word	0x08010c2b
 80109a0:	08010bcb 	.word	0x08010bcb
 80109a4:	08010bf7 	.word	0x08010bf7
 80109a8:	08010c2b 	.word	0x08010c2b
 80109ac:	08010c2b 	.word	0x08010c2b
 80109b0:	08010c2b 	.word	0x08010c2b
 80109b4:	08010c2b 	.word	0x08010c2b
 80109b8:	08010c2b 	.word	0x08010c2b
 80109bc:	08010c2b 	.word	0x08010c2b
 80109c0:	08010c2b 	.word	0x08010c2b
 80109c4:	080109c9 	.word	0x080109c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109ce:	69db      	ldr	r3, [r3, #28]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d00b      	beq.n	80109ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109da:	69db      	ldr	r3, [r3, #28]
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	7c12      	ldrb	r2, [r2, #16]
 80109e0:	f107 0108 	add.w	r1, r7, #8
 80109e4:	4610      	mov	r0, r2
 80109e6:	4798      	blx	r3
 80109e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109ea:	e126      	b.n	8010c3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80109ec:	6839      	ldr	r1, [r7, #0]
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 fb27 	bl	8011042 <USBD_CtlError>
        err++;
 80109f4:	7afb      	ldrb	r3, [r7, #11]
 80109f6:	3301      	adds	r3, #1
 80109f8:	72fb      	strb	r3, [r7, #11]
      break;
 80109fa:	e11e      	b.n	8010c3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	7c12      	ldrb	r2, [r2, #16]
 8010a08:	f107 0108 	add.w	r1, r7, #8
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	4798      	blx	r3
 8010a10:	60f8      	str	r0, [r7, #12]
      break;
 8010a12:	e112      	b.n	8010c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	7c1b      	ldrb	r3, [r3, #16]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d10d      	bne.n	8010a38 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a24:	f107 0208 	add.w	r2, r7, #8
 8010a28:	4610      	mov	r0, r2
 8010a2a:	4798      	blx	r3
 8010a2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3301      	adds	r3, #1
 8010a32:	2202      	movs	r2, #2
 8010a34:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010a36:	e100      	b.n	8010c3a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a40:	f107 0208 	add.w	r2, r7, #8
 8010a44:	4610      	mov	r0, r2
 8010a46:	4798      	blx	r3
 8010a48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	2202      	movs	r2, #2
 8010a50:	701a      	strb	r2, [r3, #0]
      break;
 8010a52:	e0f2      	b.n	8010c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	885b      	ldrh	r3, [r3, #2]
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	2b05      	cmp	r3, #5
 8010a5c:	f200 80ac 	bhi.w	8010bb8 <USBD_GetDescriptor+0x258>
 8010a60:	a201      	add	r2, pc, #4	@ (adr r2, 8010a68 <USBD_GetDescriptor+0x108>)
 8010a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a66:	bf00      	nop
 8010a68:	08010a81 	.word	0x08010a81
 8010a6c:	08010ab5 	.word	0x08010ab5
 8010a70:	08010ae9 	.word	0x08010ae9
 8010a74:	08010b1d 	.word	0x08010b1d
 8010a78:	08010b51 	.word	0x08010b51
 8010a7c:	08010b85 	.word	0x08010b85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00b      	beq.n	8010aa4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	7c12      	ldrb	r2, [r2, #16]
 8010a98:	f107 0108 	add.w	r1, r7, #8
 8010a9c:	4610      	mov	r0, r2
 8010a9e:	4798      	blx	r3
 8010aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010aa2:	e091      	b.n	8010bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010aa4:	6839      	ldr	r1, [r7, #0]
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 facb 	bl	8011042 <USBD_CtlError>
            err++;
 8010aac:	7afb      	ldrb	r3, [r7, #11]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8010ab2:	e089      	b.n	8010bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00b      	beq.n	8010ad8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	7c12      	ldrb	r2, [r2, #16]
 8010acc:	f107 0108 	add.w	r1, r7, #8
 8010ad0:	4610      	mov	r0, r2
 8010ad2:	4798      	blx	r3
 8010ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ad6:	e077      	b.n	8010bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ad8:	6839      	ldr	r1, [r7, #0]
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 fab1 	bl	8011042 <USBD_CtlError>
            err++;
 8010ae0:	7afb      	ldrb	r3, [r7, #11]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8010ae6:	e06f      	b.n	8010bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00b      	beq.n	8010b0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	7c12      	ldrb	r2, [r2, #16]
 8010b00:	f107 0108 	add.w	r1, r7, #8
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
 8010b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b0a:	e05d      	b.n	8010bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b0c:	6839      	ldr	r1, [r7, #0]
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fa97 	bl	8011042 <USBD_CtlError>
            err++;
 8010b14:	7afb      	ldrb	r3, [r7, #11]
 8010b16:	3301      	adds	r3, #1
 8010b18:	72fb      	strb	r3, [r7, #11]
          break;
 8010b1a:	e055      	b.n	8010bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b22:	691b      	ldr	r3, [r3, #16]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00b      	beq.n	8010b40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	7c12      	ldrb	r2, [r2, #16]
 8010b34:	f107 0108 	add.w	r1, r7, #8
 8010b38:	4610      	mov	r0, r2
 8010b3a:	4798      	blx	r3
 8010b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b3e:	e043      	b.n	8010bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b40:	6839      	ldr	r1, [r7, #0]
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 fa7d 	bl	8011042 <USBD_CtlError>
            err++;
 8010b48:	7afb      	ldrb	r3, [r7, #11]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b4e:	e03b      	b.n	8010bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b56:	695b      	ldr	r3, [r3, #20]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00b      	beq.n	8010b74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b62:	695b      	ldr	r3, [r3, #20]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	7c12      	ldrb	r2, [r2, #16]
 8010b68:	f107 0108 	add.w	r1, r7, #8
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	4798      	blx	r3
 8010b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b72:	e029      	b.n	8010bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b74:	6839      	ldr	r1, [r7, #0]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fa63 	bl	8011042 <USBD_CtlError>
            err++;
 8010b7c:	7afb      	ldrb	r3, [r7, #11]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	72fb      	strb	r3, [r7, #11]
          break;
 8010b82:	e021      	b.n	8010bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b8a:	699b      	ldr	r3, [r3, #24]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00b      	beq.n	8010ba8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b96:	699b      	ldr	r3, [r3, #24]
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	7c12      	ldrb	r2, [r2, #16]
 8010b9c:	f107 0108 	add.w	r1, r7, #8
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	4798      	blx	r3
 8010ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ba6:	e00f      	b.n	8010bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ba8:	6839      	ldr	r1, [r7, #0]
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 fa49 	bl	8011042 <USBD_CtlError>
            err++;
 8010bb0:	7afb      	ldrb	r3, [r7, #11]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8010bb6:	e007      	b.n	8010bc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010bb8:	6839      	ldr	r1, [r7, #0]
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 fa41 	bl	8011042 <USBD_CtlError>
          err++;
 8010bc0:	7afb      	ldrb	r3, [r7, #11]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010bc6:	bf00      	nop
      }
      break;
 8010bc8:	e037      	b.n	8010c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	7c1b      	ldrb	r3, [r3, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d109      	bne.n	8010be6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bda:	f107 0208 	add.w	r2, r7, #8
 8010bde:	4610      	mov	r0, r2
 8010be0:	4798      	blx	r3
 8010be2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010be4:	e029      	b.n	8010c3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010be6:	6839      	ldr	r1, [r7, #0]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 fa2a 	bl	8011042 <USBD_CtlError>
        err++;
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8010bf4:	e021      	b.n	8010c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	7c1b      	ldrb	r3, [r3, #16]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d10d      	bne.n	8010c1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c06:	f107 0208 	add.w	r2, r7, #8
 8010c0a:	4610      	mov	r0, r2
 8010c0c:	4798      	blx	r3
 8010c0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	3301      	adds	r3, #1
 8010c14:	2207      	movs	r2, #7
 8010c16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c18:	e00f      	b.n	8010c3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010c1a:	6839      	ldr	r1, [r7, #0]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 fa10 	bl	8011042 <USBD_CtlError>
        err++;
 8010c22:	7afb      	ldrb	r3, [r7, #11]
 8010c24:	3301      	adds	r3, #1
 8010c26:	72fb      	strb	r3, [r7, #11]
      break;
 8010c28:	e007      	b.n	8010c3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010c2a:	6839      	ldr	r1, [r7, #0]
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 fa08 	bl	8011042 <USBD_CtlError>
      err++;
 8010c32:	7afb      	ldrb	r3, [r7, #11]
 8010c34:	3301      	adds	r3, #1
 8010c36:	72fb      	strb	r3, [r7, #11]
      break;
 8010c38:	bf00      	nop
  }

  if (err != 0U)
 8010c3a:	7afb      	ldrb	r3, [r7, #11]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d11e      	bne.n	8010c7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	88db      	ldrh	r3, [r3, #6]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d016      	beq.n	8010c76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010c48:	893b      	ldrh	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00e      	beq.n	8010c6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	88da      	ldrh	r2, [r3, #6]
 8010c52:	893b      	ldrh	r3, [r7, #8]
 8010c54:	4293      	cmp	r3, r2
 8010c56:	bf28      	it	cs
 8010c58:	4613      	movcs	r3, r2
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010c5e:	893b      	ldrh	r3, [r7, #8]
 8010c60:	461a      	mov	r2, r3
 8010c62:	68f9      	ldr	r1, [r7, #12]
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f000 fa69 	bl	801113c <USBD_CtlSendData>
 8010c6a:	e009      	b.n	8010c80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010c6c:	6839      	ldr	r1, [r7, #0]
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f9e7 	bl	8011042 <USBD_CtlError>
 8010c74:	e004      	b.n	8010c80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 faba 	bl	80111f0 <USBD_CtlSendStatus>
 8010c7c:	e000      	b.n	8010c80 <USBD_GetDescriptor+0x320>
    return;
 8010c7e:	bf00      	nop
  }
}
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop

08010c88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b084      	sub	sp, #16
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	889b      	ldrh	r3, [r3, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d131      	bne.n	8010cfe <USBD_SetAddress+0x76>
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	88db      	ldrh	r3, [r3, #6]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d12d      	bne.n	8010cfe <USBD_SetAddress+0x76>
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	885b      	ldrh	r3, [r3, #2]
 8010ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ca8:	d829      	bhi.n	8010cfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	885b      	ldrh	r3, [r3, #2]
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b03      	cmp	r3, #3
 8010cc0:	d104      	bne.n	8010ccc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 f9bc 	bl	8011042 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cca:	e01d      	b.n	8010d08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	7bfa      	ldrb	r2, [r7, #15]
 8010cd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010cd4:	7bfb      	ldrb	r3, [r7, #15]
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f003 fd35 	bl	8014748 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 fa86 	bl	80111f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d004      	beq.n	8010cf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2202      	movs	r2, #2
 8010cee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cf2:	e009      	b.n	8010d08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cfc:	e004      	b.n	8010d08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010cfe:	6839      	ldr	r1, [r7, #0]
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 f99e 	bl	8011042 <USBD_CtlError>
  }
}
 8010d06:	bf00      	nop
 8010d08:	bf00      	nop
 8010d0a:	3710      	adds	r7, #16
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	885b      	ldrh	r3, [r3, #2]
 8010d22:	b2da      	uxtb	r2, r3
 8010d24:	4b4e      	ldr	r3, [pc, #312]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010d26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010d28:	4b4d      	ldr	r3, [pc, #308]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d905      	bls.n	8010d3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010d30:	6839      	ldr	r1, [r7, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 f985 	bl	8011042 <USBD_CtlError>
    return USBD_FAIL;
 8010d38:	2303      	movs	r3, #3
 8010d3a:	e08c      	b.n	8010e56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2b02      	cmp	r3, #2
 8010d46:	d002      	beq.n	8010d4e <USBD_SetConfig+0x3e>
 8010d48:	2b03      	cmp	r3, #3
 8010d4a:	d029      	beq.n	8010da0 <USBD_SetConfig+0x90>
 8010d4c:	e075      	b.n	8010e3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010d4e:	4b44      	ldr	r3, [pc, #272]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d020      	beq.n	8010d98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010d56:	4b42      	ldr	r3, [pc, #264]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010d60:	4b3f      	ldr	r3, [pc, #252]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	4619      	mov	r1, r3
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7fe fff1 	bl	800fd4e <USBD_SetClassConfig>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010d70:	7bfb      	ldrb	r3, [r7, #15]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d008      	beq.n	8010d88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010d76:	6839      	ldr	r1, [r7, #0]
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 f962 	bl	8011042 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2202      	movs	r2, #2
 8010d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d86:	e065      	b.n	8010e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 fa31 	bl	80111f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2203      	movs	r2, #3
 8010d92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010d96:	e05d      	b.n	8010e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 fa29 	bl	80111f0 <USBD_CtlSendStatus>
      break;
 8010d9e:	e059      	b.n	8010e54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010da0:	4b2f      	ldr	r3, [pc, #188]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d112      	bne.n	8010dce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010db0:	4b2b      	ldr	r3, [pc, #172]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	461a      	mov	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010dba:	4b29      	ldr	r3, [pc, #164]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7fe ffe0 	bl	800fd86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 fa12 	bl	80111f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010dcc:	e042      	b.n	8010e54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010dce:	4b24      	ldr	r3, [pc, #144]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d02a      	beq.n	8010e32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	4619      	mov	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7fe ffce 	bl	800fd86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010dea:	4b1d      	ldr	r3, [pc, #116]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010df4:	4b1a      	ldr	r3, [pc, #104]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	4619      	mov	r1, r3
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7fe ffa7 	bl	800fd4e <USBD_SetClassConfig>
 8010e00:	4603      	mov	r3, r0
 8010e02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010e04:	7bfb      	ldrb	r3, [r7, #15]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00f      	beq.n	8010e2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 f918 	bl	8011042 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7fe ffb3 	bl	800fd86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2202      	movs	r2, #2
 8010e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e28:	e014      	b.n	8010e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f000 f9e0 	bl	80111f0 <USBD_CtlSendStatus>
      break;
 8010e30:	e010      	b.n	8010e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f9dc 	bl	80111f0 <USBD_CtlSendStatus>
      break;
 8010e38:	e00c      	b.n	8010e54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f900 	bl	8011042 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e42:	4b07      	ldr	r3, [pc, #28]	@ (8010e60 <USBD_SetConfig+0x150>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	4619      	mov	r1, r3
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7fe ff9c 	bl	800fd86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010e4e:	2303      	movs	r3, #3
 8010e50:	73fb      	strb	r3, [r7, #15]
      break;
 8010e52:	bf00      	nop
  }

  return ret;
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	24000a5c 	.word	0x24000a5c

08010e64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	88db      	ldrh	r3, [r3, #6]
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d004      	beq.n	8010e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010e76:	6839      	ldr	r1, [r7, #0]
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 f8e2 	bl	8011042 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010e7e:	e023      	b.n	8010ec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	2b02      	cmp	r3, #2
 8010e8a:	dc02      	bgt.n	8010e92 <USBD_GetConfig+0x2e>
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dc03      	bgt.n	8010e98 <USBD_GetConfig+0x34>
 8010e90:	e015      	b.n	8010ebe <USBD_GetConfig+0x5a>
 8010e92:	2b03      	cmp	r3, #3
 8010e94:	d00b      	beq.n	8010eae <USBD_GetConfig+0x4a>
 8010e96:	e012      	b.n	8010ebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	3308      	adds	r3, #8
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 f948 	bl	801113c <USBD_CtlSendData>
        break;
 8010eac:	e00c      	b.n	8010ec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f940 	bl	801113c <USBD_CtlSendData>
        break;
 8010ebc:	e004      	b.n	8010ec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010ebe:	6839      	ldr	r1, [r7, #0]
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f000 f8be 	bl	8011042 <USBD_CtlError>
        break;
 8010ec6:	bf00      	nop
}
 8010ec8:	bf00      	nop
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	2b02      	cmp	r3, #2
 8010ee6:	d81e      	bhi.n	8010f26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	88db      	ldrh	r3, [r3, #6]
 8010eec:	2b02      	cmp	r3, #2
 8010eee:	d004      	beq.n	8010efa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010ef0:	6839      	ldr	r1, [r7, #0]
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 f8a5 	bl	8011042 <USBD_CtlError>
        break;
 8010ef8:	e01a      	b.n	8010f30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2201      	movs	r2, #1
 8010efe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d005      	beq.n	8010f16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	f043 0202 	orr.w	r2, r3, #2
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	330c      	adds	r3, #12
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f000 f90c 	bl	801113c <USBD_CtlSendData>
      break;
 8010f24:	e004      	b.n	8010f30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010f26:	6839      	ldr	r1, [r7, #0]
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 f88a 	bl	8011042 <USBD_CtlError>
      break;
 8010f2e:	bf00      	nop
  }
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	885b      	ldrh	r3, [r3, #2]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d107      	bne.n	8010f5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f94c 	bl	80111f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010f58:	e013      	b.n	8010f82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	885b      	ldrh	r3, [r3, #2]
 8010f5e:	2b02      	cmp	r3, #2
 8010f60:	d10b      	bne.n	8010f7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	889b      	ldrh	r3, [r3, #4]
 8010f66:	0a1b      	lsrs	r3, r3, #8
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	b2da      	uxtb	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 f93c 	bl	80111f0 <USBD_CtlSendStatus>
}
 8010f78:	e003      	b.n	8010f82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010f7a:	6839      	ldr	r1, [r7, #0]
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 f860 	bl	8011042 <USBD_CtlError>
}
 8010f82:	bf00      	nop
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b082      	sub	sp, #8
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	3b01      	subs	r3, #1
 8010f9e:	2b02      	cmp	r3, #2
 8010fa0:	d80b      	bhi.n	8010fba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	885b      	ldrh	r3, [r3, #2]
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d10c      	bne.n	8010fc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2200      	movs	r2, #0
 8010fae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 f91c 	bl	80111f0 <USBD_CtlSendStatus>
      }
      break;
 8010fb8:	e004      	b.n	8010fc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010fba:	6839      	ldr	r1, [r7, #0]
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 f840 	bl	8011042 <USBD_CtlError>
      break;
 8010fc2:	e000      	b.n	8010fc6 <USBD_ClrFeature+0x3c>
      break;
 8010fc4:	bf00      	nop
  }
}
 8010fc6:	bf00      	nop
 8010fc8:	3708      	adds	r7, #8
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	781a      	ldrb	r2, [r3, #0]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	781a      	ldrb	r2, [r3, #0]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7ff fa16 	bl	801042a <SWAPBYTE>
 8010ffe:	4603      	mov	r3, r0
 8011000:	461a      	mov	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	3301      	adds	r3, #1
 801100a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	3301      	adds	r3, #1
 8011010:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff fa09 	bl	801042a <SWAPBYTE>
 8011018:	4603      	mov	r3, r0
 801101a:	461a      	mov	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	3301      	adds	r3, #1
 8011024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	3301      	adds	r3, #1
 801102a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f7ff f9fc 	bl	801042a <SWAPBYTE>
 8011032:	4603      	mov	r3, r0
 8011034:	461a      	mov	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	80da      	strh	r2, [r3, #6]
}
 801103a:	bf00      	nop
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b082      	sub	sp, #8
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
 801104a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801104c:	2180      	movs	r1, #128	@ 0x80
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f003 fb10 	bl	8014674 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011054:	2100      	movs	r1, #0
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f003 fb0c 	bl	8014674 <USBD_LL_StallEP>
}
 801105c:	bf00      	nop
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011070:	2300      	movs	r3, #0
 8011072:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d042      	beq.n	8011100 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801107e:	6938      	ldr	r0, [r7, #16]
 8011080:	f000 f842 	bl	8011108 <USBD_GetLen>
 8011084:	4603      	mov	r3, r0
 8011086:	3301      	adds	r3, #1
 8011088:	005b      	lsls	r3, r3, #1
 801108a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801108e:	d808      	bhi.n	80110a2 <USBD_GetString+0x3e>
 8011090:	6938      	ldr	r0, [r7, #16]
 8011092:	f000 f839 	bl	8011108 <USBD_GetLen>
 8011096:	4603      	mov	r3, r0
 8011098:	3301      	adds	r3, #1
 801109a:	b29b      	uxth	r3, r3
 801109c:	005b      	lsls	r3, r3, #1
 801109e:	b29a      	uxth	r2, r3
 80110a0:	e001      	b.n	80110a6 <USBD_GetString+0x42>
 80110a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80110aa:	7dfb      	ldrb	r3, [r7, #23]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	4413      	add	r3, r2
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	7812      	ldrb	r2, [r2, #0]
 80110b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	3301      	adds	r3, #1
 80110ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80110bc:	7dfb      	ldrb	r3, [r7, #23]
 80110be:	68ba      	ldr	r2, [r7, #8]
 80110c0:	4413      	add	r3, r2
 80110c2:	2203      	movs	r2, #3
 80110c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80110c6:	7dfb      	ldrb	r3, [r7, #23]
 80110c8:	3301      	adds	r3, #1
 80110ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80110cc:	e013      	b.n	80110f6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80110ce:	7dfb      	ldrb	r3, [r7, #23]
 80110d0:	68ba      	ldr	r2, [r7, #8]
 80110d2:	4413      	add	r3, r2
 80110d4:	693a      	ldr	r2, [r7, #16]
 80110d6:	7812      	ldrb	r2, [r2, #0]
 80110d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	3301      	adds	r3, #1
 80110de:	613b      	str	r3, [r7, #16]
    idx++;
 80110e0:	7dfb      	ldrb	r3, [r7, #23]
 80110e2:	3301      	adds	r3, #1
 80110e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80110e6:	7dfb      	ldrb	r3, [r7, #23]
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	4413      	add	r3, r2
 80110ec:	2200      	movs	r2, #0
 80110ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80110f0:	7dfb      	ldrb	r3, [r7, #23]
 80110f2:	3301      	adds	r3, #1
 80110f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1e7      	bne.n	80110ce <USBD_GetString+0x6a>
 80110fe:	e000      	b.n	8011102 <USBD_GetString+0x9e>
    return;
 8011100:	bf00      	nop
  }
}
 8011102:	3718      	adds	r7, #24
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011108:	b480      	push	{r7}
 801110a:	b085      	sub	sp, #20
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011110:	2300      	movs	r3, #0
 8011112:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011118:	e005      	b.n	8011126 <USBD_GetLen+0x1e>
  {
    len++;
 801111a:	7bfb      	ldrb	r3, [r7, #15]
 801111c:	3301      	adds	r3, #1
 801111e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	3301      	adds	r3, #1
 8011124:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d1f5      	bne.n	801111a <USBD_GetLen+0x12>
  }

  return len;
 801112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011130:	4618      	mov	r0, r3
 8011132:	3714      	adds	r7, #20
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr

0801113c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2202      	movs	r2, #2
 801114c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	2100      	movs	r1, #0
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f003 fb0f 	bl	8014786 <USBD_LL_Transmit>

  return USBD_OK;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}

08011172 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011172:	b580      	push	{r7, lr}
 8011174:	b084      	sub	sp, #16
 8011176:	af00      	add	r7, sp, #0
 8011178:	60f8      	str	r0, [r7, #12]
 801117a:	60b9      	str	r1, [r7, #8]
 801117c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	2100      	movs	r1, #0
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f003 fafe 	bl	8014786 <USBD_LL_Transmit>

  return USBD_OK;
 801118a:	2300      	movs	r3, #0
}
 801118c:	4618      	mov	r0, r3
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	60b9      	str	r1, [r7, #8]
 801119e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2203      	movs	r2, #3
 80111a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	68ba      	ldr	r2, [r7, #8]
 80111bc:	2100      	movs	r1, #0
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f003 fb02 	bl	80147c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b084      	sub	sp, #16
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	60f8      	str	r0, [r7, #12]
 80111d6:	60b9      	str	r1, [r7, #8]
 80111d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	2100      	movs	r1, #0
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f003 faf1 	bl	80147c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111e6:	2300      	movs	r3, #0
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2204      	movs	r2, #4
 80111fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011200:	2300      	movs	r3, #0
 8011202:	2200      	movs	r2, #0
 8011204:	2100      	movs	r1, #0
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f003 fabd 	bl	8014786 <USBD_LL_Transmit>

  return USBD_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011216:	b580      	push	{r7, lr}
 8011218:	b082      	sub	sp, #8
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2205      	movs	r2, #5
 8011222:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011226:	2300      	movs	r3, #0
 8011228:	2200      	movs	r2, #0
 801122a:	2100      	movs	r1, #0
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f003 facb 	bl	80147c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011232:	2300      	movs	r3, #0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3708      	adds	r7, #8
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <__NVIC_SetPriority>:
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
 8011242:	4603      	mov	r3, r0
 8011244:	6039      	str	r1, [r7, #0]
 8011246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801124c:	2b00      	cmp	r3, #0
 801124e:	db0a      	blt.n	8011266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	b2da      	uxtb	r2, r3
 8011254:	490c      	ldr	r1, [pc, #48]	@ (8011288 <__NVIC_SetPriority+0x4c>)
 8011256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801125a:	0112      	lsls	r2, r2, #4
 801125c:	b2d2      	uxtb	r2, r2
 801125e:	440b      	add	r3, r1
 8011260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011264:	e00a      	b.n	801127c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	b2da      	uxtb	r2, r3
 801126a:	4908      	ldr	r1, [pc, #32]	@ (801128c <__NVIC_SetPriority+0x50>)
 801126c:	88fb      	ldrh	r3, [r7, #6]
 801126e:	f003 030f 	and.w	r3, r3, #15
 8011272:	3b04      	subs	r3, #4
 8011274:	0112      	lsls	r2, r2, #4
 8011276:	b2d2      	uxtb	r2, r2
 8011278:	440b      	add	r3, r1
 801127a:	761a      	strb	r2, [r3, #24]
}
 801127c:	bf00      	nop
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr
 8011288:	e000e100 	.word	0xe000e100
 801128c:	e000ed00 	.word	0xe000ed00

08011290 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011290:	b580      	push	{r7, lr}
 8011292:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011294:	4b05      	ldr	r3, [pc, #20]	@ (80112ac <SysTick_Handler+0x1c>)
 8011296:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011298:	f001 fd46 	bl	8012d28 <xTaskGetSchedulerState>
 801129c:	4603      	mov	r3, r0
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d001      	beq.n	80112a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80112a2:	f002 fb41 	bl	8013928 <xPortSysTickHandler>
  }
}
 80112a6:	bf00      	nop
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	e000e010 	.word	0xe000e010

080112b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80112b0:	b580      	push	{r7, lr}
 80112b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80112b4:	2100      	movs	r1, #0
 80112b6:	f06f 0004 	mvn.w	r0, #4
 80112ba:	f7ff ffbf 	bl	801123c <__NVIC_SetPriority>
#endif
}
 80112be:	bf00      	nop
 80112c0:	bd80      	pop	{r7, pc}
	...

080112c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112ca:	f3ef 8305 	mrs	r3, IPSR
 80112ce:	603b      	str	r3, [r7, #0]
  return(result);
 80112d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d003      	beq.n	80112de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80112d6:	f06f 0305 	mvn.w	r3, #5
 80112da:	607b      	str	r3, [r7, #4]
 80112dc:	e00c      	b.n	80112f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80112de:	4b0a      	ldr	r3, [pc, #40]	@ (8011308 <osKernelInitialize+0x44>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d105      	bne.n	80112f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80112e6:	4b08      	ldr	r3, [pc, #32]	@ (8011308 <osKernelInitialize+0x44>)
 80112e8:	2201      	movs	r2, #1
 80112ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80112ec:	2300      	movs	r3, #0
 80112ee:	607b      	str	r3, [r7, #4]
 80112f0:	e002      	b.n	80112f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80112f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80112f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80112f8:	687b      	ldr	r3, [r7, #4]
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	24000a60 	.word	0x24000a60

0801130c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011312:	f3ef 8305 	mrs	r3, IPSR
 8011316:	603b      	str	r3, [r7, #0]
  return(result);
 8011318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801131a:	2b00      	cmp	r3, #0
 801131c:	d003      	beq.n	8011326 <osKernelStart+0x1a>
    stat = osErrorISR;
 801131e:	f06f 0305 	mvn.w	r3, #5
 8011322:	607b      	str	r3, [r7, #4]
 8011324:	e010      	b.n	8011348 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011326:	4b0b      	ldr	r3, [pc, #44]	@ (8011354 <osKernelStart+0x48>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2b01      	cmp	r3, #1
 801132c:	d109      	bne.n	8011342 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801132e:	f7ff ffbf 	bl	80112b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011332:	4b08      	ldr	r3, [pc, #32]	@ (8011354 <osKernelStart+0x48>)
 8011334:	2202      	movs	r2, #2
 8011336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011338:	f001 f892 	bl	8012460 <vTaskStartScheduler>
      stat = osOK;
 801133c:	2300      	movs	r3, #0
 801133e:	607b      	str	r3, [r7, #4]
 8011340:	e002      	b.n	8011348 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011348:	687b      	ldr	r3, [r7, #4]
}
 801134a:	4618      	mov	r0, r3
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	24000a60 	.word	0x24000a60

08011358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011358:	b580      	push	{r7, lr}
 801135a:	b08e      	sub	sp, #56	@ 0x38
 801135c:	af04      	add	r7, sp, #16
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011364:	2300      	movs	r3, #0
 8011366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011368:	f3ef 8305 	mrs	r3, IPSR
 801136c:	617b      	str	r3, [r7, #20]
  return(result);
 801136e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011370:	2b00      	cmp	r3, #0
 8011372:	d17e      	bne.n	8011472 <osThreadNew+0x11a>
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d07b      	beq.n	8011472 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801137a:	2380      	movs	r3, #128	@ 0x80
 801137c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801137e:	2318      	movs	r3, #24
 8011380:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011382:	2300      	movs	r3, #0
 8011384:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8011386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801138a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d045      	beq.n	801141e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d002      	beq.n	80113a0 <osThreadNew+0x48>
        name = attr->name;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	699b      	ldr	r3, [r3, #24]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	699b      	ldr	r3, [r3, #24]
 80113ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80113ae:	69fb      	ldr	r3, [r7, #28]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d008      	beq.n	80113c6 <osThreadNew+0x6e>
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	2b38      	cmp	r3, #56	@ 0x38
 80113b8:	d805      	bhi.n	80113c6 <osThreadNew+0x6e>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	f003 0301 	and.w	r3, r3, #1
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d001      	beq.n	80113ca <osThreadNew+0x72>
        return (NULL);
 80113c6:	2300      	movs	r3, #0
 80113c8:	e054      	b.n	8011474 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	695b      	ldr	r3, [r3, #20]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d003      	beq.n	80113da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	089b      	lsrs	r3, r3, #2
 80113d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00e      	beq.n	8011400 <osThreadNew+0xa8>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80113e8:	d90a      	bls.n	8011400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d006      	beq.n	8011400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	695b      	ldr	r3, [r3, #20]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d002      	beq.n	8011400 <osThreadNew+0xa8>
        mem = 1;
 80113fa:	2301      	movs	r3, #1
 80113fc:	61bb      	str	r3, [r7, #24]
 80113fe:	e010      	b.n	8011422 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	689b      	ldr	r3, [r3, #8]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10c      	bne.n	8011422 <osThreadNew+0xca>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d108      	bne.n	8011422 <osThreadNew+0xca>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	691b      	ldr	r3, [r3, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d104      	bne.n	8011422 <osThreadNew+0xca>
          mem = 0;
 8011418:	2300      	movs	r3, #0
 801141a:	61bb      	str	r3, [r7, #24]
 801141c:	e001      	b.n	8011422 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801141e:	2300      	movs	r3, #0
 8011420:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	2b01      	cmp	r3, #1
 8011426:	d110      	bne.n	801144a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801142c:	687a      	ldr	r2, [r7, #4]
 801142e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011430:	9202      	str	r2, [sp, #8]
 8011432:	9301      	str	r3, [sp, #4]
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	6a3a      	ldr	r2, [r7, #32]
 801143c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801143e:	68f8      	ldr	r0, [r7, #12]
 8011440:	f000 fe1a 	bl	8012078 <xTaskCreateStatic>
 8011444:	4603      	mov	r3, r0
 8011446:	613b      	str	r3, [r7, #16]
 8011448:	e013      	b.n	8011472 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d110      	bne.n	8011472 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011450:	6a3b      	ldr	r3, [r7, #32]
 8011452:	b29a      	uxth	r2, r3
 8011454:	f107 0310 	add.w	r3, r7, #16
 8011458:	9301      	str	r3, [sp, #4]
 801145a:	69fb      	ldr	r3, [r7, #28]
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f000 fe68 	bl	8012138 <xTaskCreate>
 8011468:	4603      	mov	r3, r0
 801146a:	2b01      	cmp	r3, #1
 801146c:	d001      	beq.n	8011472 <osThreadNew+0x11a>
            hTask = NULL;
 801146e:	2300      	movs	r3, #0
 8011470:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011472:	693b      	ldr	r3, [r7, #16]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3728      	adds	r7, #40	@ 0x28
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011484:	f3ef 8305 	mrs	r3, IPSR
 8011488:	60bb      	str	r3, [r7, #8]
  return(result);
 801148a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801148c:	2b00      	cmp	r3, #0
 801148e:	d003      	beq.n	8011498 <osDelay+0x1c>
    stat = osErrorISR;
 8011490:	f06f 0305 	mvn.w	r3, #5
 8011494:	60fb      	str	r3, [r7, #12]
 8011496:	e007      	b.n	80114a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011498:	2300      	movs	r3, #0
 801149a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d002      	beq.n	80114a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f000 ffa6 	bl	80123f4 <vTaskDelay>
    }
  }

  return (stat);
 80114a8:	68fb      	ldr	r3, [r7, #12]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
	...

080114b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80114b4:	b480      	push	{r7}
 80114b6:	b085      	sub	sp, #20
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	4a07      	ldr	r2, [pc, #28]	@ (80114e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80114c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	4a06      	ldr	r2, [pc, #24]	@ (80114e4 <vApplicationGetIdleTaskMemory+0x30>)
 80114ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2280      	movs	r2, #128	@ 0x80
 80114d0:	601a      	str	r2, [r3, #0]
}
 80114d2:	bf00      	nop
 80114d4:	3714      	adds	r7, #20
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	24000a64 	.word	0x24000a64
 80114e4:	24000b0c 	.word	0x24000b0c

080114e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	4a07      	ldr	r2, [pc, #28]	@ (8011514 <vApplicationGetTimerTaskMemory+0x2c>)
 80114f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	4a06      	ldr	r2, [pc, #24]	@ (8011518 <vApplicationGetTimerTaskMemory+0x30>)
 80114fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011506:	601a      	str	r2, [r3, #0]
}
 8011508:	bf00      	nop
 801150a:	3714      	adds	r7, #20
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr
 8011514:	24000d0c 	.word	0x24000d0c
 8011518:	24000db4 	.word	0x24000db4

0801151c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f103 0208 	add.w	r2, r3, #8
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f103 0208 	add.w	r2, r3, #8
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f103 0208 	add.w	r2, r3, #8
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011550:	bf00      	nop
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2200      	movs	r2, #0
 8011568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801156a:	bf00      	nop
 801156c:	370c      	adds	r7, #12
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr

08011576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011576:	b480      	push	{r7}
 8011578:	b085      	sub	sp, #20
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	689a      	ldr	r2, [r3, #8]
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	689b      	ldr	r3, [r3, #8]
 8011598:	683a      	ldr	r2, [r7, #0]
 801159a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	1c5a      	adds	r2, r3, #1
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	601a      	str	r2, [r3, #0]
}
 80115b2:	bf00      	nop
 80115b4:	3714      	adds	r7, #20
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80115be:	b480      	push	{r7}
 80115c0:	b085      	sub	sp, #20
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115d4:	d103      	bne.n	80115de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	691b      	ldr	r3, [r3, #16]
 80115da:	60fb      	str	r3, [r7, #12]
 80115dc:	e00c      	b.n	80115f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	3308      	adds	r3, #8
 80115e2:	60fb      	str	r3, [r7, #12]
 80115e4:	e002      	b.n	80115ec <vListInsert+0x2e>
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	60fb      	str	r3, [r7, #12]
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	68ba      	ldr	r2, [r7, #8]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d2f6      	bcs.n	80115e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	685a      	ldr	r2, [r3, #4]
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	683a      	ldr	r2, [r7, #0]
 8011606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	68fa      	ldr	r2, [r7, #12]
 801160c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	683a      	ldr	r2, [r7, #0]
 8011612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	601a      	str	r2, [r3, #0]
}
 8011624:	bf00      	nop
 8011626:	3714      	adds	r7, #20
 8011628:	46bd      	mov	sp, r7
 801162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162e:	4770      	bx	lr

08011630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011630:	b480      	push	{r7}
 8011632:	b085      	sub	sp, #20
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	691b      	ldr	r3, [r3, #16]
 801163c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	6892      	ldr	r2, [r2, #8]
 8011646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	689b      	ldr	r3, [r3, #8]
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	6852      	ldr	r2, [r2, #4]
 8011650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	429a      	cmp	r2, r3
 801165a:	d103      	bne.n	8011664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	689a      	ldr	r2, [r3, #8]
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	1e5a      	subs	r2, r3, #1
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3714      	adds	r7, #20
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b084      	sub	sp, #16
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d10b      	bne.n	80116b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80116aa:	bf00      	nop
 80116ac:	bf00      	nop
 80116ae:	e7fd      	b.n	80116ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80116b0:	f002 f8aa 	bl	8013808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116bc:	68f9      	ldr	r1, [r7, #12]
 80116be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80116c0:	fb01 f303 	mul.w	r3, r1, r3
 80116c4:	441a      	add	r2, r3
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2200      	movs	r2, #0
 80116ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116e0:	3b01      	subs	r3, #1
 80116e2:	68f9      	ldr	r1, [r7, #12]
 80116e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80116e6:	fb01 f303 	mul.w	r3, r1, r3
 80116ea:	441a      	add	r2, r3
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	22ff      	movs	r2, #255	@ 0xff
 80116f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	22ff      	movs	r2, #255	@ 0xff
 80116fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d114      	bne.n	8011730 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d01a      	beq.n	8011744 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3310      	adds	r3, #16
 8011712:	4618      	mov	r0, r3
 8011714:	f001 f942 	bl	801299c <xTaskRemoveFromEventList>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d012      	beq.n	8011744 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801171e:	4b0d      	ldr	r3, [pc, #52]	@ (8011754 <xQueueGenericReset+0xd0>)
 8011720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011724:	601a      	str	r2, [r3, #0]
 8011726:	f3bf 8f4f 	dsb	sy
 801172a:	f3bf 8f6f 	isb	sy
 801172e:	e009      	b.n	8011744 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	3310      	adds	r3, #16
 8011734:	4618      	mov	r0, r3
 8011736:	f7ff fef1 	bl	801151c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	3324      	adds	r3, #36	@ 0x24
 801173e:	4618      	mov	r0, r3
 8011740:	f7ff feec 	bl	801151c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011744:	f002 f892 	bl	801386c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011748:	2301      	movs	r3, #1
}
 801174a:	4618      	mov	r0, r3
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	e000ed04 	.word	0xe000ed04

08011758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011758:	b580      	push	{r7, lr}
 801175a:	b08e      	sub	sp, #56	@ 0x38
 801175c:	af02      	add	r7, sp, #8
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d10b      	bne.n	8011784 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801176c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011770:	f383 8811 	msr	BASEPRI, r3
 8011774:	f3bf 8f6f 	isb	sy
 8011778:	f3bf 8f4f 	dsb	sy
 801177c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801177e:	bf00      	nop
 8011780:	bf00      	nop
 8011782:	e7fd      	b.n	8011780 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d10b      	bne.n	80117a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801178a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801178e:	f383 8811 	msr	BASEPRI, r3
 8011792:	f3bf 8f6f 	isb	sy
 8011796:	f3bf 8f4f 	dsb	sy
 801179a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801179c:	bf00      	nop
 801179e:	bf00      	nop
 80117a0:	e7fd      	b.n	801179e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d002      	beq.n	80117ae <xQueueGenericCreateStatic+0x56>
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d001      	beq.n	80117b2 <xQueueGenericCreateStatic+0x5a>
 80117ae:	2301      	movs	r3, #1
 80117b0:	e000      	b.n	80117b4 <xQueueGenericCreateStatic+0x5c>
 80117b2:	2300      	movs	r3, #0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d10b      	bne.n	80117d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80117b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117bc:	f383 8811 	msr	BASEPRI, r3
 80117c0:	f3bf 8f6f 	isb	sy
 80117c4:	f3bf 8f4f 	dsb	sy
 80117c8:	623b      	str	r3, [r7, #32]
}
 80117ca:	bf00      	nop
 80117cc:	bf00      	nop
 80117ce:	e7fd      	b.n	80117cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d102      	bne.n	80117dc <xQueueGenericCreateStatic+0x84>
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d101      	bne.n	80117e0 <xQueueGenericCreateStatic+0x88>
 80117dc:	2301      	movs	r3, #1
 80117de:	e000      	b.n	80117e2 <xQueueGenericCreateStatic+0x8a>
 80117e0:	2300      	movs	r3, #0
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d10b      	bne.n	80117fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80117e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ea:	f383 8811 	msr	BASEPRI, r3
 80117ee:	f3bf 8f6f 	isb	sy
 80117f2:	f3bf 8f4f 	dsb	sy
 80117f6:	61fb      	str	r3, [r7, #28]
}
 80117f8:	bf00      	nop
 80117fa:	bf00      	nop
 80117fc:	e7fd      	b.n	80117fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80117fe:	2350      	movs	r3, #80	@ 0x50
 8011800:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	2b50      	cmp	r3, #80	@ 0x50
 8011806:	d00b      	beq.n	8011820 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8011808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801180c:	f383 8811 	msr	BASEPRI, r3
 8011810:	f3bf 8f6f 	isb	sy
 8011814:	f3bf 8f4f 	dsb	sy
 8011818:	61bb      	str	r3, [r7, #24]
}
 801181a:	bf00      	nop
 801181c:	bf00      	nop
 801181e:	e7fd      	b.n	801181c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011820:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00d      	beq.n	8011848 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801182e:	2201      	movs	r2, #1
 8011830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011834:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	4613      	mov	r3, r2
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	68b9      	ldr	r1, [r7, #8]
 8011842:	68f8      	ldr	r0, [r7, #12]
 8011844:	f000 f805 	bl	8011852 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801184a:	4618      	mov	r0, r3
 801184c:	3730      	adds	r7, #48	@ 0x30
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b084      	sub	sp, #16
 8011856:	af00      	add	r7, sp, #0
 8011858:	60f8      	str	r0, [r7, #12]
 801185a:	60b9      	str	r1, [r7, #8]
 801185c:	607a      	str	r2, [r7, #4]
 801185e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d103      	bne.n	801186e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	69ba      	ldr	r2, [r7, #24]
 801186a:	601a      	str	r2, [r3, #0]
 801186c:	e002      	b.n	8011874 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	68fa      	ldr	r2, [r7, #12]
 8011878:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	68ba      	ldr	r2, [r7, #8]
 801187e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011880:	2101      	movs	r1, #1
 8011882:	69b8      	ldr	r0, [r7, #24]
 8011884:	f7ff fefe 	bl	8011684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	78fa      	ldrb	r2, [r7, #3]
 801188c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011890:	bf00      	nop
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b08e      	sub	sp, #56	@ 0x38
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
 80118a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80118a6:	2300      	movs	r3, #0
 80118a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80118ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d10b      	bne.n	80118cc <xQueueGenericSend+0x34>
	__asm volatile
 80118b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118b8:	f383 8811 	msr	BASEPRI, r3
 80118bc:	f3bf 8f6f 	isb	sy
 80118c0:	f3bf 8f4f 	dsb	sy
 80118c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80118c6:	bf00      	nop
 80118c8:	bf00      	nop
 80118ca:	e7fd      	b.n	80118c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d103      	bne.n	80118da <xQueueGenericSend+0x42>
 80118d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d101      	bne.n	80118de <xQueueGenericSend+0x46>
 80118da:	2301      	movs	r3, #1
 80118dc:	e000      	b.n	80118e0 <xQueueGenericSend+0x48>
 80118de:	2300      	movs	r3, #0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d10b      	bne.n	80118fc <xQueueGenericSend+0x64>
	__asm volatile
 80118e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118e8:	f383 8811 	msr	BASEPRI, r3
 80118ec:	f3bf 8f6f 	isb	sy
 80118f0:	f3bf 8f4f 	dsb	sy
 80118f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80118f6:	bf00      	nop
 80118f8:	bf00      	nop
 80118fa:	e7fd      	b.n	80118f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d103      	bne.n	801190a <xQueueGenericSend+0x72>
 8011902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011906:	2b01      	cmp	r3, #1
 8011908:	d101      	bne.n	801190e <xQueueGenericSend+0x76>
 801190a:	2301      	movs	r3, #1
 801190c:	e000      	b.n	8011910 <xQueueGenericSend+0x78>
 801190e:	2300      	movs	r3, #0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10b      	bne.n	801192c <xQueueGenericSend+0x94>
	__asm volatile
 8011914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011918:	f383 8811 	msr	BASEPRI, r3
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	623b      	str	r3, [r7, #32]
}
 8011926:	bf00      	nop
 8011928:	bf00      	nop
 801192a:	e7fd      	b.n	8011928 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801192c:	f001 f9fc 	bl	8012d28 <xTaskGetSchedulerState>
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d102      	bne.n	801193c <xQueueGenericSend+0xa4>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d101      	bne.n	8011940 <xQueueGenericSend+0xa8>
 801193c:	2301      	movs	r3, #1
 801193e:	e000      	b.n	8011942 <xQueueGenericSend+0xaa>
 8011940:	2300      	movs	r3, #0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d10b      	bne.n	801195e <xQueueGenericSend+0xc6>
	__asm volatile
 8011946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	61fb      	str	r3, [r7, #28]
}
 8011958:	bf00      	nop
 801195a:	bf00      	nop
 801195c:	e7fd      	b.n	801195a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801195e:	f001 ff53 	bl	8013808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801196a:	429a      	cmp	r2, r3
 801196c:	d302      	bcc.n	8011974 <xQueueGenericSend+0xdc>
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	2b02      	cmp	r3, #2
 8011972:	d129      	bne.n	80119c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011974:	683a      	ldr	r2, [r7, #0]
 8011976:	68b9      	ldr	r1, [r7, #8]
 8011978:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801197a:	f000 fa0f 	bl	8011d9c <prvCopyDataToQueue>
 801197e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011984:	2b00      	cmp	r3, #0
 8011986:	d010      	beq.n	80119aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801198a:	3324      	adds	r3, #36	@ 0x24
 801198c:	4618      	mov	r0, r3
 801198e:	f001 f805 	bl	801299c <xTaskRemoveFromEventList>
 8011992:	4603      	mov	r3, r0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d013      	beq.n	80119c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011998:	4b3f      	ldr	r3, [pc, #252]	@ (8011a98 <xQueueGenericSend+0x200>)
 801199a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801199e:	601a      	str	r2, [r3, #0]
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	e00a      	b.n	80119c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80119aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d007      	beq.n	80119c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80119b0:	4b39      	ldr	r3, [pc, #228]	@ (8011a98 <xQueueGenericSend+0x200>)
 80119b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119b6:	601a      	str	r2, [r3, #0]
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80119c0:	f001 ff54 	bl	801386c <vPortExitCritical>
				return pdPASS;
 80119c4:	2301      	movs	r3, #1
 80119c6:	e063      	b.n	8011a90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d103      	bne.n	80119d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80119ce:	f001 ff4d 	bl	801386c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80119d2:	2300      	movs	r3, #0
 80119d4:	e05c      	b.n	8011a90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80119d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d106      	bne.n	80119ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80119dc:	f107 0314 	add.w	r3, r7, #20
 80119e0:	4618      	mov	r0, r3
 80119e2:	f001 f83f 	bl	8012a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80119e6:	2301      	movs	r3, #1
 80119e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80119ea:	f001 ff3f 	bl	801386c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80119ee:	f000 fda7 	bl	8012540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80119f2:	f001 ff09 	bl	8013808 <vPortEnterCritical>
 80119f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80119fc:	b25b      	sxtb	r3, r3
 80119fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011a02:	d103      	bne.n	8011a0c <xQueueGenericSend+0x174>
 8011a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a06:	2200      	movs	r2, #0
 8011a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011a12:	b25b      	sxtb	r3, r3
 8011a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011a18:	d103      	bne.n	8011a22 <xQueueGenericSend+0x18a>
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011a22:	f001 ff23 	bl	801386c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a26:	1d3a      	adds	r2, r7, #4
 8011a28:	f107 0314 	add.w	r3, r7, #20
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f001 f82e 	bl	8012a90 <xTaskCheckForTimeOut>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d124      	bne.n	8011a84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011a3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a3c:	f000 faa6 	bl	8011f8c <prvIsQueueFull>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d018      	beq.n	8011a78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a48:	3310      	adds	r3, #16
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 ff52 	bl	80128f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a56:	f000 fa31 	bl	8011ebc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011a5a:	f000 fd7f 	bl	801255c <xTaskResumeAll>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	f47f af7c 	bne.w	801195e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011a66:	4b0c      	ldr	r3, [pc, #48]	@ (8011a98 <xQueueGenericSend+0x200>)
 8011a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	f3bf 8f4f 	dsb	sy
 8011a72:	f3bf 8f6f 	isb	sy
 8011a76:	e772      	b.n	801195e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a7a:	f000 fa1f 	bl	8011ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a7e:	f000 fd6d 	bl	801255c <xTaskResumeAll>
 8011a82:	e76c      	b.n	801195e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a86:	f000 fa19 	bl	8011ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a8a:	f000 fd67 	bl	801255c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3738      	adds	r7, #56	@ 0x38
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	e000ed04 	.word	0xe000ed04

08011a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b090      	sub	sp, #64	@ 0x40
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
 8011aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8011aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d10b      	bne.n	8011acc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8011ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ab8:	f383 8811 	msr	BASEPRI, r3
 8011abc:	f3bf 8f6f 	isb	sy
 8011ac0:	f3bf 8f4f 	dsb	sy
 8011ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011ac6:	bf00      	nop
 8011ac8:	bf00      	nop
 8011aca:	e7fd      	b.n	8011ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d103      	bne.n	8011ada <xQueueGenericSendFromISR+0x3e>
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d101      	bne.n	8011ade <xQueueGenericSendFromISR+0x42>
 8011ada:	2301      	movs	r3, #1
 8011adc:	e000      	b.n	8011ae0 <xQueueGenericSendFromISR+0x44>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10b      	bne.n	8011afc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8011ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011af6:	bf00      	nop
 8011af8:	bf00      	nop
 8011afa:	e7fd      	b.n	8011af8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	2b02      	cmp	r3, #2
 8011b00:	d103      	bne.n	8011b0a <xQueueGenericSendFromISR+0x6e>
 8011b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d101      	bne.n	8011b0e <xQueueGenericSendFromISR+0x72>
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e000      	b.n	8011b10 <xQueueGenericSendFromISR+0x74>
 8011b0e:	2300      	movs	r3, #0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d10b      	bne.n	8011b2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	623b      	str	r3, [r7, #32]
}
 8011b26:	bf00      	nop
 8011b28:	bf00      	nop
 8011b2a:	e7fd      	b.n	8011b28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b2c:	f001 ff4c 	bl	80139c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011b30:	f3ef 8211 	mrs	r2, BASEPRI
 8011b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	61fa      	str	r2, [r7, #28]
 8011b46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011b48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d302      	bcc.n	8011b5e <xQueueGenericSendFromISR+0xc2>
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	2b02      	cmp	r3, #2
 8011b5c:	d12f      	bne.n	8011bbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	68b9      	ldr	r1, [r7, #8]
 8011b72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011b74:	f000 f912 	bl	8011d9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011b78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8011b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b80:	d112      	bne.n	8011ba8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d016      	beq.n	8011bb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b8c:	3324      	adds	r3, #36	@ 0x24
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f000 ff04 	bl	801299c <xTaskRemoveFromEventList>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00e      	beq.n	8011bb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d00b      	beq.n	8011bb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	601a      	str	r2, [r3, #0]
 8011ba6:	e007      	b.n	8011bb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011bac:	3301      	adds	r3, #1
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	b25a      	sxtb	r2, r3
 8011bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8011bbc:	e001      	b.n	8011bc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011bcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3740      	adds	r7, #64	@ 0x40
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b08c      	sub	sp, #48	@ 0x30
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011be4:	2300      	movs	r3, #0
 8011be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d10b      	bne.n	8011c0a <xQueueReceive+0x32>
	__asm volatile
 8011bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bf6:	f383 8811 	msr	BASEPRI, r3
 8011bfa:	f3bf 8f6f 	isb	sy
 8011bfe:	f3bf 8f4f 	dsb	sy
 8011c02:	623b      	str	r3, [r7, #32]
}
 8011c04:	bf00      	nop
 8011c06:	bf00      	nop
 8011c08:	e7fd      	b.n	8011c06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <xQueueReceive+0x40>
 8011c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d101      	bne.n	8011c1c <xQueueReceive+0x44>
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e000      	b.n	8011c1e <xQueueReceive+0x46>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d10b      	bne.n	8011c3a <xQueueReceive+0x62>
	__asm volatile
 8011c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c26:	f383 8811 	msr	BASEPRI, r3
 8011c2a:	f3bf 8f6f 	isb	sy
 8011c2e:	f3bf 8f4f 	dsb	sy
 8011c32:	61fb      	str	r3, [r7, #28]
}
 8011c34:	bf00      	nop
 8011c36:	bf00      	nop
 8011c38:	e7fd      	b.n	8011c36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011c3a:	f001 f875 	bl	8012d28 <xTaskGetSchedulerState>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d102      	bne.n	8011c4a <xQueueReceive+0x72>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d101      	bne.n	8011c4e <xQueueReceive+0x76>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e000      	b.n	8011c50 <xQueueReceive+0x78>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10b      	bne.n	8011c6c <xQueueReceive+0x94>
	__asm volatile
 8011c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c58:	f383 8811 	msr	BASEPRI, r3
 8011c5c:	f3bf 8f6f 	isb	sy
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	61bb      	str	r3, [r7, #24]
}
 8011c66:	bf00      	nop
 8011c68:	bf00      	nop
 8011c6a:	e7fd      	b.n	8011c68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011c6c:	f001 fdcc 	bl	8013808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01f      	beq.n	8011cbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011c7c:	68b9      	ldr	r1, [r7, #8]
 8011c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c80:	f000 f8f6 	bl	8011e70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c86:	1e5a      	subs	r2, r3, #1
 8011c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c8e:	691b      	ldr	r3, [r3, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d00f      	beq.n	8011cb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c96:	3310      	adds	r3, #16
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f000 fe7f 	bl	801299c <xTaskRemoveFromEventList>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d007      	beq.n	8011cb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8011d98 <xQueueReceive+0x1c0>)
 8011ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011caa:	601a      	str	r2, [r3, #0]
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011cb4:	f001 fdda 	bl	801386c <vPortExitCritical>
				return pdPASS;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	e069      	b.n	8011d90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d103      	bne.n	8011cca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011cc2:	f001 fdd3 	bl	801386c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	e062      	b.n	8011d90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d106      	bne.n	8011cde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011cd0:	f107 0310 	add.w	r3, r7, #16
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f000 fec5 	bl	8012a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011cde:	f001 fdc5 	bl	801386c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ce2:	f000 fc2d 	bl	8012540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ce6:	f001 fd8f 	bl	8013808 <vPortEnterCritical>
 8011cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011cf0:	b25b      	sxtb	r3, r3
 8011cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011cf6:	d103      	bne.n	8011d00 <xQueueReceive+0x128>
 8011cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011d06:	b25b      	sxtb	r3, r3
 8011d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d0c:	d103      	bne.n	8011d16 <xQueueReceive+0x13e>
 8011d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d10:	2200      	movs	r2, #0
 8011d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011d16:	f001 fda9 	bl	801386c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011d1a:	1d3a      	adds	r2, r7, #4
 8011d1c:	f107 0310 	add.w	r3, r7, #16
 8011d20:	4611      	mov	r1, r2
 8011d22:	4618      	mov	r0, r3
 8011d24:	f000 feb4 	bl	8012a90 <xTaskCheckForTimeOut>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d123      	bne.n	8011d76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d30:	f000 f916 	bl	8011f60 <prvIsQueueEmpty>
 8011d34:	4603      	mov	r3, r0
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d017      	beq.n	8011d6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d3c:	3324      	adds	r3, #36	@ 0x24
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f000 fdd8 	bl	80128f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d4a:	f000 f8b7 	bl	8011ebc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011d4e:	f000 fc05 	bl	801255c <xTaskResumeAll>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d189      	bne.n	8011c6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011d58:	4b0f      	ldr	r3, [pc, #60]	@ (8011d98 <xQueueReceive+0x1c0>)
 8011d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d5e:	601a      	str	r2, [r3, #0]
 8011d60:	f3bf 8f4f 	dsb	sy
 8011d64:	f3bf 8f6f 	isb	sy
 8011d68:	e780      	b.n	8011c6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d6c:	f000 f8a6 	bl	8011ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011d70:	f000 fbf4 	bl	801255c <xTaskResumeAll>
 8011d74:	e77a      	b.n	8011c6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d78:	f000 f8a0 	bl	8011ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011d7c:	f000 fbee 	bl	801255c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011d80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d82:	f000 f8ed 	bl	8011f60 <prvIsQueueEmpty>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	f43f af6f 	beq.w	8011c6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3730      	adds	r7, #48	@ 0x30
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	e000ed04 	.word	0xe000ed04

08011d9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011da8:	2300      	movs	r3, #0
 8011daa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011db0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d10d      	bne.n	8011dd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d14d      	bne.n	8011e5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	689b      	ldr	r3, [r3, #8]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f000 ffcc 	bl	8012d64 <xTaskPriorityDisinherit>
 8011dcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	609a      	str	r2, [r3, #8]
 8011dd4:	e043      	b.n	8011e5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d119      	bne.n	8011e10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	6858      	ldr	r0, [r3, #4]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011de4:	461a      	mov	r2, r3
 8011de6:	68b9      	ldr	r1, [r7, #8]
 8011de8:	f002 ff57 	bl	8014c9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	685a      	ldr	r2, [r3, #4]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011df4:	441a      	add	r2, r3
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	685a      	ldr	r2, [r3, #4]
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d32b      	bcc.n	8011e5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	605a      	str	r2, [r3, #4]
 8011e0e:	e026      	b.n	8011e5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	68d8      	ldr	r0, [r3, #12]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e18:	461a      	mov	r2, r3
 8011e1a:	68b9      	ldr	r1, [r7, #8]
 8011e1c:	f002 ff3d 	bl	8014c9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	68da      	ldr	r2, [r3, #12]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e28:	425b      	negs	r3, r3
 8011e2a:	441a      	add	r2, r3
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	68da      	ldr	r2, [r3, #12]
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d207      	bcs.n	8011e4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	689a      	ldr	r2, [r3, #8]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e44:	425b      	negs	r3, r3
 8011e46:	441a      	add	r2, r3
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	d105      	bne.n	8011e5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d002      	beq.n	8011e5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	1c5a      	adds	r2, r3, #1
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011e66:	697b      	ldr	r3, [r7, #20]
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3718      	adds	r7, #24
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d018      	beq.n	8011eb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	68da      	ldr	r2, [r3, #12]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e8a:	441a      	add	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	68da      	ldr	r2, [r3, #12]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d303      	bcc.n	8011ea4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	68d9      	ldr	r1, [r3, #12]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011eac:	461a      	mov	r2, r3
 8011eae:	6838      	ldr	r0, [r7, #0]
 8011eb0:	f002 fef3 	bl	8014c9a <memcpy>
	}
}
 8011eb4:	bf00      	nop
 8011eb6:	3708      	adds	r7, #8
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011ec4:	f001 fca0 	bl	8013808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011ece:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ed0:	e011      	b.n	8011ef6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d012      	beq.n	8011f00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	3324      	adds	r3, #36	@ 0x24
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f000 fd5c 	bl	801299c <xTaskRemoveFromEventList>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d001      	beq.n	8011eee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011eea:	f000 fe35 	bl	8012b58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011eee:	7bfb      	ldrb	r3, [r7, #15]
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	dce9      	bgt.n	8011ed2 <prvUnlockQueue+0x16>
 8011efe:	e000      	b.n	8011f02 <prvUnlockQueue+0x46>
					break;
 8011f00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	22ff      	movs	r2, #255	@ 0xff
 8011f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011f0a:	f001 fcaf 	bl	801386c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011f0e:	f001 fc7b 	bl	8013808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f1a:	e011      	b.n	8011f40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	691b      	ldr	r3, [r3, #16]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d012      	beq.n	8011f4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3310      	adds	r3, #16
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f000 fd37 	bl	801299c <xTaskRemoveFromEventList>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d001      	beq.n	8011f38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011f34:	f000 fe10 	bl	8012b58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011f38:	7bbb      	ldrb	r3, [r7, #14]
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	dce9      	bgt.n	8011f1c <prvUnlockQueue+0x60>
 8011f48:	e000      	b.n	8011f4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011f4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	22ff      	movs	r2, #255	@ 0xff
 8011f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011f54:	f001 fc8a 	bl	801386c <vPortExitCritical>
}
 8011f58:	bf00      	nop
 8011f5a:	3710      	adds	r7, #16
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011f68:	f001 fc4e 	bl	8013808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d102      	bne.n	8011f7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011f74:	2301      	movs	r3, #1
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	e001      	b.n	8011f7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011f7e:	f001 fc75 	bl	801386c <vPortExitCritical>

	return xReturn;
 8011f82:	68fb      	ldr	r3, [r7, #12]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3710      	adds	r7, #16
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b084      	sub	sp, #16
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011f94:	f001 fc38 	bl	8013808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d102      	bne.n	8011faa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	60fb      	str	r3, [r7, #12]
 8011fa8:	e001      	b.n	8011fae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011faa:	2300      	movs	r3, #0
 8011fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011fae:	f001 fc5d 	bl	801386c <vPortExitCritical>

	return xReturn;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b085      	sub	sp, #20
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	60fb      	str	r3, [r7, #12]
 8011fca:	e014      	b.n	8011ff6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011fcc:	4a0f      	ldr	r2, [pc, #60]	@ (801200c <vQueueAddToRegistry+0x50>)
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d10b      	bne.n	8011ff0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011fd8:	490c      	ldr	r1, [pc, #48]	@ (801200c <vQueueAddToRegistry+0x50>)
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	683a      	ldr	r2, [r7, #0]
 8011fde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011fe2:	4a0a      	ldr	r2, [pc, #40]	@ (801200c <vQueueAddToRegistry+0x50>)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	00db      	lsls	r3, r3, #3
 8011fe8:	4413      	add	r3, r2
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011fee:	e006      	b.n	8011ffe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	60fb      	str	r3, [r7, #12]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	2b07      	cmp	r3, #7
 8011ffa:	d9e7      	bls.n	8011fcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011ffc:	bf00      	nop
 8011ffe:	bf00      	nop
 8012000:	3714      	adds	r7, #20
 8012002:	46bd      	mov	sp, r7
 8012004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	240011b4 	.word	0x240011b4

08012010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012010:	b580      	push	{r7, lr}
 8012012:	b086      	sub	sp, #24
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012020:	f001 fbf2 	bl	8013808 <vPortEnterCritical>
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801202a:	b25b      	sxtb	r3, r3
 801202c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012030:	d103      	bne.n	801203a <vQueueWaitForMessageRestricted+0x2a>
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012040:	b25b      	sxtb	r3, r3
 8012042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012046:	d103      	bne.n	8012050 <vQueueWaitForMessageRestricted+0x40>
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	2200      	movs	r2, #0
 801204c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012050:	f001 fc0c 	bl	801386c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012058:	2b00      	cmp	r3, #0
 801205a:	d106      	bne.n	801206a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	3324      	adds	r3, #36	@ 0x24
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	68b9      	ldr	r1, [r7, #8]
 8012064:	4618      	mov	r0, r3
 8012066:	f000 fc6d 	bl	8012944 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801206a:	6978      	ldr	r0, [r7, #20]
 801206c:	f7ff ff26 	bl	8011ebc <prvUnlockQueue>
	}
 8012070:	bf00      	nop
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012078:	b580      	push	{r7, lr}
 801207a:	b08e      	sub	sp, #56	@ 0x38
 801207c:	af04      	add	r7, sp, #16
 801207e:	60f8      	str	r0, [r7, #12]
 8012080:	60b9      	str	r1, [r7, #8]
 8012082:	607a      	str	r2, [r7, #4]
 8012084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012088:	2b00      	cmp	r3, #0
 801208a:	d10b      	bne.n	80120a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 801208c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012090:	f383 8811 	msr	BASEPRI, r3
 8012094:	f3bf 8f6f 	isb	sy
 8012098:	f3bf 8f4f 	dsb	sy
 801209c:	623b      	str	r3, [r7, #32]
}
 801209e:	bf00      	nop
 80120a0:	bf00      	nop
 80120a2:	e7fd      	b.n	80120a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80120a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d10b      	bne.n	80120c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80120aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120ae:	f383 8811 	msr	BASEPRI, r3
 80120b2:	f3bf 8f6f 	isb	sy
 80120b6:	f3bf 8f4f 	dsb	sy
 80120ba:	61fb      	str	r3, [r7, #28]
}
 80120bc:	bf00      	nop
 80120be:	bf00      	nop
 80120c0:	e7fd      	b.n	80120be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80120c2:	23a8      	movs	r3, #168	@ 0xa8
 80120c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80120ca:	d00b      	beq.n	80120e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80120cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d0:	f383 8811 	msr	BASEPRI, r3
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	f3bf 8f4f 	dsb	sy
 80120dc:	61bb      	str	r3, [r7, #24]
}
 80120de:	bf00      	nop
 80120e0:	bf00      	nop
 80120e2:	e7fd      	b.n	80120e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80120e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80120e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d01e      	beq.n	801212a <xTaskCreateStatic+0xb2>
 80120ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d01b      	beq.n	801212a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80120f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80120fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fe:	2202      	movs	r2, #2
 8012100:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012104:	2300      	movs	r3, #0
 8012106:	9303      	str	r3, [sp, #12]
 8012108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210a:	9302      	str	r3, [sp, #8]
 801210c:	f107 0314 	add.w	r3, r7, #20
 8012110:	9301      	str	r3, [sp, #4]
 8012112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	68b9      	ldr	r1, [r7, #8]
 801211c:	68f8      	ldr	r0, [r7, #12]
 801211e:	f000 f851 	bl	80121c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012124:	f000 f8f6 	bl	8012314 <prvAddNewTaskToReadyList>
 8012128:	e001      	b.n	801212e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801212a:	2300      	movs	r3, #0
 801212c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801212e:	697b      	ldr	r3, [r7, #20]
	}
 8012130:	4618      	mov	r0, r3
 8012132:	3728      	adds	r7, #40	@ 0x28
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012138:	b580      	push	{r7, lr}
 801213a:	b08c      	sub	sp, #48	@ 0x30
 801213c:	af04      	add	r7, sp, #16
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	603b      	str	r3, [r7, #0]
 8012144:	4613      	mov	r3, r2
 8012146:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012148:	88fb      	ldrh	r3, [r7, #6]
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	4618      	mov	r0, r3
 801214e:	f001 fc7d 	bl	8013a4c <pvPortMalloc>
 8012152:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00e      	beq.n	8012178 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801215a:	20a8      	movs	r0, #168	@ 0xa8
 801215c:	f001 fc76 	bl	8013a4c <pvPortMalloc>
 8012160:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d003      	beq.n	8012170 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	697a      	ldr	r2, [r7, #20]
 801216c:	631a      	str	r2, [r3, #48]	@ 0x30
 801216e:	e005      	b.n	801217c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012170:	6978      	ldr	r0, [r7, #20]
 8012172:	f001 fd39 	bl	8013be8 <vPortFree>
 8012176:	e001      	b.n	801217c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012178:	2300      	movs	r3, #0
 801217a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d017      	beq.n	80121b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	2200      	movs	r2, #0
 8012186:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801218a:	88fa      	ldrh	r2, [r7, #6]
 801218c:	2300      	movs	r3, #0
 801218e:	9303      	str	r3, [sp, #12]
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	9302      	str	r3, [sp, #8]
 8012194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012196:	9301      	str	r3, [sp, #4]
 8012198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	68b9      	ldr	r1, [r7, #8]
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	f000 f80f 	bl	80121c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121a6:	69f8      	ldr	r0, [r7, #28]
 80121a8:	f000 f8b4 	bl	8012314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80121ac:	2301      	movs	r3, #1
 80121ae:	61bb      	str	r3, [r7, #24]
 80121b0:	e002      	b.n	80121b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80121b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80121b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80121b8:	69bb      	ldr	r3, [r7, #24]
	}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3720      	adds	r7, #32
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
	...

080121c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b088      	sub	sp, #32
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
 80121d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80121d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	461a      	mov	r2, r3
 80121dc:	21a5      	movs	r1, #165	@ 0xa5
 80121de:	f002 fc82 	bl	8014ae6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80121e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80121e6:	6879      	ldr	r1, [r7, #4]
 80121e8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80121ec:	440b      	add	r3, r1
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	4413      	add	r3, r2
 80121f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	f023 0307 	bic.w	r3, r3, #7
 80121fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	f003 0307 	and.w	r3, r3, #7
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00b      	beq.n	801221e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8012206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	617b      	str	r3, [r7, #20]
}
 8012218:	bf00      	nop
 801221a:	bf00      	nop
 801221c:	e7fd      	b.n	801221a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d01f      	beq.n	8012264 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012224:	2300      	movs	r3, #0
 8012226:	61fb      	str	r3, [r7, #28]
 8012228:	e012      	b.n	8012250 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801222a:	68ba      	ldr	r2, [r7, #8]
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	4413      	add	r3, r2
 8012230:	7819      	ldrb	r1, [r3, #0]
 8012232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	4413      	add	r3, r2
 8012238:	3334      	adds	r3, #52	@ 0x34
 801223a:	460a      	mov	r2, r1
 801223c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801223e:	68ba      	ldr	r2, [r7, #8]
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	4413      	add	r3, r2
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d006      	beq.n	8012258 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	3301      	adds	r3, #1
 801224e:	61fb      	str	r3, [r7, #28]
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	2b0f      	cmp	r3, #15
 8012254:	d9e9      	bls.n	801222a <prvInitialiseNewTask+0x66>
 8012256:	e000      	b.n	801225a <prvInitialiseNewTask+0x96>
			{
				break;
 8012258:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801225c:	2200      	movs	r2, #0
 801225e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012262:	e003      	b.n	801226c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012266:	2200      	movs	r2, #0
 8012268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801226c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801226e:	2b37      	cmp	r3, #55	@ 0x37
 8012270:	d901      	bls.n	8012276 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012272:	2337      	movs	r3, #55	@ 0x37
 8012274:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012278:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801227a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801227e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012280:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012284:	2200      	movs	r2, #0
 8012286:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801228a:	3304      	adds	r3, #4
 801228c:	4618      	mov	r0, r3
 801228e:	f7ff f965 	bl	801155c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012294:	3318      	adds	r3, #24
 8012296:	4618      	mov	r0, r3
 8012298:	f7ff f960 	bl	801155c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801229c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801229e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80122a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80122ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80122b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b4:	2200      	movs	r2, #0
 80122b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80122ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122bc:	2200      	movs	r2, #0
 80122be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80122c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c4:	3354      	adds	r3, #84	@ 0x54
 80122c6:	224c      	movs	r2, #76	@ 0x4c
 80122c8:	2100      	movs	r1, #0
 80122ca:	4618      	mov	r0, r3
 80122cc:	f002 fc0b 	bl	8014ae6 <memset>
 80122d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d2:	4a0d      	ldr	r2, [pc, #52]	@ (8012308 <prvInitialiseNewTask+0x144>)
 80122d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80122d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d8:	4a0c      	ldr	r2, [pc, #48]	@ (801230c <prvInitialiseNewTask+0x148>)
 80122da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80122dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122de:	4a0c      	ldr	r2, [pc, #48]	@ (8012310 <prvInitialiseNewTask+0x14c>)
 80122e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80122e2:	683a      	ldr	r2, [r7, #0]
 80122e4:	68f9      	ldr	r1, [r7, #12]
 80122e6:	69b8      	ldr	r0, [r7, #24]
 80122e8:	f001 f95a 	bl	80135a0 <pxPortInitialiseStack>
 80122ec:	4602      	mov	r2, r0
 80122ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80122f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80122f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80122fe:	bf00      	nop
 8012300:	3720      	adds	r7, #32
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	240079dc 	.word	0x240079dc
 801230c:	24007a44 	.word	0x24007a44
 8012310:	24007aac 	.word	0x24007aac

08012314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801231c:	f001 fa74 	bl	8013808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012320:	4b2d      	ldr	r3, [pc, #180]	@ (80123d8 <prvAddNewTaskToReadyList+0xc4>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3301      	adds	r3, #1
 8012326:	4a2c      	ldr	r2, [pc, #176]	@ (80123d8 <prvAddNewTaskToReadyList+0xc4>)
 8012328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801232a:	4b2c      	ldr	r3, [pc, #176]	@ (80123dc <prvAddNewTaskToReadyList+0xc8>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d109      	bne.n	8012346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012332:	4a2a      	ldr	r2, [pc, #168]	@ (80123dc <prvAddNewTaskToReadyList+0xc8>)
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012338:	4b27      	ldr	r3, [pc, #156]	@ (80123d8 <prvAddNewTaskToReadyList+0xc4>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d110      	bne.n	8012362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012340:	f000 fc2e 	bl	8012ba0 <prvInitialiseTaskLists>
 8012344:	e00d      	b.n	8012362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012346:	4b26      	ldr	r3, [pc, #152]	@ (80123e0 <prvAddNewTaskToReadyList+0xcc>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d109      	bne.n	8012362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801234e:	4b23      	ldr	r3, [pc, #140]	@ (80123dc <prvAddNewTaskToReadyList+0xc8>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012358:	429a      	cmp	r2, r3
 801235a:	d802      	bhi.n	8012362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801235c:	4a1f      	ldr	r2, [pc, #124]	@ (80123dc <prvAddNewTaskToReadyList+0xc8>)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012362:	4b20      	ldr	r3, [pc, #128]	@ (80123e4 <prvAddNewTaskToReadyList+0xd0>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	3301      	adds	r3, #1
 8012368:	4a1e      	ldr	r2, [pc, #120]	@ (80123e4 <prvAddNewTaskToReadyList+0xd0>)
 801236a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801236c:	4b1d      	ldr	r3, [pc, #116]	@ (80123e4 <prvAddNewTaskToReadyList+0xd0>)
 801236e:	681a      	ldr	r2, [r3, #0]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012378:	4b1b      	ldr	r3, [pc, #108]	@ (80123e8 <prvAddNewTaskToReadyList+0xd4>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	429a      	cmp	r2, r3
 801237e:	d903      	bls.n	8012388 <prvAddNewTaskToReadyList+0x74>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012384:	4a18      	ldr	r2, [pc, #96]	@ (80123e8 <prvAddNewTaskToReadyList+0xd4>)
 8012386:	6013      	str	r3, [r2, #0]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801238c:	4613      	mov	r3, r2
 801238e:	009b      	lsls	r3, r3, #2
 8012390:	4413      	add	r3, r2
 8012392:	009b      	lsls	r3, r3, #2
 8012394:	4a15      	ldr	r2, [pc, #84]	@ (80123ec <prvAddNewTaskToReadyList+0xd8>)
 8012396:	441a      	add	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	3304      	adds	r3, #4
 801239c:	4619      	mov	r1, r3
 801239e:	4610      	mov	r0, r2
 80123a0:	f7ff f8e9 	bl	8011576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80123a4:	f001 fa62 	bl	801386c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80123a8:	4b0d      	ldr	r3, [pc, #52]	@ (80123e0 <prvAddNewTaskToReadyList+0xcc>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d00e      	beq.n	80123ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80123b0:	4b0a      	ldr	r3, [pc, #40]	@ (80123dc <prvAddNewTaskToReadyList+0xc8>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d207      	bcs.n	80123ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80123be:	4b0c      	ldr	r3, [pc, #48]	@ (80123f0 <prvAddNewTaskToReadyList+0xdc>)
 80123c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123c4:	601a      	str	r2, [r3, #0]
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123ce:	bf00      	nop
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	240016c8 	.word	0x240016c8
 80123dc:	240011f4 	.word	0x240011f4
 80123e0:	240016d4 	.word	0x240016d4
 80123e4:	240016e4 	.word	0x240016e4
 80123e8:	240016d0 	.word	0x240016d0
 80123ec:	240011f8 	.word	0x240011f8
 80123f0:	e000ed04 	.word	0xe000ed04

080123f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80123fc:	2300      	movs	r3, #0
 80123fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d018      	beq.n	8012438 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012406:	4b14      	ldr	r3, [pc, #80]	@ (8012458 <vTaskDelay+0x64>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00b      	beq.n	8012426 <vTaskDelay+0x32>
	__asm volatile
 801240e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012412:	f383 8811 	msr	BASEPRI, r3
 8012416:	f3bf 8f6f 	isb	sy
 801241a:	f3bf 8f4f 	dsb	sy
 801241e:	60bb      	str	r3, [r7, #8]
}
 8012420:	bf00      	nop
 8012422:	bf00      	nop
 8012424:	e7fd      	b.n	8012422 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012426:	f000 f88b 	bl	8012540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801242a:	2100      	movs	r1, #0
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 fd09 	bl	8012e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012432:	f000 f893 	bl	801255c <xTaskResumeAll>
 8012436:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d107      	bne.n	801244e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801243e:	4b07      	ldr	r3, [pc, #28]	@ (801245c <vTaskDelay+0x68>)
 8012440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	f3bf 8f4f 	dsb	sy
 801244a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801244e:	bf00      	nop
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	240016f0 	.word	0x240016f0
 801245c:	e000ed04 	.word	0xe000ed04

08012460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b08a      	sub	sp, #40	@ 0x28
 8012464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012466:	2300      	movs	r3, #0
 8012468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801246a:	2300      	movs	r3, #0
 801246c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801246e:	463a      	mov	r2, r7
 8012470:	1d39      	adds	r1, r7, #4
 8012472:	f107 0308 	add.w	r3, r7, #8
 8012476:	4618      	mov	r0, r3
 8012478:	f7ff f81c 	bl	80114b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801247c:	6839      	ldr	r1, [r7, #0]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	68ba      	ldr	r2, [r7, #8]
 8012482:	9202      	str	r2, [sp, #8]
 8012484:	9301      	str	r3, [sp, #4]
 8012486:	2300      	movs	r3, #0
 8012488:	9300      	str	r3, [sp, #0]
 801248a:	2300      	movs	r3, #0
 801248c:	460a      	mov	r2, r1
 801248e:	4924      	ldr	r1, [pc, #144]	@ (8012520 <vTaskStartScheduler+0xc0>)
 8012490:	4824      	ldr	r0, [pc, #144]	@ (8012524 <vTaskStartScheduler+0xc4>)
 8012492:	f7ff fdf1 	bl	8012078 <xTaskCreateStatic>
 8012496:	4603      	mov	r3, r0
 8012498:	4a23      	ldr	r2, [pc, #140]	@ (8012528 <vTaskStartScheduler+0xc8>)
 801249a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801249c:	4b22      	ldr	r3, [pc, #136]	@ (8012528 <vTaskStartScheduler+0xc8>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d002      	beq.n	80124aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80124a4:	2301      	movs	r3, #1
 80124a6:	617b      	str	r3, [r7, #20]
 80124a8:	e001      	b.n	80124ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80124aa:	2300      	movs	r3, #0
 80124ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d102      	bne.n	80124ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80124b4:	f000 fd1a 	bl	8012eec <xTimerCreateTimerTask>
 80124b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	2b01      	cmp	r3, #1
 80124be:	d11b      	bne.n	80124f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	613b      	str	r3, [r7, #16]
}
 80124d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80124d4:	4b15      	ldr	r3, [pc, #84]	@ (801252c <vTaskStartScheduler+0xcc>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	3354      	adds	r3, #84	@ 0x54
 80124da:	4a15      	ldr	r2, [pc, #84]	@ (8012530 <vTaskStartScheduler+0xd0>)
 80124dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80124de:	4b15      	ldr	r3, [pc, #84]	@ (8012534 <vTaskStartScheduler+0xd4>)
 80124e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80124e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80124e6:	4b14      	ldr	r3, [pc, #80]	@ (8012538 <vTaskStartScheduler+0xd8>)
 80124e8:	2201      	movs	r2, #1
 80124ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80124ec:	4b13      	ldr	r3, [pc, #76]	@ (801253c <vTaskStartScheduler+0xdc>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80124f2:	f001 f8e5 	bl	80136c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80124f6:	e00f      	b.n	8012518 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80124fe:	d10b      	bne.n	8012518 <vTaskStartScheduler+0xb8>
	__asm volatile
 8012500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012504:	f383 8811 	msr	BASEPRI, r3
 8012508:	f3bf 8f6f 	isb	sy
 801250c:	f3bf 8f4f 	dsb	sy
 8012510:	60fb      	str	r3, [r7, #12]
}
 8012512:	bf00      	nop
 8012514:	bf00      	nop
 8012516:	e7fd      	b.n	8012514 <vTaskStartScheduler+0xb4>
}
 8012518:	bf00      	nop
 801251a:	3718      	adds	r7, #24
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	08015834 	.word	0x08015834
 8012524:	08012b71 	.word	0x08012b71
 8012528:	240016ec 	.word	0x240016ec
 801252c:	240011f4 	.word	0x240011f4
 8012530:	24000160 	.word	0x24000160
 8012534:	240016e8 	.word	0x240016e8
 8012538:	240016d4 	.word	0x240016d4
 801253c:	240016cc 	.word	0x240016cc

08012540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012540:	b480      	push	{r7}
 8012542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012544:	4b04      	ldr	r3, [pc, #16]	@ (8012558 <vTaskSuspendAll+0x18>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	3301      	adds	r3, #1
 801254a:	4a03      	ldr	r2, [pc, #12]	@ (8012558 <vTaskSuspendAll+0x18>)
 801254c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801254e:	bf00      	nop
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr
 8012558:	240016f0 	.word	0x240016f0

0801255c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012562:	2300      	movs	r3, #0
 8012564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012566:	2300      	movs	r3, #0
 8012568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801256a:	4b42      	ldr	r3, [pc, #264]	@ (8012674 <xTaskResumeAll+0x118>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d10b      	bne.n	801258a <xTaskResumeAll+0x2e>
	__asm volatile
 8012572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	603b      	str	r3, [r7, #0]
}
 8012584:	bf00      	nop
 8012586:	bf00      	nop
 8012588:	e7fd      	b.n	8012586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801258a:	f001 f93d 	bl	8013808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801258e:	4b39      	ldr	r3, [pc, #228]	@ (8012674 <xTaskResumeAll+0x118>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	3b01      	subs	r3, #1
 8012594:	4a37      	ldr	r2, [pc, #220]	@ (8012674 <xTaskResumeAll+0x118>)
 8012596:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012598:	4b36      	ldr	r3, [pc, #216]	@ (8012674 <xTaskResumeAll+0x118>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d162      	bne.n	8012666 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80125a0:	4b35      	ldr	r3, [pc, #212]	@ (8012678 <xTaskResumeAll+0x11c>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d05e      	beq.n	8012666 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80125a8:	e02f      	b.n	801260a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125aa:	4b34      	ldr	r3, [pc, #208]	@ (801267c <xTaskResumeAll+0x120>)
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	3318      	adds	r3, #24
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7ff f83a 	bl	8011630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	3304      	adds	r3, #4
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7ff f835 	bl	8011630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ca:	4b2d      	ldr	r3, [pc, #180]	@ (8012680 <xTaskResumeAll+0x124>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d903      	bls.n	80125da <xTaskResumeAll+0x7e>
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125d6:	4a2a      	ldr	r2, [pc, #168]	@ (8012680 <xTaskResumeAll+0x124>)
 80125d8:	6013      	str	r3, [r2, #0]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125de:	4613      	mov	r3, r2
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	4413      	add	r3, r2
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	4a27      	ldr	r2, [pc, #156]	@ (8012684 <xTaskResumeAll+0x128>)
 80125e8:	441a      	add	r2, r3
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	3304      	adds	r3, #4
 80125ee:	4619      	mov	r1, r3
 80125f0:	4610      	mov	r0, r2
 80125f2:	f7fe ffc0 	bl	8011576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125fa:	4b23      	ldr	r3, [pc, #140]	@ (8012688 <xTaskResumeAll+0x12c>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012600:	429a      	cmp	r2, r3
 8012602:	d302      	bcc.n	801260a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012604:	4b21      	ldr	r3, [pc, #132]	@ (801268c <xTaskResumeAll+0x130>)
 8012606:	2201      	movs	r2, #1
 8012608:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801260a:	4b1c      	ldr	r3, [pc, #112]	@ (801267c <xTaskResumeAll+0x120>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1cb      	bne.n	80125aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d001      	beq.n	801261c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012618:	f000 fb66 	bl	8012ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801261c:	4b1c      	ldr	r3, [pc, #112]	@ (8012690 <xTaskResumeAll+0x134>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d010      	beq.n	801264a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012628:	f000 f846 	bl	80126b8 <xTaskIncrementTick>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012632:	4b16      	ldr	r3, [pc, #88]	@ (801268c <xTaskResumeAll+0x130>)
 8012634:	2201      	movs	r2, #1
 8012636:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	3b01      	subs	r3, #1
 801263c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d1f1      	bne.n	8012628 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8012644:	4b12      	ldr	r3, [pc, #72]	@ (8012690 <xTaskResumeAll+0x134>)
 8012646:	2200      	movs	r2, #0
 8012648:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801264a:	4b10      	ldr	r3, [pc, #64]	@ (801268c <xTaskResumeAll+0x130>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d009      	beq.n	8012666 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012652:	2301      	movs	r3, #1
 8012654:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012656:	4b0f      	ldr	r3, [pc, #60]	@ (8012694 <xTaskResumeAll+0x138>)
 8012658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801265c:	601a      	str	r2, [r3, #0]
 801265e:	f3bf 8f4f 	dsb	sy
 8012662:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012666:	f001 f901 	bl	801386c <vPortExitCritical>

	return xAlreadyYielded;
 801266a:	68bb      	ldr	r3, [r7, #8]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	240016f0 	.word	0x240016f0
 8012678:	240016c8 	.word	0x240016c8
 801267c:	24001688 	.word	0x24001688
 8012680:	240016d0 	.word	0x240016d0
 8012684:	240011f8 	.word	0x240011f8
 8012688:	240011f4 	.word	0x240011f4
 801268c:	240016dc 	.word	0x240016dc
 8012690:	240016d8 	.word	0x240016d8
 8012694:	e000ed04 	.word	0xe000ed04

08012698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801269e:	4b05      	ldr	r3, [pc, #20]	@ (80126b4 <xTaskGetTickCount+0x1c>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80126a4:	687b      	ldr	r3, [r7, #4]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
 80126b4:	240016cc 	.word	0x240016cc

080126b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b086      	sub	sp, #24
 80126bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80126be:	2300      	movs	r3, #0
 80126c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126c2:	4b4f      	ldr	r3, [pc, #316]	@ (8012800 <xTaskIncrementTick+0x148>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	f040 8090 	bne.w	80127ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80126cc:	4b4d      	ldr	r3, [pc, #308]	@ (8012804 <xTaskIncrementTick+0x14c>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	3301      	adds	r3, #1
 80126d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80126d4:	4a4b      	ldr	r2, [pc, #300]	@ (8012804 <xTaskIncrementTick+0x14c>)
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d121      	bne.n	8012724 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80126e0:	4b49      	ldr	r3, [pc, #292]	@ (8012808 <xTaskIncrementTick+0x150>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00b      	beq.n	8012702 <xTaskIncrementTick+0x4a>
	__asm volatile
 80126ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ee:	f383 8811 	msr	BASEPRI, r3
 80126f2:	f3bf 8f6f 	isb	sy
 80126f6:	f3bf 8f4f 	dsb	sy
 80126fa:	603b      	str	r3, [r7, #0]
}
 80126fc:	bf00      	nop
 80126fe:	bf00      	nop
 8012700:	e7fd      	b.n	80126fe <xTaskIncrementTick+0x46>
 8012702:	4b41      	ldr	r3, [pc, #260]	@ (8012808 <xTaskIncrementTick+0x150>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	60fb      	str	r3, [r7, #12]
 8012708:	4b40      	ldr	r3, [pc, #256]	@ (801280c <xTaskIncrementTick+0x154>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a3e      	ldr	r2, [pc, #248]	@ (8012808 <xTaskIncrementTick+0x150>)
 801270e:	6013      	str	r3, [r2, #0]
 8012710:	4a3e      	ldr	r2, [pc, #248]	@ (801280c <xTaskIncrementTick+0x154>)
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	6013      	str	r3, [r2, #0]
 8012716:	4b3e      	ldr	r3, [pc, #248]	@ (8012810 <xTaskIncrementTick+0x158>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	3301      	adds	r3, #1
 801271c:	4a3c      	ldr	r2, [pc, #240]	@ (8012810 <xTaskIncrementTick+0x158>)
 801271e:	6013      	str	r3, [r2, #0]
 8012720:	f000 fae2 	bl	8012ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012724:	4b3b      	ldr	r3, [pc, #236]	@ (8012814 <xTaskIncrementTick+0x15c>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	693a      	ldr	r2, [r7, #16]
 801272a:	429a      	cmp	r2, r3
 801272c:	d349      	bcc.n	80127c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801272e:	4b36      	ldr	r3, [pc, #216]	@ (8012808 <xTaskIncrementTick+0x150>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d104      	bne.n	8012742 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012738:	4b36      	ldr	r3, [pc, #216]	@ (8012814 <xTaskIncrementTick+0x15c>)
 801273a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801273e:	601a      	str	r2, [r3, #0]
					break;
 8012740:	e03f      	b.n	80127c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012742:	4b31      	ldr	r3, [pc, #196]	@ (8012808 <xTaskIncrementTick+0x150>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012752:	693a      	ldr	r2, [r7, #16]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	429a      	cmp	r2, r3
 8012758:	d203      	bcs.n	8012762 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801275a:	4a2e      	ldr	r2, [pc, #184]	@ (8012814 <xTaskIncrementTick+0x15c>)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012760:	e02f      	b.n	80127c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	3304      	adds	r3, #4
 8012766:	4618      	mov	r0, r3
 8012768:	f7fe ff62 	bl	8011630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012770:	2b00      	cmp	r3, #0
 8012772:	d004      	beq.n	801277e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	3318      	adds	r3, #24
 8012778:	4618      	mov	r0, r3
 801277a:	f7fe ff59 	bl	8011630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012782:	4b25      	ldr	r3, [pc, #148]	@ (8012818 <xTaskIncrementTick+0x160>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	429a      	cmp	r2, r3
 8012788:	d903      	bls.n	8012792 <xTaskIncrementTick+0xda>
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801278e:	4a22      	ldr	r2, [pc, #136]	@ (8012818 <xTaskIncrementTick+0x160>)
 8012790:	6013      	str	r3, [r2, #0]
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012796:	4613      	mov	r3, r2
 8012798:	009b      	lsls	r3, r3, #2
 801279a:	4413      	add	r3, r2
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	4a1f      	ldr	r2, [pc, #124]	@ (801281c <xTaskIncrementTick+0x164>)
 80127a0:	441a      	add	r2, r3
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	3304      	adds	r3, #4
 80127a6:	4619      	mov	r1, r3
 80127a8:	4610      	mov	r0, r2
 80127aa:	f7fe fee4 	bl	8011576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127b2:	4b1b      	ldr	r3, [pc, #108]	@ (8012820 <xTaskIncrementTick+0x168>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d3b8      	bcc.n	801272e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80127bc:	2301      	movs	r3, #1
 80127be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80127c0:	e7b5      	b.n	801272e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80127c2:	4b17      	ldr	r3, [pc, #92]	@ (8012820 <xTaskIncrementTick+0x168>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127c8:	4914      	ldr	r1, [pc, #80]	@ (801281c <xTaskIncrementTick+0x164>)
 80127ca:	4613      	mov	r3, r2
 80127cc:	009b      	lsls	r3, r3, #2
 80127ce:	4413      	add	r3, r2
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	440b      	add	r3, r1
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	2b01      	cmp	r3, #1
 80127d8:	d901      	bls.n	80127de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80127da:	2301      	movs	r3, #1
 80127dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80127de:	4b11      	ldr	r3, [pc, #68]	@ (8012824 <xTaskIncrementTick+0x16c>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d007      	beq.n	80127f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80127e6:	2301      	movs	r3, #1
 80127e8:	617b      	str	r3, [r7, #20]
 80127ea:	e004      	b.n	80127f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80127ec:	4b0e      	ldr	r3, [pc, #56]	@ (8012828 <xTaskIncrementTick+0x170>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	3301      	adds	r3, #1
 80127f2:	4a0d      	ldr	r2, [pc, #52]	@ (8012828 <xTaskIncrementTick+0x170>)
 80127f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80127f6:	697b      	ldr	r3, [r7, #20]
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3718      	adds	r7, #24
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	240016f0 	.word	0x240016f0
 8012804:	240016cc 	.word	0x240016cc
 8012808:	24001680 	.word	0x24001680
 801280c:	24001684 	.word	0x24001684
 8012810:	240016e0 	.word	0x240016e0
 8012814:	240016e8 	.word	0x240016e8
 8012818:	240016d0 	.word	0x240016d0
 801281c:	240011f8 	.word	0x240011f8
 8012820:	240011f4 	.word	0x240011f4
 8012824:	240016dc 	.word	0x240016dc
 8012828:	240016d8 	.word	0x240016d8

0801282c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801282c:	b480      	push	{r7}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012832:	4b2b      	ldr	r3, [pc, #172]	@ (80128e0 <vTaskSwitchContext+0xb4>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d003      	beq.n	8012842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801283a:	4b2a      	ldr	r3, [pc, #168]	@ (80128e4 <vTaskSwitchContext+0xb8>)
 801283c:	2201      	movs	r2, #1
 801283e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012840:	e047      	b.n	80128d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8012842:	4b28      	ldr	r3, [pc, #160]	@ (80128e4 <vTaskSwitchContext+0xb8>)
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012848:	4b27      	ldr	r3, [pc, #156]	@ (80128e8 <vTaskSwitchContext+0xbc>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	60fb      	str	r3, [r7, #12]
 801284e:	e011      	b.n	8012874 <vTaskSwitchContext+0x48>
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d10b      	bne.n	801286e <vTaskSwitchContext+0x42>
	__asm volatile
 8012856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801285a:	f383 8811 	msr	BASEPRI, r3
 801285e:	f3bf 8f6f 	isb	sy
 8012862:	f3bf 8f4f 	dsb	sy
 8012866:	607b      	str	r3, [r7, #4]
}
 8012868:	bf00      	nop
 801286a:	bf00      	nop
 801286c:	e7fd      	b.n	801286a <vTaskSwitchContext+0x3e>
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	3b01      	subs	r3, #1
 8012872:	60fb      	str	r3, [r7, #12]
 8012874:	491d      	ldr	r1, [pc, #116]	@ (80128ec <vTaskSwitchContext+0xc0>)
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	4613      	mov	r3, r2
 801287a:	009b      	lsls	r3, r3, #2
 801287c:	4413      	add	r3, r2
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	440b      	add	r3, r1
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d0e3      	beq.n	8012850 <vTaskSwitchContext+0x24>
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	4613      	mov	r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	4413      	add	r3, r2
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	4a16      	ldr	r2, [pc, #88]	@ (80128ec <vTaskSwitchContext+0xc0>)
 8012894:	4413      	add	r3, r2
 8012896:	60bb      	str	r3, [r7, #8]
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	685a      	ldr	r2, [r3, #4]
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	605a      	str	r2, [r3, #4]
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	685a      	ldr	r2, [r3, #4]
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	3308      	adds	r3, #8
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d104      	bne.n	80128b8 <vTaskSwitchContext+0x8c>
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	685a      	ldr	r2, [r3, #4]
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	605a      	str	r2, [r3, #4]
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	68db      	ldr	r3, [r3, #12]
 80128be:	4a0c      	ldr	r2, [pc, #48]	@ (80128f0 <vTaskSwitchContext+0xc4>)
 80128c0:	6013      	str	r3, [r2, #0]
 80128c2:	4a09      	ldr	r2, [pc, #36]	@ (80128e8 <vTaskSwitchContext+0xbc>)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80128c8:	4b09      	ldr	r3, [pc, #36]	@ (80128f0 <vTaskSwitchContext+0xc4>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	3354      	adds	r3, #84	@ 0x54
 80128ce:	4a09      	ldr	r2, [pc, #36]	@ (80128f4 <vTaskSwitchContext+0xc8>)
 80128d0:	6013      	str	r3, [r2, #0]
}
 80128d2:	bf00      	nop
 80128d4:	3714      	adds	r7, #20
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	240016f0 	.word	0x240016f0
 80128e4:	240016dc 	.word	0x240016dc
 80128e8:	240016d0 	.word	0x240016d0
 80128ec:	240011f8 	.word	0x240011f8
 80128f0:	240011f4 	.word	0x240011f4
 80128f4:	24000160 	.word	0x24000160

080128f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d10b      	bne.n	8012920 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801290c:	f383 8811 	msr	BASEPRI, r3
 8012910:	f3bf 8f6f 	isb	sy
 8012914:	f3bf 8f4f 	dsb	sy
 8012918:	60fb      	str	r3, [r7, #12]
}
 801291a:	bf00      	nop
 801291c:	bf00      	nop
 801291e:	e7fd      	b.n	801291c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012920:	4b07      	ldr	r3, [pc, #28]	@ (8012940 <vTaskPlaceOnEventList+0x48>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	3318      	adds	r3, #24
 8012926:	4619      	mov	r1, r3
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f7fe fe48 	bl	80115be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801292e:	2101      	movs	r1, #1
 8012930:	6838      	ldr	r0, [r7, #0]
 8012932:	f000 fa87 	bl	8012e44 <prvAddCurrentTaskToDelayedList>
}
 8012936:	bf00      	nop
 8012938:	3710      	adds	r7, #16
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	240011f4 	.word	0x240011f4

08012944 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012944:	b580      	push	{r7, lr}
 8012946:	b086      	sub	sp, #24
 8012948:	af00      	add	r7, sp, #0
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	60b9      	str	r1, [r7, #8]
 801294e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d10b      	bne.n	801296e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8012956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801295a:	f383 8811 	msr	BASEPRI, r3
 801295e:	f3bf 8f6f 	isb	sy
 8012962:	f3bf 8f4f 	dsb	sy
 8012966:	617b      	str	r3, [r7, #20]
}
 8012968:	bf00      	nop
 801296a:	bf00      	nop
 801296c:	e7fd      	b.n	801296a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801296e:	4b0a      	ldr	r3, [pc, #40]	@ (8012998 <vTaskPlaceOnEventListRestricted+0x54>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	3318      	adds	r3, #24
 8012974:	4619      	mov	r1, r3
 8012976:	68f8      	ldr	r0, [r7, #12]
 8012978:	f7fe fdfd 	bl	8011576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d002      	beq.n	8012988 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012986:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012988:	6879      	ldr	r1, [r7, #4]
 801298a:	68b8      	ldr	r0, [r7, #8]
 801298c:	f000 fa5a 	bl	8012e44 <prvAddCurrentTaskToDelayedList>
	}
 8012990:	bf00      	nop
 8012992:	3718      	adds	r7, #24
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	240011f4 	.word	0x240011f4

0801299c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b086      	sub	sp, #24
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d10b      	bne.n	80129ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80129b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b6:	f383 8811 	msr	BASEPRI, r3
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	f3bf 8f4f 	dsb	sy
 80129c2:	60fb      	str	r3, [r7, #12]
}
 80129c4:	bf00      	nop
 80129c6:	bf00      	nop
 80129c8:	e7fd      	b.n	80129c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	3318      	adds	r3, #24
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7fe fe2e 	bl	8011630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129d4:	4b1d      	ldr	r3, [pc, #116]	@ (8012a4c <xTaskRemoveFromEventList+0xb0>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d11d      	bne.n	8012a18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	3304      	adds	r3, #4
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7fe fe25 	bl	8011630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129ea:	4b19      	ldr	r3, [pc, #100]	@ (8012a50 <xTaskRemoveFromEventList+0xb4>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d903      	bls.n	80129fa <xTaskRemoveFromEventList+0x5e>
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129f6:	4a16      	ldr	r2, [pc, #88]	@ (8012a50 <xTaskRemoveFromEventList+0xb4>)
 80129f8:	6013      	str	r3, [r2, #0]
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129fe:	4613      	mov	r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	4413      	add	r3, r2
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	4a13      	ldr	r2, [pc, #76]	@ (8012a54 <xTaskRemoveFromEventList+0xb8>)
 8012a08:	441a      	add	r2, r3
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	3304      	adds	r3, #4
 8012a0e:	4619      	mov	r1, r3
 8012a10:	4610      	mov	r0, r2
 8012a12:	f7fe fdb0 	bl	8011576 <vListInsertEnd>
 8012a16:	e005      	b.n	8012a24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	3318      	adds	r3, #24
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	480e      	ldr	r0, [pc, #56]	@ (8012a58 <xTaskRemoveFromEventList+0xbc>)
 8012a20:	f7fe fda9 	bl	8011576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a28:	4b0c      	ldr	r3, [pc, #48]	@ (8012a5c <xTaskRemoveFromEventList+0xc0>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d905      	bls.n	8012a3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012a32:	2301      	movs	r3, #1
 8012a34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012a36:	4b0a      	ldr	r3, [pc, #40]	@ (8012a60 <xTaskRemoveFromEventList+0xc4>)
 8012a38:	2201      	movs	r2, #1
 8012a3a:	601a      	str	r2, [r3, #0]
 8012a3c:	e001      	b.n	8012a42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012a42:	697b      	ldr	r3, [r7, #20]
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3718      	adds	r7, #24
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	240016f0 	.word	0x240016f0
 8012a50:	240016d0 	.word	0x240016d0
 8012a54:	240011f8 	.word	0x240011f8
 8012a58:	24001688 	.word	0x24001688
 8012a5c:	240011f4 	.word	0x240011f4
 8012a60:	240016dc 	.word	0x240016dc

08012a64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012a64:	b480      	push	{r7}
 8012a66:	b083      	sub	sp, #12
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012a6c:	4b06      	ldr	r3, [pc, #24]	@ (8012a88 <vTaskInternalSetTimeOutState+0x24>)
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012a74:	4b05      	ldr	r3, [pc, #20]	@ (8012a8c <vTaskInternalSetTimeOutState+0x28>)
 8012a76:	681a      	ldr	r2, [r3, #0]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	605a      	str	r2, [r3, #4]
}
 8012a7c:	bf00      	nop
 8012a7e:	370c      	adds	r7, #12
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr
 8012a88:	240016e0 	.word	0x240016e0
 8012a8c:	240016cc 	.word	0x240016cc

08012a90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b088      	sub	sp, #32
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d10b      	bne.n	8012ab8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa4:	f383 8811 	msr	BASEPRI, r3
 8012aa8:	f3bf 8f6f 	isb	sy
 8012aac:	f3bf 8f4f 	dsb	sy
 8012ab0:	613b      	str	r3, [r7, #16]
}
 8012ab2:	bf00      	nop
 8012ab4:	bf00      	nop
 8012ab6:	e7fd      	b.n	8012ab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d10b      	bne.n	8012ad6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	60fb      	str	r3, [r7, #12]
}
 8012ad0:	bf00      	nop
 8012ad2:	bf00      	nop
 8012ad4:	e7fd      	b.n	8012ad2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012ad6:	f000 fe97 	bl	8013808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012ada:	4b1d      	ldr	r3, [pc, #116]	@ (8012b50 <xTaskCheckForTimeOut+0xc0>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	69ba      	ldr	r2, [r7, #24]
 8012ae6:	1ad3      	subs	r3, r2, r3
 8012ae8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012af2:	d102      	bne.n	8012afa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012af4:	2300      	movs	r3, #0
 8012af6:	61fb      	str	r3, [r7, #28]
 8012af8:	e023      	b.n	8012b42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681a      	ldr	r2, [r3, #0]
 8012afe:	4b15      	ldr	r3, [pc, #84]	@ (8012b54 <xTaskCheckForTimeOut+0xc4>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d007      	beq.n	8012b16 <xTaskCheckForTimeOut+0x86>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	69ba      	ldr	r2, [r7, #24]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d302      	bcc.n	8012b16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012b10:	2301      	movs	r3, #1
 8012b12:	61fb      	str	r3, [r7, #28]
 8012b14:	e015      	b.n	8012b42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	697a      	ldr	r2, [r7, #20]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d20b      	bcs.n	8012b38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	1ad2      	subs	r2, r2, r3
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7ff ff99 	bl	8012a64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012b32:	2300      	movs	r3, #0
 8012b34:	61fb      	str	r3, [r7, #28]
 8012b36:	e004      	b.n	8012b42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012b3e:	2301      	movs	r3, #1
 8012b40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012b42:	f000 fe93 	bl	801386c <vPortExitCritical>

	return xReturn;
 8012b46:	69fb      	ldr	r3, [r7, #28]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3720      	adds	r7, #32
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	240016cc 	.word	0x240016cc
 8012b54:	240016e0 	.word	0x240016e0

08012b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012b58:	b480      	push	{r7}
 8012b5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012b5c:	4b03      	ldr	r3, [pc, #12]	@ (8012b6c <vTaskMissedYield+0x14>)
 8012b5e:	2201      	movs	r2, #1
 8012b60:	601a      	str	r2, [r3, #0]
}
 8012b62:	bf00      	nop
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr
 8012b6c:	240016dc 	.word	0x240016dc

08012b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012b78:	f000 f852 	bl	8012c20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012b7c:	4b06      	ldr	r3, [pc, #24]	@ (8012b98 <prvIdleTask+0x28>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d9f9      	bls.n	8012b78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012b84:	4b05      	ldr	r3, [pc, #20]	@ (8012b9c <prvIdleTask+0x2c>)
 8012b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b8a:	601a      	str	r2, [r3, #0]
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012b94:	e7f0      	b.n	8012b78 <prvIdleTask+0x8>
 8012b96:	bf00      	nop
 8012b98:	240011f8 	.word	0x240011f8
 8012b9c:	e000ed04 	.word	0xe000ed04

08012ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	607b      	str	r3, [r7, #4]
 8012baa:	e00c      	b.n	8012bc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	4413      	add	r3, r2
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	4a12      	ldr	r2, [pc, #72]	@ (8012c00 <prvInitialiseTaskLists+0x60>)
 8012bb8:	4413      	add	r3, r2
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fe fcae 	bl	801151c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	607b      	str	r3, [r7, #4]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2b37      	cmp	r3, #55	@ 0x37
 8012bca:	d9ef      	bls.n	8012bac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012bcc:	480d      	ldr	r0, [pc, #52]	@ (8012c04 <prvInitialiseTaskLists+0x64>)
 8012bce:	f7fe fca5 	bl	801151c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012bd2:	480d      	ldr	r0, [pc, #52]	@ (8012c08 <prvInitialiseTaskLists+0x68>)
 8012bd4:	f7fe fca2 	bl	801151c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012bd8:	480c      	ldr	r0, [pc, #48]	@ (8012c0c <prvInitialiseTaskLists+0x6c>)
 8012bda:	f7fe fc9f 	bl	801151c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012bde:	480c      	ldr	r0, [pc, #48]	@ (8012c10 <prvInitialiseTaskLists+0x70>)
 8012be0:	f7fe fc9c 	bl	801151c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012be4:	480b      	ldr	r0, [pc, #44]	@ (8012c14 <prvInitialiseTaskLists+0x74>)
 8012be6:	f7fe fc99 	bl	801151c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012bea:	4b0b      	ldr	r3, [pc, #44]	@ (8012c18 <prvInitialiseTaskLists+0x78>)
 8012bec:	4a05      	ldr	r2, [pc, #20]	@ (8012c04 <prvInitialiseTaskLists+0x64>)
 8012bee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8012c1c <prvInitialiseTaskLists+0x7c>)
 8012bf2:	4a05      	ldr	r2, [pc, #20]	@ (8012c08 <prvInitialiseTaskLists+0x68>)
 8012bf4:	601a      	str	r2, [r3, #0]
}
 8012bf6:	bf00      	nop
 8012bf8:	3708      	adds	r7, #8
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	240011f8 	.word	0x240011f8
 8012c04:	24001658 	.word	0x24001658
 8012c08:	2400166c 	.word	0x2400166c
 8012c0c:	24001688 	.word	0x24001688
 8012c10:	2400169c 	.word	0x2400169c
 8012c14:	240016b4 	.word	0x240016b4
 8012c18:	24001680 	.word	0x24001680
 8012c1c:	24001684 	.word	0x24001684

08012c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012c26:	e019      	b.n	8012c5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012c28:	f000 fdee 	bl	8013808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c2c:	4b10      	ldr	r3, [pc, #64]	@ (8012c70 <prvCheckTasksWaitingTermination+0x50>)
 8012c2e:	68db      	ldr	r3, [r3, #12]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	3304      	adds	r3, #4
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fe fcf9 	bl	8011630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c74 <prvCheckTasksWaitingTermination+0x54>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	3b01      	subs	r3, #1
 8012c44:	4a0b      	ldr	r2, [pc, #44]	@ (8012c74 <prvCheckTasksWaitingTermination+0x54>)
 8012c46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012c48:	4b0b      	ldr	r3, [pc, #44]	@ (8012c78 <prvCheckTasksWaitingTermination+0x58>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	3b01      	subs	r3, #1
 8012c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8012c78 <prvCheckTasksWaitingTermination+0x58>)
 8012c50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012c52:	f000 fe0b 	bl	801386c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 f810 	bl	8012c7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012c5c:	4b06      	ldr	r3, [pc, #24]	@ (8012c78 <prvCheckTasksWaitingTermination+0x58>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d1e1      	bne.n	8012c28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012c64:	bf00      	nop
 8012c66:	bf00      	nop
 8012c68:	3708      	adds	r7, #8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	2400169c 	.word	0x2400169c
 8012c74:	240016c8 	.word	0x240016c8
 8012c78:	240016b0 	.word	0x240016b0

08012c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	3354      	adds	r3, #84	@ 0x54
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f001 ff45 	bl	8014b18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d108      	bne.n	8012caa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f000 ffa3 	bl	8013be8 <vPortFree>
				vPortFree( pxTCB );
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f000 ffa0 	bl	8013be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012ca8:	e019      	b.n	8012cde <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d103      	bne.n	8012cbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 ff97 	bl	8013be8 <vPortFree>
	}
 8012cba:	e010      	b.n	8012cde <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012cc2:	2b02      	cmp	r3, #2
 8012cc4:	d00b      	beq.n	8012cde <prvDeleteTCB+0x62>
	__asm volatile
 8012cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cca:	f383 8811 	msr	BASEPRI, r3
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	60fb      	str	r3, [r7, #12]
}
 8012cd8:	bf00      	nop
 8012cda:	bf00      	nop
 8012cdc:	e7fd      	b.n	8012cda <prvDeleteTCB+0x5e>
	}
 8012cde:	bf00      	nop
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
	...

08012ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012cee:	4b0c      	ldr	r3, [pc, #48]	@ (8012d20 <prvResetNextTaskUnblockTime+0x38>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d104      	bne.n	8012d02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8012d24 <prvResetNextTaskUnblockTime+0x3c>)
 8012cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012cfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012d00:	e008      	b.n	8012d14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d02:	4b07      	ldr	r3, [pc, #28]	@ (8012d20 <prvResetNextTaskUnblockTime+0x38>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	4a04      	ldr	r2, [pc, #16]	@ (8012d24 <prvResetNextTaskUnblockTime+0x3c>)
 8012d12:	6013      	str	r3, [r2, #0]
}
 8012d14:	bf00      	nop
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr
 8012d20:	24001680 	.word	0x24001680
 8012d24:	240016e8 	.word	0x240016e8

08012d28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012d28:	b480      	push	{r7}
 8012d2a:	b083      	sub	sp, #12
 8012d2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8012d5c <xTaskGetSchedulerState+0x34>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d102      	bne.n	8012d3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012d36:	2301      	movs	r3, #1
 8012d38:	607b      	str	r3, [r7, #4]
 8012d3a:	e008      	b.n	8012d4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d3c:	4b08      	ldr	r3, [pc, #32]	@ (8012d60 <xTaskGetSchedulerState+0x38>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d102      	bne.n	8012d4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012d44:	2302      	movs	r3, #2
 8012d46:	607b      	str	r3, [r7, #4]
 8012d48:	e001      	b.n	8012d4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012d4e:	687b      	ldr	r3, [r7, #4]
	}
 8012d50:	4618      	mov	r0, r3
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr
 8012d5c:	240016d4 	.word	0x240016d4
 8012d60:	240016f0 	.word	0x240016f0

08012d64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b086      	sub	sp, #24
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012d70:	2300      	movs	r3, #0
 8012d72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d058      	beq.n	8012e2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8012e38 <xTaskPriorityDisinherit+0xd4>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	693a      	ldr	r2, [r7, #16]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d00b      	beq.n	8012d9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d88:	f383 8811 	msr	BASEPRI, r3
 8012d8c:	f3bf 8f6f 	isb	sy
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	60fb      	str	r3, [r7, #12]
}
 8012d96:	bf00      	nop
 8012d98:	bf00      	nop
 8012d9a:	e7fd      	b.n	8012d98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d10b      	bne.n	8012dbc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012da8:	f383 8811 	msr	BASEPRI, r3
 8012dac:	f3bf 8f6f 	isb	sy
 8012db0:	f3bf 8f4f 	dsb	sy
 8012db4:	60bb      	str	r3, [r7, #8]
}
 8012db6:	bf00      	nop
 8012db8:	bf00      	nop
 8012dba:	e7fd      	b.n	8012db8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012dc0:	1e5a      	subs	r2, r3, #1
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d02c      	beq.n	8012e2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d128      	bne.n	8012e2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fe fc26 	bl	8011630 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012df0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8012e3c <xTaskPriorityDisinherit+0xd8>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d903      	bls.n	8012e0c <xTaskPriorityDisinherit+0xa8>
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e08:	4a0c      	ldr	r2, [pc, #48]	@ (8012e3c <xTaskPriorityDisinherit+0xd8>)
 8012e0a:	6013      	str	r3, [r2, #0]
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e10:	4613      	mov	r3, r2
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	4413      	add	r3, r2
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	4a09      	ldr	r2, [pc, #36]	@ (8012e40 <xTaskPriorityDisinherit+0xdc>)
 8012e1a:	441a      	add	r2, r3
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	3304      	adds	r3, #4
 8012e20:	4619      	mov	r1, r3
 8012e22:	4610      	mov	r0, r2
 8012e24:	f7fe fba7 	bl	8011576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012e2c:	697b      	ldr	r3, [r7, #20]
	}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3718      	adds	r7, #24
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	240011f4 	.word	0x240011f4
 8012e3c:	240016d0 	.word	0x240016d0
 8012e40:	240011f8 	.word	0x240011f8

08012e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012e4e:	4b21      	ldr	r3, [pc, #132]	@ (8012ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e54:	4b20      	ldr	r3, [pc, #128]	@ (8012ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	3304      	adds	r3, #4
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fe fbe8 	bl	8011630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e66:	d10a      	bne.n	8012e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d007      	beq.n	8012e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8012ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	3304      	adds	r3, #4
 8012e74:	4619      	mov	r1, r3
 8012e76:	4819      	ldr	r0, [pc, #100]	@ (8012edc <prvAddCurrentTaskToDelayedList+0x98>)
 8012e78:	f7fe fb7d 	bl	8011576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012e7c:	e026      	b.n	8012ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012e7e:	68fa      	ldr	r2, [r7, #12]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	4413      	add	r3, r2
 8012e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012e86:	4b14      	ldr	r3, [pc, #80]	@ (8012ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012e8e:	68ba      	ldr	r2, [r7, #8]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d209      	bcs.n	8012eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e96:	4b12      	ldr	r3, [pc, #72]	@ (8012ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012e98:	681a      	ldr	r2, [r3, #0]
 8012e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8012ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	3304      	adds	r3, #4
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	4610      	mov	r0, r2
 8012ea4:	f7fe fb8b 	bl	80115be <vListInsert>
}
 8012ea8:	e010      	b.n	8012ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8012ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012eac:	681a      	ldr	r2, [r3, #0]
 8012eae:	4b0a      	ldr	r3, [pc, #40]	@ (8012ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	3304      	adds	r3, #4
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	4610      	mov	r0, r2
 8012eb8:	f7fe fb81 	bl	80115be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8012ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	68ba      	ldr	r2, [r7, #8]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d202      	bcs.n	8012ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012ec6:	4a08      	ldr	r2, [pc, #32]	@ (8012ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	6013      	str	r3, [r2, #0]
}
 8012ecc:	bf00      	nop
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	240016cc 	.word	0x240016cc
 8012ed8:	240011f4 	.word	0x240011f4
 8012edc:	240016b4 	.word	0x240016b4
 8012ee0:	24001684 	.word	0x24001684
 8012ee4:	24001680 	.word	0x24001680
 8012ee8:	240016e8 	.word	0x240016e8

08012eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b08a      	sub	sp, #40	@ 0x28
 8012ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012ef6:	f000 fb13 	bl	8013520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012efa:	4b1d      	ldr	r3, [pc, #116]	@ (8012f70 <xTimerCreateTimerTask+0x84>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d021      	beq.n	8012f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012f02:	2300      	movs	r3, #0
 8012f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012f06:	2300      	movs	r3, #0
 8012f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012f0a:	1d3a      	adds	r2, r7, #4
 8012f0c:	f107 0108 	add.w	r1, r7, #8
 8012f10:	f107 030c 	add.w	r3, r7, #12
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7fe fae7 	bl	80114e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012f1a:	6879      	ldr	r1, [r7, #4]
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	68fa      	ldr	r2, [r7, #12]
 8012f20:	9202      	str	r2, [sp, #8]
 8012f22:	9301      	str	r3, [sp, #4]
 8012f24:	2302      	movs	r3, #2
 8012f26:	9300      	str	r3, [sp, #0]
 8012f28:	2300      	movs	r3, #0
 8012f2a:	460a      	mov	r2, r1
 8012f2c:	4911      	ldr	r1, [pc, #68]	@ (8012f74 <xTimerCreateTimerTask+0x88>)
 8012f2e:	4812      	ldr	r0, [pc, #72]	@ (8012f78 <xTimerCreateTimerTask+0x8c>)
 8012f30:	f7ff f8a2 	bl	8012078 <xTaskCreateStatic>
 8012f34:	4603      	mov	r3, r0
 8012f36:	4a11      	ldr	r2, [pc, #68]	@ (8012f7c <xTimerCreateTimerTask+0x90>)
 8012f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012f3a:	4b10      	ldr	r3, [pc, #64]	@ (8012f7c <xTimerCreateTimerTask+0x90>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d001      	beq.n	8012f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012f42:	2301      	movs	r3, #1
 8012f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d10b      	bne.n	8012f64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8012f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f50:	f383 8811 	msr	BASEPRI, r3
 8012f54:	f3bf 8f6f 	isb	sy
 8012f58:	f3bf 8f4f 	dsb	sy
 8012f5c:	613b      	str	r3, [r7, #16]
}
 8012f5e:	bf00      	nop
 8012f60:	bf00      	nop
 8012f62:	e7fd      	b.n	8012f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012f64:	697b      	ldr	r3, [r7, #20]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3718      	adds	r7, #24
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	24001724 	.word	0x24001724
 8012f74:	0801583c 	.word	0x0801583c
 8012f78:	080130b9 	.word	0x080130b9
 8012f7c:	24001728 	.word	0x24001728

08012f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b08a      	sub	sp, #40	@ 0x28
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
 8012f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10b      	bne.n	8012fb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8012f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f9c:	f383 8811 	msr	BASEPRI, r3
 8012fa0:	f3bf 8f6f 	isb	sy
 8012fa4:	f3bf 8f4f 	dsb	sy
 8012fa8:	623b      	str	r3, [r7, #32]
}
 8012faa:	bf00      	nop
 8012fac:	bf00      	nop
 8012fae:	e7fd      	b.n	8012fac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012fb0:	4b19      	ldr	r3, [pc, #100]	@ (8013018 <xTimerGenericCommand+0x98>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d02a      	beq.n	801300e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	2b05      	cmp	r3, #5
 8012fc8:	dc18      	bgt.n	8012ffc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012fca:	f7ff fead 	bl	8012d28 <xTaskGetSchedulerState>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	2b02      	cmp	r3, #2
 8012fd2:	d109      	bne.n	8012fe8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012fd4:	4b10      	ldr	r3, [pc, #64]	@ (8013018 <xTimerGenericCommand+0x98>)
 8012fd6:	6818      	ldr	r0, [r3, #0]
 8012fd8:	f107 0110 	add.w	r1, r7, #16
 8012fdc:	2300      	movs	r3, #0
 8012fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012fe0:	f7fe fc5a 	bl	8011898 <xQueueGenericSend>
 8012fe4:	6278      	str	r0, [r7, #36]	@ 0x24
 8012fe6:	e012      	b.n	801300e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8013018 <xTimerGenericCommand+0x98>)
 8012fea:	6818      	ldr	r0, [r3, #0]
 8012fec:	f107 0110 	add.w	r1, r7, #16
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	f7fe fc50 	bl	8011898 <xQueueGenericSend>
 8012ff8:	6278      	str	r0, [r7, #36]	@ 0x24
 8012ffa:	e008      	b.n	801300e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012ffc:	4b06      	ldr	r3, [pc, #24]	@ (8013018 <xTimerGenericCommand+0x98>)
 8012ffe:	6818      	ldr	r0, [r3, #0]
 8013000:	f107 0110 	add.w	r1, r7, #16
 8013004:	2300      	movs	r3, #0
 8013006:	683a      	ldr	r2, [r7, #0]
 8013008:	f7fe fd48 	bl	8011a9c <xQueueGenericSendFromISR>
 801300c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013010:	4618      	mov	r0, r3
 8013012:	3728      	adds	r7, #40	@ 0x28
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	24001724 	.word	0x24001724

0801301c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b088      	sub	sp, #32
 8013020:	af02      	add	r7, sp, #8
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013026:	4b23      	ldr	r3, [pc, #140]	@ (80130b4 <prvProcessExpiredTimer+0x98>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	68db      	ldr	r3, [r3, #12]
 801302c:	68db      	ldr	r3, [r3, #12]
 801302e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	3304      	adds	r3, #4
 8013034:	4618      	mov	r0, r3
 8013036:	f7fe fafb 	bl	8011630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013040:	f003 0304 	and.w	r3, r3, #4
 8013044:	2b00      	cmp	r3, #0
 8013046:	d023      	beq.n	8013090 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	699a      	ldr	r2, [r3, #24]
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	18d1      	adds	r1, r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	683a      	ldr	r2, [r7, #0]
 8013054:	6978      	ldr	r0, [r7, #20]
 8013056:	f000 f8d5 	bl	8013204 <prvInsertTimerInActiveList>
 801305a:	4603      	mov	r3, r0
 801305c:	2b00      	cmp	r3, #0
 801305e:	d020      	beq.n	80130a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013060:	2300      	movs	r3, #0
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	2300      	movs	r3, #0
 8013066:	687a      	ldr	r2, [r7, #4]
 8013068:	2100      	movs	r1, #0
 801306a:	6978      	ldr	r0, [r7, #20]
 801306c:	f7ff ff88 	bl	8012f80 <xTimerGenericCommand>
 8013070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d114      	bne.n	80130a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8013078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801307c:	f383 8811 	msr	BASEPRI, r3
 8013080:	f3bf 8f6f 	isb	sy
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	60fb      	str	r3, [r7, #12]
}
 801308a:	bf00      	nop
 801308c:	bf00      	nop
 801308e:	e7fd      	b.n	801308c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013096:	f023 0301 	bic.w	r3, r3, #1
 801309a:	b2da      	uxtb	r2, r3
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	6a1b      	ldr	r3, [r3, #32]
 80130a6:	6978      	ldr	r0, [r7, #20]
 80130a8:	4798      	blx	r3
}
 80130aa:	bf00      	nop
 80130ac:	3718      	adds	r7, #24
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	2400171c 	.word	0x2400171c

080130b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80130c0:	f107 0308 	add.w	r3, r7, #8
 80130c4:	4618      	mov	r0, r3
 80130c6:	f000 f859 	bl	801317c <prvGetNextExpireTime>
 80130ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	4619      	mov	r1, r3
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f000 f805 	bl	80130e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80130d6:	f000 f8d7 	bl	8013288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80130da:	bf00      	nop
 80130dc:	e7f0      	b.n	80130c0 <prvTimerTask+0x8>
	...

080130e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b084      	sub	sp, #16
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80130ea:	f7ff fa29 	bl	8012540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80130ee:	f107 0308 	add.w	r3, r7, #8
 80130f2:	4618      	mov	r0, r3
 80130f4:	f000 f866 	bl	80131c4 <prvSampleTimeNow>
 80130f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d130      	bne.n	8013162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d10a      	bne.n	801311c <prvProcessTimerOrBlockTask+0x3c>
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	429a      	cmp	r2, r3
 801310c:	d806      	bhi.n	801311c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801310e:	f7ff fa25 	bl	801255c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013112:	68f9      	ldr	r1, [r7, #12]
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f7ff ff81 	bl	801301c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801311a:	e024      	b.n	8013166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d008      	beq.n	8013134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013122:	4b13      	ldr	r3, [pc, #76]	@ (8013170 <prvProcessTimerOrBlockTask+0x90>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d101      	bne.n	8013130 <prvProcessTimerOrBlockTask+0x50>
 801312c:	2301      	movs	r3, #1
 801312e:	e000      	b.n	8013132 <prvProcessTimerOrBlockTask+0x52>
 8013130:	2300      	movs	r3, #0
 8013132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013134:	4b0f      	ldr	r3, [pc, #60]	@ (8013174 <prvProcessTimerOrBlockTask+0x94>)
 8013136:	6818      	ldr	r0, [r3, #0]
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	1ad3      	subs	r3, r2, r3
 801313e:	683a      	ldr	r2, [r7, #0]
 8013140:	4619      	mov	r1, r3
 8013142:	f7fe ff65 	bl	8012010 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013146:	f7ff fa09 	bl	801255c <xTaskResumeAll>
 801314a:	4603      	mov	r3, r0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d10a      	bne.n	8013166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013150:	4b09      	ldr	r3, [pc, #36]	@ (8013178 <prvProcessTimerOrBlockTask+0x98>)
 8013152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013156:	601a      	str	r2, [r3, #0]
 8013158:	f3bf 8f4f 	dsb	sy
 801315c:	f3bf 8f6f 	isb	sy
}
 8013160:	e001      	b.n	8013166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013162:	f7ff f9fb 	bl	801255c <xTaskResumeAll>
}
 8013166:	bf00      	nop
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	24001720 	.word	0x24001720
 8013174:	24001724 	.word	0x24001724
 8013178:	e000ed04 	.word	0xe000ed04

0801317c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801317c:	b480      	push	{r7}
 801317e:	b085      	sub	sp, #20
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013184:	4b0e      	ldr	r3, [pc, #56]	@ (80131c0 <prvGetNextExpireTime+0x44>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d101      	bne.n	8013192 <prvGetNextExpireTime+0x16>
 801318e:	2201      	movs	r2, #1
 8013190:	e000      	b.n	8013194 <prvGetNextExpireTime+0x18>
 8013192:	2200      	movs	r2, #0
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d105      	bne.n	80131ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80131a0:	4b07      	ldr	r3, [pc, #28]	@ (80131c0 <prvGetNextExpireTime+0x44>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	60fb      	str	r3, [r7, #12]
 80131aa:	e001      	b.n	80131b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80131ac:	2300      	movs	r3, #0
 80131ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80131b0:	68fb      	ldr	r3, [r7, #12]
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3714      	adds	r7, #20
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr
 80131be:	bf00      	nop
 80131c0:	2400171c 	.word	0x2400171c

080131c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80131cc:	f7ff fa64 	bl	8012698 <xTaskGetTickCount>
 80131d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80131d2:	4b0b      	ldr	r3, [pc, #44]	@ (8013200 <prvSampleTimeNow+0x3c>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	429a      	cmp	r2, r3
 80131da:	d205      	bcs.n	80131e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80131dc:	f000 f93a 	bl	8013454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2201      	movs	r2, #1
 80131e4:	601a      	str	r2, [r3, #0]
 80131e6:	e002      	b.n	80131ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80131ee:	4a04      	ldr	r2, [pc, #16]	@ (8013200 <prvSampleTimeNow+0x3c>)
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80131f4:	68fb      	ldr	r3, [r7, #12]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	2400172c 	.word	0x2400172c

08013204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b086      	sub	sp, #24
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	60b9      	str	r1, [r7, #8]
 801320e:	607a      	str	r2, [r7, #4]
 8013210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013212:	2300      	movs	r3, #0
 8013214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	68ba      	ldr	r2, [r7, #8]
 801321a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	68fa      	ldr	r2, [r7, #12]
 8013220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	429a      	cmp	r2, r3
 8013228:	d812      	bhi.n	8013250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	1ad2      	subs	r2, r2, r3
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	699b      	ldr	r3, [r3, #24]
 8013234:	429a      	cmp	r2, r3
 8013236:	d302      	bcc.n	801323e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013238:	2301      	movs	r3, #1
 801323a:	617b      	str	r3, [r7, #20]
 801323c:	e01b      	b.n	8013276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801323e:	4b10      	ldr	r3, [pc, #64]	@ (8013280 <prvInsertTimerInActiveList+0x7c>)
 8013240:	681a      	ldr	r2, [r3, #0]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	3304      	adds	r3, #4
 8013246:	4619      	mov	r1, r3
 8013248:	4610      	mov	r0, r2
 801324a:	f7fe f9b8 	bl	80115be <vListInsert>
 801324e:	e012      	b.n	8013276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	429a      	cmp	r2, r3
 8013256:	d206      	bcs.n	8013266 <prvInsertTimerInActiveList+0x62>
 8013258:	68ba      	ldr	r2, [r7, #8]
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	429a      	cmp	r2, r3
 801325e:	d302      	bcc.n	8013266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013260:	2301      	movs	r3, #1
 8013262:	617b      	str	r3, [r7, #20]
 8013264:	e007      	b.n	8013276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013266:	4b07      	ldr	r3, [pc, #28]	@ (8013284 <prvInsertTimerInActiveList+0x80>)
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	3304      	adds	r3, #4
 801326e:	4619      	mov	r1, r3
 8013270:	4610      	mov	r0, r2
 8013272:	f7fe f9a4 	bl	80115be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013276:	697b      	ldr	r3, [r7, #20]
}
 8013278:	4618      	mov	r0, r3
 801327a:	3718      	adds	r7, #24
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	24001720 	.word	0x24001720
 8013284:	2400171c 	.word	0x2400171c

08013288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b08e      	sub	sp, #56	@ 0x38
 801328c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801328e:	e0ce      	b.n	801342e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	da19      	bge.n	80132ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013296:	1d3b      	adds	r3, r7, #4
 8013298:	3304      	adds	r3, #4
 801329a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d10b      	bne.n	80132ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80132a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132a6:	f383 8811 	msr	BASEPRI, r3
 80132aa:	f3bf 8f6f 	isb	sy
 80132ae:	f3bf 8f4f 	dsb	sy
 80132b2:	61fb      	str	r3, [r7, #28]
}
 80132b4:	bf00      	nop
 80132b6:	bf00      	nop
 80132b8:	e7fd      	b.n	80132b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80132ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80132c0:	6850      	ldr	r0, [r2, #4]
 80132c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80132c4:	6892      	ldr	r2, [r2, #8]
 80132c6:	4611      	mov	r1, r2
 80132c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f2c0 80ae 	blt.w	801342e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80132d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132d8:	695b      	ldr	r3, [r3, #20]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d004      	beq.n	80132e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80132de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132e0:	3304      	adds	r3, #4
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fe f9a4 	bl	8011630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80132e8:	463b      	mov	r3, r7
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7ff ff6a 	bl	80131c4 <prvSampleTimeNow>
 80132f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2b09      	cmp	r3, #9
 80132f6:	f200 8097 	bhi.w	8013428 <prvProcessReceivedCommands+0x1a0>
 80132fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013300 <prvProcessReceivedCommands+0x78>)
 80132fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013300:	08013329 	.word	0x08013329
 8013304:	08013329 	.word	0x08013329
 8013308:	08013329 	.word	0x08013329
 801330c:	0801339f 	.word	0x0801339f
 8013310:	080133b3 	.word	0x080133b3
 8013314:	080133ff 	.word	0x080133ff
 8013318:	08013329 	.word	0x08013329
 801331c:	08013329 	.word	0x08013329
 8013320:	0801339f 	.word	0x0801339f
 8013324:	080133b3 	.word	0x080133b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801332a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801332e:	f043 0301 	orr.w	r3, r3, #1
 8013332:	b2da      	uxtb	r2, r3
 8013334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801333a:	68ba      	ldr	r2, [r7, #8]
 801333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801333e:	699b      	ldr	r3, [r3, #24]
 8013340:	18d1      	adds	r1, r2, r3
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013348:	f7ff ff5c 	bl	8013204 <prvInsertTimerInActiveList>
 801334c:	4603      	mov	r3, r0
 801334e:	2b00      	cmp	r3, #0
 8013350:	d06c      	beq.n	801342c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013354:	6a1b      	ldr	r3, [r3, #32]
 8013356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801335c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013360:	f003 0304 	and.w	r3, r3, #4
 8013364:	2b00      	cmp	r3, #0
 8013366:	d061      	beq.n	801342c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013368:	68ba      	ldr	r2, [r7, #8]
 801336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801336c:	699b      	ldr	r3, [r3, #24]
 801336e:	441a      	add	r2, r3
 8013370:	2300      	movs	r3, #0
 8013372:	9300      	str	r3, [sp, #0]
 8013374:	2300      	movs	r3, #0
 8013376:	2100      	movs	r1, #0
 8013378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801337a:	f7ff fe01 	bl	8012f80 <xTimerGenericCommand>
 801337e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013380:	6a3b      	ldr	r3, [r7, #32]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d152      	bne.n	801342c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8013386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801338a:	f383 8811 	msr	BASEPRI, r3
 801338e:	f3bf 8f6f 	isb	sy
 8013392:	f3bf 8f4f 	dsb	sy
 8013396:	61bb      	str	r3, [r7, #24]
}
 8013398:	bf00      	nop
 801339a:	bf00      	nop
 801339c:	e7fd      	b.n	801339a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801339e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80133a4:	f023 0301 	bic.w	r3, r3, #1
 80133a8:	b2da      	uxtb	r2, r3
 80133aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80133b0:	e03d      	b.n	801342e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80133b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80133b8:	f043 0301 	orr.w	r3, r3, #1
 80133bc:	b2da      	uxtb	r2, r3
 80133be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80133c4:	68ba      	ldr	r2, [r7, #8]
 80133c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80133ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133cc:	699b      	ldr	r3, [r3, #24]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d10b      	bne.n	80133ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80133d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133d6:	f383 8811 	msr	BASEPRI, r3
 80133da:	f3bf 8f6f 	isb	sy
 80133de:	f3bf 8f4f 	dsb	sy
 80133e2:	617b      	str	r3, [r7, #20]
}
 80133e4:	bf00      	nop
 80133e6:	bf00      	nop
 80133e8:	e7fd      	b.n	80133e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80133ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ec:	699a      	ldr	r2, [r3, #24]
 80133ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f0:	18d1      	adds	r1, r2, r3
 80133f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80133f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133f8:	f7ff ff04 	bl	8013204 <prvInsertTimerInActiveList>
					break;
 80133fc:	e017      	b.n	801342e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80133fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013404:	f003 0302 	and.w	r3, r3, #2
 8013408:	2b00      	cmp	r3, #0
 801340a:	d103      	bne.n	8013414 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801340c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801340e:	f000 fbeb 	bl	8013be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013412:	e00c      	b.n	801342e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801341a:	f023 0301 	bic.w	r3, r3, #1
 801341e:	b2da      	uxtb	r2, r3
 8013420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013426:	e002      	b.n	801342e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8013428:	bf00      	nop
 801342a:	e000      	b.n	801342e <prvProcessReceivedCommands+0x1a6>
					break;
 801342c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801342e:	4b08      	ldr	r3, [pc, #32]	@ (8013450 <prvProcessReceivedCommands+0x1c8>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	1d39      	adds	r1, r7, #4
 8013434:	2200      	movs	r2, #0
 8013436:	4618      	mov	r0, r3
 8013438:	f7fe fbce 	bl	8011bd8 <xQueueReceive>
 801343c:	4603      	mov	r3, r0
 801343e:	2b00      	cmp	r3, #0
 8013440:	f47f af26 	bne.w	8013290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013444:	bf00      	nop
 8013446:	bf00      	nop
 8013448:	3730      	adds	r7, #48	@ 0x30
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	24001724 	.word	0x24001724

08013454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b088      	sub	sp, #32
 8013458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801345a:	e049      	b.n	80134f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801345c:	4b2e      	ldr	r3, [pc, #184]	@ (8013518 <prvSwitchTimerLists+0xc4>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013466:	4b2c      	ldr	r3, [pc, #176]	@ (8013518 <prvSwitchTimerLists+0xc4>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	3304      	adds	r3, #4
 8013474:	4618      	mov	r0, r3
 8013476:	f7fe f8db 	bl	8011630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	6a1b      	ldr	r3, [r3, #32]
 801347e:	68f8      	ldr	r0, [r7, #12]
 8013480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013488:	f003 0304 	and.w	r3, r3, #4
 801348c:	2b00      	cmp	r3, #0
 801348e:	d02f      	beq.n	80134f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	699b      	ldr	r3, [r3, #24]
 8013494:	693a      	ldr	r2, [r7, #16]
 8013496:	4413      	add	r3, r2
 8013498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801349a:	68ba      	ldr	r2, [r7, #8]
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d90e      	bls.n	80134c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	68ba      	ldr	r2, [r7, #8]
 80134a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	68fa      	ldr	r2, [r7, #12]
 80134ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80134ae:	4b1a      	ldr	r3, [pc, #104]	@ (8013518 <prvSwitchTimerLists+0xc4>)
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	3304      	adds	r3, #4
 80134b6:	4619      	mov	r1, r3
 80134b8:	4610      	mov	r0, r2
 80134ba:	f7fe f880 	bl	80115be <vListInsert>
 80134be:	e017      	b.n	80134f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80134c0:	2300      	movs	r3, #0
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	2300      	movs	r3, #0
 80134c6:	693a      	ldr	r2, [r7, #16]
 80134c8:	2100      	movs	r1, #0
 80134ca:	68f8      	ldr	r0, [r7, #12]
 80134cc:	f7ff fd58 	bl	8012f80 <xTimerGenericCommand>
 80134d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d10b      	bne.n	80134f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80134d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134dc:	f383 8811 	msr	BASEPRI, r3
 80134e0:	f3bf 8f6f 	isb	sy
 80134e4:	f3bf 8f4f 	dsb	sy
 80134e8:	603b      	str	r3, [r7, #0]
}
 80134ea:	bf00      	nop
 80134ec:	bf00      	nop
 80134ee:	e7fd      	b.n	80134ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80134f0:	4b09      	ldr	r3, [pc, #36]	@ (8013518 <prvSwitchTimerLists+0xc4>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d1b0      	bne.n	801345c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80134fa:	4b07      	ldr	r3, [pc, #28]	@ (8013518 <prvSwitchTimerLists+0xc4>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013500:	4b06      	ldr	r3, [pc, #24]	@ (801351c <prvSwitchTimerLists+0xc8>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	4a04      	ldr	r2, [pc, #16]	@ (8013518 <prvSwitchTimerLists+0xc4>)
 8013506:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013508:	4a04      	ldr	r2, [pc, #16]	@ (801351c <prvSwitchTimerLists+0xc8>)
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	6013      	str	r3, [r2, #0]
}
 801350e:	bf00      	nop
 8013510:	3718      	adds	r7, #24
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	2400171c 	.word	0x2400171c
 801351c:	24001720 	.word	0x24001720

08013520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013526:	f000 f96f 	bl	8013808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801352a:	4b15      	ldr	r3, [pc, #84]	@ (8013580 <prvCheckForValidListAndQueue+0x60>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d120      	bne.n	8013574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013532:	4814      	ldr	r0, [pc, #80]	@ (8013584 <prvCheckForValidListAndQueue+0x64>)
 8013534:	f7fd fff2 	bl	801151c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013538:	4813      	ldr	r0, [pc, #76]	@ (8013588 <prvCheckForValidListAndQueue+0x68>)
 801353a:	f7fd ffef 	bl	801151c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801353e:	4b13      	ldr	r3, [pc, #76]	@ (801358c <prvCheckForValidListAndQueue+0x6c>)
 8013540:	4a10      	ldr	r2, [pc, #64]	@ (8013584 <prvCheckForValidListAndQueue+0x64>)
 8013542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013544:	4b12      	ldr	r3, [pc, #72]	@ (8013590 <prvCheckForValidListAndQueue+0x70>)
 8013546:	4a10      	ldr	r2, [pc, #64]	@ (8013588 <prvCheckForValidListAndQueue+0x68>)
 8013548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801354a:	2300      	movs	r3, #0
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	4b11      	ldr	r3, [pc, #68]	@ (8013594 <prvCheckForValidListAndQueue+0x74>)
 8013550:	4a11      	ldr	r2, [pc, #68]	@ (8013598 <prvCheckForValidListAndQueue+0x78>)
 8013552:	2110      	movs	r1, #16
 8013554:	200a      	movs	r0, #10
 8013556:	f7fe f8ff 	bl	8011758 <xQueueGenericCreateStatic>
 801355a:	4603      	mov	r3, r0
 801355c:	4a08      	ldr	r2, [pc, #32]	@ (8013580 <prvCheckForValidListAndQueue+0x60>)
 801355e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013560:	4b07      	ldr	r3, [pc, #28]	@ (8013580 <prvCheckForValidListAndQueue+0x60>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d005      	beq.n	8013574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013568:	4b05      	ldr	r3, [pc, #20]	@ (8013580 <prvCheckForValidListAndQueue+0x60>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	490b      	ldr	r1, [pc, #44]	@ (801359c <prvCheckForValidListAndQueue+0x7c>)
 801356e:	4618      	mov	r0, r3
 8013570:	f7fe fd24 	bl	8011fbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013574:	f000 f97a 	bl	801386c <vPortExitCritical>
}
 8013578:	bf00      	nop
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
 801357e:	bf00      	nop
 8013580:	24001724 	.word	0x24001724
 8013584:	240016f4 	.word	0x240016f4
 8013588:	24001708 	.word	0x24001708
 801358c:	2400171c 	.word	0x2400171c
 8013590:	24001720 	.word	0x24001720
 8013594:	240017d0 	.word	0x240017d0
 8013598:	24001730 	.word	0x24001730
 801359c:	08015844 	.word	0x08015844

080135a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	3b04      	subs	r3, #4
 80135b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80135b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	3b04      	subs	r3, #4
 80135be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	f023 0201 	bic.w	r2, r3, #1
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	3b04      	subs	r3, #4
 80135ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80135d0:	4a0c      	ldr	r2, [pc, #48]	@ (8013604 <pxPortInitialiseStack+0x64>)
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	3b14      	subs	r3, #20
 80135da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	3b04      	subs	r3, #4
 80135e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f06f 0202 	mvn.w	r2, #2
 80135ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	3b20      	subs	r3, #32
 80135f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80135f6:	68fb      	ldr	r3, [r7, #12]
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3714      	adds	r7, #20
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr
 8013604:	08013609 	.word	0x08013609

08013608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013608:	b480      	push	{r7}
 801360a:	b085      	sub	sp, #20
 801360c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801360e:	2300      	movs	r3, #0
 8013610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013612:	4b13      	ldr	r3, [pc, #76]	@ (8013660 <prvTaskExitError+0x58>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801361a:	d00b      	beq.n	8013634 <prvTaskExitError+0x2c>
	__asm volatile
 801361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013620:	f383 8811 	msr	BASEPRI, r3
 8013624:	f3bf 8f6f 	isb	sy
 8013628:	f3bf 8f4f 	dsb	sy
 801362c:	60fb      	str	r3, [r7, #12]
}
 801362e:	bf00      	nop
 8013630:	bf00      	nop
 8013632:	e7fd      	b.n	8013630 <prvTaskExitError+0x28>
	__asm volatile
 8013634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013638:	f383 8811 	msr	BASEPRI, r3
 801363c:	f3bf 8f6f 	isb	sy
 8013640:	f3bf 8f4f 	dsb	sy
 8013644:	60bb      	str	r3, [r7, #8]
}
 8013646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013648:	bf00      	nop
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d0fc      	beq.n	801364a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013650:	bf00      	nop
 8013652:	bf00      	nop
 8013654:	3714      	adds	r7, #20
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	240000e0 	.word	0x240000e0
	...

08013670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013670:	4b07      	ldr	r3, [pc, #28]	@ (8013690 <pxCurrentTCBConst2>)
 8013672:	6819      	ldr	r1, [r3, #0]
 8013674:	6808      	ldr	r0, [r1, #0]
 8013676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367a:	f380 8809 	msr	PSP, r0
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f04f 0000 	mov.w	r0, #0
 8013686:	f380 8811 	msr	BASEPRI, r0
 801368a:	4770      	bx	lr
 801368c:	f3af 8000 	nop.w

08013690 <pxCurrentTCBConst2>:
 8013690:	240011f4 	.word	0x240011f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013694:	bf00      	nop
 8013696:	bf00      	nop

08013698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013698:	4808      	ldr	r0, [pc, #32]	@ (80136bc <prvPortStartFirstTask+0x24>)
 801369a:	6800      	ldr	r0, [r0, #0]
 801369c:	6800      	ldr	r0, [r0, #0]
 801369e:	f380 8808 	msr	MSP, r0
 80136a2:	f04f 0000 	mov.w	r0, #0
 80136a6:	f380 8814 	msr	CONTROL, r0
 80136aa:	b662      	cpsie	i
 80136ac:	b661      	cpsie	f
 80136ae:	f3bf 8f4f 	dsb	sy
 80136b2:	f3bf 8f6f 	isb	sy
 80136b6:	df00      	svc	0
 80136b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80136ba:	bf00      	nop
 80136bc:	e000ed08 	.word	0xe000ed08

080136c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b086      	sub	sp, #24
 80136c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80136c6:	4b47      	ldr	r3, [pc, #284]	@ (80137e4 <xPortStartScheduler+0x124>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4a47      	ldr	r2, [pc, #284]	@ (80137e8 <xPortStartScheduler+0x128>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d10b      	bne.n	80136e8 <xPortStartScheduler+0x28>
	__asm volatile
 80136d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136d4:	f383 8811 	msr	BASEPRI, r3
 80136d8:	f3bf 8f6f 	isb	sy
 80136dc:	f3bf 8f4f 	dsb	sy
 80136e0:	60fb      	str	r3, [r7, #12]
}
 80136e2:	bf00      	nop
 80136e4:	bf00      	nop
 80136e6:	e7fd      	b.n	80136e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80136e8:	4b3e      	ldr	r3, [pc, #248]	@ (80137e4 <xPortStartScheduler+0x124>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	4a3f      	ldr	r2, [pc, #252]	@ (80137ec <xPortStartScheduler+0x12c>)
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d10b      	bne.n	801370a <xPortStartScheduler+0x4a>
	__asm volatile
 80136f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136f6:	f383 8811 	msr	BASEPRI, r3
 80136fa:	f3bf 8f6f 	isb	sy
 80136fe:	f3bf 8f4f 	dsb	sy
 8013702:	613b      	str	r3, [r7, #16]
}
 8013704:	bf00      	nop
 8013706:	bf00      	nop
 8013708:	e7fd      	b.n	8013706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801370a:	4b39      	ldr	r3, [pc, #228]	@ (80137f0 <xPortStartScheduler+0x130>)
 801370c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	b2db      	uxtb	r3, r3
 8013714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013716:	697b      	ldr	r3, [r7, #20]
 8013718:	22ff      	movs	r2, #255	@ 0xff
 801371a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	781b      	ldrb	r3, [r3, #0]
 8013720:	b2db      	uxtb	r3, r3
 8013722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013724:	78fb      	ldrb	r3, [r7, #3]
 8013726:	b2db      	uxtb	r3, r3
 8013728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801372c:	b2da      	uxtb	r2, r3
 801372e:	4b31      	ldr	r3, [pc, #196]	@ (80137f4 <xPortStartScheduler+0x134>)
 8013730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013732:	4b31      	ldr	r3, [pc, #196]	@ (80137f8 <xPortStartScheduler+0x138>)
 8013734:	2207      	movs	r2, #7
 8013736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013738:	e009      	b.n	801374e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801373a:	4b2f      	ldr	r3, [pc, #188]	@ (80137f8 <xPortStartScheduler+0x138>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	3b01      	subs	r3, #1
 8013740:	4a2d      	ldr	r2, [pc, #180]	@ (80137f8 <xPortStartScheduler+0x138>)
 8013742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013744:	78fb      	ldrb	r3, [r7, #3]
 8013746:	b2db      	uxtb	r3, r3
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	b2db      	uxtb	r3, r3
 801374c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801374e:	78fb      	ldrb	r3, [r7, #3]
 8013750:	b2db      	uxtb	r3, r3
 8013752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013756:	2b80      	cmp	r3, #128	@ 0x80
 8013758:	d0ef      	beq.n	801373a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801375a:	4b27      	ldr	r3, [pc, #156]	@ (80137f8 <xPortStartScheduler+0x138>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f1c3 0307 	rsb	r3, r3, #7
 8013762:	2b04      	cmp	r3, #4
 8013764:	d00b      	beq.n	801377e <xPortStartScheduler+0xbe>
	__asm volatile
 8013766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801376a:	f383 8811 	msr	BASEPRI, r3
 801376e:	f3bf 8f6f 	isb	sy
 8013772:	f3bf 8f4f 	dsb	sy
 8013776:	60bb      	str	r3, [r7, #8]
}
 8013778:	bf00      	nop
 801377a:	bf00      	nop
 801377c:	e7fd      	b.n	801377a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801377e:	4b1e      	ldr	r3, [pc, #120]	@ (80137f8 <xPortStartScheduler+0x138>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	021b      	lsls	r3, r3, #8
 8013784:	4a1c      	ldr	r2, [pc, #112]	@ (80137f8 <xPortStartScheduler+0x138>)
 8013786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013788:	4b1b      	ldr	r3, [pc, #108]	@ (80137f8 <xPortStartScheduler+0x138>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013790:	4a19      	ldr	r2, [pc, #100]	@ (80137f8 <xPortStartScheduler+0x138>)
 8013792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	b2da      	uxtb	r2, r3
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801379c:	4b17      	ldr	r3, [pc, #92]	@ (80137fc <xPortStartScheduler+0x13c>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4a16      	ldr	r2, [pc, #88]	@ (80137fc <xPortStartScheduler+0x13c>)
 80137a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80137a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80137a8:	4b14      	ldr	r3, [pc, #80]	@ (80137fc <xPortStartScheduler+0x13c>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4a13      	ldr	r2, [pc, #76]	@ (80137fc <xPortStartScheduler+0x13c>)
 80137ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80137b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80137b4:	f000 f8da 	bl	801396c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80137b8:	4b11      	ldr	r3, [pc, #68]	@ (8013800 <xPortStartScheduler+0x140>)
 80137ba:	2200      	movs	r2, #0
 80137bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80137be:	f000 f8f9 	bl	80139b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80137c2:	4b10      	ldr	r3, [pc, #64]	@ (8013804 <xPortStartScheduler+0x144>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	4a0f      	ldr	r2, [pc, #60]	@ (8013804 <xPortStartScheduler+0x144>)
 80137c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80137cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80137ce:	f7ff ff63 	bl	8013698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80137d2:	f7ff f82b 	bl	801282c <vTaskSwitchContext>
	prvTaskExitError();
 80137d6:	f7ff ff17 	bl	8013608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3718      	adds	r7, #24
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	e000ed00 	.word	0xe000ed00
 80137e8:	410fc271 	.word	0x410fc271
 80137ec:	410fc270 	.word	0x410fc270
 80137f0:	e000e400 	.word	0xe000e400
 80137f4:	24001820 	.word	0x24001820
 80137f8:	24001824 	.word	0x24001824
 80137fc:	e000ed20 	.word	0xe000ed20
 8013800:	240000e0 	.word	0x240000e0
 8013804:	e000ef34 	.word	0xe000ef34

08013808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
	__asm volatile
 801380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013812:	f383 8811 	msr	BASEPRI, r3
 8013816:	f3bf 8f6f 	isb	sy
 801381a:	f3bf 8f4f 	dsb	sy
 801381e:	607b      	str	r3, [r7, #4]
}
 8013820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013822:	4b10      	ldr	r3, [pc, #64]	@ (8013864 <vPortEnterCritical+0x5c>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	3301      	adds	r3, #1
 8013828:	4a0e      	ldr	r2, [pc, #56]	@ (8013864 <vPortEnterCritical+0x5c>)
 801382a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801382c:	4b0d      	ldr	r3, [pc, #52]	@ (8013864 <vPortEnterCritical+0x5c>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2b01      	cmp	r3, #1
 8013832:	d110      	bne.n	8013856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013834:	4b0c      	ldr	r3, [pc, #48]	@ (8013868 <vPortEnterCritical+0x60>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	b2db      	uxtb	r3, r3
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00b      	beq.n	8013856 <vPortEnterCritical+0x4e>
	__asm volatile
 801383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013842:	f383 8811 	msr	BASEPRI, r3
 8013846:	f3bf 8f6f 	isb	sy
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	603b      	str	r3, [r7, #0]
}
 8013850:	bf00      	nop
 8013852:	bf00      	nop
 8013854:	e7fd      	b.n	8013852 <vPortEnterCritical+0x4a>
	}
}
 8013856:	bf00      	nop
 8013858:	370c      	adds	r7, #12
 801385a:	46bd      	mov	sp, r7
 801385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	240000e0 	.word	0x240000e0
 8013868:	e000ed04 	.word	0xe000ed04

0801386c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801386c:	b480      	push	{r7}
 801386e:	b083      	sub	sp, #12
 8013870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013872:	4b12      	ldr	r3, [pc, #72]	@ (80138bc <vPortExitCritical+0x50>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d10b      	bne.n	8013892 <vPortExitCritical+0x26>
	__asm volatile
 801387a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801387e:	f383 8811 	msr	BASEPRI, r3
 8013882:	f3bf 8f6f 	isb	sy
 8013886:	f3bf 8f4f 	dsb	sy
 801388a:	607b      	str	r3, [r7, #4]
}
 801388c:	bf00      	nop
 801388e:	bf00      	nop
 8013890:	e7fd      	b.n	801388e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013892:	4b0a      	ldr	r3, [pc, #40]	@ (80138bc <vPortExitCritical+0x50>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	3b01      	subs	r3, #1
 8013898:	4a08      	ldr	r2, [pc, #32]	@ (80138bc <vPortExitCritical+0x50>)
 801389a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801389c:	4b07      	ldr	r3, [pc, #28]	@ (80138bc <vPortExitCritical+0x50>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d105      	bne.n	80138b0 <vPortExitCritical+0x44>
 80138a4:	2300      	movs	r3, #0
 80138a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	f383 8811 	msr	BASEPRI, r3
}
 80138ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80138b0:	bf00      	nop
 80138b2:	370c      	adds	r7, #12
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr
 80138bc:	240000e0 	.word	0x240000e0

080138c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80138c0:	f3ef 8009 	mrs	r0, PSP
 80138c4:	f3bf 8f6f 	isb	sy
 80138c8:	4b15      	ldr	r3, [pc, #84]	@ (8013920 <pxCurrentTCBConst>)
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	f01e 0f10 	tst.w	lr, #16
 80138d0:	bf08      	it	eq
 80138d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80138d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138da:	6010      	str	r0, [r2, #0]
 80138dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80138e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80138e4:	f380 8811 	msr	BASEPRI, r0
 80138e8:	f3bf 8f4f 	dsb	sy
 80138ec:	f3bf 8f6f 	isb	sy
 80138f0:	f7fe ff9c 	bl	801282c <vTaskSwitchContext>
 80138f4:	f04f 0000 	mov.w	r0, #0
 80138f8:	f380 8811 	msr	BASEPRI, r0
 80138fc:	bc09      	pop	{r0, r3}
 80138fe:	6819      	ldr	r1, [r3, #0]
 8013900:	6808      	ldr	r0, [r1, #0]
 8013902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013906:	f01e 0f10 	tst.w	lr, #16
 801390a:	bf08      	it	eq
 801390c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013910:	f380 8809 	msr	PSP, r0
 8013914:	f3bf 8f6f 	isb	sy
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop
 801391c:	f3af 8000 	nop.w

08013920 <pxCurrentTCBConst>:
 8013920:	240011f4 	.word	0x240011f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013924:	bf00      	nop
 8013926:	bf00      	nop

08013928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
	__asm volatile
 801392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013932:	f383 8811 	msr	BASEPRI, r3
 8013936:	f3bf 8f6f 	isb	sy
 801393a:	f3bf 8f4f 	dsb	sy
 801393e:	607b      	str	r3, [r7, #4]
}
 8013940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013942:	f7fe feb9 	bl	80126b8 <xTaskIncrementTick>
 8013946:	4603      	mov	r3, r0
 8013948:	2b00      	cmp	r3, #0
 801394a:	d003      	beq.n	8013954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801394c:	4b06      	ldr	r3, [pc, #24]	@ (8013968 <xPortSysTickHandler+0x40>)
 801394e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013952:	601a      	str	r2, [r3, #0]
 8013954:	2300      	movs	r3, #0
 8013956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	f383 8811 	msr	BASEPRI, r3
}
 801395e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013960:	bf00      	nop
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	e000ed04 	.word	0xe000ed04

0801396c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801396c:	b480      	push	{r7}
 801396e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013970:	4b0b      	ldr	r3, [pc, #44]	@ (80139a0 <vPortSetupTimerInterrupt+0x34>)
 8013972:	2200      	movs	r2, #0
 8013974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013976:	4b0b      	ldr	r3, [pc, #44]	@ (80139a4 <vPortSetupTimerInterrupt+0x38>)
 8013978:	2200      	movs	r2, #0
 801397a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801397c:	4b0a      	ldr	r3, [pc, #40]	@ (80139a8 <vPortSetupTimerInterrupt+0x3c>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4a0a      	ldr	r2, [pc, #40]	@ (80139ac <vPortSetupTimerInterrupt+0x40>)
 8013982:	fba2 2303 	umull	r2, r3, r2, r3
 8013986:	099b      	lsrs	r3, r3, #6
 8013988:	4a09      	ldr	r2, [pc, #36]	@ (80139b0 <vPortSetupTimerInterrupt+0x44>)
 801398a:	3b01      	subs	r3, #1
 801398c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801398e:	4b04      	ldr	r3, [pc, #16]	@ (80139a0 <vPortSetupTimerInterrupt+0x34>)
 8013990:	2207      	movs	r2, #7
 8013992:	601a      	str	r2, [r3, #0]
}
 8013994:	bf00      	nop
 8013996:	46bd      	mov	sp, r7
 8013998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop
 80139a0:	e000e010 	.word	0xe000e010
 80139a4:	e000e018 	.word	0xe000e018
 80139a8:	24000000 	.word	0x24000000
 80139ac:	10624dd3 	.word	0x10624dd3
 80139b0:	e000e014 	.word	0xe000e014

080139b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80139b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80139c4 <vPortEnableVFP+0x10>
 80139b8:	6801      	ldr	r1, [r0, #0]
 80139ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80139be:	6001      	str	r1, [r0, #0]
 80139c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80139c2:	bf00      	nop
 80139c4:	e000ed88 	.word	0xe000ed88

080139c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80139ce:	f3ef 8305 	mrs	r3, IPSR
 80139d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	2b0f      	cmp	r3, #15
 80139d8:	d915      	bls.n	8013a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80139da:	4a18      	ldr	r2, [pc, #96]	@ (8013a3c <vPortValidateInterruptPriority+0x74>)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	4413      	add	r3, r2
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80139e4:	4b16      	ldr	r3, [pc, #88]	@ (8013a40 <vPortValidateInterruptPriority+0x78>)
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	7afa      	ldrb	r2, [r7, #11]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d20b      	bcs.n	8013a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80139ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139f2:	f383 8811 	msr	BASEPRI, r3
 80139f6:	f3bf 8f6f 	isb	sy
 80139fa:	f3bf 8f4f 	dsb	sy
 80139fe:	607b      	str	r3, [r7, #4]
}
 8013a00:	bf00      	nop
 8013a02:	bf00      	nop
 8013a04:	e7fd      	b.n	8013a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013a06:	4b0f      	ldr	r3, [pc, #60]	@ (8013a44 <vPortValidateInterruptPriority+0x7c>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8013a48 <vPortValidateInterruptPriority+0x80>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d90b      	bls.n	8013a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a1a:	f383 8811 	msr	BASEPRI, r3
 8013a1e:	f3bf 8f6f 	isb	sy
 8013a22:	f3bf 8f4f 	dsb	sy
 8013a26:	603b      	str	r3, [r7, #0]
}
 8013a28:	bf00      	nop
 8013a2a:	bf00      	nop
 8013a2c:	e7fd      	b.n	8013a2a <vPortValidateInterruptPriority+0x62>
	}
 8013a2e:	bf00      	nop
 8013a30:	3714      	adds	r7, #20
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr
 8013a3a:	bf00      	nop
 8013a3c:	e000e3f0 	.word	0xe000e3f0
 8013a40:	24001820 	.word	0x24001820
 8013a44:	e000ed0c 	.word	0xe000ed0c
 8013a48:	24001824 	.word	0x24001824

08013a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b08a      	sub	sp, #40	@ 0x28
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013a54:	2300      	movs	r3, #0
 8013a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013a58:	f7fe fd72 	bl	8012540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8013bd0 <pvPortMalloc+0x184>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d101      	bne.n	8013a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013a64:	f000 f924 	bl	8013cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013a68:	4b5a      	ldr	r3, [pc, #360]	@ (8013bd4 <pvPortMalloc+0x188>)
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4013      	ands	r3, r2
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f040 8095 	bne.w	8013ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d01e      	beq.n	8013aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013a7c:	2208      	movs	r2, #8
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	4413      	add	r3, r2
 8013a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f003 0307 	and.w	r3, r3, #7
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d015      	beq.n	8013aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f023 0307 	bic.w	r3, r3, #7
 8013a94:	3308      	adds	r3, #8
 8013a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f003 0307 	and.w	r3, r3, #7
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d00b      	beq.n	8013aba <pvPortMalloc+0x6e>
	__asm volatile
 8013aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aa6:	f383 8811 	msr	BASEPRI, r3
 8013aaa:	f3bf 8f6f 	isb	sy
 8013aae:	f3bf 8f4f 	dsb	sy
 8013ab2:	617b      	str	r3, [r7, #20]
}
 8013ab4:	bf00      	nop
 8013ab6:	bf00      	nop
 8013ab8:	e7fd      	b.n	8013ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d06f      	beq.n	8013ba0 <pvPortMalloc+0x154>
 8013ac0:	4b45      	ldr	r3, [pc, #276]	@ (8013bd8 <pvPortMalloc+0x18c>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d86a      	bhi.n	8013ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013aca:	4b44      	ldr	r3, [pc, #272]	@ (8013bdc <pvPortMalloc+0x190>)
 8013acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013ace:	4b43      	ldr	r3, [pc, #268]	@ (8013bdc <pvPortMalloc+0x190>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ad4:	e004      	b.n	8013ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d903      	bls.n	8013af2 <pvPortMalloc+0xa6>
 8013aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d1f1      	bne.n	8013ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013af2:	4b37      	ldr	r3, [pc, #220]	@ (8013bd0 <pvPortMalloc+0x184>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d051      	beq.n	8013ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013afc:	6a3b      	ldr	r3, [r7, #32]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2208      	movs	r2, #8
 8013b02:	4413      	add	r3, r2
 8013b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	6a3b      	ldr	r3, [r7, #32]
 8013b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b10:	685a      	ldr	r2, [r3, #4]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	1ad2      	subs	r2, r2, r3
 8013b16:	2308      	movs	r3, #8
 8013b18:	005b      	lsls	r3, r3, #1
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d920      	bls.n	8013b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4413      	add	r3, r2
 8013b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	f003 0307 	and.w	r3, r3, #7
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d00b      	beq.n	8013b48 <pvPortMalloc+0xfc>
	__asm volatile
 8013b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b34:	f383 8811 	msr	BASEPRI, r3
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	f3bf 8f4f 	dsb	sy
 8013b40:	613b      	str	r3, [r7, #16]
}
 8013b42:	bf00      	nop
 8013b44:	bf00      	nop
 8013b46:	e7fd      	b.n	8013b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4a:	685a      	ldr	r2, [r3, #4]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	1ad2      	subs	r2, r2, r3
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013b5a:	69b8      	ldr	r0, [r7, #24]
 8013b5c:	f000 f90a 	bl	8013d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013b60:	4b1d      	ldr	r3, [pc, #116]	@ (8013bd8 <pvPortMalloc+0x18c>)
 8013b62:	681a      	ldr	r2, [r3, #0]
 8013b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	1ad3      	subs	r3, r2, r3
 8013b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8013bd8 <pvPortMalloc+0x18c>)
 8013b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8013bd8 <pvPortMalloc+0x18c>)
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	4b1b      	ldr	r3, [pc, #108]	@ (8013be0 <pvPortMalloc+0x194>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d203      	bcs.n	8013b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013b7a:	4b17      	ldr	r3, [pc, #92]	@ (8013bd8 <pvPortMalloc+0x18c>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4a18      	ldr	r2, [pc, #96]	@ (8013be0 <pvPortMalloc+0x194>)
 8013b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b84:	685a      	ldr	r2, [r3, #4]
 8013b86:	4b13      	ldr	r3, [pc, #76]	@ (8013bd4 <pvPortMalloc+0x188>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	431a      	orrs	r2, r3
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b92:	2200      	movs	r2, #0
 8013b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013b96:	4b13      	ldr	r3, [pc, #76]	@ (8013be4 <pvPortMalloc+0x198>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	4a11      	ldr	r2, [pc, #68]	@ (8013be4 <pvPortMalloc+0x198>)
 8013b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013ba0:	f7fe fcdc 	bl	801255c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	f003 0307 	and.w	r3, r3, #7
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00b      	beq.n	8013bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8013bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb2:	f383 8811 	msr	BASEPRI, r3
 8013bb6:	f3bf 8f6f 	isb	sy
 8013bba:	f3bf 8f4f 	dsb	sy
 8013bbe:	60fb      	str	r3, [r7, #12]
}
 8013bc0:	bf00      	nop
 8013bc2:	bf00      	nop
 8013bc4:	e7fd      	b.n	8013bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8013bc6:	69fb      	ldr	r3, [r7, #28]
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3728      	adds	r7, #40	@ 0x28
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	24005430 	.word	0x24005430
 8013bd4:	24005444 	.word	0x24005444
 8013bd8:	24005434 	.word	0x24005434
 8013bdc:	24005428 	.word	0x24005428
 8013be0:	24005438 	.word	0x24005438
 8013be4:	2400543c 	.word	0x2400543c

08013be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b086      	sub	sp, #24
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d04f      	beq.n	8013c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013bfa:	2308      	movs	r3, #8
 8013bfc:	425b      	negs	r3, r3
 8013bfe:	697a      	ldr	r2, [r7, #20]
 8013c00:	4413      	add	r3, r2
 8013c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	685a      	ldr	r2, [r3, #4]
 8013c0c:	4b25      	ldr	r3, [pc, #148]	@ (8013ca4 <vPortFree+0xbc>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4013      	ands	r3, r2
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d10b      	bne.n	8013c2e <vPortFree+0x46>
	__asm volatile
 8013c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c1a:	f383 8811 	msr	BASEPRI, r3
 8013c1e:	f3bf 8f6f 	isb	sy
 8013c22:	f3bf 8f4f 	dsb	sy
 8013c26:	60fb      	str	r3, [r7, #12]
}
 8013c28:	bf00      	nop
 8013c2a:	bf00      	nop
 8013c2c:	e7fd      	b.n	8013c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00b      	beq.n	8013c4e <vPortFree+0x66>
	__asm volatile
 8013c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c3a:	f383 8811 	msr	BASEPRI, r3
 8013c3e:	f3bf 8f6f 	isb	sy
 8013c42:	f3bf 8f4f 	dsb	sy
 8013c46:	60bb      	str	r3, [r7, #8]
}
 8013c48:	bf00      	nop
 8013c4a:	bf00      	nop
 8013c4c:	e7fd      	b.n	8013c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	685a      	ldr	r2, [r3, #4]
 8013c52:	4b14      	ldr	r3, [pc, #80]	@ (8013ca4 <vPortFree+0xbc>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	4013      	ands	r3, r2
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d01e      	beq.n	8013c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d11a      	bne.n	8013c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	685a      	ldr	r2, [r3, #4]
 8013c68:	4b0e      	ldr	r3, [pc, #56]	@ (8013ca4 <vPortFree+0xbc>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	43db      	mvns	r3, r3
 8013c6e:	401a      	ands	r2, r3
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013c74:	f7fe fc64 	bl	8012540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	685a      	ldr	r2, [r3, #4]
 8013c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8013ca8 <vPortFree+0xc0>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	4413      	add	r3, r2
 8013c82:	4a09      	ldr	r2, [pc, #36]	@ (8013ca8 <vPortFree+0xc0>)
 8013c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013c86:	6938      	ldr	r0, [r7, #16]
 8013c88:	f000 f874 	bl	8013d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013c8c:	4b07      	ldr	r3, [pc, #28]	@ (8013cac <vPortFree+0xc4>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	3301      	adds	r3, #1
 8013c92:	4a06      	ldr	r2, [pc, #24]	@ (8013cac <vPortFree+0xc4>)
 8013c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013c96:	f7fe fc61 	bl	801255c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013c9a:	bf00      	nop
 8013c9c:	3718      	adds	r7, #24
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	24005444 	.word	0x24005444
 8013ca8:	24005434 	.word	0x24005434
 8013cac:	24005440 	.word	0x24005440

08013cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b085      	sub	sp, #20
 8013cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8013cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013cbc:	4b27      	ldr	r3, [pc, #156]	@ (8013d5c <prvHeapInit+0xac>)
 8013cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f003 0307 	and.w	r3, r3, #7
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00c      	beq.n	8013ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	3307      	adds	r3, #7
 8013cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f023 0307 	bic.w	r3, r3, #7
 8013cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	4a1f      	ldr	r2, [pc, #124]	@ (8013d5c <prvHeapInit+0xac>)
 8013ce0:	4413      	add	r3, r2
 8013ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8013d60 <prvHeapInit+0xb0>)
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013cee:	4b1c      	ldr	r3, [pc, #112]	@ (8013d60 <prvHeapInit+0xb0>)
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013cfc:	2208      	movs	r2, #8
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	1a9b      	subs	r3, r3, r2
 8013d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f023 0307 	bic.w	r3, r3, #7
 8013d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	4a15      	ldr	r2, [pc, #84]	@ (8013d64 <prvHeapInit+0xb4>)
 8013d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013d12:	4b14      	ldr	r3, [pc, #80]	@ (8013d64 <prvHeapInit+0xb4>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2200      	movs	r2, #0
 8013d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013d1a:	4b12      	ldr	r3, [pc, #72]	@ (8013d64 <prvHeapInit+0xb4>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	68fa      	ldr	r2, [r7, #12]
 8013d2a:	1ad2      	subs	r2, r2, r3
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013d30:	4b0c      	ldr	r3, [pc, #48]	@ (8013d64 <prvHeapInit+0xb4>)
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8013d68 <prvHeapInit+0xb8>)
 8013d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	4a09      	ldr	r2, [pc, #36]	@ (8013d6c <prvHeapInit+0xbc>)
 8013d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013d48:	4b09      	ldr	r3, [pc, #36]	@ (8013d70 <prvHeapInit+0xc0>)
 8013d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013d4e:	601a      	str	r2, [r3, #0]
}
 8013d50:	bf00      	nop
 8013d52:	3714      	adds	r7, #20
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr
 8013d5c:	24001828 	.word	0x24001828
 8013d60:	24005428 	.word	0x24005428
 8013d64:	24005430 	.word	0x24005430
 8013d68:	24005438 	.word	0x24005438
 8013d6c:	24005434 	.word	0x24005434
 8013d70:	24005444 	.word	0x24005444

08013d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013d74:	b480      	push	{r7}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013d7c:	4b28      	ldr	r3, [pc, #160]	@ (8013e20 <prvInsertBlockIntoFreeList+0xac>)
 8013d7e:	60fb      	str	r3, [r7, #12]
 8013d80:	e002      	b.n	8013d88 <prvInsertBlockIntoFreeList+0x14>
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	60fb      	str	r3, [r7, #12]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d8f7      	bhi.n	8013d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	68ba      	ldr	r2, [r7, #8]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d108      	bne.n	8013db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	685a      	ldr	r2, [r3, #4]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	441a      	add	r2, r3
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	441a      	add	r2, r3
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d118      	bne.n	8013dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	4b15      	ldr	r3, [pc, #84]	@ (8013e24 <prvInsertBlockIntoFreeList+0xb0>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d00d      	beq.n	8013df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	685a      	ldr	r2, [r3, #4]
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	441a      	add	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	601a      	str	r2, [r3, #0]
 8013df0:	e008      	b.n	8013e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013df2:	4b0c      	ldr	r3, [pc, #48]	@ (8013e24 <prvInsertBlockIntoFreeList+0xb0>)
 8013df4:	681a      	ldr	r2, [r3, #0]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	601a      	str	r2, [r3, #0]
 8013dfa:	e003      	b.n	8013e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013e04:	68fa      	ldr	r2, [r7, #12]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d002      	beq.n	8013e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e12:	bf00      	nop
 8013e14:	3714      	adds	r7, #20
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr
 8013e1e:	bf00      	nop
 8013e20:	24005428 	.word	0x24005428
 8013e24:	24005430 	.word	0x24005430

08013e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	4913      	ldr	r1, [pc, #76]	@ (8013e7c <MX_USB_DEVICE_Init+0x54>)
 8013e30:	4813      	ldr	r0, [pc, #76]	@ (8013e80 <MX_USB_DEVICE_Init+0x58>)
 8013e32:	f7fb ff0f 	bl	800fc54 <USBD_Init>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013e3c:	f7ed f9ba 	bl	80011b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO) != USBD_OK)
 8013e40:	4910      	ldr	r1, [pc, #64]	@ (8013e84 <MX_USB_DEVICE_Init+0x5c>)
 8013e42:	480f      	ldr	r0, [pc, #60]	@ (8013e80 <MX_USB_DEVICE_Init+0x58>)
 8013e44:	f7fb ff36 	bl	800fcb4 <USBD_RegisterClass>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d001      	beq.n	8013e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013e4e:	f7ed f9b1 	bl	80011b4 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &USBD_AUDIO_fops_HS) != USBD_OK)
 8013e52:	490d      	ldr	r1, [pc, #52]	@ (8013e88 <MX_USB_DEVICE_Init+0x60>)
 8013e54:	480a      	ldr	r0, [pc, #40]	@ (8013e80 <MX_USB_DEVICE_Init+0x58>)
 8013e56:	f7fb feb1 	bl	800fbbc <USBD_AUDIO_RegisterInterface>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d001      	beq.n	8013e64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013e60:	f7ed f9a8 	bl	80011b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8013e64:	4806      	ldr	r0, [pc, #24]	@ (8013e80 <MX_USB_DEVICE_Init+0x58>)
 8013e66:	f7fb ff5b 	bl	800fd20 <USBD_Start>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d001      	beq.n	8013e74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013e70:	f7ed f9a0 	bl	80011b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013e74:	f7f3 fe04 	bl	8007a80 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013e78:	bf00      	nop
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	24000100 	.word	0x24000100
 8013e80:	24005448 	.word	0x24005448
 8013e84:	2400002c 	.word	0x2400002c
 8013e88:	240000e4 	.word	0x240000e4

08013e8c <AUDIO_Init_HS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_HS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b085      	sub	sp, #20
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	60b9      	str	r1, [r7, #8]
 8013e96:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8013e98:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3714      	adds	r7, #20
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea4:	4770      	bx	lr

08013ea6 <AUDIO_DeInit_HS>:
  * @brief  DeInitializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_HS(uint32_t options)
{
 8013ea6:	b480      	push	{r7}
 8013ea8:	b083      	sub	sp, #12
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(options);
  return (USBD_OK);
 8013eae:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	370c      	adds	r7, #12
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <AUDIO_AudioCmd_HS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_HS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b085      	sub	sp, #20
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	60b9      	str	r1, [r7, #8]
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  switch(cmd)
 8013eca:	79fb      	ldrb	r3, [r7, #7]
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d001      	beq.n	8013ed4 <AUDIO_AudioCmd_HS+0x18>
 8013ed0:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8013ed2:	e000      	b.n	8013ed6 <AUDIO_AudioCmd_HS+0x1a>
    break;
 8013ed4:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8013ed6:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3714      	adds	r7, #20
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr

08013ee4 <AUDIO_VolumeCtl_HS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_HS(uint8_t vol)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	4603      	mov	r3, r0
 8013eec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  UNUSED(vol);
  return (USBD_OK);
 8013eee:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	370c      	adds	r7, #12
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <AUDIO_MuteCtl_HS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_HS(uint8_t cmd)
{
 8013efc:	b480      	push	{r7}
 8013efe:	b083      	sub	sp, #12
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	4603      	mov	r3, r0
 8013f04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 13 */
  UNUSED(cmd);
  return (USBD_OK);
 8013f06:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	370c      	adds	r7, #12
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <AUDIO_PeriodicTC_HS>:
  * @brief  AUDIO_PeriodicTC_HS
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_HS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8013f14:	b480      	push	{r7}
 8013f16:	b085      	sub	sp, #20
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	4613      	mov	r3, r2
 8013f20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 14 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8013f22:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3714      	adds	r7, #20
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr

08013f30 <AUDIO_GetState_HS>:
/**
  * @brief  Gets AUDIO state.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_HS(void)
{
 8013f30:	b480      	push	{r7}
 8013f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (USBD_OK);
 8013f34:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr

08013f40 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b083      	sub	sp, #12
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	4603      	mov	r3, r0
 8013f48:	6039      	str	r1, [r7, #0]
 8013f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	2212      	movs	r2, #18
 8013f50:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8013f52:	4b03      	ldr	r3, [pc, #12]	@ (8013f60 <USBD_HS_DeviceDescriptor+0x20>)
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	370c      	adds	r7, #12
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	24000120 	.word	0x24000120

08013f64 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f64:	b480      	push	{r7}
 8013f66:	b083      	sub	sp, #12
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	6039      	str	r1, [r7, #0]
 8013f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	2204      	movs	r2, #4
 8013f74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013f76:	4b03      	ldr	r3, [pc, #12]	@ (8013f84 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr
 8013f84:	24000134 	.word	0x24000134

08013f88 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	4603      	mov	r3, r0
 8013f90:	6039      	str	r1, [r7, #0]
 8013f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013f94:	79fb      	ldrb	r3, [r7, #7]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d105      	bne.n	8013fa6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013f9a:	683a      	ldr	r2, [r7, #0]
 8013f9c:	4907      	ldr	r1, [pc, #28]	@ (8013fbc <USBD_HS_ProductStrDescriptor+0x34>)
 8013f9e:	4808      	ldr	r0, [pc, #32]	@ (8013fc0 <USBD_HS_ProductStrDescriptor+0x38>)
 8013fa0:	f7fd f860 	bl	8011064 <USBD_GetString>
 8013fa4:	e004      	b.n	8013fb0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013fa6:	683a      	ldr	r2, [r7, #0]
 8013fa8:	4904      	ldr	r1, [pc, #16]	@ (8013fbc <USBD_HS_ProductStrDescriptor+0x34>)
 8013faa:	4805      	ldr	r0, [pc, #20]	@ (8013fc0 <USBD_HS_ProductStrDescriptor+0x38>)
 8013fac:	f7fd f85a 	bl	8011064 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013fb0:	4b02      	ldr	r3, [pc, #8]	@ (8013fbc <USBD_HS_ProductStrDescriptor+0x34>)
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	24005724 	.word	0x24005724
 8013fc0:	0801584c 	.word	0x0801584c

08013fc4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	4603      	mov	r3, r0
 8013fcc:	6039      	str	r1, [r7, #0]
 8013fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013fd0:	683a      	ldr	r2, [r7, #0]
 8013fd2:	4904      	ldr	r1, [pc, #16]	@ (8013fe4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8013fd4:	4804      	ldr	r0, [pc, #16]	@ (8013fe8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8013fd6:	f7fd f845 	bl	8011064 <USBD_GetString>
  return USBD_StrDesc;
 8013fda:	4b02      	ldr	r3, [pc, #8]	@ (8013fe4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	24005724 	.word	0x24005724
 8013fe8:	08015860 	.word	0x08015860

08013fec <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b082      	sub	sp, #8
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	6039      	str	r1, [r7, #0]
 8013ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	221a      	movs	r2, #26
 8013ffc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013ffe:	f000 f843 	bl	8014088 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014002:	4b02      	ldr	r3, [pc, #8]	@ (801400c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8014004:	4618      	mov	r0, r3
 8014006:	3708      	adds	r7, #8
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}
 801400c:	24000138 	.word	0x24000138

08014010 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	4603      	mov	r3, r0
 8014018:	6039      	str	r1, [r7, #0]
 801401a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801401c:	79fb      	ldrb	r3, [r7, #7]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d105      	bne.n	801402e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	4907      	ldr	r1, [pc, #28]	@ (8014044 <USBD_HS_ConfigStrDescriptor+0x34>)
 8014026:	4808      	ldr	r0, [pc, #32]	@ (8014048 <USBD_HS_ConfigStrDescriptor+0x38>)
 8014028:	f7fd f81c 	bl	8011064 <USBD_GetString>
 801402c:	e004      	b.n	8014038 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801402e:	683a      	ldr	r2, [r7, #0]
 8014030:	4904      	ldr	r1, [pc, #16]	@ (8014044 <USBD_HS_ConfigStrDescriptor+0x34>)
 8014032:	4805      	ldr	r0, [pc, #20]	@ (8014048 <USBD_HS_ConfigStrDescriptor+0x38>)
 8014034:	f7fd f816 	bl	8011064 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014038:	4b02      	ldr	r3, [pc, #8]	@ (8014044 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801403a:	4618      	mov	r0, r3
 801403c:	3708      	adds	r7, #8
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}
 8014042:	bf00      	nop
 8014044:	24005724 	.word	0x24005724
 8014048:	08015868 	.word	0x08015868

0801404c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	af00      	add	r7, sp, #0
 8014052:	4603      	mov	r3, r0
 8014054:	6039      	str	r1, [r7, #0]
 8014056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014058:	79fb      	ldrb	r3, [r7, #7]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d105      	bne.n	801406a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	4907      	ldr	r1, [pc, #28]	@ (8014080 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8014062:	4808      	ldr	r0, [pc, #32]	@ (8014084 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014064:	f7fc fffe 	bl	8011064 <USBD_GetString>
 8014068:	e004      	b.n	8014074 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801406a:	683a      	ldr	r2, [r7, #0]
 801406c:	4904      	ldr	r1, [pc, #16]	@ (8014080 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801406e:	4805      	ldr	r0, [pc, #20]	@ (8014084 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014070:	f7fc fff8 	bl	8011064 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014074:	4b02      	ldr	r3, [pc, #8]	@ (8014080 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8014076:	4618      	mov	r0, r3
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	24005724 	.word	0x24005724
 8014084:	08015878 	.word	0x08015878

08014088 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b084      	sub	sp, #16
 801408c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801408e:	4b0f      	ldr	r3, [pc, #60]	@ (80140cc <Get_SerialNum+0x44>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014094:	4b0e      	ldr	r3, [pc, #56]	@ (80140d0 <Get_SerialNum+0x48>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801409a:	4b0e      	ldr	r3, [pc, #56]	@ (80140d4 <Get_SerialNum+0x4c>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80140a0:	68fa      	ldr	r2, [r7, #12]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	4413      	add	r3, r2
 80140a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d009      	beq.n	80140c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80140ae:	2208      	movs	r2, #8
 80140b0:	4909      	ldr	r1, [pc, #36]	@ (80140d8 <Get_SerialNum+0x50>)
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	f000 f814 	bl	80140e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80140b8:	2204      	movs	r2, #4
 80140ba:	4908      	ldr	r1, [pc, #32]	@ (80140dc <Get_SerialNum+0x54>)
 80140bc:	68b8      	ldr	r0, [r7, #8]
 80140be:	f000 f80f 	bl	80140e0 <IntToUnicode>
  }
}
 80140c2:	bf00      	nop
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	1ff1e800 	.word	0x1ff1e800
 80140d0:	1ff1e804 	.word	0x1ff1e804
 80140d4:	1ff1e808 	.word	0x1ff1e808
 80140d8:	2400013a 	.word	0x2400013a
 80140dc:	2400014a 	.word	0x2400014a

080140e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	4613      	mov	r3, r2
 80140ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80140ee:	2300      	movs	r3, #0
 80140f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80140f2:	2300      	movs	r3, #0
 80140f4:	75fb      	strb	r3, [r7, #23]
 80140f6:	e027      	b.n	8014148 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	0f1b      	lsrs	r3, r3, #28
 80140fc:	2b09      	cmp	r3, #9
 80140fe:	d80b      	bhi.n	8014118 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	0f1b      	lsrs	r3, r3, #28
 8014104:	b2da      	uxtb	r2, r3
 8014106:	7dfb      	ldrb	r3, [r7, #23]
 8014108:	005b      	lsls	r3, r3, #1
 801410a:	4619      	mov	r1, r3
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	440b      	add	r3, r1
 8014110:	3230      	adds	r2, #48	@ 0x30
 8014112:	b2d2      	uxtb	r2, r2
 8014114:	701a      	strb	r2, [r3, #0]
 8014116:	e00a      	b.n	801412e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	0f1b      	lsrs	r3, r3, #28
 801411c:	b2da      	uxtb	r2, r3
 801411e:	7dfb      	ldrb	r3, [r7, #23]
 8014120:	005b      	lsls	r3, r3, #1
 8014122:	4619      	mov	r1, r3
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	440b      	add	r3, r1
 8014128:	3237      	adds	r2, #55	@ 0x37
 801412a:	b2d2      	uxtb	r2, r2
 801412c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	011b      	lsls	r3, r3, #4
 8014132:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014134:	7dfb      	ldrb	r3, [r7, #23]
 8014136:	005b      	lsls	r3, r3, #1
 8014138:	3301      	adds	r3, #1
 801413a:	68ba      	ldr	r2, [r7, #8]
 801413c:	4413      	add	r3, r2
 801413e:	2200      	movs	r2, #0
 8014140:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014142:	7dfb      	ldrb	r3, [r7, #23]
 8014144:	3301      	adds	r3, #1
 8014146:	75fb      	strb	r3, [r7, #23]
 8014148:	7dfa      	ldrb	r2, [r7, #23]
 801414a:	79fb      	ldrb	r3, [r7, #7]
 801414c:	429a      	cmp	r2, r3
 801414e:	d3d3      	bcc.n	80140f8 <IntToUnicode+0x18>
  }
}
 8014150:	bf00      	nop
 8014152:	bf00      	nop
 8014154:	371c      	adds	r7, #28
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr
	...

08014160 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b0be      	sub	sp, #248	@ 0xf8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014168:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801416c:	2200      	movs	r2, #0
 801416e:	601a      	str	r2, [r3, #0]
 8014170:	605a      	str	r2, [r3, #4]
 8014172:	609a      	str	r2, [r3, #8]
 8014174:	60da      	str	r2, [r3, #12]
 8014176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014178:	f107 0320 	add.w	r3, r7, #32
 801417c:	22c0      	movs	r2, #192	@ 0xc0
 801417e:	2100      	movs	r1, #0
 8014180:	4618      	mov	r0, r3
 8014182:	f000 fcb0 	bl	8014ae6 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	4a63      	ldr	r2, [pc, #396]	@ (8014318 <HAL_PCD_MspInit+0x1b8>)
 801418c:	4293      	cmp	r3, r2
 801418e:	f040 80be 	bne.w	801430e <HAL_PCD_MspInit+0x1ae>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014192:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014196:	f04f 0300 	mov.w	r3, #0
 801419a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801419e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80141a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80141a6:	f107 0320 	add.w	r3, r7, #32
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7f4 fca0 	bl	8008af0 <HAL_RCCEx_PeriphCLKConfig>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d001      	beq.n	80141ba <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 80141b6:	f7ec fffd 	bl	80011b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80141ba:	f7f3 fc61 	bl	8007a80 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80141be:	4b57      	ldr	r3, [pc, #348]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80141c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80141c4:	4a55      	ldr	r2, [pc, #340]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80141c6:	f043 0304 	orr.w	r3, r3, #4
 80141ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80141ce:	4b53      	ldr	r3, [pc, #332]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80141d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80141d4:	f003 0304 	and.w	r3, r3, #4
 80141d8:	61fb      	str	r3, [r7, #28]
 80141da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80141dc:	4b4f      	ldr	r3, [pc, #316]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80141de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80141e2:	4a4e      	ldr	r2, [pc, #312]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80141e4:	f043 0301 	orr.w	r3, r3, #1
 80141e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80141ec:	4b4b      	ldr	r3, [pc, #300]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80141ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80141f2:	f003 0301 	and.w	r3, r3, #1
 80141f6:	61bb      	str	r3, [r7, #24]
 80141f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80141fa:	4b48      	ldr	r3, [pc, #288]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80141fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014200:	4a46      	ldr	r2, [pc, #280]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 8014202:	f043 0302 	orr.w	r3, r3, #2
 8014206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801420a:	4b44      	ldr	r3, [pc, #272]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 801420c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014210:	f003 0302 	and.w	r3, r3, #2
 8014214:	617b      	str	r3, [r7, #20]
 8014216:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8014218:	230d      	movs	r3, #13
 801421a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801421e:	2302      	movs	r3, #2
 8014220:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014224:	2300      	movs	r3, #0
 8014226:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801422a:	2302      	movs	r3, #2
 801422c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8014230:	230a      	movs	r3, #10
 8014232:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014236:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801423a:	4619      	mov	r1, r3
 801423c:	4838      	ldr	r0, [pc, #224]	@ (8014320 <HAL_PCD_MspInit+0x1c0>)
 801423e:	f7f1 fe2d 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8014242:	2328      	movs	r3, #40	@ 0x28
 8014244:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014248:	2302      	movs	r3, #2
 801424a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801424e:	2300      	movs	r3, #0
 8014250:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014254:	2302      	movs	r3, #2
 8014256:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 801425a:	230a      	movs	r3, #10
 801425c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014260:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8014264:	4619      	mov	r1, r3
 8014266:	482f      	ldr	r0, [pc, #188]	@ (8014324 <HAL_PCD_MspInit+0x1c4>)
 8014268:	f7f1 fe18 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 801426c:	2310      	movs	r3, #16
 801426e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014272:	2302      	movs	r3, #2
 8014274:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014278:	2300      	movs	r3, #0
 801427a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801427e:	2300      	movs	r3, #0
 8014280:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8014284:	230c      	movs	r3, #12
 8014286:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801428a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801428e:	4619      	mov	r1, r3
 8014290:	4824      	ldr	r0, [pc, #144]	@ (8014324 <HAL_PCD_MspInit+0x1c4>)
 8014292:	f7f1 fe03 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8014296:	f643 4323 	movw	r3, #15395	@ 0x3c23
 801429a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801429e:	2302      	movs	r3, #2
 80142a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80142aa:	2302      	movs	r3, #2
 80142ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80142b0:	230a      	movs	r3, #10
 80142b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80142b6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80142ba:	4619      	mov	r1, r3
 80142bc:	481a      	ldr	r0, [pc, #104]	@ (8014328 <HAL_PCD_MspInit+0x1c8>)
 80142be:	f7f1 fded 	bl	8005e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80142c2:	4b16      	ldr	r3, [pc, #88]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80142c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80142c8:	4a14      	ldr	r2, [pc, #80]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80142ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80142ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80142d2:	4b12      	ldr	r3, [pc, #72]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80142d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80142d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80142dc:	613b      	str	r3, [r7, #16]
 80142de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80142e0:	4b0e      	ldr	r3, [pc, #56]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80142e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80142e6:	4a0d      	ldr	r2, [pc, #52]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80142e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80142ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80142f0:	4b0a      	ldr	r3, [pc, #40]	@ (801431c <HAL_PCD_MspInit+0x1bc>)
 80142f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80142f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80142fa:	60fb      	str	r3, [r7, #12]
 80142fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80142fe:	2200      	movs	r2, #0
 8014300:	2105      	movs	r1, #5
 8014302:	204d      	movs	r0, #77	@ 0x4d
 8014304:	f7ef fb48 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8014308:	204d      	movs	r0, #77	@ 0x4d
 801430a:	f7ef fb5f 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801430e:	bf00      	nop
 8014310:	37f8      	adds	r7, #248	@ 0xf8
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	40040000 	.word	0x40040000
 801431c:	58024400 	.word	0x58024400
 8014320:	58020800 	.word	0x58020800
 8014324:	58020000 	.word	0x58020000
 8014328:	58020400 	.word	0x58020400

0801432c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8014340:	4619      	mov	r1, r3
 8014342:	4610      	mov	r0, r2
 8014344:	f7fb fd39 	bl	800fdba <USBD_LL_SetupStage>
}
 8014348:	bf00      	nop
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	460b      	mov	r3, r1
 801435a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014362:	78fa      	ldrb	r2, [r7, #3]
 8014364:	6879      	ldr	r1, [r7, #4]
 8014366:	4613      	mov	r3, r2
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	4413      	add	r3, r2
 801436c:	009b      	lsls	r3, r3, #2
 801436e:	440b      	add	r3, r1
 8014370:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014374:	681a      	ldr	r2, [r3, #0]
 8014376:	78fb      	ldrb	r3, [r7, #3]
 8014378:	4619      	mov	r1, r3
 801437a:	f7fb fd73 	bl	800fe64 <USBD_LL_DataOutStage>
}
 801437e:	bf00      	nop
 8014380:	3708      	adds	r7, #8
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}

08014386 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014386:	b580      	push	{r7, lr}
 8014388:	b082      	sub	sp, #8
 801438a:	af00      	add	r7, sp, #0
 801438c:	6078      	str	r0, [r7, #4]
 801438e:	460b      	mov	r3, r1
 8014390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014398:	78fa      	ldrb	r2, [r7, #3]
 801439a:	6879      	ldr	r1, [r7, #4]
 801439c:	4613      	mov	r3, r2
 801439e:	00db      	lsls	r3, r3, #3
 80143a0:	4413      	add	r3, r2
 80143a2:	009b      	lsls	r3, r3, #2
 80143a4:	440b      	add	r3, r1
 80143a6:	3320      	adds	r3, #32
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	78fb      	ldrb	r3, [r7, #3]
 80143ac:	4619      	mov	r1, r3
 80143ae:	f7fb fe0c 	bl	800ffca <USBD_LL_DataInStage>
}
 80143b2:	bf00      	nop
 80143b4:	3708      	adds	r7, #8
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}

080143ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143ba:	b580      	push	{r7, lr}
 80143bc:	b082      	sub	sp, #8
 80143be:	af00      	add	r7, sp, #0
 80143c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fb ff46 	bl	801025a <USBD_LL_SOF>
}
 80143ce:	bf00      	nop
 80143d0:	3708      	adds	r7, #8
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b084      	sub	sp, #16
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80143de:	2301      	movs	r3, #1
 80143e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	79db      	ldrb	r3, [r3, #7]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d102      	bne.n	80143f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80143ea:	2300      	movs	r3, #0
 80143ec:	73fb      	strb	r3, [r7, #15]
 80143ee:	e008      	b.n	8014402 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	79db      	ldrb	r3, [r3, #7]
 80143f4:	2b02      	cmp	r3, #2
 80143f6:	d102      	bne.n	80143fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80143f8:	2301      	movs	r3, #1
 80143fa:	73fb      	strb	r3, [r7, #15]
 80143fc:	e001      	b.n	8014402 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80143fe:	f7ec fed9 	bl	80011b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014408:	7bfa      	ldrb	r2, [r7, #15]
 801440a:	4611      	mov	r1, r2
 801440c:	4618      	mov	r0, r3
 801440e:	f7fb fee0 	bl	80101d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014418:	4618      	mov	r0, r3
 801441a:	f7fb fe88 	bl	801012e <USBD_LL_Reset>
}
 801441e:	bf00      	nop
 8014420:	3710      	adds	r7, #16
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
	...

08014428 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014436:	4618      	mov	r0, r3
 8014438:	f7fb fedb 	bl	80101f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	687a      	ldr	r2, [r7, #4]
 8014448:	6812      	ldr	r2, [r2, #0]
 801444a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801444e:	f043 0301 	orr.w	r3, r3, #1
 8014452:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	7adb      	ldrb	r3, [r3, #11]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d005      	beq.n	8014468 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801445c:	4b04      	ldr	r3, [pc, #16]	@ (8014470 <HAL_PCD_SuspendCallback+0x48>)
 801445e:	691b      	ldr	r3, [r3, #16]
 8014460:	4a03      	ldr	r2, [pc, #12]	@ (8014470 <HAL_PCD_SuspendCallback+0x48>)
 8014462:	f043 0306 	orr.w	r3, r3, #6
 8014466:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014468:	bf00      	nop
 801446a:	3708      	adds	r7, #8
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	e000ed00 	.word	0xe000ed00

08014474 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014482:	4618      	mov	r0, r3
 8014484:	f7fb fed1 	bl	801022a <USBD_LL_Resume>
}
 8014488:	bf00      	nop
 801448a:	3708      	adds	r7, #8
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	460b      	mov	r3, r1
 801449a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80144a2:	78fa      	ldrb	r2, [r7, #3]
 80144a4:	4611      	mov	r1, r2
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7fb ff29 	bl	80102fe <USBD_LL_IsoOUTIncomplete>
}
 80144ac:	bf00      	nop
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	460b      	mov	r3, r1
 80144be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80144c6:	78fa      	ldrb	r2, [r7, #3]
 80144c8:	4611      	mov	r1, r2
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7fb fee5 	bl	801029a <USBD_LL_IsoINIncomplete>
}
 80144d0:	bf00      	nop
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7fb ff3b 	bl	8010362 <USBD_LL_DevConnected>
}
 80144ec:	bf00      	nop
 80144ee:	3708      	adds	r7, #8
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}

080144f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014502:	4618      	mov	r0, r3
 8014504:	f7fb ff38 	bl	8010378 <USBD_LL_DevDisconnected>
}
 8014508:	bf00      	nop
 801450a:	3708      	adds	r7, #8
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}

08014510 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b082      	sub	sp, #8
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d140      	bne.n	80145a2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8014520:	4a22      	ldr	r2, [pc, #136]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	4a20      	ldr	r2, [pc, #128]	@ (80145ac <USBD_LL_Init+0x9c>)
 801452c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8014530:	4b1e      	ldr	r3, [pc, #120]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014532:	4a1f      	ldr	r2, [pc, #124]	@ (80145b0 <USBD_LL_Init+0xa0>)
 8014534:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8014536:	4b1d      	ldr	r3, [pc, #116]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014538:	2209      	movs	r2, #9
 801453a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 801453c:	4b1b      	ldr	r3, [pc, #108]	@ (80145ac <USBD_LL_Init+0x9c>)
 801453e:	2200      	movs	r2, #0
 8014540:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 8014542:	4b1a      	ldr	r3, [pc, #104]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014544:	2201      	movs	r2, #1
 8014546:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8014548:	4b18      	ldr	r3, [pc, #96]	@ (80145ac <USBD_LL_Init+0x9c>)
 801454a:	2201      	movs	r2, #1
 801454c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 801454e:	4b17      	ldr	r3, [pc, #92]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014550:	2201      	movs	r2, #1
 8014552:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8014554:	4b15      	ldr	r3, [pc, #84]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014556:	2200      	movs	r2, #0
 8014558:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801455a:	4b14      	ldr	r3, [pc, #80]	@ (80145ac <USBD_LL_Init+0x9c>)
 801455c:	2200      	movs	r2, #0
 801455e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8014560:	4b12      	ldr	r3, [pc, #72]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014562:	2200      	movs	r2, #0
 8014564:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8014566:	4b11      	ldr	r3, [pc, #68]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014568:	2200      	movs	r2, #0
 801456a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801456c:	4b0f      	ldr	r3, [pc, #60]	@ (80145ac <USBD_LL_Init+0x9c>)
 801456e:	2200      	movs	r2, #0
 8014570:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8014572:	480e      	ldr	r0, [pc, #56]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014574:	f7f1 ffa9 	bl	80064ca <HAL_PCD_Init>
 8014578:	4603      	mov	r3, r0
 801457a:	2b00      	cmp	r3, #0
 801457c:	d001      	beq.n	8014582 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801457e:	f7ec fe19 	bl	80011b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8014582:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8014586:	4809      	ldr	r0, [pc, #36]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014588:	f7f3 f9ff 	bl	800798a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801458c:	2280      	movs	r2, #128	@ 0x80
 801458e:	2100      	movs	r1, #0
 8014590:	4806      	ldr	r0, [pc, #24]	@ (80145ac <USBD_LL_Init+0x9c>)
 8014592:	f7f3 f9b3 	bl	80078fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8014596:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801459a:	2101      	movs	r1, #1
 801459c:	4803      	ldr	r0, [pc, #12]	@ (80145ac <USBD_LL_Init+0x9c>)
 801459e:	f7f3 f9ad 	bl	80078fc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	24005924 	.word	0x24005924
 80145b0:	40040000 	.word	0x40040000

080145b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b084      	sub	sp, #16
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145bc:	2300      	movs	r3, #0
 80145be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145c0:	2300      	movs	r3, #0
 80145c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7f2 f889 	bl	80066e2 <HAL_PCD_Start>
 80145d0:	4603      	mov	r3, r0
 80145d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80145d4:	7bfb      	ldrb	r3, [r7, #15]
 80145d6:	4618      	mov	r0, r3
 80145d8:	f000 f942 	bl	8014860 <USBD_Get_USB_Status>
 80145dc:	4603      	mov	r3, r0
 80145de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80145e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3710      	adds	r7, #16
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b084      	sub	sp, #16
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
 80145f2:	4608      	mov	r0, r1
 80145f4:	4611      	mov	r1, r2
 80145f6:	461a      	mov	r2, r3
 80145f8:	4603      	mov	r3, r0
 80145fa:	70fb      	strb	r3, [r7, #3]
 80145fc:	460b      	mov	r3, r1
 80145fe:	70bb      	strb	r3, [r7, #2]
 8014600:	4613      	mov	r3, r2
 8014602:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014604:	2300      	movs	r3, #0
 8014606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014608:	2300      	movs	r3, #0
 801460a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014612:	78bb      	ldrb	r3, [r7, #2]
 8014614:	883a      	ldrh	r2, [r7, #0]
 8014616:	78f9      	ldrb	r1, [r7, #3]
 8014618:	f7f2 fd8a 	bl	8007130 <HAL_PCD_EP_Open>
 801461c:	4603      	mov	r3, r0
 801461e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014620:	7bfb      	ldrb	r3, [r7, #15]
 8014622:	4618      	mov	r0, r3
 8014624:	f000 f91c 	bl	8014860 <USBD_Get_USB_Status>
 8014628:	4603      	mov	r3, r0
 801462a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801462c:	7bbb      	ldrb	r3, [r7, #14]
}
 801462e:	4618      	mov	r0, r3
 8014630:	3710      	adds	r7, #16
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}

08014636 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014636:	b580      	push	{r7, lr}
 8014638:	b084      	sub	sp, #16
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	460b      	mov	r3, r1
 8014640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014642:	2300      	movs	r3, #0
 8014644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014646:	2300      	movs	r3, #0
 8014648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014650:	78fa      	ldrb	r2, [r7, #3]
 8014652:	4611      	mov	r1, r2
 8014654:	4618      	mov	r0, r3
 8014656:	f7f2 fdd5 	bl	8007204 <HAL_PCD_EP_Close>
 801465a:	4603      	mov	r3, r0
 801465c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801465e:	7bfb      	ldrb	r3, [r7, #15]
 8014660:	4618      	mov	r0, r3
 8014662:	f000 f8fd 	bl	8014860 <USBD_Get_USB_Status>
 8014666:	4603      	mov	r3, r0
 8014668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801466a:	7bbb      	ldrb	r3, [r7, #14]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3710      	adds	r7, #16
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b084      	sub	sp, #16
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	460b      	mov	r3, r1
 801467e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014680:	2300      	movs	r3, #0
 8014682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014684:	2300      	movs	r3, #0
 8014686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801468e:	78fa      	ldrb	r2, [r7, #3]
 8014690:	4611      	mov	r1, r2
 8014692:	4618      	mov	r0, r3
 8014694:	f7f2 fe8d 	bl	80073b2 <HAL_PCD_EP_SetStall>
 8014698:	4603      	mov	r3, r0
 801469a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801469c:	7bfb      	ldrb	r3, [r7, #15]
 801469e:	4618      	mov	r0, r3
 80146a0:	f000 f8de 	bl	8014860 <USBD_Get_USB_Status>
 80146a4:	4603      	mov	r3, r0
 80146a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3710      	adds	r7, #16
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b084      	sub	sp, #16
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6078      	str	r0, [r7, #4]
 80146ba:	460b      	mov	r3, r1
 80146bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146be:	2300      	movs	r3, #0
 80146c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146c2:	2300      	movs	r3, #0
 80146c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80146cc:	78fa      	ldrb	r2, [r7, #3]
 80146ce:	4611      	mov	r1, r2
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7f2 fed1 	bl	8007478 <HAL_PCD_EP_ClrStall>
 80146d6:	4603      	mov	r3, r0
 80146d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80146da:	7bfb      	ldrb	r3, [r7, #15]
 80146dc:	4618      	mov	r0, r3
 80146de:	f000 f8bf 	bl	8014860 <USBD_Get_USB_Status>
 80146e2:	4603      	mov	r3, r0
 80146e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3710      	adds	r7, #16
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80146f0:	b480      	push	{r7}
 80146f2:	b085      	sub	sp, #20
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	460b      	mov	r3, r1
 80146fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014702:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014708:	2b00      	cmp	r3, #0
 801470a:	da0b      	bge.n	8014724 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801470c:	78fb      	ldrb	r3, [r7, #3]
 801470e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014712:	68f9      	ldr	r1, [r7, #12]
 8014714:	4613      	mov	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	4413      	add	r3, r2
 801471a:	009b      	lsls	r3, r3, #2
 801471c:	440b      	add	r3, r1
 801471e:	3316      	adds	r3, #22
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	e00b      	b.n	801473c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014724:	78fb      	ldrb	r3, [r7, #3]
 8014726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801472a:	68f9      	ldr	r1, [r7, #12]
 801472c:	4613      	mov	r3, r2
 801472e:	00db      	lsls	r3, r3, #3
 8014730:	4413      	add	r3, r2
 8014732:	009b      	lsls	r3, r3, #2
 8014734:	440b      	add	r3, r1
 8014736:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801473a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801473c:	4618      	mov	r0, r3
 801473e:	3714      	adds	r7, #20
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr

08014748 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b084      	sub	sp, #16
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
 8014750:	460b      	mov	r3, r1
 8014752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014754:	2300      	movs	r3, #0
 8014756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014758:	2300      	movs	r3, #0
 801475a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014762:	78fa      	ldrb	r2, [r7, #3]
 8014764:	4611      	mov	r1, r2
 8014766:	4618      	mov	r0, r3
 8014768:	f7f2 fcbe 	bl	80070e8 <HAL_PCD_SetAddress>
 801476c:	4603      	mov	r3, r0
 801476e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014770:	7bfb      	ldrb	r3, [r7, #15]
 8014772:	4618      	mov	r0, r3
 8014774:	f000 f874 	bl	8014860 <USBD_Get_USB_Status>
 8014778:	4603      	mov	r3, r0
 801477a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801477c:	7bbb      	ldrb	r3, [r7, #14]
}
 801477e:	4618      	mov	r0, r3
 8014780:	3710      	adds	r7, #16
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}

08014786 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014786:	b580      	push	{r7, lr}
 8014788:	b086      	sub	sp, #24
 801478a:	af00      	add	r7, sp, #0
 801478c:	60f8      	str	r0, [r7, #12]
 801478e:	607a      	str	r2, [r7, #4]
 8014790:	603b      	str	r3, [r7, #0]
 8014792:	460b      	mov	r3, r1
 8014794:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014796:	2300      	movs	r3, #0
 8014798:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801479a:	2300      	movs	r3, #0
 801479c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80147a4:	7af9      	ldrb	r1, [r7, #11]
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	f7f2 fdc8 	bl	800733e <HAL_PCD_EP_Transmit>
 80147ae:	4603      	mov	r3, r0
 80147b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80147b2:	7dfb      	ldrb	r3, [r7, #23]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f000 f853 	bl	8014860 <USBD_Get_USB_Status>
 80147ba:	4603      	mov	r3, r0
 80147bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80147be:	7dbb      	ldrb	r3, [r7, #22]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3718      	adds	r7, #24
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b086      	sub	sp, #24
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	607a      	str	r2, [r7, #4]
 80147d2:	603b      	str	r3, [r7, #0]
 80147d4:	460b      	mov	r3, r1
 80147d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147dc:	2300      	movs	r3, #0
 80147de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80147e6:	7af9      	ldrb	r1, [r7, #11]
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	f7f2 fd54 	bl	8007298 <HAL_PCD_EP_Receive>
 80147f0:	4603      	mov	r3, r0
 80147f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80147f4:	7dfb      	ldrb	r3, [r7, #23]
 80147f6:	4618      	mov	r0, r3
 80147f8:	f000 f832 	bl	8014860 <USBD_Get_USB_Status>
 80147fc:	4603      	mov	r3, r0
 80147fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014800:	7dbb      	ldrb	r3, [r7, #22]
}
 8014802:	4618      	mov	r0, r3
 8014804:	3718      	adds	r7, #24
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}

0801480a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b082      	sub	sp, #8
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
 8014812:	460b      	mov	r3, r1
 8014814:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801481c:	78fa      	ldrb	r2, [r7, #3]
 801481e:	4611      	mov	r1, r2
 8014820:	4618      	mov	r0, r3
 8014822:	f7f2 fd74 	bl	800730e <HAL_PCD_EP_GetRxCount>
 8014826:	4603      	mov	r3, r0
}
 8014828:	4618      	mov	r0, r3
 801482a:	3708      	adds	r7, #8
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}

08014830 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014830:	b480      	push	{r7}
 8014832:	b083      	sub	sp, #12
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014838:	4b03      	ldr	r3, [pc, #12]	@ (8014848 <USBD_static_malloc+0x18>)
}
 801483a:	4618      	mov	r0, r3
 801483c:	370c      	adds	r7, #12
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	24005e08 	.word	0x24005e08

0801484c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801484c:	b480      	push	{r7}
 801484e:	b083      	sub	sp, #12
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8014854:	bf00      	nop
 8014856:	370c      	adds	r7, #12
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr

08014860 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014860:	b480      	push	{r7}
 8014862:	b085      	sub	sp, #20
 8014864:	af00      	add	r7, sp, #0
 8014866:	4603      	mov	r3, r0
 8014868:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801486a:	2300      	movs	r3, #0
 801486c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801486e:	79fb      	ldrb	r3, [r7, #7]
 8014870:	2b03      	cmp	r3, #3
 8014872:	d817      	bhi.n	80148a4 <USBD_Get_USB_Status+0x44>
 8014874:	a201      	add	r2, pc, #4	@ (adr r2, 801487c <USBD_Get_USB_Status+0x1c>)
 8014876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801487a:	bf00      	nop
 801487c:	0801488d 	.word	0x0801488d
 8014880:	08014893 	.word	0x08014893
 8014884:	08014899 	.word	0x08014899
 8014888:	0801489f 	.word	0x0801489f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801488c:	2300      	movs	r3, #0
 801488e:	73fb      	strb	r3, [r7, #15]
    break;
 8014890:	e00b      	b.n	80148aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014892:	2303      	movs	r3, #3
 8014894:	73fb      	strb	r3, [r7, #15]
    break;
 8014896:	e008      	b.n	80148aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014898:	2301      	movs	r3, #1
 801489a:	73fb      	strb	r3, [r7, #15]
    break;
 801489c:	e005      	b.n	80148aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801489e:	2303      	movs	r3, #3
 80148a0:	73fb      	strb	r3, [r7, #15]
    break;
 80148a2:	e002      	b.n	80148aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80148a4:	2303      	movs	r3, #3
 80148a6:	73fb      	strb	r3, [r7, #15]
    break;
 80148a8:	bf00      	nop
  }
  return usb_status;
 80148aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3714      	adds	r7, #20
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <std>:
 80148b8:	2300      	movs	r3, #0
 80148ba:	b510      	push	{r4, lr}
 80148bc:	4604      	mov	r4, r0
 80148be:	e9c0 3300 	strd	r3, r3, [r0]
 80148c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148c6:	6083      	str	r3, [r0, #8]
 80148c8:	8181      	strh	r1, [r0, #12]
 80148ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80148cc:	81c2      	strh	r2, [r0, #14]
 80148ce:	6183      	str	r3, [r0, #24]
 80148d0:	4619      	mov	r1, r3
 80148d2:	2208      	movs	r2, #8
 80148d4:	305c      	adds	r0, #92	@ 0x5c
 80148d6:	f000 f906 	bl	8014ae6 <memset>
 80148da:	4b0d      	ldr	r3, [pc, #52]	@ (8014910 <std+0x58>)
 80148dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80148de:	4b0d      	ldr	r3, [pc, #52]	@ (8014914 <std+0x5c>)
 80148e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80148e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014918 <std+0x60>)
 80148e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80148e6:	4b0d      	ldr	r3, [pc, #52]	@ (801491c <std+0x64>)
 80148e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80148ea:	4b0d      	ldr	r3, [pc, #52]	@ (8014920 <std+0x68>)
 80148ec:	6224      	str	r4, [r4, #32]
 80148ee:	429c      	cmp	r4, r3
 80148f0:	d006      	beq.n	8014900 <std+0x48>
 80148f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80148f6:	4294      	cmp	r4, r2
 80148f8:	d002      	beq.n	8014900 <std+0x48>
 80148fa:	33d0      	adds	r3, #208	@ 0xd0
 80148fc:	429c      	cmp	r4, r3
 80148fe:	d105      	bne.n	801490c <std+0x54>
 8014900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014908:	f000 b9c4 	b.w	8014c94 <__retarget_lock_init_recursive>
 801490c:	bd10      	pop	{r4, pc}
 801490e:	bf00      	nop
 8014910:	08014a61 	.word	0x08014a61
 8014914:	08014a83 	.word	0x08014a83
 8014918:	08014abb 	.word	0x08014abb
 801491c:	08014adf 	.word	0x08014adf
 8014920:	240079dc 	.word	0x240079dc

08014924 <stdio_exit_handler>:
 8014924:	4a02      	ldr	r2, [pc, #8]	@ (8014930 <stdio_exit_handler+0xc>)
 8014926:	4903      	ldr	r1, [pc, #12]	@ (8014934 <stdio_exit_handler+0x10>)
 8014928:	4803      	ldr	r0, [pc, #12]	@ (8014938 <stdio_exit_handler+0x14>)
 801492a:	f000 b869 	b.w	8014a00 <_fwalk_sglue>
 801492e:	bf00      	nop
 8014930:	24000154 	.word	0x24000154
 8014934:	0801554d 	.word	0x0801554d
 8014938:	24000164 	.word	0x24000164

0801493c <cleanup_stdio>:
 801493c:	6841      	ldr	r1, [r0, #4]
 801493e:	4b0c      	ldr	r3, [pc, #48]	@ (8014970 <cleanup_stdio+0x34>)
 8014940:	4299      	cmp	r1, r3
 8014942:	b510      	push	{r4, lr}
 8014944:	4604      	mov	r4, r0
 8014946:	d001      	beq.n	801494c <cleanup_stdio+0x10>
 8014948:	f000 fe00 	bl	801554c <_fflush_r>
 801494c:	68a1      	ldr	r1, [r4, #8]
 801494e:	4b09      	ldr	r3, [pc, #36]	@ (8014974 <cleanup_stdio+0x38>)
 8014950:	4299      	cmp	r1, r3
 8014952:	d002      	beq.n	801495a <cleanup_stdio+0x1e>
 8014954:	4620      	mov	r0, r4
 8014956:	f000 fdf9 	bl	801554c <_fflush_r>
 801495a:	68e1      	ldr	r1, [r4, #12]
 801495c:	4b06      	ldr	r3, [pc, #24]	@ (8014978 <cleanup_stdio+0x3c>)
 801495e:	4299      	cmp	r1, r3
 8014960:	d004      	beq.n	801496c <cleanup_stdio+0x30>
 8014962:	4620      	mov	r0, r4
 8014964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014968:	f000 bdf0 	b.w	801554c <_fflush_r>
 801496c:	bd10      	pop	{r4, pc}
 801496e:	bf00      	nop
 8014970:	240079dc 	.word	0x240079dc
 8014974:	24007a44 	.word	0x24007a44
 8014978:	24007aac 	.word	0x24007aac

0801497c <global_stdio_init.part.0>:
 801497c:	b510      	push	{r4, lr}
 801497e:	4b0b      	ldr	r3, [pc, #44]	@ (80149ac <global_stdio_init.part.0+0x30>)
 8014980:	4c0b      	ldr	r4, [pc, #44]	@ (80149b0 <global_stdio_init.part.0+0x34>)
 8014982:	4a0c      	ldr	r2, [pc, #48]	@ (80149b4 <global_stdio_init.part.0+0x38>)
 8014984:	601a      	str	r2, [r3, #0]
 8014986:	4620      	mov	r0, r4
 8014988:	2200      	movs	r2, #0
 801498a:	2104      	movs	r1, #4
 801498c:	f7ff ff94 	bl	80148b8 <std>
 8014990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014994:	2201      	movs	r2, #1
 8014996:	2109      	movs	r1, #9
 8014998:	f7ff ff8e 	bl	80148b8 <std>
 801499c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80149a0:	2202      	movs	r2, #2
 80149a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149a6:	2112      	movs	r1, #18
 80149a8:	f7ff bf86 	b.w	80148b8 <std>
 80149ac:	24007b14 	.word	0x24007b14
 80149b0:	240079dc 	.word	0x240079dc
 80149b4:	08014925 	.word	0x08014925

080149b8 <__sfp_lock_acquire>:
 80149b8:	4801      	ldr	r0, [pc, #4]	@ (80149c0 <__sfp_lock_acquire+0x8>)
 80149ba:	f000 b96c 	b.w	8014c96 <__retarget_lock_acquire_recursive>
 80149be:	bf00      	nop
 80149c0:	24007b1d 	.word	0x24007b1d

080149c4 <__sfp_lock_release>:
 80149c4:	4801      	ldr	r0, [pc, #4]	@ (80149cc <__sfp_lock_release+0x8>)
 80149c6:	f000 b967 	b.w	8014c98 <__retarget_lock_release_recursive>
 80149ca:	bf00      	nop
 80149cc:	24007b1d 	.word	0x24007b1d

080149d0 <__sinit>:
 80149d0:	b510      	push	{r4, lr}
 80149d2:	4604      	mov	r4, r0
 80149d4:	f7ff fff0 	bl	80149b8 <__sfp_lock_acquire>
 80149d8:	6a23      	ldr	r3, [r4, #32]
 80149da:	b11b      	cbz	r3, 80149e4 <__sinit+0x14>
 80149dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149e0:	f7ff bff0 	b.w	80149c4 <__sfp_lock_release>
 80149e4:	4b04      	ldr	r3, [pc, #16]	@ (80149f8 <__sinit+0x28>)
 80149e6:	6223      	str	r3, [r4, #32]
 80149e8:	4b04      	ldr	r3, [pc, #16]	@ (80149fc <__sinit+0x2c>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d1f5      	bne.n	80149dc <__sinit+0xc>
 80149f0:	f7ff ffc4 	bl	801497c <global_stdio_init.part.0>
 80149f4:	e7f2      	b.n	80149dc <__sinit+0xc>
 80149f6:	bf00      	nop
 80149f8:	0801493d 	.word	0x0801493d
 80149fc:	24007b14 	.word	0x24007b14

08014a00 <_fwalk_sglue>:
 8014a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a04:	4607      	mov	r7, r0
 8014a06:	4688      	mov	r8, r1
 8014a08:	4614      	mov	r4, r2
 8014a0a:	2600      	movs	r6, #0
 8014a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a10:	f1b9 0901 	subs.w	r9, r9, #1
 8014a14:	d505      	bpl.n	8014a22 <_fwalk_sglue+0x22>
 8014a16:	6824      	ldr	r4, [r4, #0]
 8014a18:	2c00      	cmp	r4, #0
 8014a1a:	d1f7      	bne.n	8014a0c <_fwalk_sglue+0xc>
 8014a1c:	4630      	mov	r0, r6
 8014a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a22:	89ab      	ldrh	r3, [r5, #12]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d907      	bls.n	8014a38 <_fwalk_sglue+0x38>
 8014a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	d003      	beq.n	8014a38 <_fwalk_sglue+0x38>
 8014a30:	4629      	mov	r1, r5
 8014a32:	4638      	mov	r0, r7
 8014a34:	47c0      	blx	r8
 8014a36:	4306      	orrs	r6, r0
 8014a38:	3568      	adds	r5, #104	@ 0x68
 8014a3a:	e7e9      	b.n	8014a10 <_fwalk_sglue+0x10>

08014a3c <iprintf>:
 8014a3c:	b40f      	push	{r0, r1, r2, r3}
 8014a3e:	b507      	push	{r0, r1, r2, lr}
 8014a40:	4906      	ldr	r1, [pc, #24]	@ (8014a5c <iprintf+0x20>)
 8014a42:	ab04      	add	r3, sp, #16
 8014a44:	6808      	ldr	r0, [r1, #0]
 8014a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a4a:	6881      	ldr	r1, [r0, #8]
 8014a4c:	9301      	str	r3, [sp, #4]
 8014a4e:	f000 fa55 	bl	8014efc <_vfiprintf_r>
 8014a52:	b003      	add	sp, #12
 8014a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a58:	b004      	add	sp, #16
 8014a5a:	4770      	bx	lr
 8014a5c:	24000160 	.word	0x24000160

08014a60 <__sread>:
 8014a60:	b510      	push	{r4, lr}
 8014a62:	460c      	mov	r4, r1
 8014a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a68:	f000 f8c6 	bl	8014bf8 <_read_r>
 8014a6c:	2800      	cmp	r0, #0
 8014a6e:	bfab      	itete	ge
 8014a70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014a72:	89a3      	ldrhlt	r3, [r4, #12]
 8014a74:	181b      	addge	r3, r3, r0
 8014a76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014a7a:	bfac      	ite	ge
 8014a7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014a7e:	81a3      	strhlt	r3, [r4, #12]
 8014a80:	bd10      	pop	{r4, pc}

08014a82 <__swrite>:
 8014a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a86:	461f      	mov	r7, r3
 8014a88:	898b      	ldrh	r3, [r1, #12]
 8014a8a:	05db      	lsls	r3, r3, #23
 8014a8c:	4605      	mov	r5, r0
 8014a8e:	460c      	mov	r4, r1
 8014a90:	4616      	mov	r6, r2
 8014a92:	d505      	bpl.n	8014aa0 <__swrite+0x1e>
 8014a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a98:	2302      	movs	r3, #2
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f000 f89a 	bl	8014bd4 <_lseek_r>
 8014aa0:	89a3      	ldrh	r3, [r4, #12]
 8014aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014aaa:	81a3      	strh	r3, [r4, #12]
 8014aac:	4632      	mov	r2, r6
 8014aae:	463b      	mov	r3, r7
 8014ab0:	4628      	mov	r0, r5
 8014ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab6:	f000 b8b1 	b.w	8014c1c <_write_r>

08014aba <__sseek>:
 8014aba:	b510      	push	{r4, lr}
 8014abc:	460c      	mov	r4, r1
 8014abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ac2:	f000 f887 	bl	8014bd4 <_lseek_r>
 8014ac6:	1c43      	adds	r3, r0, #1
 8014ac8:	89a3      	ldrh	r3, [r4, #12]
 8014aca:	bf15      	itete	ne
 8014acc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014ace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014ad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014ad6:	81a3      	strheq	r3, [r4, #12]
 8014ad8:	bf18      	it	ne
 8014ada:	81a3      	strhne	r3, [r4, #12]
 8014adc:	bd10      	pop	{r4, pc}

08014ade <__sclose>:
 8014ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ae2:	f000 b809 	b.w	8014af8 <_close_r>

08014ae6 <memset>:
 8014ae6:	4402      	add	r2, r0
 8014ae8:	4603      	mov	r3, r0
 8014aea:	4293      	cmp	r3, r2
 8014aec:	d100      	bne.n	8014af0 <memset+0xa>
 8014aee:	4770      	bx	lr
 8014af0:	f803 1b01 	strb.w	r1, [r3], #1
 8014af4:	e7f9      	b.n	8014aea <memset+0x4>
	...

08014af8 <_close_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	4d06      	ldr	r5, [pc, #24]	@ (8014b14 <_close_r+0x1c>)
 8014afc:	2300      	movs	r3, #0
 8014afe:	4604      	mov	r4, r0
 8014b00:	4608      	mov	r0, r1
 8014b02:	602b      	str	r3, [r5, #0]
 8014b04:	f7ed fa2f 	bl	8001f66 <_close>
 8014b08:	1c43      	adds	r3, r0, #1
 8014b0a:	d102      	bne.n	8014b12 <_close_r+0x1a>
 8014b0c:	682b      	ldr	r3, [r5, #0]
 8014b0e:	b103      	cbz	r3, 8014b12 <_close_r+0x1a>
 8014b10:	6023      	str	r3, [r4, #0]
 8014b12:	bd38      	pop	{r3, r4, r5, pc}
 8014b14:	24007b18 	.word	0x24007b18

08014b18 <_reclaim_reent>:
 8014b18:	4b2d      	ldr	r3, [pc, #180]	@ (8014bd0 <_reclaim_reent+0xb8>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	4283      	cmp	r3, r0
 8014b1e:	b570      	push	{r4, r5, r6, lr}
 8014b20:	4604      	mov	r4, r0
 8014b22:	d053      	beq.n	8014bcc <_reclaim_reent+0xb4>
 8014b24:	69c3      	ldr	r3, [r0, #28]
 8014b26:	b31b      	cbz	r3, 8014b70 <_reclaim_reent+0x58>
 8014b28:	68db      	ldr	r3, [r3, #12]
 8014b2a:	b163      	cbz	r3, 8014b46 <_reclaim_reent+0x2e>
 8014b2c:	2500      	movs	r5, #0
 8014b2e:	69e3      	ldr	r3, [r4, #28]
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	5959      	ldr	r1, [r3, r5]
 8014b34:	b9b1      	cbnz	r1, 8014b64 <_reclaim_reent+0x4c>
 8014b36:	3504      	adds	r5, #4
 8014b38:	2d80      	cmp	r5, #128	@ 0x80
 8014b3a:	d1f8      	bne.n	8014b2e <_reclaim_reent+0x16>
 8014b3c:	69e3      	ldr	r3, [r4, #28]
 8014b3e:	4620      	mov	r0, r4
 8014b40:	68d9      	ldr	r1, [r3, #12]
 8014b42:	f000 f8b9 	bl	8014cb8 <_free_r>
 8014b46:	69e3      	ldr	r3, [r4, #28]
 8014b48:	6819      	ldr	r1, [r3, #0]
 8014b4a:	b111      	cbz	r1, 8014b52 <_reclaim_reent+0x3a>
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	f000 f8b3 	bl	8014cb8 <_free_r>
 8014b52:	69e3      	ldr	r3, [r4, #28]
 8014b54:	689d      	ldr	r5, [r3, #8]
 8014b56:	b15d      	cbz	r5, 8014b70 <_reclaim_reent+0x58>
 8014b58:	4629      	mov	r1, r5
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	682d      	ldr	r5, [r5, #0]
 8014b5e:	f000 f8ab 	bl	8014cb8 <_free_r>
 8014b62:	e7f8      	b.n	8014b56 <_reclaim_reent+0x3e>
 8014b64:	680e      	ldr	r6, [r1, #0]
 8014b66:	4620      	mov	r0, r4
 8014b68:	f000 f8a6 	bl	8014cb8 <_free_r>
 8014b6c:	4631      	mov	r1, r6
 8014b6e:	e7e1      	b.n	8014b34 <_reclaim_reent+0x1c>
 8014b70:	6961      	ldr	r1, [r4, #20]
 8014b72:	b111      	cbz	r1, 8014b7a <_reclaim_reent+0x62>
 8014b74:	4620      	mov	r0, r4
 8014b76:	f000 f89f 	bl	8014cb8 <_free_r>
 8014b7a:	69e1      	ldr	r1, [r4, #28]
 8014b7c:	b111      	cbz	r1, 8014b84 <_reclaim_reent+0x6c>
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f000 f89a 	bl	8014cb8 <_free_r>
 8014b84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014b86:	b111      	cbz	r1, 8014b8e <_reclaim_reent+0x76>
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f000 f895 	bl	8014cb8 <_free_r>
 8014b8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b90:	b111      	cbz	r1, 8014b98 <_reclaim_reent+0x80>
 8014b92:	4620      	mov	r0, r4
 8014b94:	f000 f890 	bl	8014cb8 <_free_r>
 8014b98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014b9a:	b111      	cbz	r1, 8014ba2 <_reclaim_reent+0x8a>
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	f000 f88b 	bl	8014cb8 <_free_r>
 8014ba2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014ba4:	b111      	cbz	r1, 8014bac <_reclaim_reent+0x94>
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f000 f886 	bl	8014cb8 <_free_r>
 8014bac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014bae:	b111      	cbz	r1, 8014bb6 <_reclaim_reent+0x9e>
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	f000 f881 	bl	8014cb8 <_free_r>
 8014bb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014bb8:	b111      	cbz	r1, 8014bc0 <_reclaim_reent+0xa8>
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f000 f87c 	bl	8014cb8 <_free_r>
 8014bc0:	6a23      	ldr	r3, [r4, #32]
 8014bc2:	b11b      	cbz	r3, 8014bcc <_reclaim_reent+0xb4>
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bca:	4718      	bx	r3
 8014bcc:	bd70      	pop	{r4, r5, r6, pc}
 8014bce:	bf00      	nop
 8014bd0:	24000160 	.word	0x24000160

08014bd4 <_lseek_r>:
 8014bd4:	b538      	push	{r3, r4, r5, lr}
 8014bd6:	4d07      	ldr	r5, [pc, #28]	@ (8014bf4 <_lseek_r+0x20>)
 8014bd8:	4604      	mov	r4, r0
 8014bda:	4608      	mov	r0, r1
 8014bdc:	4611      	mov	r1, r2
 8014bde:	2200      	movs	r2, #0
 8014be0:	602a      	str	r2, [r5, #0]
 8014be2:	461a      	mov	r2, r3
 8014be4:	f7ed f9e6 	bl	8001fb4 <_lseek>
 8014be8:	1c43      	adds	r3, r0, #1
 8014bea:	d102      	bne.n	8014bf2 <_lseek_r+0x1e>
 8014bec:	682b      	ldr	r3, [r5, #0]
 8014bee:	b103      	cbz	r3, 8014bf2 <_lseek_r+0x1e>
 8014bf0:	6023      	str	r3, [r4, #0]
 8014bf2:	bd38      	pop	{r3, r4, r5, pc}
 8014bf4:	24007b18 	.word	0x24007b18

08014bf8 <_read_r>:
 8014bf8:	b538      	push	{r3, r4, r5, lr}
 8014bfa:	4d07      	ldr	r5, [pc, #28]	@ (8014c18 <_read_r+0x20>)
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	4608      	mov	r0, r1
 8014c00:	4611      	mov	r1, r2
 8014c02:	2200      	movs	r2, #0
 8014c04:	602a      	str	r2, [r5, #0]
 8014c06:	461a      	mov	r2, r3
 8014c08:	f7ed f974 	bl	8001ef4 <_read>
 8014c0c:	1c43      	adds	r3, r0, #1
 8014c0e:	d102      	bne.n	8014c16 <_read_r+0x1e>
 8014c10:	682b      	ldr	r3, [r5, #0]
 8014c12:	b103      	cbz	r3, 8014c16 <_read_r+0x1e>
 8014c14:	6023      	str	r3, [r4, #0]
 8014c16:	bd38      	pop	{r3, r4, r5, pc}
 8014c18:	24007b18 	.word	0x24007b18

08014c1c <_write_r>:
 8014c1c:	b538      	push	{r3, r4, r5, lr}
 8014c1e:	4d07      	ldr	r5, [pc, #28]	@ (8014c3c <_write_r+0x20>)
 8014c20:	4604      	mov	r4, r0
 8014c22:	4608      	mov	r0, r1
 8014c24:	4611      	mov	r1, r2
 8014c26:	2200      	movs	r2, #0
 8014c28:	602a      	str	r2, [r5, #0]
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	f7ed f97f 	bl	8001f2e <_write>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d102      	bne.n	8014c3a <_write_r+0x1e>
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	b103      	cbz	r3, 8014c3a <_write_r+0x1e>
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	24007b18 	.word	0x24007b18

08014c40 <__errno>:
 8014c40:	4b01      	ldr	r3, [pc, #4]	@ (8014c48 <__errno+0x8>)
 8014c42:	6818      	ldr	r0, [r3, #0]
 8014c44:	4770      	bx	lr
 8014c46:	bf00      	nop
 8014c48:	24000160 	.word	0x24000160

08014c4c <__libc_init_array>:
 8014c4c:	b570      	push	{r4, r5, r6, lr}
 8014c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8014c84 <__libc_init_array+0x38>)
 8014c50:	4c0d      	ldr	r4, [pc, #52]	@ (8014c88 <__libc_init_array+0x3c>)
 8014c52:	1b64      	subs	r4, r4, r5
 8014c54:	10a4      	asrs	r4, r4, #2
 8014c56:	2600      	movs	r6, #0
 8014c58:	42a6      	cmp	r6, r4
 8014c5a:	d109      	bne.n	8014c70 <__libc_init_array+0x24>
 8014c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8014c8c <__libc_init_array+0x40>)
 8014c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8014c90 <__libc_init_array+0x44>)
 8014c60:	f000 fdc4 	bl	80157ec <_init>
 8014c64:	1b64      	subs	r4, r4, r5
 8014c66:	10a4      	asrs	r4, r4, #2
 8014c68:	2600      	movs	r6, #0
 8014c6a:	42a6      	cmp	r6, r4
 8014c6c:	d105      	bne.n	8014c7a <__libc_init_array+0x2e>
 8014c6e:	bd70      	pop	{r4, r5, r6, pc}
 8014c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c74:	4798      	blx	r3
 8014c76:	3601      	adds	r6, #1
 8014c78:	e7ee      	b.n	8014c58 <__libc_init_array+0xc>
 8014c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c7e:	4798      	blx	r3
 8014c80:	3601      	adds	r6, #1
 8014c82:	e7f2      	b.n	8014c6a <__libc_init_array+0x1e>
 8014c84:	08015948 	.word	0x08015948
 8014c88:	08015948 	.word	0x08015948
 8014c8c:	08015948 	.word	0x08015948
 8014c90:	0801594c 	.word	0x0801594c

08014c94 <__retarget_lock_init_recursive>:
 8014c94:	4770      	bx	lr

08014c96 <__retarget_lock_acquire_recursive>:
 8014c96:	4770      	bx	lr

08014c98 <__retarget_lock_release_recursive>:
 8014c98:	4770      	bx	lr

08014c9a <memcpy>:
 8014c9a:	440a      	add	r2, r1
 8014c9c:	4291      	cmp	r1, r2
 8014c9e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014ca2:	d100      	bne.n	8014ca6 <memcpy+0xc>
 8014ca4:	4770      	bx	lr
 8014ca6:	b510      	push	{r4, lr}
 8014ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014cb0:	4291      	cmp	r1, r2
 8014cb2:	d1f9      	bne.n	8014ca8 <memcpy+0xe>
 8014cb4:	bd10      	pop	{r4, pc}
	...

08014cb8 <_free_r>:
 8014cb8:	b538      	push	{r3, r4, r5, lr}
 8014cba:	4605      	mov	r5, r0
 8014cbc:	2900      	cmp	r1, #0
 8014cbe:	d041      	beq.n	8014d44 <_free_r+0x8c>
 8014cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cc4:	1f0c      	subs	r4, r1, #4
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	bfb8      	it	lt
 8014cca:	18e4      	addlt	r4, r4, r3
 8014ccc:	f000 f8e0 	bl	8014e90 <__malloc_lock>
 8014cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8014d48 <_free_r+0x90>)
 8014cd2:	6813      	ldr	r3, [r2, #0]
 8014cd4:	b933      	cbnz	r3, 8014ce4 <_free_r+0x2c>
 8014cd6:	6063      	str	r3, [r4, #4]
 8014cd8:	6014      	str	r4, [r2, #0]
 8014cda:	4628      	mov	r0, r5
 8014cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ce0:	f000 b8dc 	b.w	8014e9c <__malloc_unlock>
 8014ce4:	42a3      	cmp	r3, r4
 8014ce6:	d908      	bls.n	8014cfa <_free_r+0x42>
 8014ce8:	6820      	ldr	r0, [r4, #0]
 8014cea:	1821      	adds	r1, r4, r0
 8014cec:	428b      	cmp	r3, r1
 8014cee:	bf01      	itttt	eq
 8014cf0:	6819      	ldreq	r1, [r3, #0]
 8014cf2:	685b      	ldreq	r3, [r3, #4]
 8014cf4:	1809      	addeq	r1, r1, r0
 8014cf6:	6021      	streq	r1, [r4, #0]
 8014cf8:	e7ed      	b.n	8014cd6 <_free_r+0x1e>
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	b10b      	cbz	r3, 8014d04 <_free_r+0x4c>
 8014d00:	42a3      	cmp	r3, r4
 8014d02:	d9fa      	bls.n	8014cfa <_free_r+0x42>
 8014d04:	6811      	ldr	r1, [r2, #0]
 8014d06:	1850      	adds	r0, r2, r1
 8014d08:	42a0      	cmp	r0, r4
 8014d0a:	d10b      	bne.n	8014d24 <_free_r+0x6c>
 8014d0c:	6820      	ldr	r0, [r4, #0]
 8014d0e:	4401      	add	r1, r0
 8014d10:	1850      	adds	r0, r2, r1
 8014d12:	4283      	cmp	r3, r0
 8014d14:	6011      	str	r1, [r2, #0]
 8014d16:	d1e0      	bne.n	8014cda <_free_r+0x22>
 8014d18:	6818      	ldr	r0, [r3, #0]
 8014d1a:	685b      	ldr	r3, [r3, #4]
 8014d1c:	6053      	str	r3, [r2, #4]
 8014d1e:	4408      	add	r0, r1
 8014d20:	6010      	str	r0, [r2, #0]
 8014d22:	e7da      	b.n	8014cda <_free_r+0x22>
 8014d24:	d902      	bls.n	8014d2c <_free_r+0x74>
 8014d26:	230c      	movs	r3, #12
 8014d28:	602b      	str	r3, [r5, #0]
 8014d2a:	e7d6      	b.n	8014cda <_free_r+0x22>
 8014d2c:	6820      	ldr	r0, [r4, #0]
 8014d2e:	1821      	adds	r1, r4, r0
 8014d30:	428b      	cmp	r3, r1
 8014d32:	bf04      	itt	eq
 8014d34:	6819      	ldreq	r1, [r3, #0]
 8014d36:	685b      	ldreq	r3, [r3, #4]
 8014d38:	6063      	str	r3, [r4, #4]
 8014d3a:	bf04      	itt	eq
 8014d3c:	1809      	addeq	r1, r1, r0
 8014d3e:	6021      	streq	r1, [r4, #0]
 8014d40:	6054      	str	r4, [r2, #4]
 8014d42:	e7ca      	b.n	8014cda <_free_r+0x22>
 8014d44:	bd38      	pop	{r3, r4, r5, pc}
 8014d46:	bf00      	nop
 8014d48:	24007b24 	.word	0x24007b24

08014d4c <sbrk_aligned>:
 8014d4c:	b570      	push	{r4, r5, r6, lr}
 8014d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8014d8c <sbrk_aligned+0x40>)
 8014d50:	460c      	mov	r4, r1
 8014d52:	6831      	ldr	r1, [r6, #0]
 8014d54:	4605      	mov	r5, r0
 8014d56:	b911      	cbnz	r1, 8014d5e <sbrk_aligned+0x12>
 8014d58:	f000 fcb4 	bl	80156c4 <_sbrk_r>
 8014d5c:	6030      	str	r0, [r6, #0]
 8014d5e:	4621      	mov	r1, r4
 8014d60:	4628      	mov	r0, r5
 8014d62:	f000 fcaf 	bl	80156c4 <_sbrk_r>
 8014d66:	1c43      	adds	r3, r0, #1
 8014d68:	d103      	bne.n	8014d72 <sbrk_aligned+0x26>
 8014d6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014d6e:	4620      	mov	r0, r4
 8014d70:	bd70      	pop	{r4, r5, r6, pc}
 8014d72:	1cc4      	adds	r4, r0, #3
 8014d74:	f024 0403 	bic.w	r4, r4, #3
 8014d78:	42a0      	cmp	r0, r4
 8014d7a:	d0f8      	beq.n	8014d6e <sbrk_aligned+0x22>
 8014d7c:	1a21      	subs	r1, r4, r0
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f000 fca0 	bl	80156c4 <_sbrk_r>
 8014d84:	3001      	adds	r0, #1
 8014d86:	d1f2      	bne.n	8014d6e <sbrk_aligned+0x22>
 8014d88:	e7ef      	b.n	8014d6a <sbrk_aligned+0x1e>
 8014d8a:	bf00      	nop
 8014d8c:	24007b20 	.word	0x24007b20

08014d90 <_malloc_r>:
 8014d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d94:	1ccd      	adds	r5, r1, #3
 8014d96:	f025 0503 	bic.w	r5, r5, #3
 8014d9a:	3508      	adds	r5, #8
 8014d9c:	2d0c      	cmp	r5, #12
 8014d9e:	bf38      	it	cc
 8014da0:	250c      	movcc	r5, #12
 8014da2:	2d00      	cmp	r5, #0
 8014da4:	4606      	mov	r6, r0
 8014da6:	db01      	blt.n	8014dac <_malloc_r+0x1c>
 8014da8:	42a9      	cmp	r1, r5
 8014daa:	d904      	bls.n	8014db6 <_malloc_r+0x26>
 8014dac:	230c      	movs	r3, #12
 8014dae:	6033      	str	r3, [r6, #0]
 8014db0:	2000      	movs	r0, #0
 8014db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014e8c <_malloc_r+0xfc>
 8014dba:	f000 f869 	bl	8014e90 <__malloc_lock>
 8014dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8014dc2:	461c      	mov	r4, r3
 8014dc4:	bb44      	cbnz	r4, 8014e18 <_malloc_r+0x88>
 8014dc6:	4629      	mov	r1, r5
 8014dc8:	4630      	mov	r0, r6
 8014dca:	f7ff ffbf 	bl	8014d4c <sbrk_aligned>
 8014dce:	1c43      	adds	r3, r0, #1
 8014dd0:	4604      	mov	r4, r0
 8014dd2:	d158      	bne.n	8014e86 <_malloc_r+0xf6>
 8014dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8014dd8:	4627      	mov	r7, r4
 8014dda:	2f00      	cmp	r7, #0
 8014ddc:	d143      	bne.n	8014e66 <_malloc_r+0xd6>
 8014dde:	2c00      	cmp	r4, #0
 8014de0:	d04b      	beq.n	8014e7a <_malloc_r+0xea>
 8014de2:	6823      	ldr	r3, [r4, #0]
 8014de4:	4639      	mov	r1, r7
 8014de6:	4630      	mov	r0, r6
 8014de8:	eb04 0903 	add.w	r9, r4, r3
 8014dec:	f000 fc6a 	bl	80156c4 <_sbrk_r>
 8014df0:	4581      	cmp	r9, r0
 8014df2:	d142      	bne.n	8014e7a <_malloc_r+0xea>
 8014df4:	6821      	ldr	r1, [r4, #0]
 8014df6:	1a6d      	subs	r5, r5, r1
 8014df8:	4629      	mov	r1, r5
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	f7ff ffa6 	bl	8014d4c <sbrk_aligned>
 8014e00:	3001      	adds	r0, #1
 8014e02:	d03a      	beq.n	8014e7a <_malloc_r+0xea>
 8014e04:	6823      	ldr	r3, [r4, #0]
 8014e06:	442b      	add	r3, r5
 8014e08:	6023      	str	r3, [r4, #0]
 8014e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8014e0e:	685a      	ldr	r2, [r3, #4]
 8014e10:	bb62      	cbnz	r2, 8014e6c <_malloc_r+0xdc>
 8014e12:	f8c8 7000 	str.w	r7, [r8]
 8014e16:	e00f      	b.n	8014e38 <_malloc_r+0xa8>
 8014e18:	6822      	ldr	r2, [r4, #0]
 8014e1a:	1b52      	subs	r2, r2, r5
 8014e1c:	d420      	bmi.n	8014e60 <_malloc_r+0xd0>
 8014e1e:	2a0b      	cmp	r2, #11
 8014e20:	d917      	bls.n	8014e52 <_malloc_r+0xc2>
 8014e22:	1961      	adds	r1, r4, r5
 8014e24:	42a3      	cmp	r3, r4
 8014e26:	6025      	str	r5, [r4, #0]
 8014e28:	bf18      	it	ne
 8014e2a:	6059      	strne	r1, [r3, #4]
 8014e2c:	6863      	ldr	r3, [r4, #4]
 8014e2e:	bf08      	it	eq
 8014e30:	f8c8 1000 	streq.w	r1, [r8]
 8014e34:	5162      	str	r2, [r4, r5]
 8014e36:	604b      	str	r3, [r1, #4]
 8014e38:	4630      	mov	r0, r6
 8014e3a:	f000 f82f 	bl	8014e9c <__malloc_unlock>
 8014e3e:	f104 000b 	add.w	r0, r4, #11
 8014e42:	1d23      	adds	r3, r4, #4
 8014e44:	f020 0007 	bic.w	r0, r0, #7
 8014e48:	1ac2      	subs	r2, r0, r3
 8014e4a:	bf1c      	itt	ne
 8014e4c:	1a1b      	subne	r3, r3, r0
 8014e4e:	50a3      	strne	r3, [r4, r2]
 8014e50:	e7af      	b.n	8014db2 <_malloc_r+0x22>
 8014e52:	6862      	ldr	r2, [r4, #4]
 8014e54:	42a3      	cmp	r3, r4
 8014e56:	bf0c      	ite	eq
 8014e58:	f8c8 2000 	streq.w	r2, [r8]
 8014e5c:	605a      	strne	r2, [r3, #4]
 8014e5e:	e7eb      	b.n	8014e38 <_malloc_r+0xa8>
 8014e60:	4623      	mov	r3, r4
 8014e62:	6864      	ldr	r4, [r4, #4]
 8014e64:	e7ae      	b.n	8014dc4 <_malloc_r+0x34>
 8014e66:	463c      	mov	r4, r7
 8014e68:	687f      	ldr	r7, [r7, #4]
 8014e6a:	e7b6      	b.n	8014dda <_malloc_r+0x4a>
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	42a3      	cmp	r3, r4
 8014e72:	d1fb      	bne.n	8014e6c <_malloc_r+0xdc>
 8014e74:	2300      	movs	r3, #0
 8014e76:	6053      	str	r3, [r2, #4]
 8014e78:	e7de      	b.n	8014e38 <_malloc_r+0xa8>
 8014e7a:	230c      	movs	r3, #12
 8014e7c:	6033      	str	r3, [r6, #0]
 8014e7e:	4630      	mov	r0, r6
 8014e80:	f000 f80c 	bl	8014e9c <__malloc_unlock>
 8014e84:	e794      	b.n	8014db0 <_malloc_r+0x20>
 8014e86:	6005      	str	r5, [r0, #0]
 8014e88:	e7d6      	b.n	8014e38 <_malloc_r+0xa8>
 8014e8a:	bf00      	nop
 8014e8c:	24007b24 	.word	0x24007b24

08014e90 <__malloc_lock>:
 8014e90:	4801      	ldr	r0, [pc, #4]	@ (8014e98 <__malloc_lock+0x8>)
 8014e92:	f7ff bf00 	b.w	8014c96 <__retarget_lock_acquire_recursive>
 8014e96:	bf00      	nop
 8014e98:	24007b1c 	.word	0x24007b1c

08014e9c <__malloc_unlock>:
 8014e9c:	4801      	ldr	r0, [pc, #4]	@ (8014ea4 <__malloc_unlock+0x8>)
 8014e9e:	f7ff befb 	b.w	8014c98 <__retarget_lock_release_recursive>
 8014ea2:	bf00      	nop
 8014ea4:	24007b1c 	.word	0x24007b1c

08014ea8 <__sfputc_r>:
 8014ea8:	6893      	ldr	r3, [r2, #8]
 8014eaa:	3b01      	subs	r3, #1
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	b410      	push	{r4}
 8014eb0:	6093      	str	r3, [r2, #8]
 8014eb2:	da08      	bge.n	8014ec6 <__sfputc_r+0x1e>
 8014eb4:	6994      	ldr	r4, [r2, #24]
 8014eb6:	42a3      	cmp	r3, r4
 8014eb8:	db01      	blt.n	8014ebe <__sfputc_r+0x16>
 8014eba:	290a      	cmp	r1, #10
 8014ebc:	d103      	bne.n	8014ec6 <__sfputc_r+0x1e>
 8014ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ec2:	f000 bb6b 	b.w	801559c <__swbuf_r>
 8014ec6:	6813      	ldr	r3, [r2, #0]
 8014ec8:	1c58      	adds	r0, r3, #1
 8014eca:	6010      	str	r0, [r2, #0]
 8014ecc:	7019      	strb	r1, [r3, #0]
 8014ece:	4608      	mov	r0, r1
 8014ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <__sfputs_r>:
 8014ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed8:	4606      	mov	r6, r0
 8014eda:	460f      	mov	r7, r1
 8014edc:	4614      	mov	r4, r2
 8014ede:	18d5      	adds	r5, r2, r3
 8014ee0:	42ac      	cmp	r4, r5
 8014ee2:	d101      	bne.n	8014ee8 <__sfputs_r+0x12>
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	e007      	b.n	8014ef8 <__sfputs_r+0x22>
 8014ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eec:	463a      	mov	r2, r7
 8014eee:	4630      	mov	r0, r6
 8014ef0:	f7ff ffda 	bl	8014ea8 <__sfputc_r>
 8014ef4:	1c43      	adds	r3, r0, #1
 8014ef6:	d1f3      	bne.n	8014ee0 <__sfputs_r+0xa>
 8014ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014efc <_vfiprintf_r>:
 8014efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f00:	460d      	mov	r5, r1
 8014f02:	b09d      	sub	sp, #116	@ 0x74
 8014f04:	4614      	mov	r4, r2
 8014f06:	4698      	mov	r8, r3
 8014f08:	4606      	mov	r6, r0
 8014f0a:	b118      	cbz	r0, 8014f14 <_vfiprintf_r+0x18>
 8014f0c:	6a03      	ldr	r3, [r0, #32]
 8014f0e:	b90b      	cbnz	r3, 8014f14 <_vfiprintf_r+0x18>
 8014f10:	f7ff fd5e 	bl	80149d0 <__sinit>
 8014f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f16:	07d9      	lsls	r1, r3, #31
 8014f18:	d405      	bmi.n	8014f26 <_vfiprintf_r+0x2a>
 8014f1a:	89ab      	ldrh	r3, [r5, #12]
 8014f1c:	059a      	lsls	r2, r3, #22
 8014f1e:	d402      	bmi.n	8014f26 <_vfiprintf_r+0x2a>
 8014f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f22:	f7ff feb8 	bl	8014c96 <__retarget_lock_acquire_recursive>
 8014f26:	89ab      	ldrh	r3, [r5, #12]
 8014f28:	071b      	lsls	r3, r3, #28
 8014f2a:	d501      	bpl.n	8014f30 <_vfiprintf_r+0x34>
 8014f2c:	692b      	ldr	r3, [r5, #16]
 8014f2e:	b99b      	cbnz	r3, 8014f58 <_vfiprintf_r+0x5c>
 8014f30:	4629      	mov	r1, r5
 8014f32:	4630      	mov	r0, r6
 8014f34:	f000 fb70 	bl	8015618 <__swsetup_r>
 8014f38:	b170      	cbz	r0, 8014f58 <_vfiprintf_r+0x5c>
 8014f3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f3c:	07dc      	lsls	r4, r3, #31
 8014f3e:	d504      	bpl.n	8014f4a <_vfiprintf_r+0x4e>
 8014f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f44:	b01d      	add	sp, #116	@ 0x74
 8014f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4a:	89ab      	ldrh	r3, [r5, #12]
 8014f4c:	0598      	lsls	r0, r3, #22
 8014f4e:	d4f7      	bmi.n	8014f40 <_vfiprintf_r+0x44>
 8014f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f52:	f7ff fea1 	bl	8014c98 <__retarget_lock_release_recursive>
 8014f56:	e7f3      	b.n	8014f40 <_vfiprintf_r+0x44>
 8014f58:	2300      	movs	r3, #0
 8014f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f5c:	2320      	movs	r3, #32
 8014f5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f66:	2330      	movs	r3, #48	@ 0x30
 8014f68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015118 <_vfiprintf_r+0x21c>
 8014f6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014f70:	f04f 0901 	mov.w	r9, #1
 8014f74:	4623      	mov	r3, r4
 8014f76:	469a      	mov	sl, r3
 8014f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f7c:	b10a      	cbz	r2, 8014f82 <_vfiprintf_r+0x86>
 8014f7e:	2a25      	cmp	r2, #37	@ 0x25
 8014f80:	d1f9      	bne.n	8014f76 <_vfiprintf_r+0x7a>
 8014f82:	ebba 0b04 	subs.w	fp, sl, r4
 8014f86:	d00b      	beq.n	8014fa0 <_vfiprintf_r+0xa4>
 8014f88:	465b      	mov	r3, fp
 8014f8a:	4622      	mov	r2, r4
 8014f8c:	4629      	mov	r1, r5
 8014f8e:	4630      	mov	r0, r6
 8014f90:	f7ff ffa1 	bl	8014ed6 <__sfputs_r>
 8014f94:	3001      	adds	r0, #1
 8014f96:	f000 80a7 	beq.w	80150e8 <_vfiprintf_r+0x1ec>
 8014f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f9c:	445a      	add	r2, fp
 8014f9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f000 809f 	beq.w	80150e8 <_vfiprintf_r+0x1ec>
 8014faa:	2300      	movs	r3, #0
 8014fac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fb4:	f10a 0a01 	add.w	sl, sl, #1
 8014fb8:	9304      	str	r3, [sp, #16]
 8014fba:	9307      	str	r3, [sp, #28]
 8014fbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014fc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8014fc2:	4654      	mov	r4, sl
 8014fc4:	2205      	movs	r2, #5
 8014fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fca:	4853      	ldr	r0, [pc, #332]	@ (8015118 <_vfiprintf_r+0x21c>)
 8014fcc:	f7eb f988 	bl	80002e0 <memchr>
 8014fd0:	9a04      	ldr	r2, [sp, #16]
 8014fd2:	b9d8      	cbnz	r0, 801500c <_vfiprintf_r+0x110>
 8014fd4:	06d1      	lsls	r1, r2, #27
 8014fd6:	bf44      	itt	mi
 8014fd8:	2320      	movmi	r3, #32
 8014fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014fde:	0713      	lsls	r3, r2, #28
 8014fe0:	bf44      	itt	mi
 8014fe2:	232b      	movmi	r3, #43	@ 0x2b
 8014fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8014fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8014fee:	d015      	beq.n	801501c <_vfiprintf_r+0x120>
 8014ff0:	9a07      	ldr	r2, [sp, #28]
 8014ff2:	4654      	mov	r4, sl
 8014ff4:	2000      	movs	r0, #0
 8014ff6:	f04f 0c0a 	mov.w	ip, #10
 8014ffa:	4621      	mov	r1, r4
 8014ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015000:	3b30      	subs	r3, #48	@ 0x30
 8015002:	2b09      	cmp	r3, #9
 8015004:	d94b      	bls.n	801509e <_vfiprintf_r+0x1a2>
 8015006:	b1b0      	cbz	r0, 8015036 <_vfiprintf_r+0x13a>
 8015008:	9207      	str	r2, [sp, #28]
 801500a:	e014      	b.n	8015036 <_vfiprintf_r+0x13a>
 801500c:	eba0 0308 	sub.w	r3, r0, r8
 8015010:	fa09 f303 	lsl.w	r3, r9, r3
 8015014:	4313      	orrs	r3, r2
 8015016:	9304      	str	r3, [sp, #16]
 8015018:	46a2      	mov	sl, r4
 801501a:	e7d2      	b.n	8014fc2 <_vfiprintf_r+0xc6>
 801501c:	9b03      	ldr	r3, [sp, #12]
 801501e:	1d19      	adds	r1, r3, #4
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	9103      	str	r1, [sp, #12]
 8015024:	2b00      	cmp	r3, #0
 8015026:	bfbb      	ittet	lt
 8015028:	425b      	neglt	r3, r3
 801502a:	f042 0202 	orrlt.w	r2, r2, #2
 801502e:	9307      	strge	r3, [sp, #28]
 8015030:	9307      	strlt	r3, [sp, #28]
 8015032:	bfb8      	it	lt
 8015034:	9204      	strlt	r2, [sp, #16]
 8015036:	7823      	ldrb	r3, [r4, #0]
 8015038:	2b2e      	cmp	r3, #46	@ 0x2e
 801503a:	d10a      	bne.n	8015052 <_vfiprintf_r+0x156>
 801503c:	7863      	ldrb	r3, [r4, #1]
 801503e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015040:	d132      	bne.n	80150a8 <_vfiprintf_r+0x1ac>
 8015042:	9b03      	ldr	r3, [sp, #12]
 8015044:	1d1a      	adds	r2, r3, #4
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	9203      	str	r2, [sp, #12]
 801504a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801504e:	3402      	adds	r4, #2
 8015050:	9305      	str	r3, [sp, #20]
 8015052:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015128 <_vfiprintf_r+0x22c>
 8015056:	7821      	ldrb	r1, [r4, #0]
 8015058:	2203      	movs	r2, #3
 801505a:	4650      	mov	r0, sl
 801505c:	f7eb f940 	bl	80002e0 <memchr>
 8015060:	b138      	cbz	r0, 8015072 <_vfiprintf_r+0x176>
 8015062:	9b04      	ldr	r3, [sp, #16]
 8015064:	eba0 000a 	sub.w	r0, r0, sl
 8015068:	2240      	movs	r2, #64	@ 0x40
 801506a:	4082      	lsls	r2, r0
 801506c:	4313      	orrs	r3, r2
 801506e:	3401      	adds	r4, #1
 8015070:	9304      	str	r3, [sp, #16]
 8015072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015076:	4829      	ldr	r0, [pc, #164]	@ (801511c <_vfiprintf_r+0x220>)
 8015078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801507c:	2206      	movs	r2, #6
 801507e:	f7eb f92f 	bl	80002e0 <memchr>
 8015082:	2800      	cmp	r0, #0
 8015084:	d03f      	beq.n	8015106 <_vfiprintf_r+0x20a>
 8015086:	4b26      	ldr	r3, [pc, #152]	@ (8015120 <_vfiprintf_r+0x224>)
 8015088:	bb1b      	cbnz	r3, 80150d2 <_vfiprintf_r+0x1d6>
 801508a:	9b03      	ldr	r3, [sp, #12]
 801508c:	3307      	adds	r3, #7
 801508e:	f023 0307 	bic.w	r3, r3, #7
 8015092:	3308      	adds	r3, #8
 8015094:	9303      	str	r3, [sp, #12]
 8015096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015098:	443b      	add	r3, r7
 801509a:	9309      	str	r3, [sp, #36]	@ 0x24
 801509c:	e76a      	b.n	8014f74 <_vfiprintf_r+0x78>
 801509e:	fb0c 3202 	mla	r2, ip, r2, r3
 80150a2:	460c      	mov	r4, r1
 80150a4:	2001      	movs	r0, #1
 80150a6:	e7a8      	b.n	8014ffa <_vfiprintf_r+0xfe>
 80150a8:	2300      	movs	r3, #0
 80150aa:	3401      	adds	r4, #1
 80150ac:	9305      	str	r3, [sp, #20]
 80150ae:	4619      	mov	r1, r3
 80150b0:	f04f 0c0a 	mov.w	ip, #10
 80150b4:	4620      	mov	r0, r4
 80150b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150ba:	3a30      	subs	r2, #48	@ 0x30
 80150bc:	2a09      	cmp	r2, #9
 80150be:	d903      	bls.n	80150c8 <_vfiprintf_r+0x1cc>
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d0c6      	beq.n	8015052 <_vfiprintf_r+0x156>
 80150c4:	9105      	str	r1, [sp, #20]
 80150c6:	e7c4      	b.n	8015052 <_vfiprintf_r+0x156>
 80150c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80150cc:	4604      	mov	r4, r0
 80150ce:	2301      	movs	r3, #1
 80150d0:	e7f0      	b.n	80150b4 <_vfiprintf_r+0x1b8>
 80150d2:	ab03      	add	r3, sp, #12
 80150d4:	9300      	str	r3, [sp, #0]
 80150d6:	462a      	mov	r2, r5
 80150d8:	4b12      	ldr	r3, [pc, #72]	@ (8015124 <_vfiprintf_r+0x228>)
 80150da:	a904      	add	r1, sp, #16
 80150dc:	4630      	mov	r0, r6
 80150de:	f3af 8000 	nop.w
 80150e2:	4607      	mov	r7, r0
 80150e4:	1c78      	adds	r0, r7, #1
 80150e6:	d1d6      	bne.n	8015096 <_vfiprintf_r+0x19a>
 80150e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150ea:	07d9      	lsls	r1, r3, #31
 80150ec:	d405      	bmi.n	80150fa <_vfiprintf_r+0x1fe>
 80150ee:	89ab      	ldrh	r3, [r5, #12]
 80150f0:	059a      	lsls	r2, r3, #22
 80150f2:	d402      	bmi.n	80150fa <_vfiprintf_r+0x1fe>
 80150f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80150f6:	f7ff fdcf 	bl	8014c98 <__retarget_lock_release_recursive>
 80150fa:	89ab      	ldrh	r3, [r5, #12]
 80150fc:	065b      	lsls	r3, r3, #25
 80150fe:	f53f af1f 	bmi.w	8014f40 <_vfiprintf_r+0x44>
 8015102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015104:	e71e      	b.n	8014f44 <_vfiprintf_r+0x48>
 8015106:	ab03      	add	r3, sp, #12
 8015108:	9300      	str	r3, [sp, #0]
 801510a:	462a      	mov	r2, r5
 801510c:	4b05      	ldr	r3, [pc, #20]	@ (8015124 <_vfiprintf_r+0x228>)
 801510e:	a904      	add	r1, sp, #16
 8015110:	4630      	mov	r0, r6
 8015112:	f000 f879 	bl	8015208 <_printf_i>
 8015116:	e7e4      	b.n	80150e2 <_vfiprintf_r+0x1e6>
 8015118:	0801590c 	.word	0x0801590c
 801511c:	08015916 	.word	0x08015916
 8015120:	00000000 	.word	0x00000000
 8015124:	08014ed7 	.word	0x08014ed7
 8015128:	08015912 	.word	0x08015912

0801512c <_printf_common>:
 801512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015130:	4616      	mov	r6, r2
 8015132:	4698      	mov	r8, r3
 8015134:	688a      	ldr	r2, [r1, #8]
 8015136:	690b      	ldr	r3, [r1, #16]
 8015138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801513c:	4293      	cmp	r3, r2
 801513e:	bfb8      	it	lt
 8015140:	4613      	movlt	r3, r2
 8015142:	6033      	str	r3, [r6, #0]
 8015144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015148:	4607      	mov	r7, r0
 801514a:	460c      	mov	r4, r1
 801514c:	b10a      	cbz	r2, 8015152 <_printf_common+0x26>
 801514e:	3301      	adds	r3, #1
 8015150:	6033      	str	r3, [r6, #0]
 8015152:	6823      	ldr	r3, [r4, #0]
 8015154:	0699      	lsls	r1, r3, #26
 8015156:	bf42      	ittt	mi
 8015158:	6833      	ldrmi	r3, [r6, #0]
 801515a:	3302      	addmi	r3, #2
 801515c:	6033      	strmi	r3, [r6, #0]
 801515e:	6825      	ldr	r5, [r4, #0]
 8015160:	f015 0506 	ands.w	r5, r5, #6
 8015164:	d106      	bne.n	8015174 <_printf_common+0x48>
 8015166:	f104 0a19 	add.w	sl, r4, #25
 801516a:	68e3      	ldr	r3, [r4, #12]
 801516c:	6832      	ldr	r2, [r6, #0]
 801516e:	1a9b      	subs	r3, r3, r2
 8015170:	42ab      	cmp	r3, r5
 8015172:	dc26      	bgt.n	80151c2 <_printf_common+0x96>
 8015174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015178:	6822      	ldr	r2, [r4, #0]
 801517a:	3b00      	subs	r3, #0
 801517c:	bf18      	it	ne
 801517e:	2301      	movne	r3, #1
 8015180:	0692      	lsls	r2, r2, #26
 8015182:	d42b      	bmi.n	80151dc <_printf_common+0xb0>
 8015184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015188:	4641      	mov	r1, r8
 801518a:	4638      	mov	r0, r7
 801518c:	47c8      	blx	r9
 801518e:	3001      	adds	r0, #1
 8015190:	d01e      	beq.n	80151d0 <_printf_common+0xa4>
 8015192:	6823      	ldr	r3, [r4, #0]
 8015194:	6922      	ldr	r2, [r4, #16]
 8015196:	f003 0306 	and.w	r3, r3, #6
 801519a:	2b04      	cmp	r3, #4
 801519c:	bf02      	ittt	eq
 801519e:	68e5      	ldreq	r5, [r4, #12]
 80151a0:	6833      	ldreq	r3, [r6, #0]
 80151a2:	1aed      	subeq	r5, r5, r3
 80151a4:	68a3      	ldr	r3, [r4, #8]
 80151a6:	bf0c      	ite	eq
 80151a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80151ac:	2500      	movne	r5, #0
 80151ae:	4293      	cmp	r3, r2
 80151b0:	bfc4      	itt	gt
 80151b2:	1a9b      	subgt	r3, r3, r2
 80151b4:	18ed      	addgt	r5, r5, r3
 80151b6:	2600      	movs	r6, #0
 80151b8:	341a      	adds	r4, #26
 80151ba:	42b5      	cmp	r5, r6
 80151bc:	d11a      	bne.n	80151f4 <_printf_common+0xc8>
 80151be:	2000      	movs	r0, #0
 80151c0:	e008      	b.n	80151d4 <_printf_common+0xa8>
 80151c2:	2301      	movs	r3, #1
 80151c4:	4652      	mov	r2, sl
 80151c6:	4641      	mov	r1, r8
 80151c8:	4638      	mov	r0, r7
 80151ca:	47c8      	blx	r9
 80151cc:	3001      	adds	r0, #1
 80151ce:	d103      	bne.n	80151d8 <_printf_common+0xac>
 80151d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151d8:	3501      	adds	r5, #1
 80151da:	e7c6      	b.n	801516a <_printf_common+0x3e>
 80151dc:	18e1      	adds	r1, r4, r3
 80151de:	1c5a      	adds	r2, r3, #1
 80151e0:	2030      	movs	r0, #48	@ 0x30
 80151e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80151e6:	4422      	add	r2, r4
 80151e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80151ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80151f0:	3302      	adds	r3, #2
 80151f2:	e7c7      	b.n	8015184 <_printf_common+0x58>
 80151f4:	2301      	movs	r3, #1
 80151f6:	4622      	mov	r2, r4
 80151f8:	4641      	mov	r1, r8
 80151fa:	4638      	mov	r0, r7
 80151fc:	47c8      	blx	r9
 80151fe:	3001      	adds	r0, #1
 8015200:	d0e6      	beq.n	80151d0 <_printf_common+0xa4>
 8015202:	3601      	adds	r6, #1
 8015204:	e7d9      	b.n	80151ba <_printf_common+0x8e>
	...

08015208 <_printf_i>:
 8015208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801520c:	7e0f      	ldrb	r7, [r1, #24]
 801520e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015210:	2f78      	cmp	r7, #120	@ 0x78
 8015212:	4691      	mov	r9, r2
 8015214:	4680      	mov	r8, r0
 8015216:	460c      	mov	r4, r1
 8015218:	469a      	mov	sl, r3
 801521a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801521e:	d807      	bhi.n	8015230 <_printf_i+0x28>
 8015220:	2f62      	cmp	r7, #98	@ 0x62
 8015222:	d80a      	bhi.n	801523a <_printf_i+0x32>
 8015224:	2f00      	cmp	r7, #0
 8015226:	f000 80d1 	beq.w	80153cc <_printf_i+0x1c4>
 801522a:	2f58      	cmp	r7, #88	@ 0x58
 801522c:	f000 80b8 	beq.w	80153a0 <_printf_i+0x198>
 8015230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015238:	e03a      	b.n	80152b0 <_printf_i+0xa8>
 801523a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801523e:	2b15      	cmp	r3, #21
 8015240:	d8f6      	bhi.n	8015230 <_printf_i+0x28>
 8015242:	a101      	add	r1, pc, #4	@ (adr r1, 8015248 <_printf_i+0x40>)
 8015244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015248:	080152a1 	.word	0x080152a1
 801524c:	080152b5 	.word	0x080152b5
 8015250:	08015231 	.word	0x08015231
 8015254:	08015231 	.word	0x08015231
 8015258:	08015231 	.word	0x08015231
 801525c:	08015231 	.word	0x08015231
 8015260:	080152b5 	.word	0x080152b5
 8015264:	08015231 	.word	0x08015231
 8015268:	08015231 	.word	0x08015231
 801526c:	08015231 	.word	0x08015231
 8015270:	08015231 	.word	0x08015231
 8015274:	080153b3 	.word	0x080153b3
 8015278:	080152df 	.word	0x080152df
 801527c:	0801536d 	.word	0x0801536d
 8015280:	08015231 	.word	0x08015231
 8015284:	08015231 	.word	0x08015231
 8015288:	080153d5 	.word	0x080153d5
 801528c:	08015231 	.word	0x08015231
 8015290:	080152df 	.word	0x080152df
 8015294:	08015231 	.word	0x08015231
 8015298:	08015231 	.word	0x08015231
 801529c:	08015375 	.word	0x08015375
 80152a0:	6833      	ldr	r3, [r6, #0]
 80152a2:	1d1a      	adds	r2, r3, #4
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	6032      	str	r2, [r6, #0]
 80152a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80152ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80152b0:	2301      	movs	r3, #1
 80152b2:	e09c      	b.n	80153ee <_printf_i+0x1e6>
 80152b4:	6833      	ldr	r3, [r6, #0]
 80152b6:	6820      	ldr	r0, [r4, #0]
 80152b8:	1d19      	adds	r1, r3, #4
 80152ba:	6031      	str	r1, [r6, #0]
 80152bc:	0606      	lsls	r6, r0, #24
 80152be:	d501      	bpl.n	80152c4 <_printf_i+0xbc>
 80152c0:	681d      	ldr	r5, [r3, #0]
 80152c2:	e003      	b.n	80152cc <_printf_i+0xc4>
 80152c4:	0645      	lsls	r5, r0, #25
 80152c6:	d5fb      	bpl.n	80152c0 <_printf_i+0xb8>
 80152c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80152cc:	2d00      	cmp	r5, #0
 80152ce:	da03      	bge.n	80152d8 <_printf_i+0xd0>
 80152d0:	232d      	movs	r3, #45	@ 0x2d
 80152d2:	426d      	negs	r5, r5
 80152d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80152d8:	4858      	ldr	r0, [pc, #352]	@ (801543c <_printf_i+0x234>)
 80152da:	230a      	movs	r3, #10
 80152dc:	e011      	b.n	8015302 <_printf_i+0xfa>
 80152de:	6821      	ldr	r1, [r4, #0]
 80152e0:	6833      	ldr	r3, [r6, #0]
 80152e2:	0608      	lsls	r0, r1, #24
 80152e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80152e8:	d402      	bmi.n	80152f0 <_printf_i+0xe8>
 80152ea:	0649      	lsls	r1, r1, #25
 80152ec:	bf48      	it	mi
 80152ee:	b2ad      	uxthmi	r5, r5
 80152f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80152f2:	4852      	ldr	r0, [pc, #328]	@ (801543c <_printf_i+0x234>)
 80152f4:	6033      	str	r3, [r6, #0]
 80152f6:	bf14      	ite	ne
 80152f8:	230a      	movne	r3, #10
 80152fa:	2308      	moveq	r3, #8
 80152fc:	2100      	movs	r1, #0
 80152fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015302:	6866      	ldr	r6, [r4, #4]
 8015304:	60a6      	str	r6, [r4, #8]
 8015306:	2e00      	cmp	r6, #0
 8015308:	db05      	blt.n	8015316 <_printf_i+0x10e>
 801530a:	6821      	ldr	r1, [r4, #0]
 801530c:	432e      	orrs	r6, r5
 801530e:	f021 0104 	bic.w	r1, r1, #4
 8015312:	6021      	str	r1, [r4, #0]
 8015314:	d04b      	beq.n	80153ae <_printf_i+0x1a6>
 8015316:	4616      	mov	r6, r2
 8015318:	fbb5 f1f3 	udiv	r1, r5, r3
 801531c:	fb03 5711 	mls	r7, r3, r1, r5
 8015320:	5dc7      	ldrb	r7, [r0, r7]
 8015322:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015326:	462f      	mov	r7, r5
 8015328:	42bb      	cmp	r3, r7
 801532a:	460d      	mov	r5, r1
 801532c:	d9f4      	bls.n	8015318 <_printf_i+0x110>
 801532e:	2b08      	cmp	r3, #8
 8015330:	d10b      	bne.n	801534a <_printf_i+0x142>
 8015332:	6823      	ldr	r3, [r4, #0]
 8015334:	07df      	lsls	r7, r3, #31
 8015336:	d508      	bpl.n	801534a <_printf_i+0x142>
 8015338:	6923      	ldr	r3, [r4, #16]
 801533a:	6861      	ldr	r1, [r4, #4]
 801533c:	4299      	cmp	r1, r3
 801533e:	bfde      	ittt	le
 8015340:	2330      	movle	r3, #48	@ 0x30
 8015342:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015346:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801534a:	1b92      	subs	r2, r2, r6
 801534c:	6122      	str	r2, [r4, #16]
 801534e:	f8cd a000 	str.w	sl, [sp]
 8015352:	464b      	mov	r3, r9
 8015354:	aa03      	add	r2, sp, #12
 8015356:	4621      	mov	r1, r4
 8015358:	4640      	mov	r0, r8
 801535a:	f7ff fee7 	bl	801512c <_printf_common>
 801535e:	3001      	adds	r0, #1
 8015360:	d14a      	bne.n	80153f8 <_printf_i+0x1f0>
 8015362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015366:	b004      	add	sp, #16
 8015368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801536c:	6823      	ldr	r3, [r4, #0]
 801536e:	f043 0320 	orr.w	r3, r3, #32
 8015372:	6023      	str	r3, [r4, #0]
 8015374:	4832      	ldr	r0, [pc, #200]	@ (8015440 <_printf_i+0x238>)
 8015376:	2778      	movs	r7, #120	@ 0x78
 8015378:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801537c:	6823      	ldr	r3, [r4, #0]
 801537e:	6831      	ldr	r1, [r6, #0]
 8015380:	061f      	lsls	r7, r3, #24
 8015382:	f851 5b04 	ldr.w	r5, [r1], #4
 8015386:	d402      	bmi.n	801538e <_printf_i+0x186>
 8015388:	065f      	lsls	r7, r3, #25
 801538a:	bf48      	it	mi
 801538c:	b2ad      	uxthmi	r5, r5
 801538e:	6031      	str	r1, [r6, #0]
 8015390:	07d9      	lsls	r1, r3, #31
 8015392:	bf44      	itt	mi
 8015394:	f043 0320 	orrmi.w	r3, r3, #32
 8015398:	6023      	strmi	r3, [r4, #0]
 801539a:	b11d      	cbz	r5, 80153a4 <_printf_i+0x19c>
 801539c:	2310      	movs	r3, #16
 801539e:	e7ad      	b.n	80152fc <_printf_i+0xf4>
 80153a0:	4826      	ldr	r0, [pc, #152]	@ (801543c <_printf_i+0x234>)
 80153a2:	e7e9      	b.n	8015378 <_printf_i+0x170>
 80153a4:	6823      	ldr	r3, [r4, #0]
 80153a6:	f023 0320 	bic.w	r3, r3, #32
 80153aa:	6023      	str	r3, [r4, #0]
 80153ac:	e7f6      	b.n	801539c <_printf_i+0x194>
 80153ae:	4616      	mov	r6, r2
 80153b0:	e7bd      	b.n	801532e <_printf_i+0x126>
 80153b2:	6833      	ldr	r3, [r6, #0]
 80153b4:	6825      	ldr	r5, [r4, #0]
 80153b6:	6961      	ldr	r1, [r4, #20]
 80153b8:	1d18      	adds	r0, r3, #4
 80153ba:	6030      	str	r0, [r6, #0]
 80153bc:	062e      	lsls	r6, r5, #24
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	d501      	bpl.n	80153c6 <_printf_i+0x1be>
 80153c2:	6019      	str	r1, [r3, #0]
 80153c4:	e002      	b.n	80153cc <_printf_i+0x1c4>
 80153c6:	0668      	lsls	r0, r5, #25
 80153c8:	d5fb      	bpl.n	80153c2 <_printf_i+0x1ba>
 80153ca:	8019      	strh	r1, [r3, #0]
 80153cc:	2300      	movs	r3, #0
 80153ce:	6123      	str	r3, [r4, #16]
 80153d0:	4616      	mov	r6, r2
 80153d2:	e7bc      	b.n	801534e <_printf_i+0x146>
 80153d4:	6833      	ldr	r3, [r6, #0]
 80153d6:	1d1a      	adds	r2, r3, #4
 80153d8:	6032      	str	r2, [r6, #0]
 80153da:	681e      	ldr	r6, [r3, #0]
 80153dc:	6862      	ldr	r2, [r4, #4]
 80153de:	2100      	movs	r1, #0
 80153e0:	4630      	mov	r0, r6
 80153e2:	f7ea ff7d 	bl	80002e0 <memchr>
 80153e6:	b108      	cbz	r0, 80153ec <_printf_i+0x1e4>
 80153e8:	1b80      	subs	r0, r0, r6
 80153ea:	6060      	str	r0, [r4, #4]
 80153ec:	6863      	ldr	r3, [r4, #4]
 80153ee:	6123      	str	r3, [r4, #16]
 80153f0:	2300      	movs	r3, #0
 80153f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80153f6:	e7aa      	b.n	801534e <_printf_i+0x146>
 80153f8:	6923      	ldr	r3, [r4, #16]
 80153fa:	4632      	mov	r2, r6
 80153fc:	4649      	mov	r1, r9
 80153fe:	4640      	mov	r0, r8
 8015400:	47d0      	blx	sl
 8015402:	3001      	adds	r0, #1
 8015404:	d0ad      	beq.n	8015362 <_printf_i+0x15a>
 8015406:	6823      	ldr	r3, [r4, #0]
 8015408:	079b      	lsls	r3, r3, #30
 801540a:	d413      	bmi.n	8015434 <_printf_i+0x22c>
 801540c:	68e0      	ldr	r0, [r4, #12]
 801540e:	9b03      	ldr	r3, [sp, #12]
 8015410:	4298      	cmp	r0, r3
 8015412:	bfb8      	it	lt
 8015414:	4618      	movlt	r0, r3
 8015416:	e7a6      	b.n	8015366 <_printf_i+0x15e>
 8015418:	2301      	movs	r3, #1
 801541a:	4632      	mov	r2, r6
 801541c:	4649      	mov	r1, r9
 801541e:	4640      	mov	r0, r8
 8015420:	47d0      	blx	sl
 8015422:	3001      	adds	r0, #1
 8015424:	d09d      	beq.n	8015362 <_printf_i+0x15a>
 8015426:	3501      	adds	r5, #1
 8015428:	68e3      	ldr	r3, [r4, #12]
 801542a:	9903      	ldr	r1, [sp, #12]
 801542c:	1a5b      	subs	r3, r3, r1
 801542e:	42ab      	cmp	r3, r5
 8015430:	dcf2      	bgt.n	8015418 <_printf_i+0x210>
 8015432:	e7eb      	b.n	801540c <_printf_i+0x204>
 8015434:	2500      	movs	r5, #0
 8015436:	f104 0619 	add.w	r6, r4, #25
 801543a:	e7f5      	b.n	8015428 <_printf_i+0x220>
 801543c:	0801591d 	.word	0x0801591d
 8015440:	0801592e 	.word	0x0801592e

08015444 <__sflush_r>:
 8015444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801544c:	0716      	lsls	r6, r2, #28
 801544e:	4605      	mov	r5, r0
 8015450:	460c      	mov	r4, r1
 8015452:	d454      	bmi.n	80154fe <__sflush_r+0xba>
 8015454:	684b      	ldr	r3, [r1, #4]
 8015456:	2b00      	cmp	r3, #0
 8015458:	dc02      	bgt.n	8015460 <__sflush_r+0x1c>
 801545a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801545c:	2b00      	cmp	r3, #0
 801545e:	dd48      	ble.n	80154f2 <__sflush_r+0xae>
 8015460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015462:	2e00      	cmp	r6, #0
 8015464:	d045      	beq.n	80154f2 <__sflush_r+0xae>
 8015466:	2300      	movs	r3, #0
 8015468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801546c:	682f      	ldr	r7, [r5, #0]
 801546e:	6a21      	ldr	r1, [r4, #32]
 8015470:	602b      	str	r3, [r5, #0]
 8015472:	d030      	beq.n	80154d6 <__sflush_r+0x92>
 8015474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015476:	89a3      	ldrh	r3, [r4, #12]
 8015478:	0759      	lsls	r1, r3, #29
 801547a:	d505      	bpl.n	8015488 <__sflush_r+0x44>
 801547c:	6863      	ldr	r3, [r4, #4]
 801547e:	1ad2      	subs	r2, r2, r3
 8015480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015482:	b10b      	cbz	r3, 8015488 <__sflush_r+0x44>
 8015484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015486:	1ad2      	subs	r2, r2, r3
 8015488:	2300      	movs	r3, #0
 801548a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801548c:	6a21      	ldr	r1, [r4, #32]
 801548e:	4628      	mov	r0, r5
 8015490:	47b0      	blx	r6
 8015492:	1c43      	adds	r3, r0, #1
 8015494:	89a3      	ldrh	r3, [r4, #12]
 8015496:	d106      	bne.n	80154a6 <__sflush_r+0x62>
 8015498:	6829      	ldr	r1, [r5, #0]
 801549a:	291d      	cmp	r1, #29
 801549c:	d82b      	bhi.n	80154f6 <__sflush_r+0xb2>
 801549e:	4a2a      	ldr	r2, [pc, #168]	@ (8015548 <__sflush_r+0x104>)
 80154a0:	40ca      	lsrs	r2, r1
 80154a2:	07d6      	lsls	r6, r2, #31
 80154a4:	d527      	bpl.n	80154f6 <__sflush_r+0xb2>
 80154a6:	2200      	movs	r2, #0
 80154a8:	6062      	str	r2, [r4, #4]
 80154aa:	04d9      	lsls	r1, r3, #19
 80154ac:	6922      	ldr	r2, [r4, #16]
 80154ae:	6022      	str	r2, [r4, #0]
 80154b0:	d504      	bpl.n	80154bc <__sflush_r+0x78>
 80154b2:	1c42      	adds	r2, r0, #1
 80154b4:	d101      	bne.n	80154ba <__sflush_r+0x76>
 80154b6:	682b      	ldr	r3, [r5, #0]
 80154b8:	b903      	cbnz	r3, 80154bc <__sflush_r+0x78>
 80154ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80154bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80154be:	602f      	str	r7, [r5, #0]
 80154c0:	b1b9      	cbz	r1, 80154f2 <__sflush_r+0xae>
 80154c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80154c6:	4299      	cmp	r1, r3
 80154c8:	d002      	beq.n	80154d0 <__sflush_r+0x8c>
 80154ca:	4628      	mov	r0, r5
 80154cc:	f7ff fbf4 	bl	8014cb8 <_free_r>
 80154d0:	2300      	movs	r3, #0
 80154d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80154d4:	e00d      	b.n	80154f2 <__sflush_r+0xae>
 80154d6:	2301      	movs	r3, #1
 80154d8:	4628      	mov	r0, r5
 80154da:	47b0      	blx	r6
 80154dc:	4602      	mov	r2, r0
 80154de:	1c50      	adds	r0, r2, #1
 80154e0:	d1c9      	bne.n	8015476 <__sflush_r+0x32>
 80154e2:	682b      	ldr	r3, [r5, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d0c6      	beq.n	8015476 <__sflush_r+0x32>
 80154e8:	2b1d      	cmp	r3, #29
 80154ea:	d001      	beq.n	80154f0 <__sflush_r+0xac>
 80154ec:	2b16      	cmp	r3, #22
 80154ee:	d11e      	bne.n	801552e <__sflush_r+0xea>
 80154f0:	602f      	str	r7, [r5, #0]
 80154f2:	2000      	movs	r0, #0
 80154f4:	e022      	b.n	801553c <__sflush_r+0xf8>
 80154f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154fa:	b21b      	sxth	r3, r3
 80154fc:	e01b      	b.n	8015536 <__sflush_r+0xf2>
 80154fe:	690f      	ldr	r7, [r1, #16]
 8015500:	2f00      	cmp	r7, #0
 8015502:	d0f6      	beq.n	80154f2 <__sflush_r+0xae>
 8015504:	0793      	lsls	r3, r2, #30
 8015506:	680e      	ldr	r6, [r1, #0]
 8015508:	bf08      	it	eq
 801550a:	694b      	ldreq	r3, [r1, #20]
 801550c:	600f      	str	r7, [r1, #0]
 801550e:	bf18      	it	ne
 8015510:	2300      	movne	r3, #0
 8015512:	eba6 0807 	sub.w	r8, r6, r7
 8015516:	608b      	str	r3, [r1, #8]
 8015518:	f1b8 0f00 	cmp.w	r8, #0
 801551c:	dde9      	ble.n	80154f2 <__sflush_r+0xae>
 801551e:	6a21      	ldr	r1, [r4, #32]
 8015520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015522:	4643      	mov	r3, r8
 8015524:	463a      	mov	r2, r7
 8015526:	4628      	mov	r0, r5
 8015528:	47b0      	blx	r6
 801552a:	2800      	cmp	r0, #0
 801552c:	dc08      	bgt.n	8015540 <__sflush_r+0xfc>
 801552e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015536:	81a3      	strh	r3, [r4, #12]
 8015538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015540:	4407      	add	r7, r0
 8015542:	eba8 0800 	sub.w	r8, r8, r0
 8015546:	e7e7      	b.n	8015518 <__sflush_r+0xd4>
 8015548:	20400001 	.word	0x20400001

0801554c <_fflush_r>:
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	690b      	ldr	r3, [r1, #16]
 8015550:	4605      	mov	r5, r0
 8015552:	460c      	mov	r4, r1
 8015554:	b913      	cbnz	r3, 801555c <_fflush_r+0x10>
 8015556:	2500      	movs	r5, #0
 8015558:	4628      	mov	r0, r5
 801555a:	bd38      	pop	{r3, r4, r5, pc}
 801555c:	b118      	cbz	r0, 8015566 <_fflush_r+0x1a>
 801555e:	6a03      	ldr	r3, [r0, #32]
 8015560:	b90b      	cbnz	r3, 8015566 <_fflush_r+0x1a>
 8015562:	f7ff fa35 	bl	80149d0 <__sinit>
 8015566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d0f3      	beq.n	8015556 <_fflush_r+0xa>
 801556e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015570:	07d0      	lsls	r0, r2, #31
 8015572:	d404      	bmi.n	801557e <_fflush_r+0x32>
 8015574:	0599      	lsls	r1, r3, #22
 8015576:	d402      	bmi.n	801557e <_fflush_r+0x32>
 8015578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801557a:	f7ff fb8c 	bl	8014c96 <__retarget_lock_acquire_recursive>
 801557e:	4628      	mov	r0, r5
 8015580:	4621      	mov	r1, r4
 8015582:	f7ff ff5f 	bl	8015444 <__sflush_r>
 8015586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015588:	07da      	lsls	r2, r3, #31
 801558a:	4605      	mov	r5, r0
 801558c:	d4e4      	bmi.n	8015558 <_fflush_r+0xc>
 801558e:	89a3      	ldrh	r3, [r4, #12]
 8015590:	059b      	lsls	r3, r3, #22
 8015592:	d4e1      	bmi.n	8015558 <_fflush_r+0xc>
 8015594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015596:	f7ff fb7f 	bl	8014c98 <__retarget_lock_release_recursive>
 801559a:	e7dd      	b.n	8015558 <_fflush_r+0xc>

0801559c <__swbuf_r>:
 801559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801559e:	460e      	mov	r6, r1
 80155a0:	4614      	mov	r4, r2
 80155a2:	4605      	mov	r5, r0
 80155a4:	b118      	cbz	r0, 80155ae <__swbuf_r+0x12>
 80155a6:	6a03      	ldr	r3, [r0, #32]
 80155a8:	b90b      	cbnz	r3, 80155ae <__swbuf_r+0x12>
 80155aa:	f7ff fa11 	bl	80149d0 <__sinit>
 80155ae:	69a3      	ldr	r3, [r4, #24]
 80155b0:	60a3      	str	r3, [r4, #8]
 80155b2:	89a3      	ldrh	r3, [r4, #12]
 80155b4:	071a      	lsls	r2, r3, #28
 80155b6:	d501      	bpl.n	80155bc <__swbuf_r+0x20>
 80155b8:	6923      	ldr	r3, [r4, #16]
 80155ba:	b943      	cbnz	r3, 80155ce <__swbuf_r+0x32>
 80155bc:	4621      	mov	r1, r4
 80155be:	4628      	mov	r0, r5
 80155c0:	f000 f82a 	bl	8015618 <__swsetup_r>
 80155c4:	b118      	cbz	r0, 80155ce <__swbuf_r+0x32>
 80155c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80155ca:	4638      	mov	r0, r7
 80155cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155ce:	6823      	ldr	r3, [r4, #0]
 80155d0:	6922      	ldr	r2, [r4, #16]
 80155d2:	1a98      	subs	r0, r3, r2
 80155d4:	6963      	ldr	r3, [r4, #20]
 80155d6:	b2f6      	uxtb	r6, r6
 80155d8:	4283      	cmp	r3, r0
 80155da:	4637      	mov	r7, r6
 80155dc:	dc05      	bgt.n	80155ea <__swbuf_r+0x4e>
 80155de:	4621      	mov	r1, r4
 80155e0:	4628      	mov	r0, r5
 80155e2:	f7ff ffb3 	bl	801554c <_fflush_r>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d1ed      	bne.n	80155c6 <__swbuf_r+0x2a>
 80155ea:	68a3      	ldr	r3, [r4, #8]
 80155ec:	3b01      	subs	r3, #1
 80155ee:	60a3      	str	r3, [r4, #8]
 80155f0:	6823      	ldr	r3, [r4, #0]
 80155f2:	1c5a      	adds	r2, r3, #1
 80155f4:	6022      	str	r2, [r4, #0]
 80155f6:	701e      	strb	r6, [r3, #0]
 80155f8:	6962      	ldr	r2, [r4, #20]
 80155fa:	1c43      	adds	r3, r0, #1
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d004      	beq.n	801560a <__swbuf_r+0x6e>
 8015600:	89a3      	ldrh	r3, [r4, #12]
 8015602:	07db      	lsls	r3, r3, #31
 8015604:	d5e1      	bpl.n	80155ca <__swbuf_r+0x2e>
 8015606:	2e0a      	cmp	r6, #10
 8015608:	d1df      	bne.n	80155ca <__swbuf_r+0x2e>
 801560a:	4621      	mov	r1, r4
 801560c:	4628      	mov	r0, r5
 801560e:	f7ff ff9d 	bl	801554c <_fflush_r>
 8015612:	2800      	cmp	r0, #0
 8015614:	d0d9      	beq.n	80155ca <__swbuf_r+0x2e>
 8015616:	e7d6      	b.n	80155c6 <__swbuf_r+0x2a>

08015618 <__swsetup_r>:
 8015618:	b538      	push	{r3, r4, r5, lr}
 801561a:	4b29      	ldr	r3, [pc, #164]	@ (80156c0 <__swsetup_r+0xa8>)
 801561c:	4605      	mov	r5, r0
 801561e:	6818      	ldr	r0, [r3, #0]
 8015620:	460c      	mov	r4, r1
 8015622:	b118      	cbz	r0, 801562c <__swsetup_r+0x14>
 8015624:	6a03      	ldr	r3, [r0, #32]
 8015626:	b90b      	cbnz	r3, 801562c <__swsetup_r+0x14>
 8015628:	f7ff f9d2 	bl	80149d0 <__sinit>
 801562c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015630:	0719      	lsls	r1, r3, #28
 8015632:	d422      	bmi.n	801567a <__swsetup_r+0x62>
 8015634:	06da      	lsls	r2, r3, #27
 8015636:	d407      	bmi.n	8015648 <__swsetup_r+0x30>
 8015638:	2209      	movs	r2, #9
 801563a:	602a      	str	r2, [r5, #0]
 801563c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015640:	81a3      	strh	r3, [r4, #12]
 8015642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015646:	e033      	b.n	80156b0 <__swsetup_r+0x98>
 8015648:	0758      	lsls	r0, r3, #29
 801564a:	d512      	bpl.n	8015672 <__swsetup_r+0x5a>
 801564c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801564e:	b141      	cbz	r1, 8015662 <__swsetup_r+0x4a>
 8015650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015654:	4299      	cmp	r1, r3
 8015656:	d002      	beq.n	801565e <__swsetup_r+0x46>
 8015658:	4628      	mov	r0, r5
 801565a:	f7ff fb2d 	bl	8014cb8 <_free_r>
 801565e:	2300      	movs	r3, #0
 8015660:	6363      	str	r3, [r4, #52]	@ 0x34
 8015662:	89a3      	ldrh	r3, [r4, #12]
 8015664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015668:	81a3      	strh	r3, [r4, #12]
 801566a:	2300      	movs	r3, #0
 801566c:	6063      	str	r3, [r4, #4]
 801566e:	6923      	ldr	r3, [r4, #16]
 8015670:	6023      	str	r3, [r4, #0]
 8015672:	89a3      	ldrh	r3, [r4, #12]
 8015674:	f043 0308 	orr.w	r3, r3, #8
 8015678:	81a3      	strh	r3, [r4, #12]
 801567a:	6923      	ldr	r3, [r4, #16]
 801567c:	b94b      	cbnz	r3, 8015692 <__swsetup_r+0x7a>
 801567e:	89a3      	ldrh	r3, [r4, #12]
 8015680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015688:	d003      	beq.n	8015692 <__swsetup_r+0x7a>
 801568a:	4621      	mov	r1, r4
 801568c:	4628      	mov	r0, r5
 801568e:	f000 f84f 	bl	8015730 <__smakebuf_r>
 8015692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015696:	f013 0201 	ands.w	r2, r3, #1
 801569a:	d00a      	beq.n	80156b2 <__swsetup_r+0x9a>
 801569c:	2200      	movs	r2, #0
 801569e:	60a2      	str	r2, [r4, #8]
 80156a0:	6962      	ldr	r2, [r4, #20]
 80156a2:	4252      	negs	r2, r2
 80156a4:	61a2      	str	r2, [r4, #24]
 80156a6:	6922      	ldr	r2, [r4, #16]
 80156a8:	b942      	cbnz	r2, 80156bc <__swsetup_r+0xa4>
 80156aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80156ae:	d1c5      	bne.n	801563c <__swsetup_r+0x24>
 80156b0:	bd38      	pop	{r3, r4, r5, pc}
 80156b2:	0799      	lsls	r1, r3, #30
 80156b4:	bf58      	it	pl
 80156b6:	6962      	ldrpl	r2, [r4, #20]
 80156b8:	60a2      	str	r2, [r4, #8]
 80156ba:	e7f4      	b.n	80156a6 <__swsetup_r+0x8e>
 80156bc:	2000      	movs	r0, #0
 80156be:	e7f7      	b.n	80156b0 <__swsetup_r+0x98>
 80156c0:	24000160 	.word	0x24000160

080156c4 <_sbrk_r>:
 80156c4:	b538      	push	{r3, r4, r5, lr}
 80156c6:	4d06      	ldr	r5, [pc, #24]	@ (80156e0 <_sbrk_r+0x1c>)
 80156c8:	2300      	movs	r3, #0
 80156ca:	4604      	mov	r4, r0
 80156cc:	4608      	mov	r0, r1
 80156ce:	602b      	str	r3, [r5, #0]
 80156d0:	f7ec fc7e 	bl	8001fd0 <_sbrk>
 80156d4:	1c43      	adds	r3, r0, #1
 80156d6:	d102      	bne.n	80156de <_sbrk_r+0x1a>
 80156d8:	682b      	ldr	r3, [r5, #0]
 80156da:	b103      	cbz	r3, 80156de <_sbrk_r+0x1a>
 80156dc:	6023      	str	r3, [r4, #0]
 80156de:	bd38      	pop	{r3, r4, r5, pc}
 80156e0:	24007b18 	.word	0x24007b18

080156e4 <__swhatbuf_r>:
 80156e4:	b570      	push	{r4, r5, r6, lr}
 80156e6:	460c      	mov	r4, r1
 80156e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156ec:	2900      	cmp	r1, #0
 80156ee:	b096      	sub	sp, #88	@ 0x58
 80156f0:	4615      	mov	r5, r2
 80156f2:	461e      	mov	r6, r3
 80156f4:	da0d      	bge.n	8015712 <__swhatbuf_r+0x2e>
 80156f6:	89a3      	ldrh	r3, [r4, #12]
 80156f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80156fc:	f04f 0100 	mov.w	r1, #0
 8015700:	bf14      	ite	ne
 8015702:	2340      	movne	r3, #64	@ 0x40
 8015704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015708:	2000      	movs	r0, #0
 801570a:	6031      	str	r1, [r6, #0]
 801570c:	602b      	str	r3, [r5, #0]
 801570e:	b016      	add	sp, #88	@ 0x58
 8015710:	bd70      	pop	{r4, r5, r6, pc}
 8015712:	466a      	mov	r2, sp
 8015714:	f000 f848 	bl	80157a8 <_fstat_r>
 8015718:	2800      	cmp	r0, #0
 801571a:	dbec      	blt.n	80156f6 <__swhatbuf_r+0x12>
 801571c:	9901      	ldr	r1, [sp, #4]
 801571e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015726:	4259      	negs	r1, r3
 8015728:	4159      	adcs	r1, r3
 801572a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801572e:	e7eb      	b.n	8015708 <__swhatbuf_r+0x24>

08015730 <__smakebuf_r>:
 8015730:	898b      	ldrh	r3, [r1, #12]
 8015732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015734:	079d      	lsls	r5, r3, #30
 8015736:	4606      	mov	r6, r0
 8015738:	460c      	mov	r4, r1
 801573a:	d507      	bpl.n	801574c <__smakebuf_r+0x1c>
 801573c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015740:	6023      	str	r3, [r4, #0]
 8015742:	6123      	str	r3, [r4, #16]
 8015744:	2301      	movs	r3, #1
 8015746:	6163      	str	r3, [r4, #20]
 8015748:	b003      	add	sp, #12
 801574a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801574c:	ab01      	add	r3, sp, #4
 801574e:	466a      	mov	r2, sp
 8015750:	f7ff ffc8 	bl	80156e4 <__swhatbuf_r>
 8015754:	9f00      	ldr	r7, [sp, #0]
 8015756:	4605      	mov	r5, r0
 8015758:	4639      	mov	r1, r7
 801575a:	4630      	mov	r0, r6
 801575c:	f7ff fb18 	bl	8014d90 <_malloc_r>
 8015760:	b948      	cbnz	r0, 8015776 <__smakebuf_r+0x46>
 8015762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015766:	059a      	lsls	r2, r3, #22
 8015768:	d4ee      	bmi.n	8015748 <__smakebuf_r+0x18>
 801576a:	f023 0303 	bic.w	r3, r3, #3
 801576e:	f043 0302 	orr.w	r3, r3, #2
 8015772:	81a3      	strh	r3, [r4, #12]
 8015774:	e7e2      	b.n	801573c <__smakebuf_r+0xc>
 8015776:	89a3      	ldrh	r3, [r4, #12]
 8015778:	6020      	str	r0, [r4, #0]
 801577a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801577e:	81a3      	strh	r3, [r4, #12]
 8015780:	9b01      	ldr	r3, [sp, #4]
 8015782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015786:	b15b      	cbz	r3, 80157a0 <__smakebuf_r+0x70>
 8015788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801578c:	4630      	mov	r0, r6
 801578e:	f000 f81d 	bl	80157cc <_isatty_r>
 8015792:	b128      	cbz	r0, 80157a0 <__smakebuf_r+0x70>
 8015794:	89a3      	ldrh	r3, [r4, #12]
 8015796:	f023 0303 	bic.w	r3, r3, #3
 801579a:	f043 0301 	orr.w	r3, r3, #1
 801579e:	81a3      	strh	r3, [r4, #12]
 80157a0:	89a3      	ldrh	r3, [r4, #12]
 80157a2:	431d      	orrs	r5, r3
 80157a4:	81a5      	strh	r5, [r4, #12]
 80157a6:	e7cf      	b.n	8015748 <__smakebuf_r+0x18>

080157a8 <_fstat_r>:
 80157a8:	b538      	push	{r3, r4, r5, lr}
 80157aa:	4d07      	ldr	r5, [pc, #28]	@ (80157c8 <_fstat_r+0x20>)
 80157ac:	2300      	movs	r3, #0
 80157ae:	4604      	mov	r4, r0
 80157b0:	4608      	mov	r0, r1
 80157b2:	4611      	mov	r1, r2
 80157b4:	602b      	str	r3, [r5, #0]
 80157b6:	f7ec fbe2 	bl	8001f7e <_fstat>
 80157ba:	1c43      	adds	r3, r0, #1
 80157bc:	d102      	bne.n	80157c4 <_fstat_r+0x1c>
 80157be:	682b      	ldr	r3, [r5, #0]
 80157c0:	b103      	cbz	r3, 80157c4 <_fstat_r+0x1c>
 80157c2:	6023      	str	r3, [r4, #0]
 80157c4:	bd38      	pop	{r3, r4, r5, pc}
 80157c6:	bf00      	nop
 80157c8:	24007b18 	.word	0x24007b18

080157cc <_isatty_r>:
 80157cc:	b538      	push	{r3, r4, r5, lr}
 80157ce:	4d06      	ldr	r5, [pc, #24]	@ (80157e8 <_isatty_r+0x1c>)
 80157d0:	2300      	movs	r3, #0
 80157d2:	4604      	mov	r4, r0
 80157d4:	4608      	mov	r0, r1
 80157d6:	602b      	str	r3, [r5, #0]
 80157d8:	f7ec fbe1 	bl	8001f9e <_isatty>
 80157dc:	1c43      	adds	r3, r0, #1
 80157de:	d102      	bne.n	80157e6 <_isatty_r+0x1a>
 80157e0:	682b      	ldr	r3, [r5, #0]
 80157e2:	b103      	cbz	r3, 80157e6 <_isatty_r+0x1a>
 80157e4:	6023      	str	r3, [r4, #0]
 80157e6:	bd38      	pop	{r3, r4, r5, pc}
 80157e8:	24007b18 	.word	0x24007b18

080157ec <_init>:
 80157ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ee:	bf00      	nop
 80157f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157f2:	bc08      	pop	{r3}
 80157f4:	469e      	mov	lr, r3
 80157f6:	4770      	bx	lr

080157f8 <_fini>:
 80157f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157fa:	bf00      	nop
 80157fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157fe:	bc08      	pop	{r3}
 8015800:	469e      	mov	lr, r3
 8015802:	4770      	bx	lr
